var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn2, res) => function __init() {
  return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to2, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to2, key) && key !== except)
        __defProp(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to2;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../node_modules/chroma-js/chroma.js
var require_chroma = __commonJS({
  "../../node_modules/chroma-js/chroma.js"(exports, module) {
    (function() {
      var Color3, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs3, atan22, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos2, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb3, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log3, luminance_x, m4, max6, multiply, normal, num2rgb, overlay, pow3, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root3, round, screen, sin2, sqrt5, temperature2rgb, type2, unpack, w3cx11, xyz_lab, xyz_rgb, slice6 = [].slice;
      type2 = function() {
        var classToType, len, name, o2, ref;
        classToType = {};
        ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
        for (o2 = 0, len = ref.length; o2 < len; o2++) {
          name = ref[o2];
          classToType["[object " + name + "]"] = name.toLowerCase();
        }
        return function(obj) {
          var strType;
          strType = Object.prototype.toString.call(obj);
          return classToType[strType] || "object";
        };
      }();
      limit = function(x4, min5, max7) {
        if (min5 == null) {
          min5 = 0;
        }
        if (max7 == null) {
          max7 = 1;
        }
        if (x4 < min5) {
          x4 = min5;
        }
        if (x4 > max7) {
          x4 = max7;
        }
        return x4;
      };
      unpack = function(args) {
        if (args.length >= 3) {
          return Array.prototype.slice.call(args);
        } else {
          return args[0];
        }
      };
      clip_rgb = function(rgb3) {
        var i4, o2;
        rgb3._clipped = false;
        rgb3._unclipped = rgb3.slice(0);
        for (i4 = o2 = 0; o2 < 3; i4 = ++o2) {
          if (i4 < 3) {
            if (rgb3[i4] < 0 || rgb3[i4] > 255) {
              rgb3._clipped = true;
            }
            if (rgb3[i4] < 0) {
              rgb3[i4] = 0;
            }
            if (rgb3[i4] > 255) {
              rgb3[i4] = 255;
            }
          } else if (i4 === 3) {
            if (rgb3[i4] < 0) {
              rgb3[i4] = 0;
            }
            if (rgb3[i4] > 1) {
              rgb3[i4] = 1;
            }
          }
        }
        if (!rgb3._clipped) {
          delete rgb3._unclipped;
        }
        return rgb3;
      };
      PI = Math.PI, round = Math.round, cos2 = Math.cos, floor = Math.floor, pow3 = Math.pow, log3 = Math.log, sin2 = Math.sin, sqrt5 = Math.sqrt, atan22 = Math.atan2, max6 = Math.max, abs3 = Math.abs;
      TWOPI = PI * 2;
      PITHIRD = PI / 3;
      DEG2RAD = PI / 180;
      RAD2DEG = 180 / PI;
      chroma = function() {
        if (arguments[0] instanceof Color3) {
          return arguments[0];
        }
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, arguments, function() {
        });
      };
      chroma["default"] = chroma;
      _interpolators = [];
      if (typeof module !== "undefined" && module !== null && module.exports != null) {
        module.exports = chroma;
      }
      if (typeof define === "function" && define.amd) {
        define([], function() {
          return chroma;
        });
      } else {
        root3 = typeof exports !== "undefined" && exports !== null ? exports : this;
        root3.chroma = chroma;
      }
      chroma.version = "1.4.1";
      _input = {};
      _guess_formats = [];
      _guess_formats_sorted = false;
      Color3 = function() {
        function Color4() {
          var arg, args, chk, len, len1, me3, mode2, o2, w4;
          me3 = this;
          args = [];
          for (o2 = 0, len = arguments.length; o2 < len; o2++) {
            arg = arguments[o2];
            if (arg != null) {
              args.push(arg);
            }
          }
          if (args.length > 1) {
            mode2 = args[args.length - 1];
          }
          if (_input[mode2] != null) {
            me3._rgb = clip_rgb(_input[mode2](unpack(args.slice(0, -1))));
          } else {
            if (!_guess_formats_sorted) {
              _guess_formats = _guess_formats.sort(function(a5, b3) {
                return b3.p - a5.p;
              });
              _guess_formats_sorted = true;
            }
            for (w4 = 0, len1 = _guess_formats.length; w4 < len1; w4++) {
              chk = _guess_formats[w4];
              mode2 = chk.test.apply(chk, args);
              if (mode2) {
                break;
              }
            }
            if (mode2) {
              me3._rgb = clip_rgb(_input[mode2].apply(_input, args));
            }
          }
          if (me3._rgb == null) {
            console.warn("unknown format: " + args);
          }
          if (me3._rgb == null) {
            me3._rgb = [0, 0, 0];
          }
          if (me3._rgb.length === 3) {
            me3._rgb.push(1);
          }
        }
        Color4.prototype.toString = function() {
          return this.hex();
        };
        return Color4;
      }();
      chroma._input = _input;
      chroma.brewer = brewer = {
        OrRd: ["#fff7ec", "#fee8c8", "#fdd49e", "#fdbb84", "#fc8d59", "#ef6548", "#d7301f", "#b30000", "#7f0000"],
        PuBu: ["#fff7fb", "#ece7f2", "#d0d1e6", "#a6bddb", "#74a9cf", "#3690c0", "#0570b0", "#045a8d", "#023858"],
        BuPu: ["#f7fcfd", "#e0ecf4", "#bfd3e6", "#9ebcda", "#8c96c6", "#8c6bb1", "#88419d", "#810f7c", "#4d004b"],
        Oranges: ["#fff5eb", "#fee6ce", "#fdd0a2", "#fdae6b", "#fd8d3c", "#f16913", "#d94801", "#a63603", "#7f2704"],
        BuGn: ["#f7fcfd", "#e5f5f9", "#ccece6", "#99d8c9", "#66c2a4", "#41ae76", "#238b45", "#006d2c", "#00441b"],
        YlOrBr: ["#ffffe5", "#fff7bc", "#fee391", "#fec44f", "#fe9929", "#ec7014", "#cc4c02", "#993404", "#662506"],
        YlGn: ["#ffffe5", "#f7fcb9", "#d9f0a3", "#addd8e", "#78c679", "#41ab5d", "#238443", "#006837", "#004529"],
        Reds: ["#fff5f0", "#fee0d2", "#fcbba1", "#fc9272", "#fb6a4a", "#ef3b2c", "#cb181d", "#a50f15", "#67000d"],
        RdPu: ["#fff7f3", "#fde0dd", "#fcc5c0", "#fa9fb5", "#f768a1", "#dd3497", "#ae017e", "#7a0177", "#49006a"],
        Greens: ["#f7fcf5", "#e5f5e0", "#c7e9c0", "#a1d99b", "#74c476", "#41ab5d", "#238b45", "#006d2c", "#00441b"],
        YlGnBu: ["#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"],
        Purples: ["#fcfbfd", "#efedf5", "#dadaeb", "#bcbddc", "#9e9ac8", "#807dba", "#6a51a3", "#54278f", "#3f007d"],
        GnBu: ["#f7fcf0", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081"],
        Greys: ["#ffffff", "#f0f0f0", "#d9d9d9", "#bdbdbd", "#969696", "#737373", "#525252", "#252525", "#000000"],
        YlOrRd: ["#ffffcc", "#ffeda0", "#fed976", "#feb24c", "#fd8d3c", "#fc4e2a", "#e31a1c", "#bd0026", "#800026"],
        PuRd: ["#f7f4f9", "#e7e1ef", "#d4b9da", "#c994c7", "#df65b0", "#e7298a", "#ce1256", "#980043", "#67001f"],
        Blues: ["#f7fbff", "#deebf7", "#c6dbef", "#9ecae1", "#6baed6", "#4292c6", "#2171b5", "#08519c", "#08306b"],
        PuBuGn: ["#fff7fb", "#ece2f0", "#d0d1e6", "#a6bddb", "#67a9cf", "#3690c0", "#02818a", "#016c59", "#014636"],
        Viridis: ["#440154", "#482777", "#3f4a8a", "#31678e", "#26838f", "#1f9d8a", "#6cce5a", "#b6de2b", "#fee825"],
        Spectral: ["#9e0142", "#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#e6f598", "#abdda4", "#66c2a5", "#3288bd", "#5e4fa2"],
        RdYlGn: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#d9ef8b", "#a6d96a", "#66bd63", "#1a9850", "#006837"],
        RdBu: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#f7f7f7", "#d1e5f0", "#92c5de", "#4393c3", "#2166ac", "#053061"],
        PiYG: ["#8e0152", "#c51b7d", "#de77ae", "#f1b6da", "#fde0ef", "#f7f7f7", "#e6f5d0", "#b8e186", "#7fbc41", "#4d9221", "#276419"],
        PRGn: ["#40004b", "#762a83", "#9970ab", "#c2a5cf", "#e7d4e8", "#f7f7f7", "#d9f0d3", "#a6dba0", "#5aae61", "#1b7837", "#00441b"],
        RdYlBu: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee090", "#ffffbf", "#e0f3f8", "#abd9e9", "#74add1", "#4575b4", "#313695"],
        BrBG: ["#543005", "#8c510a", "#bf812d", "#dfc27d", "#f6e8c3", "#f5f5f5", "#c7eae5", "#80cdc1", "#35978f", "#01665e", "#003c30"],
        RdGy: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#ffffff", "#e0e0e0", "#bababa", "#878787", "#4d4d4d", "#1a1a1a"],
        PuOr: ["#7f3b08", "#b35806", "#e08214", "#fdb863", "#fee0b6", "#f7f7f7", "#d8daeb", "#b2abd2", "#8073ac", "#542788", "#2d004b"],
        Set2: ["#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3"],
        Accent: ["#7fc97f", "#beaed4", "#fdc086", "#ffff99", "#386cb0", "#f0027f", "#bf5b17", "#666666"],
        Set1: ["#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33", "#a65628", "#f781bf", "#999999"],
        Set3: ["#8dd3c7", "#ffffb3", "#bebada", "#fb8072", "#80b1d3", "#fdb462", "#b3de69", "#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f"],
        Dark2: ["#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e", "#e6ab02", "#a6761d", "#666666"],
        Paired: ["#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928"],
        Pastel2: ["#b3e2cd", "#fdcdac", "#cbd5e8", "#f4cae4", "#e6f5c9", "#fff2ae", "#f1e2cc", "#cccccc"],
        Pastel1: ["#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6", "#ffffcc", "#e5d8bd", "#fddaec", "#f2f2f2"]
      };
      (function() {
        var key, results;
        results = [];
        for (key in brewer) {
          results.push(brewer[key.toLowerCase()] = brewer[key]);
        }
        return results;
      })();
      w3cx11 = {
        aliceblue: "#f0f8ff",
        antiquewhite: "#faebd7",
        aqua: "#00ffff",
        aquamarine: "#7fffd4",
        azure: "#f0ffff",
        beige: "#f5f5dc",
        bisque: "#ffe4c4",
        black: "#000000",
        blanchedalmond: "#ffebcd",
        blue: "#0000ff",
        blueviolet: "#8a2be2",
        brown: "#a52a2a",
        burlywood: "#deb887",
        cadetblue: "#5f9ea0",
        chartreuse: "#7fff00",
        chocolate: "#d2691e",
        coral: "#ff7f50",
        cornflower: "#6495ed",
        cornflowerblue: "#6495ed",
        cornsilk: "#fff8dc",
        crimson: "#dc143c",
        cyan: "#00ffff",
        darkblue: "#00008b",
        darkcyan: "#008b8b",
        darkgoldenrod: "#b8860b",
        darkgray: "#a9a9a9",
        darkgreen: "#006400",
        darkgrey: "#a9a9a9",
        darkkhaki: "#bdb76b",
        darkmagenta: "#8b008b",
        darkolivegreen: "#556b2f",
        darkorange: "#ff8c00",
        darkorchid: "#9932cc",
        darkred: "#8b0000",
        darksalmon: "#e9967a",
        darkseagreen: "#8fbc8f",
        darkslateblue: "#483d8b",
        darkslategray: "#2f4f4f",
        darkslategrey: "#2f4f4f",
        darkturquoise: "#00ced1",
        darkviolet: "#9400d3",
        deeppink: "#ff1493",
        deepskyblue: "#00bfff",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1e90ff",
        firebrick: "#b22222",
        floralwhite: "#fffaf0",
        forestgreen: "#228b22",
        fuchsia: "#ff00ff",
        gainsboro: "#dcdcdc",
        ghostwhite: "#f8f8ff",
        gold: "#ffd700",
        goldenrod: "#daa520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#adff2f",
        grey: "#808080",
        honeydew: "#f0fff0",
        hotpink: "#ff69b4",
        indianred: "#cd5c5c",
        indigo: "#4b0082",
        ivory: "#fffff0",
        khaki: "#f0e68c",
        laserlemon: "#ffff54",
        lavender: "#e6e6fa",
        lavenderblush: "#fff0f5",
        lawngreen: "#7cfc00",
        lemonchiffon: "#fffacd",
        lightblue: "#add8e6",
        lightcoral: "#f08080",
        lightcyan: "#e0ffff",
        lightgoldenrod: "#fafad2",
        lightgoldenrodyellow: "#fafad2",
        lightgray: "#d3d3d3",
        lightgreen: "#90ee90",
        lightgrey: "#d3d3d3",
        lightpink: "#ffb6c1",
        lightsalmon: "#ffa07a",
        lightseagreen: "#20b2aa",
        lightskyblue: "#87cefa",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#b0c4de",
        lightyellow: "#ffffe0",
        lime: "#00ff00",
        limegreen: "#32cd32",
        linen: "#faf0e6",
        magenta: "#ff00ff",
        maroon: "#800000",
        maroon2: "#7f0000",
        maroon3: "#b03060",
        mediumaquamarine: "#66cdaa",
        mediumblue: "#0000cd",
        mediumorchid: "#ba55d3",
        mediumpurple: "#9370db",
        mediumseagreen: "#3cb371",
        mediumslateblue: "#7b68ee",
        mediumspringgreen: "#00fa9a",
        mediumturquoise: "#48d1cc",
        mediumvioletred: "#c71585",
        midnightblue: "#191970",
        mintcream: "#f5fffa",
        mistyrose: "#ffe4e1",
        moccasin: "#ffe4b5",
        navajowhite: "#ffdead",
        navy: "#000080",
        oldlace: "#fdf5e6",
        olive: "#808000",
        olivedrab: "#6b8e23",
        orange: "#ffa500",
        orangered: "#ff4500",
        orchid: "#da70d6",
        palegoldenrod: "#eee8aa",
        palegreen: "#98fb98",
        paleturquoise: "#afeeee",
        palevioletred: "#db7093",
        papayawhip: "#ffefd5",
        peachpuff: "#ffdab9",
        peru: "#cd853f",
        pink: "#ffc0cb",
        plum: "#dda0dd",
        powderblue: "#b0e0e6",
        purple: "#800080",
        purple2: "#7f007f",
        purple3: "#a020f0",
        rebeccapurple: "#663399",
        red: "#ff0000",
        rosybrown: "#bc8f8f",
        royalblue: "#4169e1",
        saddlebrown: "#8b4513",
        salmon: "#fa8072",
        sandybrown: "#f4a460",
        seagreen: "#2e8b57",
        seashell: "#fff5ee",
        sienna: "#a0522d",
        silver: "#c0c0c0",
        skyblue: "#87ceeb",
        slateblue: "#6a5acd",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#fffafa",
        springgreen: "#00ff7f",
        steelblue: "#4682b4",
        tan: "#d2b48c",
        teal: "#008080",
        thistle: "#d8bfd8",
        tomato: "#ff6347",
        turquoise: "#40e0d0",
        violet: "#ee82ee",
        wheat: "#f5deb3",
        white: "#ffffff",
        whitesmoke: "#f5f5f5",
        yellow: "#ffff00",
        yellowgreen: "#9acd32"
      };
      chroma.colors = colors = w3cx11;
      lab2rgb = function() {
        var a5, args, b3, g3, l3, r2, x4, y3, z3;
        args = unpack(arguments);
        l3 = args[0], a5 = args[1], b3 = args[2];
        y3 = (l3 + 16) / 116;
        x4 = isNaN(a5) ? y3 : y3 + a5 / 500;
        z3 = isNaN(b3) ? y3 : y3 - b3 / 200;
        y3 = LAB_CONSTANTS.Yn * lab_xyz(y3);
        x4 = LAB_CONSTANTS.Xn * lab_xyz(x4);
        z3 = LAB_CONSTANTS.Zn * lab_xyz(z3);
        r2 = xyz_rgb(3.2404542 * x4 - 1.5371385 * y3 - 0.4985314 * z3);
        g3 = xyz_rgb(-0.969266 * x4 + 1.8760108 * y3 + 0.041556 * z3);
        b3 = xyz_rgb(0.0556434 * x4 - 0.2040259 * y3 + 1.0572252 * z3);
        return [r2, g3, b3, args.length > 3 ? args[3] : 1];
      };
      xyz_rgb = function(r2) {
        return 255 * (r2 <= 304e-5 ? 12.92 * r2 : 1.055 * pow3(r2, 1 / 2.4) - 0.055);
      };
      lab_xyz = function(t2) {
        if (t2 > LAB_CONSTANTS.t1) {
          return t2 * t2 * t2;
        } else {
          return LAB_CONSTANTS.t2 * (t2 - LAB_CONSTANTS.t0);
        }
      };
      LAB_CONSTANTS = {
        Kn: 18,
        Xn: 0.95047,
        Yn: 1,
        Zn: 1.08883,
        t0: 0.137931034,
        t1: 0.206896552,
        t2: 0.12841855,
        t3: 8856452e-9
      };
      rgb2lab = function() {
        var b3, g3, r2, ref, ref1, x4, y3, z3;
        ref = unpack(arguments), r2 = ref[0], g3 = ref[1], b3 = ref[2];
        ref1 = rgb2xyz(r2, g3, b3), x4 = ref1[0], y3 = ref1[1], z3 = ref1[2];
        return [116 * y3 - 16, 500 * (x4 - y3), 200 * (y3 - z3)];
      };
      rgb_xyz = function(r2) {
        if ((r2 /= 255) <= 0.04045) {
          return r2 / 12.92;
        } else {
          return pow3((r2 + 0.055) / 1.055, 2.4);
        }
      };
      xyz_lab = function(t2) {
        if (t2 > LAB_CONSTANTS.t3) {
          return pow3(t2, 1 / 3);
        } else {
          return t2 / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;
        }
      };
      rgb2xyz = function() {
        var b3, g3, r2, ref, x4, y3, z3;
        ref = unpack(arguments), r2 = ref[0], g3 = ref[1], b3 = ref[2];
        r2 = rgb_xyz(r2);
        g3 = rgb_xyz(g3);
        b3 = rgb_xyz(b3);
        x4 = xyz_lab((0.4124564 * r2 + 0.3575761 * g3 + 0.1804375 * b3) / LAB_CONSTANTS.Xn);
        y3 = xyz_lab((0.2126729 * r2 + 0.7151522 * g3 + 0.072175 * b3) / LAB_CONSTANTS.Yn);
        z3 = xyz_lab((0.0193339 * r2 + 0.119192 * g3 + 0.9503041 * b3) / LAB_CONSTANTS.Zn);
        return [x4, y3, z3];
      };
      chroma.lab = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice6.call(arguments).concat(["lab"]), function() {
        });
      };
      _input.lab = lab2rgb;
      Color3.prototype.lab = function() {
        return rgb2lab(this._rgb);
      };
      bezier = function(colors2) {
        var I4, I0, I1, c6, lab0, lab1, lab2, lab3, ref, ref1, ref2;
        colors2 = function() {
          var len, o2, results;
          results = [];
          for (o2 = 0, len = colors2.length; o2 < len; o2++) {
            c6 = colors2[o2];
            results.push(chroma(c6));
          }
          return results;
        }();
        if (colors2.length === 2) {
          ref = function() {
            var len, o2, results;
            results = [];
            for (o2 = 0, len = colors2.length; o2 < len; o2++) {
              c6 = colors2[o2];
              results.push(c6.lab());
            }
            return results;
          }(), lab0 = ref[0], lab1 = ref[1];
          I4 = function(t2) {
            var i4, lab;
            lab = function() {
              var o2, results;
              results = [];
              for (i4 = o2 = 0; o2 <= 2; i4 = ++o2) {
                results.push(lab0[i4] + t2 * (lab1[i4] - lab0[i4]));
              }
              return results;
            }();
            return chroma.lab.apply(chroma, lab);
          };
        } else if (colors2.length === 3) {
          ref1 = function() {
            var len, o2, results;
            results = [];
            for (o2 = 0, len = colors2.length; o2 < len; o2++) {
              c6 = colors2[o2];
              results.push(c6.lab());
            }
            return results;
          }(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];
          I4 = function(t2) {
            var i4, lab;
            lab = function() {
              var o2, results;
              results = [];
              for (i4 = o2 = 0; o2 <= 2; i4 = ++o2) {
                results.push((1 - t2) * (1 - t2) * lab0[i4] + 2 * (1 - t2) * t2 * lab1[i4] + t2 * t2 * lab2[i4]);
              }
              return results;
            }();
            return chroma.lab.apply(chroma, lab);
          };
        } else if (colors2.length === 4) {
          ref2 = function() {
            var len, o2, results;
            results = [];
            for (o2 = 0, len = colors2.length; o2 < len; o2++) {
              c6 = colors2[o2];
              results.push(c6.lab());
            }
            return results;
          }(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];
          I4 = function(t2) {
            var i4, lab;
            lab = function() {
              var o2, results;
              results = [];
              for (i4 = o2 = 0; o2 <= 2; i4 = ++o2) {
                results.push((1 - t2) * (1 - t2) * (1 - t2) * lab0[i4] + 3 * (1 - t2) * (1 - t2) * t2 * lab1[i4] + 3 * (1 - t2) * t2 * t2 * lab2[i4] + t2 * t2 * t2 * lab3[i4]);
              }
              return results;
            }();
            return chroma.lab.apply(chroma, lab);
          };
        } else if (colors2.length === 5) {
          I0 = bezier(colors2.slice(0, 3));
          I1 = bezier(colors2.slice(2, 5));
          I4 = function(t2) {
            if (t2 < 0.5) {
              return I0(t2 * 2);
            } else {
              return I1((t2 - 0.5) * 2);
            }
          };
        }
        return I4;
      };
      chroma.bezier = function(colors2) {
        var f4;
        f4 = bezier(colors2);
        f4.scale = function() {
          return chroma.scale(f4);
        };
        return f4;
      };
      chroma.cubehelix = function(start2, rotations, hue3, gamma3, lightness) {
        var dh, dl, f4;
        if (start2 == null) {
          start2 = 300;
        }
        if (rotations == null) {
          rotations = -1.5;
        }
        if (hue3 == null) {
          hue3 = 1;
        }
        if (gamma3 == null) {
          gamma3 = 1;
        }
        if (lightness == null) {
          lightness = [0, 1];
        }
        dh = 0;
        if (type2(lightness) === "array") {
          dl = lightness[1] - lightness[0];
        } else {
          dl = 0;
          lightness = [lightness, lightness];
        }
        f4 = function(fract) {
          var a5, amp, b3, cos_a, g3, h4, l3, r2, sin_a;
          a5 = TWOPI * ((start2 + 120) / 360 + rotations * fract);
          l3 = pow3(lightness[0] + dl * fract, gamma3);
          h4 = dh !== 0 ? hue3[0] + fract * dh : hue3;
          amp = h4 * l3 * (1 - l3) / 2;
          cos_a = cos2(a5);
          sin_a = sin2(a5);
          r2 = l3 + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
          g3 = l3 + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
          b3 = l3 + amp * (1.97294 * cos_a);
          return chroma(clip_rgb([r2 * 255, g3 * 255, b3 * 255, 1]));
        };
        f4.start = function(s3) {
          if (s3 == null) {
            return start2;
          }
          start2 = s3;
          return f4;
        };
        f4.rotations = function(r2) {
          if (r2 == null) {
            return rotations;
          }
          rotations = r2;
          return f4;
        };
        f4.gamma = function(g3) {
          if (g3 == null) {
            return gamma3;
          }
          gamma3 = g3;
          return f4;
        };
        f4.hue = function(h4) {
          if (h4 == null) {
            return hue3;
          }
          hue3 = h4;
          if (type2(hue3) === "array") {
            dh = hue3[1] - hue3[0];
            if (dh === 0) {
              hue3 = hue3[1];
            }
          } else {
            dh = 0;
          }
          return f4;
        };
        f4.lightness = function(h4) {
          if (h4 == null) {
            return lightness;
          }
          if (type2(h4) === "array") {
            lightness = h4;
            dl = h4[1] - h4[0];
          } else {
            lightness = [h4, h4];
            dl = 0;
          }
          return f4;
        };
        f4.scale = function() {
          return chroma.scale(f4);
        };
        f4.hue(hue3);
        return f4;
      };
      chroma.random = function() {
        var code, digits, i4, o2;
        digits = "0123456789abcdef";
        code = "#";
        for (i4 = o2 = 0; o2 < 6; i4 = ++o2) {
          code += digits.charAt(floor(Math.random() * 16));
        }
        return new Color3(code);
      };
      _interpolators = [];
      interpolate = function(col1, col2, f4, m5) {
        var interpol, len, o2, res;
        if (f4 == null) {
          f4 = 0.5;
        }
        if (m5 == null) {
          m5 = "rgb";
        }
        if (type2(col1) !== "object") {
          col1 = chroma(col1);
        }
        if (type2(col2) !== "object") {
          col2 = chroma(col2);
        }
        for (o2 = 0, len = _interpolators.length; o2 < len; o2++) {
          interpol = _interpolators[o2];
          if (m5 === interpol[0]) {
            res = interpol[1](col1, col2, f4, m5);
            break;
          }
        }
        if (res == null) {
          throw "color mode " + m5 + " is not supported";
        }
        return res.alpha(col1.alpha() + f4 * (col2.alpha() - col1.alpha()));
      };
      chroma.interpolate = interpolate;
      Color3.prototype.interpolate = function(col2, f4, m5) {
        return interpolate(this, col2, f4, m5);
      };
      chroma.mix = interpolate;
      Color3.prototype.mix = Color3.prototype.interpolate;
      _input.rgb = function() {
        var k4, ref, results, v4;
        ref = unpack(arguments);
        results = [];
        for (k4 in ref) {
          v4 = ref[k4];
          results.push(v4);
        }
        return results;
      };
      chroma.rgb = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice6.call(arguments).concat(["rgb"]), function() {
        });
      };
      Color3.prototype.rgb = function(round2) {
        if (round2 == null) {
          round2 = true;
        }
        if (round2) {
          return this._rgb.map(Math.round).slice(0, 3);
        } else {
          return this._rgb.slice(0, 3);
        }
      };
      Color3.prototype.rgba = function(round2) {
        if (round2 == null) {
          round2 = true;
        }
        if (!round2) {
          return this._rgb.slice(0);
        }
        return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];
      };
      _guess_formats.push({
        p: 3,
        test: function(n3) {
          var a5;
          a5 = unpack(arguments);
          if (type2(a5) === "array" && a5.length === 3) {
            return "rgb";
          }
          if (a5.length === 4 && type2(a5[3]) === "number" && a5[3] >= 0 && a5[3] <= 1) {
            return "rgb";
          }
        }
      });
      _input.lrgb = _input.rgb;
      interpolate_lrgb = function(col1, col2, f4, m5) {
        var xyz0, xyz1;
        xyz0 = col1._rgb;
        xyz1 = col2._rgb;
        return new Color3(sqrt5(pow3(xyz0[0], 2) * (1 - f4) + pow3(xyz1[0], 2) * f4), sqrt5(pow3(xyz0[1], 2) * (1 - f4) + pow3(xyz1[1], 2) * f4), sqrt5(pow3(xyz0[2], 2) * (1 - f4) + pow3(xyz1[2], 2) * f4), m5);
      };
      _average_lrgb = function(colors2) {
        var col, f4, len, o2, rgb3, xyz;
        f4 = 1 / colors2.length;
        xyz = [0, 0, 0, 0];
        for (o2 = 0, len = colors2.length; o2 < len; o2++) {
          col = colors2[o2];
          rgb3 = col._rgb;
          xyz[0] += pow3(rgb3[0], 2) * f4;
          xyz[1] += pow3(rgb3[1], 2) * f4;
          xyz[2] += pow3(rgb3[2], 2) * f4;
          xyz[3] += rgb3[3] * f4;
        }
        xyz[0] = sqrt5(xyz[0]);
        xyz[1] = sqrt5(xyz[1]);
        xyz[2] = sqrt5(xyz[2]);
        if (xyz[3] > 1) {
          xyz[3] = 1;
        }
        return new Color3(clip_rgb(xyz));
      };
      _interpolators.push(["lrgb", interpolate_lrgb]);
      chroma.average = function(colors2, mode2) {
        var A7, alpha, c6, cnt, dx, dy, first, i4, l3, len, o2, xyz, xyz2;
        if (mode2 == null) {
          mode2 = "rgb";
        }
        l3 = colors2.length;
        colors2 = colors2.map(function(c7) {
          return chroma(c7);
        });
        first = colors2.splice(0, 1)[0];
        if (mode2 === "lrgb") {
          return _average_lrgb(colors2);
        }
        xyz = first.get(mode2);
        cnt = [];
        dx = 0;
        dy = 0;
        for (i4 in xyz) {
          xyz[i4] = xyz[i4] || 0;
          cnt.push(isNaN(xyz[i4]) ? 0 : 1);
          if (mode2.charAt(i4) === "h" && !isNaN(xyz[i4])) {
            A7 = xyz[i4] / 180 * PI;
            dx += cos2(A7);
            dy += sin2(A7);
          }
        }
        alpha = first.alpha();
        for (o2 = 0, len = colors2.length; o2 < len; o2++) {
          c6 = colors2[o2];
          xyz2 = c6.get(mode2);
          alpha += c6.alpha();
          for (i4 in xyz) {
            if (!isNaN(xyz2[i4])) {
              cnt[i4] += 1;
              if (mode2.charAt(i4) === "h") {
                A7 = xyz2[i4] / 180 * PI;
                dx += cos2(A7);
                dy += sin2(A7);
              } else {
                xyz[i4] += xyz2[i4];
              }
            }
          }
        }
        for (i4 in xyz) {
          if (mode2.charAt(i4) === "h") {
            A7 = atan22(dy / cnt[i4], dx / cnt[i4]) / PI * 180;
            while (A7 < 0) {
              A7 += 360;
            }
            while (A7 >= 360) {
              A7 -= 360;
            }
            xyz[i4] = A7;
          } else {
            xyz[i4] = xyz[i4] / cnt[i4];
          }
        }
        return chroma(xyz, mode2).alpha(alpha / l3);
      };
      hex2rgb = function(hex3) {
        var a5, b3, g3, r2, rgb3, u3;
        if (hex3.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
          if (hex3.length === 4 || hex3.length === 7) {
            hex3 = hex3.substr(1);
          }
          if (hex3.length === 3) {
            hex3 = hex3.split("");
            hex3 = hex3[0] + hex3[0] + hex3[1] + hex3[1] + hex3[2] + hex3[2];
          }
          u3 = parseInt(hex3, 16);
          r2 = u3 >> 16;
          g3 = u3 >> 8 & 255;
          b3 = u3 & 255;
          return [r2, g3, b3, 1];
        }
        if (hex3.match(/^#?([A-Fa-f0-9]{8})$/)) {
          if (hex3.length === 9) {
            hex3 = hex3.substr(1);
          }
          u3 = parseInt(hex3, 16);
          r2 = u3 >> 24 & 255;
          g3 = u3 >> 16 & 255;
          b3 = u3 >> 8 & 255;
          a5 = round((u3 & 255) / 255 * 100) / 100;
          return [r2, g3, b3, a5];
        }
        if (_input.css != null && (rgb3 = _input.css(hex3))) {
          return rgb3;
        }
        throw "unknown color: " + hex3;
      };
      rgb2hex = function(channels, mode2) {
        var a5, b3, g3, hxa, r2, str, u3;
        if (mode2 == null) {
          mode2 = "auto";
        }
        r2 = channels[0], g3 = channels[1], b3 = channels[2], a5 = channels[3];
        if (mode2 === "auto") {
          mode2 = a5 < 1 ? "rgba" : "rgb";
        }
        r2 = Math.round(r2);
        g3 = Math.round(g3);
        b3 = Math.round(b3);
        u3 = r2 << 16 | g3 << 8 | b3;
        str = "000000" + u3.toString(16);
        str = str.substr(str.length - 6);
        hxa = "0" + round(a5 * 255).toString(16);
        hxa = hxa.substr(hxa.length - 2);
        return "#" + function() {
          switch (mode2.toLowerCase()) {
            case "rgba":
              return str + hxa;
            case "argb":
              return hxa + str;
            default:
              return str;
          }
        }();
      };
      _input.hex = function(h4) {
        return hex2rgb(h4);
      };
      chroma.hex = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice6.call(arguments).concat(["hex"]), function() {
        });
      };
      Color3.prototype.hex = function(mode2) {
        if (mode2 == null) {
          mode2 = "auto";
        }
        return rgb2hex(this._rgb, mode2);
      };
      _guess_formats.push({
        p: 4,
        test: function(n3) {
          if (arguments.length === 1 && type2(n3) === "string") {
            return "hex";
          }
        }
      });
      hsl2rgb3 = function() {
        var args, b3, c6, g3, h4, i4, l3, o2, r2, ref, s3, t12, t2, t3;
        args = unpack(arguments);
        h4 = args[0], s3 = args[1], l3 = args[2];
        if (s3 === 0) {
          r2 = g3 = b3 = l3 * 255;
        } else {
          t3 = [0, 0, 0];
          c6 = [0, 0, 0];
          t2 = l3 < 0.5 ? l3 * (1 + s3) : l3 + s3 - l3 * s3;
          t12 = 2 * l3 - t2;
          h4 /= 360;
          t3[0] = h4 + 1 / 3;
          t3[1] = h4;
          t3[2] = h4 - 1 / 3;
          for (i4 = o2 = 0; o2 <= 2; i4 = ++o2) {
            if (t3[i4] < 0) {
              t3[i4] += 1;
            }
            if (t3[i4] > 1) {
              t3[i4] -= 1;
            }
            if (6 * t3[i4] < 1) {
              c6[i4] = t12 + (t2 - t12) * 6 * t3[i4];
            } else if (2 * t3[i4] < 1) {
              c6[i4] = t2;
            } else if (3 * t3[i4] < 2) {
              c6[i4] = t12 + (t2 - t12) * (2 / 3 - t3[i4]) * 6;
            } else {
              c6[i4] = t12;
            }
          }
          ref = [round(c6[0] * 255), round(c6[1] * 255), round(c6[2] * 255)], r2 = ref[0], g3 = ref[1], b3 = ref[2];
        }
        if (args.length > 3) {
          return [r2, g3, b3, args[3]];
        } else {
          return [r2, g3, b3];
        }
      };
      rgb2hsl = function(r2, g3, b3) {
        var h4, l3, min5, ref, s3;
        if (r2 !== void 0 && r2.length >= 3) {
          ref = r2, r2 = ref[0], g3 = ref[1], b3 = ref[2];
        }
        r2 /= 255;
        g3 /= 255;
        b3 /= 255;
        min5 = Math.min(r2, g3, b3);
        max6 = Math.max(r2, g3, b3);
        l3 = (max6 + min5) / 2;
        if (max6 === min5) {
          s3 = 0;
          h4 = Number.NaN;
        } else {
          s3 = l3 < 0.5 ? (max6 - min5) / (max6 + min5) : (max6 - min5) / (2 - max6 - min5);
        }
        if (r2 === max6) {
          h4 = (g3 - b3) / (max6 - min5);
        } else if (g3 === max6) {
          h4 = 2 + (b3 - r2) / (max6 - min5);
        } else if (b3 === max6) {
          h4 = 4 + (r2 - g3) / (max6 - min5);
        }
        h4 *= 60;
        if (h4 < 0) {
          h4 += 360;
        }
        return [h4, s3, l3];
      };
      chroma.hsl = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice6.call(arguments).concat(["hsl"]), function() {
        });
      };
      _input.hsl = hsl2rgb3;
      Color3.prototype.hsl = function() {
        return rgb2hsl(this._rgb);
      };
      hsv2rgb = function() {
        var args, b3, f4, g3, h4, i4, p2, q4, r2, ref, ref1, ref2, ref3, ref4, ref5, s3, t2, v4;
        args = unpack(arguments);
        h4 = args[0], s3 = args[1], v4 = args[2];
        v4 *= 255;
        if (s3 === 0) {
          r2 = g3 = b3 = v4;
        } else {
          if (h4 === 360) {
            h4 = 0;
          }
          if (h4 > 360) {
            h4 -= 360;
          }
          if (h4 < 0) {
            h4 += 360;
          }
          h4 /= 60;
          i4 = floor(h4);
          f4 = h4 - i4;
          p2 = v4 * (1 - s3);
          q4 = v4 * (1 - s3 * f4);
          t2 = v4 * (1 - s3 * (1 - f4));
          switch (i4) {
            case 0:
              ref = [v4, t2, p2], r2 = ref[0], g3 = ref[1], b3 = ref[2];
              break;
            case 1:
              ref1 = [q4, v4, p2], r2 = ref1[0], g3 = ref1[1], b3 = ref1[2];
              break;
            case 2:
              ref2 = [p2, v4, t2], r2 = ref2[0], g3 = ref2[1], b3 = ref2[2];
              break;
            case 3:
              ref3 = [p2, q4, v4], r2 = ref3[0], g3 = ref3[1], b3 = ref3[2];
              break;
            case 4:
              ref4 = [t2, p2, v4], r2 = ref4[0], g3 = ref4[1], b3 = ref4[2];
              break;
            case 5:
              ref5 = [v4, p2, q4], r2 = ref5[0], g3 = ref5[1], b3 = ref5[2];
          }
        }
        return [r2, g3, b3, args.length > 3 ? args[3] : 1];
      };
      rgb2hsv = function() {
        var b3, delta, g3, h4, min5, r2, ref, s3, v4;
        ref = unpack(arguments), r2 = ref[0], g3 = ref[1], b3 = ref[2];
        min5 = Math.min(r2, g3, b3);
        max6 = Math.max(r2, g3, b3);
        delta = max6 - min5;
        v4 = max6 / 255;
        if (max6 === 0) {
          h4 = Number.NaN;
          s3 = 0;
        } else {
          s3 = delta / max6;
          if (r2 === max6) {
            h4 = (g3 - b3) / delta;
          }
          if (g3 === max6) {
            h4 = 2 + (b3 - r2) / delta;
          }
          if (b3 === max6) {
            h4 = 4 + (r2 - g3) / delta;
          }
          h4 *= 60;
          if (h4 < 0) {
            h4 += 360;
          }
        }
        return [h4, s3, v4];
      };
      chroma.hsv = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice6.call(arguments).concat(["hsv"]), function() {
        });
      };
      _input.hsv = hsv2rgb;
      Color3.prototype.hsv = function() {
        return rgb2hsv(this._rgb);
      };
      num2rgb = function(num) {
        var b3, g3, r2;
        if (type2(num) === "number" && num >= 0 && num <= 16777215) {
          r2 = num >> 16;
          g3 = num >> 8 & 255;
          b3 = num & 255;
          return [r2, g3, b3, 1];
        }
        console.warn("unknown num color: " + num);
        return [0, 0, 0, 1];
      };
      rgb2num = function() {
        var b3, g3, r2, ref;
        ref = unpack(arguments), r2 = ref[0], g3 = ref[1], b3 = ref[2];
        return (r2 << 16) + (g3 << 8) + b3;
      };
      chroma.num = function(num) {
        return new Color3(num, "num");
      };
      Color3.prototype.num = function(mode2) {
        if (mode2 == null) {
          mode2 = "rgb";
        }
        return rgb2num(this._rgb, mode2);
      };
      _input.num = num2rgb;
      _guess_formats.push({
        p: 1,
        test: function(n3) {
          if (arguments.length === 1 && type2(n3) === "number" && n3 >= 0 && n3 <= 16777215) {
            return "num";
          }
        }
      });
      hcg2rgb = function() {
        var _c, _g, args, b3, c6, f4, g3, h4, i4, p2, q4, r2, ref, ref1, ref2, ref3, ref4, ref5, t2, v4;
        args = unpack(arguments);
        h4 = args[0], c6 = args[1], _g = args[2];
        c6 = c6 / 100;
        g3 = g3 / 100 * 255;
        _c = c6 * 255;
        if (c6 === 0) {
          r2 = g3 = b3 = _g;
        } else {
          if (h4 === 360) {
            h4 = 0;
          }
          if (h4 > 360) {
            h4 -= 360;
          }
          if (h4 < 0) {
            h4 += 360;
          }
          h4 /= 60;
          i4 = floor(h4);
          f4 = h4 - i4;
          p2 = _g * (1 - c6);
          q4 = p2 + _c * (1 - f4);
          t2 = p2 + _c * f4;
          v4 = p2 + _c;
          switch (i4) {
            case 0:
              ref = [v4, t2, p2], r2 = ref[0], g3 = ref[1], b3 = ref[2];
              break;
            case 1:
              ref1 = [q4, v4, p2], r2 = ref1[0], g3 = ref1[1], b3 = ref1[2];
              break;
            case 2:
              ref2 = [p2, v4, t2], r2 = ref2[0], g3 = ref2[1], b3 = ref2[2];
              break;
            case 3:
              ref3 = [p2, q4, v4], r2 = ref3[0], g3 = ref3[1], b3 = ref3[2];
              break;
            case 4:
              ref4 = [t2, p2, v4], r2 = ref4[0], g3 = ref4[1], b3 = ref4[2];
              break;
            case 5:
              ref5 = [v4, p2, q4], r2 = ref5[0], g3 = ref5[1], b3 = ref5[2];
          }
        }
        return [r2, g3, b3, args.length > 3 ? args[3] : 1];
      };
      rgb2hcg = function() {
        var _g, b3, c6, delta, g3, h4, min5, r2, ref;
        ref = unpack(arguments), r2 = ref[0], g3 = ref[1], b3 = ref[2];
        min5 = Math.min(r2, g3, b3);
        max6 = Math.max(r2, g3, b3);
        delta = max6 - min5;
        c6 = delta * 100 / 255;
        _g = min5 / (255 - delta) * 100;
        if (delta === 0) {
          h4 = Number.NaN;
        } else {
          if (r2 === max6) {
            h4 = (g3 - b3) / delta;
          }
          if (g3 === max6) {
            h4 = 2 + (b3 - r2) / delta;
          }
          if (b3 === max6) {
            h4 = 4 + (r2 - g3) / delta;
          }
          h4 *= 60;
          if (h4 < 0) {
            h4 += 360;
          }
        }
        return [h4, c6, _g];
      };
      chroma.hcg = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice6.call(arguments).concat(["hcg"]), function() {
        });
      };
      _input.hcg = hcg2rgb;
      Color3.prototype.hcg = function() {
        return rgb2hcg(this._rgb);
      };
      css2rgb = function(css) {
        var aa2, ab, hsl3, i4, m5, o2, rgb3, w4;
        css = css.toLowerCase();
        if (chroma.colors != null && chroma.colors[css]) {
          return hex2rgb(chroma.colors[css]);
        }
        if (m5 = css.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) {
          rgb3 = m5.slice(1, 4);
          for (i4 = o2 = 0; o2 <= 2; i4 = ++o2) {
            rgb3[i4] = +rgb3[i4];
          }
          rgb3[3] = 1;
        } else if (m5 = css.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) {
          rgb3 = m5.slice(1, 5);
          for (i4 = w4 = 0; w4 <= 3; i4 = ++w4) {
            rgb3[i4] = +rgb3[i4];
          }
        } else if (m5 = css.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
          rgb3 = m5.slice(1, 4);
          for (i4 = aa2 = 0; aa2 <= 2; i4 = ++aa2) {
            rgb3[i4] = round(rgb3[i4] * 2.55);
          }
          rgb3[3] = 1;
        } else if (m5 = css.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
          rgb3 = m5.slice(1, 5);
          for (i4 = ab = 0; ab <= 2; i4 = ++ab) {
            rgb3[i4] = round(rgb3[i4] * 2.55);
          }
          rgb3[3] = +rgb3[3];
        } else if (m5 = css.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
          hsl3 = m5.slice(1, 4);
          hsl3[1] *= 0.01;
          hsl3[2] *= 0.01;
          rgb3 = hsl2rgb3(hsl3);
          rgb3[3] = 1;
        } else if (m5 = css.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
          hsl3 = m5.slice(1, 4);
          hsl3[1] *= 0.01;
          hsl3[2] *= 0.01;
          rgb3 = hsl2rgb3(hsl3);
          rgb3[3] = +m5[4];
        }
        return rgb3;
      };
      rgb2css = function(rgba3) {
        var mode2;
        mode2 = rgba3[3] < 1 ? "rgba" : "rgb";
        if (mode2 === "rgb") {
          return mode2 + "(" + rgba3.slice(0, 3).map(round).join(",") + ")";
        } else if (mode2 === "rgba") {
          return mode2 + "(" + rgba3.slice(0, 3).map(round).join(",") + "," + rgba3[3] + ")";
        } else {
        }
      };
      rnd = function(a5) {
        return round(a5 * 100) / 100;
      };
      hsl2css = function(hsl3, alpha) {
        var mode2;
        mode2 = alpha < 1 ? "hsla" : "hsl";
        hsl3[0] = rnd(hsl3[0] || 0);
        hsl3[1] = rnd(hsl3[1] * 100) + "%";
        hsl3[2] = rnd(hsl3[2] * 100) + "%";
        if (mode2 === "hsla") {
          hsl3[3] = alpha;
        }
        return mode2 + "(" + hsl3.join(",") + ")";
      };
      _input.css = function(h4) {
        return css2rgb(h4);
      };
      chroma.css = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice6.call(arguments).concat(["css"]), function() {
        });
      };
      Color3.prototype.css = function(mode2) {
        if (mode2 == null) {
          mode2 = "rgb";
        }
        if (mode2.slice(0, 3) === "rgb") {
          return rgb2css(this._rgb);
        } else if (mode2.slice(0, 3) === "hsl") {
          return hsl2css(this.hsl(), this.alpha());
        }
      };
      _input.named = function(name) {
        return hex2rgb(w3cx11[name]);
      };
      _guess_formats.push({
        p: 5,
        test: function(n3) {
          if (arguments.length === 1 && w3cx11[n3] != null) {
            return "named";
          }
        }
      });
      Color3.prototype.name = function(n3) {
        var h4, k4;
        if (arguments.length) {
          if (w3cx11[n3]) {
            this._rgb = hex2rgb(w3cx11[n3]);
          }
          this._rgb[3] = 1;
          this;
        }
        h4 = this.hex("rgb");
        for (k4 in w3cx11) {
          if (h4 === w3cx11[k4]) {
            return k4;
          }
        }
        return h4;
      };
      lch2lab = function() {
        var c6, h4, l3, ref;
        ref = unpack(arguments), l3 = ref[0], c6 = ref[1], h4 = ref[2];
        h4 = h4 * DEG2RAD;
        return [l3, cos2(h4) * c6, sin2(h4) * c6];
      };
      lch2rgb = function() {
        var L4, a5, args, b3, c6, g3, h4, l3, r2, ref, ref1;
        args = unpack(arguments);
        l3 = args[0], c6 = args[1], h4 = args[2];
        ref = lch2lab(l3, c6, h4), L4 = ref[0], a5 = ref[1], b3 = ref[2];
        ref1 = lab2rgb(L4, a5, b3), r2 = ref1[0], g3 = ref1[1], b3 = ref1[2];
        return [r2, g3, b3, args.length > 3 ? args[3] : 1];
      };
      lab2lch = function() {
        var a5, b3, c6, h4, l3, ref;
        ref = unpack(arguments), l3 = ref[0], a5 = ref[1], b3 = ref[2];
        c6 = sqrt5(a5 * a5 + b3 * b3);
        h4 = (atan22(b3, a5) * RAD2DEG + 360) % 360;
        if (round(c6 * 1e4) === 0) {
          h4 = Number.NaN;
        }
        return [l3, c6, h4];
      };
      rgb2lch = function() {
        var a5, b3, g3, l3, r2, ref, ref1;
        ref = unpack(arguments), r2 = ref[0], g3 = ref[1], b3 = ref[2];
        ref1 = rgb2lab(r2, g3, b3), l3 = ref1[0], a5 = ref1[1], b3 = ref1[2];
        return lab2lch(l3, a5, b3);
      };
      chroma.lch = function() {
        var args;
        args = unpack(arguments);
        return new Color3(args, "lch");
      };
      chroma.hcl = function() {
        var args;
        args = unpack(arguments);
        return new Color3(args, "hcl");
      };
      _input.lch = lch2rgb;
      _input.hcl = function() {
        var c6, h4, l3, ref;
        ref = unpack(arguments), h4 = ref[0], c6 = ref[1], l3 = ref[2];
        return lch2rgb([l3, c6, h4]);
      };
      Color3.prototype.lch = function() {
        return rgb2lch(this._rgb);
      };
      Color3.prototype.hcl = function() {
        return rgb2lch(this._rgb).reverse();
      };
      rgb2cmyk = function(mode2) {
        var b3, c6, f4, g3, k4, m5, r2, ref, y3;
        if (mode2 == null) {
          mode2 = "rgb";
        }
        ref = unpack(arguments), r2 = ref[0], g3 = ref[1], b3 = ref[2];
        r2 = r2 / 255;
        g3 = g3 / 255;
        b3 = b3 / 255;
        k4 = 1 - Math.max(r2, Math.max(g3, b3));
        f4 = k4 < 1 ? 1 / (1 - k4) : 0;
        c6 = (1 - r2 - k4) * f4;
        m5 = (1 - g3 - k4) * f4;
        y3 = (1 - b3 - k4) * f4;
        return [c6, m5, y3, k4];
      };
      cmyk2rgb = function() {
        var alpha, args, b3, c6, g3, k4, m5, r2, y3;
        args = unpack(arguments);
        c6 = args[0], m5 = args[1], y3 = args[2], k4 = args[3];
        alpha = args.length > 4 ? args[4] : 1;
        if (k4 === 1) {
          return [0, 0, 0, alpha];
        }
        r2 = c6 >= 1 ? 0 : 255 * (1 - c6) * (1 - k4);
        g3 = m5 >= 1 ? 0 : 255 * (1 - m5) * (1 - k4);
        b3 = y3 >= 1 ? 0 : 255 * (1 - y3) * (1 - k4);
        return [r2, g3, b3, alpha];
      };
      _input.cmyk = function() {
        return cmyk2rgb(unpack(arguments));
      };
      chroma.cmyk = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice6.call(arguments).concat(["cmyk"]), function() {
        });
      };
      Color3.prototype.cmyk = function() {
        return rgb2cmyk(this._rgb);
      };
      _input.gl = function() {
        var i4, k4, o2, rgb3, v4;
        rgb3 = function() {
          var ref, results;
          ref = unpack(arguments);
          results = [];
          for (k4 in ref) {
            v4 = ref[k4];
            results.push(v4);
          }
          return results;
        }.apply(this, arguments);
        for (i4 = o2 = 0; o2 <= 2; i4 = ++o2) {
          rgb3[i4] *= 255;
        }
        return rgb3;
      };
      chroma.gl = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice6.call(arguments).concat(["gl"]), function() {
        });
      };
      Color3.prototype.gl = function() {
        var rgb3;
        rgb3 = this._rgb;
        return [rgb3[0] / 255, rgb3[1] / 255, rgb3[2] / 255, rgb3[3]];
      };
      rgb2luminance = function(r2, g3, b3) {
        var ref;
        ref = unpack(arguments), r2 = ref[0], g3 = ref[1], b3 = ref[2];
        r2 = luminance_x(r2);
        g3 = luminance_x(g3);
        b3 = luminance_x(b3);
        return 0.2126 * r2 + 0.7152 * g3 + 0.0722 * b3;
      };
      luminance_x = function(x4) {
        x4 /= 255;
        if (x4 <= 0.03928) {
          return x4 / 12.92;
        } else {
          return pow3((x4 + 0.055) / 1.055, 2.4);
        }
      };
      interpolate_rgb = function(col1, col2, f4, m5) {
        var xyz0, xyz1;
        xyz0 = col1._rgb;
        xyz1 = col2._rgb;
        return new Color3(xyz0[0] + f4 * (xyz1[0] - xyz0[0]), xyz0[1] + f4 * (xyz1[1] - xyz0[1]), xyz0[2] + f4 * (xyz1[2] - xyz0[2]), m5);
      };
      _interpolators.push(["rgb", interpolate_rgb]);
      Color3.prototype.luminance = function(lum, mode2) {
        var cur_lum, eps2, max_iter, rgba3, test;
        if (mode2 == null) {
          mode2 = "rgb";
        }
        if (!arguments.length) {
          return rgb2luminance(this._rgb);
        }
        rgba3 = this._rgb;
        if (lum === 0) {
          rgba3 = [0, 0, 0, this._rgb[3]];
        } else if (lum === 1) {
          rgba3 = [255, 255, 255, this[3]];
        } else {
          cur_lum = rgb2luminance(this._rgb);
          eps2 = 1e-7;
          max_iter = 20;
          test = function(l3, h4) {
            var lm, m5;
            m5 = l3.interpolate(h4, 0.5, mode2);
            lm = m5.luminance();
            if (Math.abs(lum - lm) < eps2 || !max_iter--) {
              return m5;
            }
            if (lm > lum) {
              return test(l3, m5);
            }
            return test(m5, h4);
          };
          if (cur_lum > lum) {
            rgba3 = test(chroma("black"), this).rgba();
          } else {
            rgba3 = test(this, chroma("white")).rgba();
          }
        }
        return chroma(rgba3).alpha(this.alpha());
      };
      temperature2rgb = function(kelvin) {
        var b3, g3, r2, temp;
        temp = kelvin / 100;
        if (temp < 66) {
          r2 = 255;
          g3 = -155.25485562709179 - 0.44596950469579133 * (g3 = temp - 2) + 104.49216199393888 * log3(g3);
          b3 = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b3 = temp - 10) + 115.67994401066147 * log3(b3);
        } else {
          r2 = 351.97690566805693 + 0.114206453784165 * (r2 = temp - 55) - 40.25366309332127 * log3(r2);
          g3 = 325.4494125711974 + 0.07943456536662342 * (g3 = temp - 50) - 28.0852963507957 * log3(g3);
          b3 = 255;
        }
        return [r2, g3, b3];
      };
      rgb2temperature = function() {
        var b3, eps2, g3, maxTemp, minTemp, r2, ref, rgb3, temp;
        ref = unpack(arguments), r2 = ref[0], g3 = ref[1], b3 = ref[2];
        minTemp = 1e3;
        maxTemp = 4e4;
        eps2 = 0.4;
        while (maxTemp - minTemp > eps2) {
          temp = (maxTemp + minTemp) * 0.5;
          rgb3 = temperature2rgb(temp);
          if (rgb3[2] / rgb3[0] >= b3 / r2) {
            maxTemp = temp;
          } else {
            minTemp = temp;
          }
        }
        return round(temp);
      };
      chroma.temperature = chroma.kelvin = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice6.call(arguments).concat(["temperature"]), function() {
        });
      };
      _input.temperature = _input.kelvin = _input.K = temperature2rgb;
      Color3.prototype.temperature = function() {
        return rgb2temperature(this._rgb);
      };
      Color3.prototype.kelvin = Color3.prototype.temperature;
      chroma.contrast = function(a5, b3) {
        var l1, l22, ref, ref1;
        if ((ref = type2(a5)) === "string" || ref === "number") {
          a5 = new Color3(a5);
        }
        if ((ref1 = type2(b3)) === "string" || ref1 === "number") {
          b3 = new Color3(b3);
        }
        l1 = a5.luminance();
        l22 = b3.luminance();
        if (l1 > l22) {
          return (l1 + 0.05) / (l22 + 0.05);
        } else {
          return (l22 + 0.05) / (l1 + 0.05);
        }
      };
      chroma.distance = function(a5, b3, mode2) {
        var d2, i4, l1, l22, ref, ref1, sum_sq;
        if (mode2 == null) {
          mode2 = "lab";
        }
        if ((ref = type2(a5)) === "string" || ref === "number") {
          a5 = new Color3(a5);
        }
        if ((ref1 = type2(b3)) === "string" || ref1 === "number") {
          b3 = new Color3(b3);
        }
        l1 = a5.get(mode2);
        l22 = b3.get(mode2);
        sum_sq = 0;
        for (i4 in l1) {
          d2 = (l1[i4] || 0) - (l22[i4] || 0);
          sum_sq += d2 * d2;
        }
        return Math.sqrt(sum_sq);
      };
      chroma.deltaE = function(a5, b3, L4, C7) {
        var L1, L22, a1, a22, b1, b22, c1, c22, c42, dH2, delA, delB, delC, delL, f4, h1, ref, ref1, ref2, ref3, sc, sh, sl, t2, v1, v22, v32;
        if (L4 == null) {
          L4 = 1;
        }
        if (C7 == null) {
          C7 = 1;
        }
        if ((ref = type2(a5)) === "string" || ref === "number") {
          a5 = new Color3(a5);
        }
        if ((ref1 = type2(b3)) === "string" || ref1 === "number") {
          b3 = new Color3(b3);
        }
        ref2 = a5.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];
        ref3 = b3.lab(), L22 = ref3[0], a22 = ref3[1], b22 = ref3[2];
        c1 = sqrt5(a1 * a1 + b1 * b1);
        c22 = sqrt5(a22 * a22 + b22 * b22);
        sl = L1 < 16 ? 0.511 : 0.040975 * L1 / (1 + 0.01765 * L1);
        sc = 0.0638 * c1 / (1 + 0.0131 * c1) + 0.638;
        h1 = c1 < 1e-6 ? 0 : atan22(b1, a1) * 180 / PI;
        while (h1 < 0) {
          h1 += 360;
        }
        while (h1 >= 360) {
          h1 -= 360;
        }
        t2 = h1 >= 164 && h1 <= 345 ? 0.56 + abs3(0.2 * cos2(PI * (h1 + 168) / 180)) : 0.36 + abs3(0.4 * cos2(PI * (h1 + 35) / 180));
        c42 = c1 * c1 * c1 * c1;
        f4 = sqrt5(c42 / (c42 + 1900));
        sh = sc * (f4 * t2 + 1 - f4);
        delL = L1 - L22;
        delC = c1 - c22;
        delA = a1 - a22;
        delB = b1 - b22;
        dH2 = delA * delA + delB * delB - delC * delC;
        v1 = delL / (L4 * sl);
        v22 = delC / (C7 * sc);
        v32 = sh;
        return sqrt5(v1 * v1 + v22 * v22 + dH2 / (v32 * v32));
      };
      Color3.prototype.get = function(modechan) {
        var channel, i4, me3, mode2, ref, src;
        me3 = this;
        ref = modechan.split("."), mode2 = ref[0], channel = ref[1];
        src = me3[mode2]();
        if (channel) {
          i4 = mode2.indexOf(channel);
          if (i4 > -1) {
            return src[i4];
          } else {
            return console.warn("unknown channel " + channel + " in mode " + mode2);
          }
        } else {
          return src;
        }
      };
      Color3.prototype.set = function(modechan, value) {
        var channel, i4, me3, mode2, ref, src;
        me3 = this;
        ref = modechan.split("."), mode2 = ref[0], channel = ref[1];
        if (channel) {
          src = me3[mode2]();
          i4 = mode2.indexOf(channel);
          if (i4 > -1) {
            if (type2(value) === "string") {
              switch (value.charAt(0)) {
                case "+":
                  src[i4] += +value;
                  break;
                case "-":
                  src[i4] += +value;
                  break;
                case "*":
                  src[i4] *= +value.substr(1);
                  break;
                case "/":
                  src[i4] /= +value.substr(1);
                  break;
                default:
                  src[i4] = +value;
              }
            } else {
              src[i4] = value;
            }
          } else {
            console.warn("unknown channel " + channel + " in mode " + mode2);
          }
        } else {
          src = value;
        }
        return chroma(src, mode2).alpha(me3.alpha());
      };
      Color3.prototype.clipped = function() {
        return this._rgb._clipped || false;
      };
      Color3.prototype.alpha = function(a5) {
        if (arguments.length) {
          return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a5]);
        }
        return this._rgb[3];
      };
      Color3.prototype.darken = function(amount) {
        var lab, me3;
        if (amount == null) {
          amount = 1;
        }
        me3 = this;
        lab = me3.lab();
        lab[0] -= LAB_CONSTANTS.Kn * amount;
        return chroma.lab(lab).alpha(me3.alpha());
      };
      Color3.prototype.brighten = function(amount) {
        if (amount == null) {
          amount = 1;
        }
        return this.darken(-amount);
      };
      Color3.prototype.darker = Color3.prototype.darken;
      Color3.prototype.brighter = Color3.prototype.brighten;
      Color3.prototype.saturate = function(amount) {
        var lch, me3;
        if (amount == null) {
          amount = 1;
        }
        me3 = this;
        lch = me3.lch();
        lch[1] += amount * LAB_CONSTANTS.Kn;
        if (lch[1] < 0) {
          lch[1] = 0;
        }
        return chroma.lch(lch).alpha(me3.alpha());
      };
      Color3.prototype.desaturate = function(amount) {
        if (amount == null) {
          amount = 1;
        }
        return this.saturate(-amount);
      };
      Color3.prototype.premultiply = function() {
        var a5, rgb3;
        rgb3 = this.rgb();
        a5 = this.alpha();
        return chroma(rgb3[0] * a5, rgb3[1] * a5, rgb3[2] * a5, a5);
      };
      blend = function(bottom, top, mode2) {
        if (!blend[mode2]) {
          throw "unknown blend mode " + mode2;
        }
        return blend[mode2](bottom, top);
      };
      blend_f = function(f4) {
        return function(bottom, top) {
          var c0, c1;
          c0 = chroma(top).rgb();
          c1 = chroma(bottom).rgb();
          return chroma(f4(c0, c1), "rgb");
        };
      };
      each = function(f4) {
        return function(c0, c1) {
          var i4, o2, out;
          out = [];
          for (i4 = o2 = 0; o2 <= 3; i4 = ++o2) {
            out[i4] = f4(c0[i4], c1[i4]);
          }
          return out;
        };
      };
      normal = function(a5, b3) {
        return a5;
      };
      multiply = function(a5, b3) {
        return a5 * b3 / 255;
      };
      darken = function(a5, b3) {
        if (a5 > b3) {
          return b3;
        } else {
          return a5;
        }
      };
      lighten = function(a5, b3) {
        if (a5 > b3) {
          return a5;
        } else {
          return b3;
        }
      };
      screen = function(a5, b3) {
        return 255 * (1 - (1 - a5 / 255) * (1 - b3 / 255));
      };
      overlay = function(a5, b3) {
        if (b3 < 128) {
          return 2 * a5 * b3 / 255;
        } else {
          return 255 * (1 - 2 * (1 - a5 / 255) * (1 - b3 / 255));
        }
      };
      burn = function(a5, b3) {
        return 255 * (1 - (1 - b3 / 255) / (a5 / 255));
      };
      dodge = function(a5, b3) {
        if (a5 === 255) {
          return 255;
        }
        a5 = 255 * (b3 / 255) / (1 - a5 / 255);
        if (a5 > 255) {
          return 255;
        } else {
          return a5;
        }
      };
      blend.normal = blend_f(each(normal));
      blend.multiply = blend_f(each(multiply));
      blend.screen = blend_f(each(screen));
      blend.overlay = blend_f(each(overlay));
      blend.darken = blend_f(each(darken));
      blend.lighten = blend_f(each(lighten));
      blend.dodge = blend_f(each(dodge));
      blend.burn = blend_f(each(burn));
      chroma.blend = blend;
      chroma.analyze = function(data) {
        var len, o2, r2, val;
        r2 = {
          min: Number.MAX_VALUE,
          max: Number.MAX_VALUE * -1,
          sum: 0,
          values: [],
          count: 0
        };
        for (o2 = 0, len = data.length; o2 < len; o2++) {
          val = data[o2];
          if (val != null && !isNaN(val)) {
            r2.values.push(val);
            r2.sum += val;
            if (val < r2.min) {
              r2.min = val;
            }
            if (val > r2.max) {
              r2.max = val;
            }
            r2.count += 1;
          }
        }
        r2.domain = [r2.min, r2.max];
        r2.limits = function(mode2, num) {
          return chroma.limits(r2, mode2, num);
        };
        return r2;
      };
      chroma.scale = function(colors2, positions) {
        var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, classifyValue, f4, getClass, getColor, resetCache, setColors, tmap;
        _mode = "rgb";
        _nacol = chroma("#ccc");
        _spread = 0;
        _fixed = false;
        _domain = [0, 1];
        _pos = [];
        _padding = [0, 0];
        _classes = false;
        _colors = [];
        _out = false;
        _min = 0;
        _max = 1;
        _correctLightness = false;
        _colorCache = {};
        _useCache = true;
        _gamma = 1;
        setColors = function(colors3) {
          var c6, col, o2, ref, ref1, w4;
          if (colors3 == null) {
            colors3 = ["#fff", "#000"];
          }
          if (colors3 != null && type2(colors3) === "string" && chroma.brewer != null) {
            colors3 = chroma.brewer[colors3] || chroma.brewer[colors3.toLowerCase()] || colors3;
          }
          if (type2(colors3) === "array") {
            if (colors3.length === 1) {
              colors3 = [colors3[0], colors3[0]];
            }
            colors3 = colors3.slice(0);
            for (c6 = o2 = 0, ref = colors3.length - 1; 0 <= ref ? o2 <= ref : o2 >= ref; c6 = 0 <= ref ? ++o2 : --o2) {
              col = colors3[c6];
              if (type2(col) === "string") {
                colors3[c6] = chroma(col);
              }
            }
            _pos.length = 0;
            for (c6 = w4 = 0, ref1 = colors3.length - 1; 0 <= ref1 ? w4 <= ref1 : w4 >= ref1; c6 = 0 <= ref1 ? ++w4 : --w4) {
              _pos.push(c6 / (colors3.length - 1));
            }
          }
          resetCache();
          return _colors = colors3;
        };
        getClass = function(value) {
          var i4, n3;
          if (_classes != null) {
            n3 = _classes.length - 1;
            i4 = 0;
            while (i4 < n3 && value >= _classes[i4]) {
              i4++;
            }
            return i4 - 1;
          }
          return 0;
        };
        tmap = function(t2) {
          return t2;
        };
        classifyValue = function(value) {
          var i4, maxc, minc, n3, val;
          val = value;
          if (_classes.length > 2) {
            n3 = _classes.length - 1;
            i4 = getClass(value);
            minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);
            maxc = _classes[n3 - 1] + (_classes[n3] - _classes[n3 - 1]) * (1 - _spread * 0.5);
            val = _min + (_classes[i4] + (_classes[i4 + 1] - _classes[i4]) * 0.5 - minc) / (maxc - minc) * (_max - _min);
          }
          return val;
        };
        getColor = function(val, bypassMap) {
          var c6, col, i4, k4, o2, p2, ref, t2;
          if (bypassMap == null) {
            bypassMap = false;
          }
          if (isNaN(val) || val === null) {
            return _nacol;
          }
          if (!bypassMap) {
            if (_classes && _classes.length > 2) {
              c6 = getClass(val);
              t2 = c6 / (_classes.length - 2);
            } else if (_max !== _min) {
              t2 = (val - _min) / (_max - _min);
            } else {
              t2 = 1;
            }
          } else {
            t2 = val;
          }
          if (!bypassMap) {
            t2 = tmap(t2);
          }
          if (_gamma !== 1) {
            t2 = pow3(t2, _gamma);
          }
          t2 = _padding[0] + t2 * (1 - _padding[0] - _padding[1]);
          t2 = Math.min(1, Math.max(0, t2));
          k4 = Math.floor(t2 * 1e4);
          if (_useCache && _colorCache[k4]) {
            col = _colorCache[k4];
          } else {
            if (type2(_colors) === "array") {
              for (i4 = o2 = 0, ref = _pos.length - 1; 0 <= ref ? o2 <= ref : o2 >= ref; i4 = 0 <= ref ? ++o2 : --o2) {
                p2 = _pos[i4];
                if (t2 <= p2) {
                  col = _colors[i4];
                  break;
                }
                if (t2 >= p2 && i4 === _pos.length - 1) {
                  col = _colors[i4];
                  break;
                }
                if (t2 > p2 && t2 < _pos[i4 + 1]) {
                  t2 = (t2 - p2) / (_pos[i4 + 1] - p2);
                  col = chroma.interpolate(_colors[i4], _colors[i4 + 1], t2, _mode);
                  break;
                }
              }
            } else if (type2(_colors) === "function") {
              col = _colors(t2);
            }
            if (_useCache) {
              _colorCache[k4] = col;
            }
          }
          return col;
        };
        resetCache = function() {
          return _colorCache = {};
        };
        setColors(colors2);
        f4 = function(v4) {
          var c6;
          c6 = chroma(getColor(v4));
          if (_out && c6[_out]) {
            return c6[_out]();
          } else {
            return c6;
          }
        };
        f4.classes = function(classes) {
          var d2;
          if (classes != null) {
            if (type2(classes) === "array") {
              _classes = classes;
              _domain = [classes[0], classes[classes.length - 1]];
            } else {
              d2 = chroma.analyze(_domain);
              if (classes === 0) {
                _classes = [d2.min, d2.max];
              } else {
                _classes = chroma.limits(d2, "e", classes);
              }
            }
            return f4;
          }
          return _classes;
        };
        f4.domain = function(domain) {
          var c6, d2, k4, len, o2, ref, w4;
          if (!arguments.length) {
            return _domain;
          }
          _min = domain[0];
          _max = domain[domain.length - 1];
          _pos = [];
          k4 = _colors.length;
          if (domain.length === k4 && _min !== _max) {
            for (o2 = 0, len = domain.length; o2 < len; o2++) {
              d2 = domain[o2];
              _pos.push((d2 - _min) / (_max - _min));
            }
          } else {
            for (c6 = w4 = 0, ref = k4 - 1; 0 <= ref ? w4 <= ref : w4 >= ref; c6 = 0 <= ref ? ++w4 : --w4) {
              _pos.push(c6 / (k4 - 1));
            }
          }
          _domain = [_min, _max];
          return f4;
        };
        f4.mode = function(_m) {
          if (!arguments.length) {
            return _mode;
          }
          _mode = _m;
          resetCache();
          return f4;
        };
        f4.range = function(colors3, _pos2) {
          setColors(colors3, _pos2);
          return f4;
        };
        f4.out = function(_o2) {
          _out = _o2;
          return f4;
        };
        f4.spread = function(val) {
          if (!arguments.length) {
            return _spread;
          }
          _spread = val;
          return f4;
        };
        f4.correctLightness = function(v4) {
          if (v4 == null) {
            v4 = true;
          }
          _correctLightness = v4;
          resetCache();
          if (_correctLightness) {
            tmap = function(t2) {
              var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t02, t12;
              L0 = getColor(0, true).lab()[0];
              L1 = getColor(1, true).lab()[0];
              pol = L0 > L1;
              L_actual = getColor(t2, true).lab()[0];
              L_ideal = L0 + (L1 - L0) * t2;
              L_diff = L_actual - L_ideal;
              t02 = 0;
              t12 = 1;
              max_iter = 20;
              while (Math.abs(L_diff) > 0.01 && max_iter-- > 0) {
                (function() {
                  if (pol) {
                    L_diff *= -1;
                  }
                  if (L_diff < 0) {
                    t02 = t2;
                    t2 += (t12 - t2) * 0.5;
                  } else {
                    t12 = t2;
                    t2 += (t02 - t2) * 0.5;
                  }
                  L_actual = getColor(t2, true).lab()[0];
                  return L_diff = L_actual - L_ideal;
                })();
              }
              return t2;
            };
          } else {
            tmap = function(t2) {
              return t2;
            };
          }
          return f4;
        };
        f4.padding = function(p2) {
          if (p2 != null) {
            if (type2(p2) === "number") {
              p2 = [p2, p2];
            }
            _padding = p2;
            return f4;
          } else {
            return _padding;
          }
        };
        f4.colors = function(numColors, out) {
          var dd, dm, i4, o2, ref, result, results, samples, w4;
          if (arguments.length < 2) {
            out = "hex";
          }
          result = [];
          if (arguments.length === 0) {
            result = _colors.slice(0);
          } else if (numColors === 1) {
            result = [f4(0.5)];
          } else if (numColors > 1) {
            dm = _domain[0];
            dd = _domain[1] - dm;
            result = function() {
              results = [];
              for (var o3 = 0; 0 <= numColors ? o3 < numColors : o3 > numColors; 0 <= numColors ? o3++ : o3--) {
                results.push(o3);
              }
              return results;
            }.apply(this).map(function(i5) {
              return f4(dm + i5 / (numColors - 1) * dd);
            });
          } else {
            colors2 = [];
            samples = [];
            if (_classes && _classes.length > 2) {
              for (i4 = w4 = 1, ref = _classes.length; 1 <= ref ? w4 < ref : w4 > ref; i4 = 1 <= ref ? ++w4 : --w4) {
                samples.push((_classes[i4 - 1] + _classes[i4]) * 0.5);
              }
            } else {
              samples = _domain;
            }
            result = samples.map(function(v4) {
              return f4(v4);
            });
          }
          if (chroma[out]) {
            result = result.map(function(c6) {
              return c6[out]();
            });
          }
          return result;
        };
        f4.cache = function(c6) {
          if (c6 != null) {
            _useCache = c6;
            return f4;
          } else {
            return _useCache;
          }
        };
        f4.gamma = function(g3) {
          if (g3 != null) {
            _gamma = g3;
            return f4;
          } else {
            return _gamma;
          }
        };
        f4.nodata = function(d2) {
          if (d2 != null) {
            _nacol = chroma(d2);
            return f4;
          } else {
            return _nacol;
          }
        };
        return f4;
      };
      if (chroma.scales == null) {
        chroma.scales = {};
      }
      chroma.scales.cool = function() {
        return chroma.scale([chroma.hsl(180, 1, 0.9), chroma.hsl(250, 0.7, 0.4)]);
      };
      chroma.scales.hot = function() {
        return chroma.scale(["#000", "#f00", "#ff0", "#fff"], [0, 0.25, 0.75, 1]).mode("rgb");
      };
      chroma.analyze = function(data, key, filter3) {
        var add, k4, len, o2, r2, val, visit;
        r2 = {
          min: Number.MAX_VALUE,
          max: Number.MAX_VALUE * -1,
          sum: 0,
          values: [],
          count: 0
        };
        if (filter3 == null) {
          filter3 = function() {
            return true;
          };
        }
        add = function(val2) {
          if (val2 != null && !isNaN(val2)) {
            r2.values.push(val2);
            r2.sum += val2;
            if (val2 < r2.min) {
              r2.min = val2;
            }
            if (val2 > r2.max) {
              r2.max = val2;
            }
            r2.count += 1;
          }
        };
        visit = function(val2, k5) {
          if (filter3(val2, k5)) {
            if (key != null && type2(key) === "function") {
              return add(key(val2));
            } else if (key != null && type2(key) === "string" || type2(key) === "number") {
              return add(val2[key]);
            } else {
              return add(val2);
            }
          }
        };
        if (type2(data) === "array") {
          for (o2 = 0, len = data.length; o2 < len; o2++) {
            val = data[o2];
            visit(val);
          }
        } else {
          for (k4 in data) {
            val = data[k4];
            visit(val, k4);
          }
        }
        r2.domain = [r2.min, r2.max];
        r2.limits = function(mode2, num) {
          return chroma.limits(r2, mode2, num);
        };
        return r2;
      };
      chroma.limits = function(data, mode2, num) {
        var aa2, ab, ac, ad, ae3, af, ag, ah, ai, aj, ak, al2, am, assignments, best, centroids, cluster, clusterSizes, dist, i4, j4, kClusters, limits, max_log, min5, min_log, mindist, n3, nb_iters, newCentroids, o2, p2, pb, pr2, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum3, tmpKMeansBreaks, v4, value, values, w4;
        if (mode2 == null) {
          mode2 = "equal";
        }
        if (num == null) {
          num = 7;
        }
        if (type2(data) === "array") {
          data = chroma.analyze(data);
        }
        min5 = data.min;
        max6 = data.max;
        sum3 = data.sum;
        values = data.values.sort(function(a5, b3) {
          return a5 - b3;
        });
        if (num === 1) {
          return [min5, max6];
        }
        limits = [];
        if (mode2.substr(0, 1) === "c") {
          limits.push(min5);
          limits.push(max6);
        }
        if (mode2.substr(0, 1) === "e") {
          limits.push(min5);
          for (i4 = o2 = 1, ref = num - 1; 1 <= ref ? o2 <= ref : o2 >= ref; i4 = 1 <= ref ? ++o2 : --o2) {
            limits.push(min5 + i4 / num * (max6 - min5));
          }
          limits.push(max6);
        } else if (mode2.substr(0, 1) === "l") {
          if (min5 <= 0) {
            throw "Logarithmic scales are only possible for values > 0";
          }
          min_log = Math.LOG10E * log3(min5);
          max_log = Math.LOG10E * log3(max6);
          limits.push(min5);
          for (i4 = w4 = 1, ref1 = num - 1; 1 <= ref1 ? w4 <= ref1 : w4 >= ref1; i4 = 1 <= ref1 ? ++w4 : --w4) {
            limits.push(pow3(10, min_log + i4 / num * (max_log - min_log)));
          }
          limits.push(max6);
        } else if (mode2.substr(0, 1) === "q") {
          limits.push(min5);
          for (i4 = aa2 = 1, ref2 = num - 1; 1 <= ref2 ? aa2 <= ref2 : aa2 >= ref2; i4 = 1 <= ref2 ? ++aa2 : --aa2) {
            p2 = (values.length - 1) * i4 / num;
            pb = floor(p2);
            if (pb === p2) {
              limits.push(values[pb]);
            } else {
              pr2 = p2 - pb;
              limits.push(values[pb] * (1 - pr2) + values[pb + 1] * pr2);
            }
          }
          limits.push(max6);
        } else if (mode2.substr(0, 1) === "k") {
          n3 = values.length;
          assignments = new Array(n3);
          clusterSizes = new Array(num);
          repeat = true;
          nb_iters = 0;
          centroids = null;
          centroids = [];
          centroids.push(min5);
          for (i4 = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i4 = 1 <= ref3 ? ++ab : --ab) {
            centroids.push(min5 + i4 / num * (max6 - min5));
          }
          centroids.push(max6);
          while (repeat) {
            for (j4 = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j4 = 0 <= ref4 ? ++ac : --ac) {
              clusterSizes[j4] = 0;
            }
            for (i4 = ad = 0, ref5 = n3 - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i4 = 0 <= ref5 ? ++ad : --ad) {
              value = values[i4];
              mindist = Number.MAX_VALUE;
              for (j4 = ae3 = 0, ref6 = num - 1; 0 <= ref6 ? ae3 <= ref6 : ae3 >= ref6; j4 = 0 <= ref6 ? ++ae3 : --ae3) {
                dist = abs3(centroids[j4] - value);
                if (dist < mindist) {
                  mindist = dist;
                  best = j4;
                }
              }
              clusterSizes[best]++;
              assignments[i4] = best;
            }
            newCentroids = new Array(num);
            for (j4 = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j4 = 0 <= ref7 ? ++af : --af) {
              newCentroids[j4] = null;
            }
            for (i4 = ag = 0, ref8 = n3 - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i4 = 0 <= ref8 ? ++ag : --ag) {
              cluster = assignments[i4];
              if (newCentroids[cluster] === null) {
                newCentroids[cluster] = values[i4];
              } else {
                newCentroids[cluster] += values[i4];
              }
            }
            for (j4 = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j4 = 0 <= ref9 ? ++ah : --ah) {
              newCentroids[j4] *= 1 / clusterSizes[j4];
            }
            repeat = false;
            for (j4 = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j4 = 0 <= ref10 ? ++ai : --ai) {
              if (newCentroids[j4] !== centroids[i4]) {
                repeat = true;
                break;
              }
            }
            centroids = newCentroids;
            nb_iters++;
            if (nb_iters > 200) {
              repeat = false;
            }
          }
          kClusters = {};
          for (j4 = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j4 = 0 <= ref11 ? ++aj : --aj) {
            kClusters[j4] = [];
          }
          for (i4 = ak = 0, ref12 = n3 - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i4 = 0 <= ref12 ? ++ak : --ak) {
            cluster = assignments[i4];
            kClusters[cluster].push(values[i4]);
          }
          tmpKMeansBreaks = [];
          for (j4 = al2 = 0, ref13 = num - 1; 0 <= ref13 ? al2 <= ref13 : al2 >= ref13; j4 = 0 <= ref13 ? ++al2 : --al2) {
            tmpKMeansBreaks.push(kClusters[j4][0]);
            tmpKMeansBreaks.push(kClusters[j4][kClusters[j4].length - 1]);
          }
          tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a5, b3) {
            return a5 - b3;
          });
          limits.push(tmpKMeansBreaks[0]);
          for (i4 = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i4 = am += 2) {
            v4 = tmpKMeansBreaks[i4];
            if (!isNaN(v4) && limits.indexOf(v4) === -1) {
              limits.push(v4);
            }
          }
        }
        return limits;
      };
      hsi2rgb = function(h4, s3, i4) {
        var args, b3, g3, r2;
        args = unpack(arguments);
        h4 = args[0], s3 = args[1], i4 = args[2];
        if (isNaN(h4)) {
          h4 = 0;
        }
        h4 /= 360;
        if (h4 < 1 / 3) {
          b3 = (1 - s3) / 3;
          r2 = (1 + s3 * cos2(TWOPI * h4) / cos2(PITHIRD - TWOPI * h4)) / 3;
          g3 = 1 - (b3 + r2);
        } else if (h4 < 2 / 3) {
          h4 -= 1 / 3;
          r2 = (1 - s3) / 3;
          g3 = (1 + s3 * cos2(TWOPI * h4) / cos2(PITHIRD - TWOPI * h4)) / 3;
          b3 = 1 - (r2 + g3);
        } else {
          h4 -= 2 / 3;
          g3 = (1 - s3) / 3;
          b3 = (1 + s3 * cos2(TWOPI * h4) / cos2(PITHIRD - TWOPI * h4)) / 3;
          r2 = 1 - (g3 + b3);
        }
        r2 = limit(i4 * r2 * 3);
        g3 = limit(i4 * g3 * 3);
        b3 = limit(i4 * b3 * 3);
        return [r2 * 255, g3 * 255, b3 * 255, args.length > 3 ? args[3] : 1];
      };
      rgb2hsi = function() {
        var b3, g3, h4, i4, min5, r2, ref, s3;
        ref = unpack(arguments), r2 = ref[0], g3 = ref[1], b3 = ref[2];
        TWOPI = Math.PI * 2;
        r2 /= 255;
        g3 /= 255;
        b3 /= 255;
        min5 = Math.min(r2, g3, b3);
        i4 = (r2 + g3 + b3) / 3;
        s3 = 1 - min5 / i4;
        if (s3 === 0) {
          h4 = 0;
        } else {
          h4 = (r2 - g3 + (r2 - b3)) / 2;
          h4 /= Math.sqrt((r2 - g3) * (r2 - g3) + (r2 - b3) * (g3 - b3));
          h4 = Math.acos(h4);
          if (b3 > g3) {
            h4 = TWOPI - h4;
          }
          h4 /= TWOPI;
        }
        return [h4 * 360, s3, i4];
      };
      chroma.hsi = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color3, slice6.call(arguments).concat(["hsi"]), function() {
        });
      };
      _input.hsi = hsi2rgb;
      Color3.prototype.hsi = function() {
        return rgb2hsi(this._rgb);
      };
      interpolate_hsx = function(col1, col2, f4, m5) {
        var dh, hue3, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;
        if (m5 === "hsl") {
          xyz0 = col1.hsl();
          xyz1 = col2.hsl();
        } else if (m5 === "hsv") {
          xyz0 = col1.hsv();
          xyz1 = col2.hsv();
        } else if (m5 === "hcg") {
          xyz0 = col1.hcg();
          xyz1 = col2.hcg();
        } else if (m5 === "hsi") {
          xyz0 = col1.hsi();
          xyz1 = col2.hsi();
        } else if (m5 === "lch" || m5 === "hcl") {
          m5 = "hcl";
          xyz0 = col1.hcl();
          xyz1 = col2.hcl();
        }
        if (m5.substr(0, 1) === "h") {
          hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];
          hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];
        }
        if (!isNaN(hue0) && !isNaN(hue1)) {
          if (hue1 > hue0 && hue1 - hue0 > 180) {
            dh = hue1 - (hue0 + 360);
          } else if (hue1 < hue0 && hue0 - hue1 > 180) {
            dh = hue1 + 360 - hue0;
          } else {
            dh = hue1 - hue0;
          }
          hue3 = hue0 + f4 * dh;
        } else if (!isNaN(hue0)) {
          hue3 = hue0;
          if ((lbv1 === 1 || lbv1 === 0) && m5 !== "hsv") {
            sat = sat0;
          }
        } else if (!isNaN(hue1)) {
          hue3 = hue1;
          if ((lbv0 === 1 || lbv0 === 0) && m5 !== "hsv") {
            sat = sat1;
          }
        } else {
          hue3 = Number.NaN;
        }
        if (sat == null) {
          sat = sat0 + f4 * (sat1 - sat0);
        }
        lbv = lbv0 + f4 * (lbv1 - lbv0);
        return res = chroma[m5](hue3, sat, lbv);
      };
      _interpolators = _interpolators.concat(function() {
        var len, o2, ref, results;
        ref = ["hsv", "hsl", "hsi", "hcl", "lch", "hcg"];
        results = [];
        for (o2 = 0, len = ref.length; o2 < len; o2++) {
          m4 = ref[o2];
          results.push([m4, interpolate_hsx]);
        }
        return results;
      }());
      interpolate_num = function(col1, col2, f4, m5) {
        var n1, n22;
        n1 = col1.num();
        n22 = col2.num();
        return chroma.num(n1 + (n22 - n1) * f4, "num");
      };
      _interpolators.push(["num", interpolate_num]);
      interpolate_lab = function(col1, col2, f4, m5) {
        var res, xyz0, xyz1;
        xyz0 = col1.lab();
        xyz1 = col2.lab();
        return res = new Color3(xyz0[0] + f4 * (xyz1[0] - xyz0[0]), xyz0[1] + f4 * (xyz1[1] - xyz0[1]), xyz0[2] + f4 * (xyz1[2] - xyz0[2]), m5);
      };
      _interpolators.push(["lab", interpolate_lab]);
    }).call(exports);
  }
});

// ../../node_modules/d3-array/src/ascending.js
function ascending(a5, b3) {
  return a5 == null || b3 == null ? NaN : a5 < b3 ? -1 : a5 > b3 ? 1 : a5 >= b3 ? 0 : NaN;
}
var init_ascending = __esm({
  "../../node_modules/d3-array/src/ascending.js"() {
  }
});

// ../../node_modules/d3-array/src/descending.js
function descending(a5, b3) {
  return a5 == null || b3 == null ? NaN : b3 < a5 ? -1 : b3 > a5 ? 1 : b3 >= a5 ? 0 : NaN;
}
var init_descending = __esm({
  "../../node_modules/d3-array/src/descending.js"() {
  }
});

// ../../node_modules/d3-array/src/bisector.js
function bisector(f4) {
  let compare1, compare2, delta;
  if (f4.length !== 2) {
    compare1 = ascending;
    compare2 = (d2, x4) => ascending(f4(d2), x4);
    delta = (d2, x4) => f4(d2) - x4;
  } else {
    compare1 = f4 === ascending || f4 === descending ? f4 : zero;
    compare2 = f4;
    delta = f4;
  }
  function left(a5, x4, lo2 = 0, hi = a5.length) {
    if (lo2 < hi) {
      if (compare1(x4, x4) !== 0)
        return hi;
      do {
        const mid = lo2 + hi >>> 1;
        if (compare2(a5[mid], x4) < 0)
          lo2 = mid + 1;
        else
          hi = mid;
      } while (lo2 < hi);
    }
    return lo2;
  }
  function right(a5, x4, lo2 = 0, hi = a5.length) {
    if (lo2 < hi) {
      if (compare1(x4, x4) !== 0)
        return hi;
      do {
        const mid = lo2 + hi >>> 1;
        if (compare2(a5[mid], x4) <= 0)
          lo2 = mid + 1;
        else
          hi = mid;
      } while (lo2 < hi);
    }
    return lo2;
  }
  function center(a5, x4, lo2 = 0, hi = a5.length) {
    const i4 = left(a5, x4, lo2, hi - 1);
    return i4 > lo2 && delta(a5[i4 - 1], x4) > -delta(a5[i4], x4) ? i4 - 1 : i4;
  }
  return { left, center, right };
}
function zero() {
  return 0;
}
var init_bisector = __esm({
  "../../node_modules/d3-array/src/bisector.js"() {
    init_ascending();
    init_descending();
  }
});

// ../../node_modules/d3-array/src/number.js
function number(x4) {
  return x4 === null ? NaN : +x4;
}
function* numbers(values, valueof) {
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        yield value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (value = +value) >= value) {
        yield value;
      }
    }
  }
}
var init_number = __esm({
  "../../node_modules/d3-array/src/number.js"() {
  }
});

// ../../node_modules/d3-array/src/bisect.js
var ascendingBisect, bisectRight, bisectLeft, bisectCenter, bisect_default;
var init_bisect = __esm({
  "../../node_modules/d3-array/src/bisect.js"() {
    init_ascending();
    init_bisector();
    init_number();
    ascendingBisect = bisector(ascending);
    bisectRight = ascendingBisect.right;
    bisectLeft = ascendingBisect.left;
    bisectCenter = bisector(number).center;
    bisect_default = bisectRight;
  }
});

// ../../node_modules/d3-array/src/blur.js
function blur(values, r2) {
  if (!((r2 = +r2) >= 0))
    throw new RangeError("invalid r");
  let length3 = values.length;
  if (!((length3 = Math.floor(length3)) >= 0))
    throw new RangeError("invalid length");
  if (!length3 || !r2)
    return values;
  const blur3 = blurf(r2);
  const temp = values.slice();
  blur3(values, temp, 0, length3, 1);
  blur3(temp, values, 0, length3, 1);
  blur3(values, temp, 0, length3, 1);
  return values;
}
function Blur2(blur3) {
  return function(data, rx, ry = rx) {
    if (!((rx = +rx) >= 0))
      throw new RangeError("invalid rx");
    if (!((ry = +ry) >= 0))
      throw new RangeError("invalid ry");
    let { data: values, width, height } = data;
    if (!((width = Math.floor(width)) >= 0))
      throw new RangeError("invalid width");
    if (!((height = Math.floor(height !== void 0 ? height : values.length / width)) >= 0))
      throw new RangeError("invalid height");
    if (!width || !height || !rx && !ry)
      return data;
    const blurx = rx && blur3(rx);
    const blury = ry && blur3(ry);
    const temp = values.slice();
    if (blurx && blury) {
      blurh(blurx, temp, values, width, height);
      blurh(blurx, values, temp, width, height);
      blurh(blurx, temp, values, width, height);
      blurv(blury, values, temp, width, height);
      blurv(blury, temp, values, width, height);
      blurv(blury, values, temp, width, height);
    } else if (blurx) {
      blurh(blurx, values, temp, width, height);
      blurh(blurx, temp, values, width, height);
      blurh(blurx, values, temp, width, height);
    } else if (blury) {
      blurv(blury, values, temp, width, height);
      blurv(blury, temp, values, width, height);
      blurv(blury, values, temp, width, height);
    }
    return data;
  };
}
function blurh(blur3, T3, S3, w4, h4) {
  for (let y3 = 0, n3 = w4 * h4; y3 < n3; ) {
    blur3(T3, S3, y3, y3 += w4, 1);
  }
}
function blurv(blur3, T3, S3, w4, h4) {
  for (let x4 = 0, n3 = w4 * h4; x4 < w4; ++x4) {
    blur3(T3, S3, x4, x4 + n3, w4);
  }
}
function blurfImage(radius) {
  const blur3 = blurf(radius);
  return (T3, S3, start2, stop, step) => {
    start2 <<= 2, stop <<= 2, step <<= 2;
    blur3(T3, S3, start2 + 0, stop + 0, step);
    blur3(T3, S3, start2 + 1, stop + 1, step);
    blur3(T3, S3, start2 + 2, stop + 2, step);
    blur3(T3, S3, start2 + 3, stop + 3, step);
  };
}
function blurf(radius) {
  const radius0 = Math.floor(radius);
  if (radius0 === radius)
    return bluri(radius);
  const t2 = radius - radius0;
  const w4 = 2 * radius + 1;
  return (T3, S3, start2, stop, step) => {
    if (!((stop -= step) >= start2))
      return;
    let sum3 = radius0 * S3[start2];
    const s0 = step * radius0;
    const s1 = s0 + step;
    for (let i4 = start2, j4 = start2 + s0; i4 < j4; i4 += step) {
      sum3 += S3[Math.min(stop, i4)];
    }
    for (let i4 = start2, j4 = stop; i4 <= j4; i4 += step) {
      sum3 += S3[Math.min(stop, i4 + s0)];
      T3[i4] = (sum3 + t2 * (S3[Math.max(start2, i4 - s1)] + S3[Math.min(stop, i4 + s1)])) / w4;
      sum3 -= S3[Math.max(start2, i4 - s0)];
    }
  };
}
function bluri(radius) {
  const w4 = 2 * radius + 1;
  return (T3, S3, start2, stop, step) => {
    if (!((stop -= step) >= start2))
      return;
    let sum3 = radius * S3[start2];
    const s3 = step * radius;
    for (let i4 = start2, j4 = start2 + s3; i4 < j4; i4 += step) {
      sum3 += S3[Math.min(stop, i4)];
    }
    for (let i4 = start2, j4 = stop; i4 <= j4; i4 += step) {
      sum3 += S3[Math.min(stop, i4 + s3)];
      T3[i4] = sum3 / w4;
      sum3 -= S3[Math.max(start2, i4 - s3)];
    }
  };
}
var blur2, blurImage;
var init_blur = __esm({
  "../../node_modules/d3-array/src/blur.js"() {
    blur2 = Blur2(blurf);
    blurImage = Blur2(blurfImage);
  }
});

// ../../node_modules/d3-array/src/count.js
function count(values, valueof) {
  let count3 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count3;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (value = +value) >= value) {
        ++count3;
      }
    }
  }
  return count3;
}
var init_count = __esm({
  "../../node_modules/d3-array/src/count.js"() {
  }
});

// ../../node_modules/d3-array/src/cross.js
function length(array6) {
  return array6.length | 0;
}
function empty(length3) {
  return !(length3 > 0);
}
function arrayify(values) {
  return typeof values !== "object" || "length" in values ? values : Array.from(values);
}
function reducer(reduce2) {
  return (values) => reduce2(...values);
}
function cross(...values) {
  const reduce2 = typeof values[values.length - 1] === "function" && reducer(values.pop());
  values = values.map(arrayify);
  const lengths = values.map(length);
  const j4 = values.length - 1;
  const index2 = new Array(j4 + 1).fill(0);
  const product = [];
  if (j4 < 0 || lengths.some(empty))
    return product;
  while (true) {
    product.push(index2.map((j5, i5) => values[i5][j5]));
    let i4 = j4;
    while (++index2[i4] === lengths[i4]) {
      if (i4 === 0)
        return reduce2 ? product.map(reduce2) : product;
      index2[i4--] = 0;
    }
  }
}
var init_cross = __esm({
  "../../node_modules/d3-array/src/cross.js"() {
  }
});

// ../../node_modules/d3-array/src/cumsum.js
function cumsum(values, valueof) {
  var sum3 = 0, index2 = 0;
  return Float64Array.from(values, valueof === void 0 ? (v4) => sum3 += +v4 || 0 : (v4) => sum3 += +valueof(v4, index2++, values) || 0);
}
var init_cumsum = __esm({
  "../../node_modules/d3-array/src/cumsum.js"() {
  }
});

// ../../node_modules/d3-array/src/variance.js
function variance(values, valueof) {
  let count3 = 0;
  let delta;
  let mean2 = 0;
  let sum3 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        delta = value - mean2;
        mean2 += delta / ++count3;
        sum3 += delta * (value - mean2);
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (value = +value) >= value) {
        delta = value - mean2;
        mean2 += delta / ++count3;
        sum3 += delta * (value - mean2);
      }
    }
  }
  if (count3 > 1)
    return sum3 / (count3 - 1);
}
var init_variance = __esm({
  "../../node_modules/d3-array/src/variance.js"() {
  }
});

// ../../node_modules/d3-array/src/deviation.js
function deviation(values, valueof) {
  const v4 = variance(values, valueof);
  return v4 ? Math.sqrt(v4) : v4;
}
var init_deviation = __esm({
  "../../node_modules/d3-array/src/deviation.js"() {
    init_variance();
  }
});

// ../../node_modules/d3-array/src/extent.js
function extent(values, valueof) {
  let min5;
  let max6;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null) {
        if (min5 === void 0) {
          if (value >= value)
            min5 = max6 = value;
        } else {
          if (min5 > value)
            min5 = value;
          if (max6 < value)
            max6 = value;
        }
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null) {
        if (min5 === void 0) {
          if (value >= value)
            min5 = max6 = value;
        } else {
          if (min5 > value)
            min5 = value;
          if (max6 < value)
            max6 = value;
        }
      }
    }
  }
  return [min5, max6];
}
var init_extent = __esm({
  "../../node_modules/d3-array/src/extent.js"() {
  }
});

// ../../node_modules/d3-array/src/fsum.js
function fsum(values, valueof) {
  const adder = new Adder();
  if (valueof === void 0) {
    for (let value of values) {
      if (value = +value) {
        adder.add(value);
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if (value = +valueof(value, ++index2, values)) {
        adder.add(value);
      }
    }
  }
  return +adder;
}
function fcumsum(values, valueof) {
  const adder = new Adder();
  let index2 = -1;
  return Float64Array.from(
    values,
    valueof === void 0 ? (v4) => adder.add(+v4 || 0) : (v4) => adder.add(+valueof(v4, ++index2, values) || 0)
  );
}
var Adder;
var init_fsum = __esm({
  "../../node_modules/d3-array/src/fsum.js"() {
    Adder = class {
      constructor() {
        this._partials = new Float64Array(32);
        this._n = 0;
      }
      add(x4) {
        const p2 = this._partials;
        let i4 = 0;
        for (let j4 = 0; j4 < this._n && j4 < 32; j4++) {
          const y3 = p2[j4], hi = x4 + y3, lo2 = Math.abs(x4) < Math.abs(y3) ? x4 - (hi - y3) : y3 - (hi - x4);
          if (lo2)
            p2[i4++] = lo2;
          x4 = hi;
        }
        p2[i4] = x4;
        this._n = i4 + 1;
        return this;
      }
      valueOf() {
        const p2 = this._partials;
        let n3 = this._n, x4, y3, lo2, hi = 0;
        if (n3 > 0) {
          hi = p2[--n3];
          while (n3 > 0) {
            x4 = hi;
            y3 = p2[--n3];
            hi = x4 + y3;
            lo2 = y3 - (hi - x4);
            if (lo2)
              break;
          }
          if (n3 > 0 && (lo2 < 0 && p2[n3 - 1] < 0 || lo2 > 0 && p2[n3 - 1] > 0)) {
            y3 = lo2 * 2;
            x4 = hi + y3;
            if (y3 == x4 - hi)
              hi = x4;
          }
        }
        return hi;
      }
    };
  }
});

// ../../node_modules/internmap/src/index.js
function intern_get({ _intern, _key }, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key))
    return _intern.get(key);
  _intern.set(key, value);
  return value;
}
function intern_delete({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}
var InternMap, InternSet;
var init_src = __esm({
  "../../node_modules/internmap/src/index.js"() {
    InternMap = class extends Map {
      constructor(entries, key = keyof) {
        super();
        Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
        if (entries != null)
          for (const [key2, value] of entries)
            this.set(key2, value);
      }
      get(key) {
        return super.get(intern_get(this, key));
      }
      has(key) {
        return super.has(intern_get(this, key));
      }
      set(key, value) {
        return super.set(intern_set(this, key), value);
      }
      delete(key) {
        return super.delete(intern_delete(this, key));
      }
    };
    InternSet = class extends Set {
      constructor(values, key = keyof) {
        super();
        Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
        if (values != null)
          for (const value of values)
            this.add(value);
      }
      has(value) {
        return super.has(intern_get(this, value));
      }
      add(value) {
        return super.add(intern_set(this, value));
      }
      delete(value) {
        return super.delete(intern_delete(this, value));
      }
    };
  }
});

// ../../node_modules/d3-array/src/identity.js
function identity(x4) {
  return x4;
}
var init_identity = __esm({
  "../../node_modules/d3-array/src/identity.js"() {
  }
});

// ../../node_modules/d3-array/src/group.js
function group(values, ...keys) {
  return nest(values, identity, identity, keys);
}
function groups(values, ...keys) {
  return nest(values, Array.from, identity, keys);
}
function flatten(groups2, keys) {
  for (let i4 = 1, n3 = keys.length; i4 < n3; ++i4) {
    groups2 = groups2.flatMap((g3) => g3.pop().map(([key, value]) => [...g3, key, value]));
  }
  return groups2;
}
function flatGroup(values, ...keys) {
  return flatten(groups(values, ...keys), keys);
}
function flatRollup(values, reduce2, ...keys) {
  return flatten(rollups(values, reduce2, ...keys), keys);
}
function rollup(values, reduce2, ...keys) {
  return nest(values, identity, reduce2, keys);
}
function rollups(values, reduce2, ...keys) {
  return nest(values, Array.from, reduce2, keys);
}
function index(values, ...keys) {
  return nest(values, identity, unique, keys);
}
function indexes(values, ...keys) {
  return nest(values, Array.from, unique, keys);
}
function unique(values) {
  if (values.length !== 1)
    throw new Error("duplicate key");
  return values[0];
}
function nest(values, map9, reduce2, keys) {
  return function regroup(values2, i4) {
    if (i4 >= keys.length)
      return reduce2(values2);
    const groups2 = new InternMap();
    const keyof2 = keys[i4++];
    let index2 = -1;
    for (const value of values2) {
      const key = keyof2(value, ++index2, values2);
      const group2 = groups2.get(key);
      if (group2)
        group2.push(value);
      else
        groups2.set(key, [value]);
    }
    for (const [key, values3] of groups2) {
      groups2.set(key, regroup(values3, i4));
    }
    return map9(groups2);
  }(values, 0);
}
var init_group = __esm({
  "../../node_modules/d3-array/src/group.js"() {
    init_src();
    init_identity();
  }
});

// ../../node_modules/d3-array/src/permute.js
function permute(source, keys) {
  return Array.from(keys, (key) => source[key]);
}
var init_permute = __esm({
  "../../node_modules/d3-array/src/permute.js"() {
  }
});

// ../../node_modules/d3-array/src/sort.js
function sort(values, ...F4) {
  if (typeof values[Symbol.iterator] !== "function")
    throw new TypeError("values is not iterable");
  values = Array.from(values);
  let [f4] = F4;
  if (f4 && f4.length !== 2 || F4.length > 1) {
    const index2 = Uint32Array.from(values, (d2, i4) => i4);
    if (F4.length > 1) {
      F4 = F4.map((f5) => values.map(f5));
      index2.sort((i4, j4) => {
        for (const f5 of F4) {
          const c6 = ascendingDefined(f5[i4], f5[j4]);
          if (c6)
            return c6;
        }
      });
    } else {
      f4 = values.map(f4);
      index2.sort((i4, j4) => ascendingDefined(f4[i4], f4[j4]));
    }
    return permute(values, index2);
  }
  return values.sort(compareDefined(f4));
}
function compareDefined(compare = ascending) {
  if (compare === ascending)
    return ascendingDefined;
  if (typeof compare !== "function")
    throw new TypeError("compare is not a function");
  return (a5, b3) => {
    const x4 = compare(a5, b3);
    if (x4 || x4 === 0)
      return x4;
    return (compare(b3, b3) === 0) - (compare(a5, a5) === 0);
  };
}
function ascendingDefined(a5, b3) {
  return (a5 == null || !(a5 >= a5)) - (b3 == null || !(b3 >= b3)) || (a5 < b3 ? -1 : a5 > b3 ? 1 : 0);
}
var init_sort = __esm({
  "../../node_modules/d3-array/src/sort.js"() {
    init_ascending();
    init_permute();
  }
});

// ../../node_modules/d3-array/src/groupSort.js
function groupSort(values, reduce2, key) {
  return (reduce2.length !== 2 ? sort(rollup(values, reduce2, key), ([ak, av], [bk, bv]) => ascending(av, bv) || ascending(ak, bk)) : sort(group(values, key), ([ak, av], [bk, bv]) => reduce2(av, bv) || ascending(ak, bk))).map(([key2]) => key2);
}
var init_groupSort = __esm({
  "../../node_modules/d3-array/src/groupSort.js"() {
    init_ascending();
    init_group();
    init_sort();
  }
});

// ../../node_modules/d3-array/src/array.js
var array, slice, map;
var init_array = __esm({
  "../../node_modules/d3-array/src/array.js"() {
    array = Array.prototype;
    slice = array.slice;
    map = array.map;
  }
});

// ../../node_modules/d3-array/src/constant.js
function constant(x4) {
  return () => x4;
}
var init_constant = __esm({
  "../../node_modules/d3-array/src/constant.js"() {
  }
});

// ../../node_modules/d3-array/src/ticks.js
function ticks(start2, stop, count3) {
  var reverse2, i4 = -1, n3, ticks4, step;
  stop = +stop, start2 = +start2, count3 = +count3;
  if (start2 === stop && count3 > 0)
    return [start2];
  if (reverse2 = stop < start2)
    n3 = start2, start2 = stop, stop = n3;
  if ((step = tickIncrement(start2, stop, count3)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    let r0 = Math.round(start2 / step), r1 = Math.round(stop / step);
    if (r0 * step < start2)
      ++r0;
    if (r1 * step > stop)
      --r1;
    ticks4 = new Array(n3 = r1 - r0 + 1);
    while (++i4 < n3)
      ticks4[i4] = (r0 + i4) * step;
  } else {
    step = -step;
    let r0 = Math.round(start2 * step), r1 = Math.round(stop * step);
    if (r0 / step < start2)
      ++r0;
    if (r1 / step > stop)
      --r1;
    ticks4 = new Array(n3 = r1 - r0 + 1);
    while (++i4 < n3)
      ticks4[i4] = (r0 + i4) / step;
  }
  if (reverse2)
    ticks4.reverse();
  return ticks4;
}
function tickIncrement(start2, stop, count3) {
  var step = (stop - start2) / Math.max(0, count3), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start2, stop, count3) {
  var step0 = Math.abs(stop - start2) / Math.max(0, count3), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10)
    step1 *= 10;
  else if (error >= e5)
    step1 *= 5;
  else if (error >= e2)
    step1 *= 2;
  return stop < start2 ? -step1 : step1;
}
var e10, e5, e2;
var init_ticks = __esm({
  "../../node_modules/d3-array/src/ticks.js"() {
    e10 = Math.sqrt(50);
    e5 = Math.sqrt(10);
    e2 = Math.sqrt(2);
  }
});

// ../../node_modules/d3-array/src/nice.js
function nice(start2, stop, count3) {
  let prestep;
  while (true) {
    const step = tickIncrement(start2, stop, count3);
    if (step === prestep || step === 0 || !isFinite(step)) {
      return [start2, stop];
    } else if (step > 0) {
      start2 = Math.floor(start2 / step) * step;
      stop = Math.ceil(stop / step) * step;
    } else if (step < 0) {
      start2 = Math.ceil(start2 * step) / step;
      stop = Math.floor(stop * step) / step;
    }
    prestep = step;
  }
}
var init_nice = __esm({
  "../../node_modules/d3-array/src/nice.js"() {
    init_ticks();
  }
});

// ../../node_modules/d3-array/src/threshold/sturges.js
function thresholdSturges(values) {
  return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;
}
var init_sturges = __esm({
  "../../node_modules/d3-array/src/threshold/sturges.js"() {
    init_count();
  }
});

// ../../node_modules/d3-array/src/bin.js
function bin() {
  var value = identity, domain = extent, threshold3 = thresholdSturges;
  function histogram(data) {
    if (!Array.isArray(data))
      data = Array.from(data);
    var i4, n3 = data.length, x4, step, values = new Array(n3);
    for (i4 = 0; i4 < n3; ++i4) {
      values[i4] = value(data[i4], i4, data);
    }
    var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold3(values, x0, x1);
    if (!Array.isArray(tz)) {
      const max6 = x1, tn2 = +tz;
      if (domain === extent)
        [x0, x1] = nice(x0, x1, tn2);
      tz = ticks(x0, x1, tn2);
      if (tz[0] <= x0)
        step = tickIncrement(x0, x1, tn2);
      if (tz[tz.length - 1] >= x1) {
        if (max6 >= x1 && domain === extent) {
          const step2 = tickIncrement(x0, x1, tn2);
          if (isFinite(step2)) {
            if (step2 > 0) {
              x1 = (Math.floor(x1 / step2) + 1) * step2;
            } else if (step2 < 0) {
              x1 = (Math.ceil(x1 * -step2) + 1) / -step2;
            }
          }
        } else {
          tz.pop();
        }
      }
    }
    var m4 = tz.length, a5 = 0, b3 = m4;
    while (tz[a5] <= x0)
      ++a5;
    while (tz[b3 - 1] > x1)
      --b3;
    if (a5 || b3 < m4)
      tz = tz.slice(a5, b3), m4 = b3 - a5;
    var bins = new Array(m4 + 1), bin2;
    for (i4 = 0; i4 <= m4; ++i4) {
      bin2 = bins[i4] = [];
      bin2.x0 = i4 > 0 ? tz[i4 - 1] : x0;
      bin2.x1 = i4 < m4 ? tz[i4] : x1;
    }
    if (isFinite(step)) {
      if (step > 0) {
        for (i4 = 0; i4 < n3; ++i4) {
          if ((x4 = values[i4]) != null && x0 <= x4 && x4 <= x1) {
            bins[Math.min(m4, Math.floor((x4 - x0) / step))].push(data[i4]);
          }
        }
      } else if (step < 0) {
        for (i4 = 0; i4 < n3; ++i4) {
          if ((x4 = values[i4]) != null && x0 <= x4 && x4 <= x1) {
            const j4 = Math.floor((x0 - x4) * step);
            bins[Math.min(m4, j4 + (tz[j4] <= x4))].push(data[i4]);
          }
        }
      }
    } else {
      for (i4 = 0; i4 < n3; ++i4) {
        if ((x4 = values[i4]) != null && x0 <= x4 && x4 <= x1) {
          bins[bisect_default(tz, x4, 0, m4)].push(data[i4]);
        }
      }
    }
    return bins;
  }
  histogram.value = function(_4) {
    return arguments.length ? (value = typeof _4 === "function" ? _4 : constant(_4), histogram) : value;
  };
  histogram.domain = function(_4) {
    return arguments.length ? (domain = typeof _4 === "function" ? _4 : constant([_4[0], _4[1]]), histogram) : domain;
  };
  histogram.thresholds = function(_4) {
    return arguments.length ? (threshold3 = typeof _4 === "function" ? _4 : constant(Array.isArray(_4) ? slice.call(_4) : _4), histogram) : threshold3;
  };
  return histogram;
}
var init_bin = __esm({
  "../../node_modules/d3-array/src/bin.js"() {
    init_array();
    init_bisect();
    init_constant();
    init_extent();
    init_identity();
    init_nice();
    init_ticks();
    init_sturges();
  }
});

// ../../node_modules/d3-array/src/max.js
function max2(values, valueof) {
  let max6;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (max6 < value || max6 === void 0 && value >= value)) {
        max6 = value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (max6 < value || max6 === void 0 && value >= value)) {
        max6 = value;
      }
    }
  }
  return max6;
}
var init_max = __esm({
  "../../node_modules/d3-array/src/max.js"() {
  }
});

// ../../node_modules/d3-array/src/maxIndex.js
function maxIndex(values, valueof) {
  let max6;
  let maxIndex2 = -1;
  let index2 = -1;
  if (valueof === void 0) {
    for (const value of values) {
      ++index2;
      if (value != null && (max6 < value || max6 === void 0 && value >= value)) {
        max6 = value, maxIndex2 = index2;
      }
    }
  } else {
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (max6 < value || max6 === void 0 && value >= value)) {
        max6 = value, maxIndex2 = index2;
      }
    }
  }
  return maxIndex2;
}
var init_maxIndex = __esm({
  "../../node_modules/d3-array/src/maxIndex.js"() {
  }
});

// ../../node_modules/d3-array/src/min.js
function min(values, valueof) {
  let min5;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (min5 > value || min5 === void 0 && value >= value)) {
        min5 = value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (min5 > value || min5 === void 0 && value >= value)) {
        min5 = value;
      }
    }
  }
  return min5;
}
var init_min = __esm({
  "../../node_modules/d3-array/src/min.js"() {
  }
});

// ../../node_modules/d3-array/src/minIndex.js
function minIndex(values, valueof) {
  let min5;
  let minIndex2 = -1;
  let index2 = -1;
  if (valueof === void 0) {
    for (const value of values) {
      ++index2;
      if (value != null && (min5 > value || min5 === void 0 && value >= value)) {
        min5 = value, minIndex2 = index2;
      }
    }
  } else {
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (min5 > value || min5 === void 0 && value >= value)) {
        min5 = value, minIndex2 = index2;
      }
    }
  }
  return minIndex2;
}
var init_minIndex = __esm({
  "../../node_modules/d3-array/src/minIndex.js"() {
  }
});

// ../../node_modules/d3-array/src/quickselect.js
function quickselect(array6, k4, left = 0, right = Infinity, compare) {
  k4 = Math.floor(k4);
  left = Math.floor(Math.max(0, left));
  right = Math.floor(Math.min(array6.length - 1, right));
  if (!(left <= k4 && k4 <= right))
    return array6;
  compare = compare === void 0 ? ascendingDefined : compareDefined(compare);
  while (right > left) {
    if (right - left > 600) {
      const n3 = right - left + 1;
      const m4 = k4 - left + 1;
      const z3 = Math.log(n3);
      const s3 = 0.5 * Math.exp(2 * z3 / 3);
      const sd = 0.5 * Math.sqrt(z3 * s3 * (n3 - s3) / n3) * (m4 - n3 / 2 < 0 ? -1 : 1);
      const newLeft = Math.max(left, Math.floor(k4 - m4 * s3 / n3 + sd));
      const newRight = Math.min(right, Math.floor(k4 + (n3 - m4) * s3 / n3 + sd));
      quickselect(array6, k4, newLeft, newRight, compare);
    }
    const t2 = array6[k4];
    let i4 = left;
    let j4 = right;
    swap(array6, left, k4);
    if (compare(array6[right], t2) > 0)
      swap(array6, left, right);
    while (i4 < j4) {
      swap(array6, i4, j4), ++i4, --j4;
      while (compare(array6[i4], t2) < 0)
        ++i4;
      while (compare(array6[j4], t2) > 0)
        --j4;
    }
    if (compare(array6[left], t2) === 0)
      swap(array6, left, j4);
    else
      ++j4, swap(array6, j4, right);
    if (j4 <= k4)
      left = j4 + 1;
    if (k4 <= j4)
      right = j4 - 1;
  }
  return array6;
}
function swap(array6, i4, j4) {
  const t2 = array6[i4];
  array6[i4] = array6[j4];
  array6[j4] = t2;
}
var init_quickselect = __esm({
  "../../node_modules/d3-array/src/quickselect.js"() {
    init_sort();
  }
});

// ../../node_modules/d3-array/src/greatest.js
function greatest(values, compare = ascending) {
  let max6;
  let defined = false;
  if (compare.length === 1) {
    let maxValue;
    for (const element of values) {
      const value = compare(element);
      if (defined ? ascending(value, maxValue) > 0 : ascending(value, value) === 0) {
        max6 = element;
        maxValue = value;
        defined = true;
      }
    }
  } else {
    for (const value of values) {
      if (defined ? compare(value, max6) > 0 : compare(value, value) === 0) {
        max6 = value;
        defined = true;
      }
    }
  }
  return max6;
}
var init_greatest = __esm({
  "../../node_modules/d3-array/src/greatest.js"() {
    init_ascending();
  }
});

// ../../node_modules/d3-array/src/quantile.js
function quantile(values, p2, valueof) {
  values = Float64Array.from(numbers(values, valueof));
  if (!(n3 = values.length) || isNaN(p2 = +p2))
    return;
  if (p2 <= 0 || n3 < 2)
    return min(values);
  if (p2 >= 1)
    return max2(values);
  var n3, i4 = (n3 - 1) * p2, i0 = Math.floor(i4), value0 = max2(quickselect(values, i0).subarray(0, i0 + 1)), value1 = min(values.subarray(i0 + 1));
  return value0 + (value1 - value0) * (i4 - i0);
}
function quantileSorted(values, p2, valueof = number) {
  if (!(n3 = values.length) || isNaN(p2 = +p2))
    return;
  if (p2 <= 0 || n3 < 2)
    return +valueof(values[0], 0, values);
  if (p2 >= 1)
    return +valueof(values[n3 - 1], n3 - 1, values);
  var n3, i4 = (n3 - 1) * p2, i0 = Math.floor(i4), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i4 - i0);
}
function quantileIndex(values, p2, valueof) {
  values = Float64Array.from(numbers(values, valueof));
  if (!(n3 = values.length) || isNaN(p2 = +p2))
    return;
  if (p2 <= 0 || n3 < 2)
    return minIndex(values);
  if (p2 >= 1)
    return maxIndex(values);
  var n3, i4 = Math.floor((n3 - 1) * p2), order = (i5, j4) => ascendingDefined(values[i5], values[j4]), index2 = quickselect(Uint32Array.from(values, (_4, i5) => i5), i4, 0, n3 - 1, order);
  return greatest(index2.subarray(0, i4 + 1), (i5) => values[i5]);
}
var init_quantile = __esm({
  "../../node_modules/d3-array/src/quantile.js"() {
    init_max();
    init_maxIndex();
    init_min();
    init_minIndex();
    init_quickselect();
    init_number();
    init_sort();
    init_greatest();
  }
});

// ../../node_modules/d3-array/src/threshold/freedmanDiaconis.js
function thresholdFreedmanDiaconis(values, min5, max6) {
  return Math.ceil((max6 - min5) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));
}
var init_freedmanDiaconis = __esm({
  "../../node_modules/d3-array/src/threshold/freedmanDiaconis.js"() {
    init_count();
    init_quantile();
  }
});

// ../../node_modules/d3-array/src/threshold/scott.js
function thresholdScott(values, min5, max6) {
  return Math.ceil((max6 - min5) * Math.cbrt(count(values)) / (3.49 * deviation(values)));
}
var init_scott = __esm({
  "../../node_modules/d3-array/src/threshold/scott.js"() {
    init_count();
    init_deviation();
  }
});

// ../../node_modules/d3-array/src/mean.js
function mean(values, valueof) {
  let count3 = 0;
  let sum3 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count3, sum3 += value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (value = +value) >= value) {
        ++count3, sum3 += value;
      }
    }
  }
  if (count3)
    return sum3 / count3;
}
var init_mean = __esm({
  "../../node_modules/d3-array/src/mean.js"() {
  }
});

// ../../node_modules/d3-array/src/median.js
function median(values, valueof) {
  return quantile(values, 0.5, valueof);
}
function medianIndex(values, valueof) {
  return quantileIndex(values, 0.5, valueof);
}
var init_median = __esm({
  "../../node_modules/d3-array/src/median.js"() {
    init_quantile();
  }
});

// ../../node_modules/d3-array/src/merge.js
function* flatten2(arrays) {
  for (const array6 of arrays) {
    yield* array6;
  }
}
function merge(arrays) {
  return Array.from(flatten2(arrays));
}
var init_merge = __esm({
  "../../node_modules/d3-array/src/merge.js"() {
  }
});

// ../../node_modules/d3-array/src/mode.js
function mode(values, valueof) {
  const counts = new InternMap();
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && value >= value) {
        counts.set(value, (counts.get(value) || 0) + 1);
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && value >= value) {
        counts.set(value, (counts.get(value) || 0) + 1);
      }
    }
  }
  let modeValue;
  let modeCount = 0;
  for (const [value, count3] of counts) {
    if (count3 > modeCount) {
      modeCount = count3;
      modeValue = value;
    }
  }
  return modeValue;
}
var init_mode = __esm({
  "../../node_modules/d3-array/src/mode.js"() {
    init_src();
  }
});

// ../../node_modules/d3-array/src/pairs.js
function pairs(values, pairof = pair) {
  const pairs2 = [];
  let previous;
  let first = false;
  for (const value of values) {
    if (first)
      pairs2.push(pairof(previous, value));
    previous = value;
    first = true;
  }
  return pairs2;
}
function pair(a5, b3) {
  return [a5, b3];
}
var init_pairs = __esm({
  "../../node_modules/d3-array/src/pairs.js"() {
  }
});

// ../../node_modules/d3-array/src/range.js
function range(start2, stop, step) {
  start2 = +start2, stop = +stop, step = (n3 = arguments.length) < 2 ? (stop = start2, start2 = 0, 1) : n3 < 3 ? 1 : +step;
  var i4 = -1, n3 = Math.max(0, Math.ceil((stop - start2) / step)) | 0, range4 = new Array(n3);
  while (++i4 < n3) {
    range4[i4] = start2 + i4 * step;
  }
  return range4;
}
var init_range = __esm({
  "../../node_modules/d3-array/src/range.js"() {
  }
});

// ../../node_modules/d3-array/src/rank.js
function rank(values, valueof = ascending) {
  if (typeof values[Symbol.iterator] !== "function")
    throw new TypeError("values is not iterable");
  let V4 = Array.from(values);
  const R4 = new Float64Array(V4.length);
  if (valueof.length !== 2)
    V4 = V4.map(valueof), valueof = ascending;
  const compareIndex = (i4, j4) => valueof(V4[i4], V4[j4]);
  let k4, r2;
  Uint32Array.from(V4, (_4, i4) => i4).sort(valueof === ascending ? (i4, j4) => ascendingDefined(V4[i4], V4[j4]) : compareDefined(compareIndex)).forEach((j4, i4) => {
    const c6 = compareIndex(j4, k4 === void 0 ? j4 : k4);
    if (c6 >= 0) {
      if (k4 === void 0 || c6 > 0)
        k4 = j4, r2 = i4;
      R4[j4] = r2;
    } else {
      R4[j4] = NaN;
    }
  });
  return R4;
}
var init_rank = __esm({
  "../../node_modules/d3-array/src/rank.js"() {
    init_ascending();
    init_sort();
  }
});

// ../../node_modules/d3-array/src/least.js
function least(values, compare = ascending) {
  let min5;
  let defined = false;
  if (compare.length === 1) {
    let minValue;
    for (const element of values) {
      const value = compare(element);
      if (defined ? ascending(value, minValue) < 0 : ascending(value, value) === 0) {
        min5 = element;
        minValue = value;
        defined = true;
      }
    }
  } else {
    for (const value of values) {
      if (defined ? compare(value, min5) < 0 : compare(value, value) === 0) {
        min5 = value;
        defined = true;
      }
    }
  }
  return min5;
}
var init_least = __esm({
  "../../node_modules/d3-array/src/least.js"() {
    init_ascending();
  }
});

// ../../node_modules/d3-array/src/leastIndex.js
function leastIndex(values, compare = ascending) {
  if (compare.length === 1)
    return minIndex(values, compare);
  let minValue;
  let min5 = -1;
  let index2 = -1;
  for (const value of values) {
    ++index2;
    if (min5 < 0 ? compare(value, value) === 0 : compare(value, minValue) < 0) {
      minValue = value;
      min5 = index2;
    }
  }
  return min5;
}
var init_leastIndex = __esm({
  "../../node_modules/d3-array/src/leastIndex.js"() {
    init_ascending();
    init_minIndex();
  }
});

// ../../node_modules/d3-array/src/greatestIndex.js
function greatestIndex(values, compare = ascending) {
  if (compare.length === 1)
    return maxIndex(values, compare);
  let maxValue;
  let max6 = -1;
  let index2 = -1;
  for (const value of values) {
    ++index2;
    if (max6 < 0 ? compare(value, value) === 0 : compare(value, maxValue) > 0) {
      maxValue = value;
      max6 = index2;
    }
  }
  return max6;
}
var init_greatestIndex = __esm({
  "../../node_modules/d3-array/src/greatestIndex.js"() {
    init_ascending();
    init_maxIndex();
  }
});

// ../../node_modules/d3-array/src/scan.js
function scan(values, compare) {
  const index2 = leastIndex(values, compare);
  return index2 < 0 ? void 0 : index2;
}
var init_scan = __esm({
  "../../node_modules/d3-array/src/scan.js"() {
    init_leastIndex();
  }
});

// ../../node_modules/d3-array/src/shuffle.js
function shuffler(random) {
  return function shuffle(array6, i0 = 0, i1 = array6.length) {
    let m4 = i1 - (i0 = +i0);
    while (m4) {
      const i4 = random() * m4-- | 0, t2 = array6[m4 + i0];
      array6[m4 + i0] = array6[i4 + i0];
      array6[i4 + i0] = t2;
    }
    return array6;
  };
}
var shuffle_default;
var init_shuffle = __esm({
  "../../node_modules/d3-array/src/shuffle.js"() {
    shuffle_default = shuffler(Math.random);
  }
});

// ../../node_modules/d3-array/src/sum.js
function sum(values, valueof) {
  let sum3 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value = +value) {
        sum3 += value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if (value = +valueof(value, ++index2, values)) {
        sum3 += value;
      }
    }
  }
  return sum3;
}
var init_sum = __esm({
  "../../node_modules/d3-array/src/sum.js"() {
  }
});

// ../../node_modules/d3-array/src/transpose.js
function transpose(matrix) {
  if (!(n3 = matrix.length))
    return [];
  for (var i4 = -1, m4 = min(matrix, length2), transpose2 = new Array(m4); ++i4 < m4; ) {
    for (var j4 = -1, n3, row = transpose2[i4] = new Array(n3); ++j4 < n3; ) {
      row[j4] = matrix[j4][i4];
    }
  }
  return transpose2;
}
function length2(d2) {
  return d2.length;
}
var init_transpose = __esm({
  "../../node_modules/d3-array/src/transpose.js"() {
    init_min();
  }
});

// ../../node_modules/d3-array/src/zip.js
function zip() {
  return transpose(arguments);
}
var init_zip = __esm({
  "../../node_modules/d3-array/src/zip.js"() {
    init_transpose();
  }
});

// ../../node_modules/d3-array/src/every.js
function every(values, test) {
  if (typeof test !== "function")
    throw new TypeError("test is not a function");
  let index2 = -1;
  for (const value of values) {
    if (!test(value, ++index2, values)) {
      return false;
    }
  }
  return true;
}
var init_every = __esm({
  "../../node_modules/d3-array/src/every.js"() {
  }
});

// ../../node_modules/d3-array/src/some.js
function some(values, test) {
  if (typeof test !== "function")
    throw new TypeError("test is not a function");
  let index2 = -1;
  for (const value of values) {
    if (test(value, ++index2, values)) {
      return true;
    }
  }
  return false;
}
var init_some = __esm({
  "../../node_modules/d3-array/src/some.js"() {
  }
});

// ../../node_modules/d3-array/src/filter.js
function filter(values, test) {
  if (typeof test !== "function")
    throw new TypeError("test is not a function");
  const array6 = [];
  let index2 = -1;
  for (const value of values) {
    if (test(value, ++index2, values)) {
      array6.push(value);
    }
  }
  return array6;
}
var init_filter = __esm({
  "../../node_modules/d3-array/src/filter.js"() {
  }
});

// ../../node_modules/d3-array/src/map.js
function map2(values, mapper) {
  if (typeof values[Symbol.iterator] !== "function")
    throw new TypeError("values is not iterable");
  if (typeof mapper !== "function")
    throw new TypeError("mapper is not a function");
  return Array.from(values, (value, index2) => mapper(value, index2, values));
}
var init_map = __esm({
  "../../node_modules/d3-array/src/map.js"() {
  }
});

// ../../node_modules/d3-array/src/reduce.js
function reduce(values, reducer2, value) {
  if (typeof reducer2 !== "function")
    throw new TypeError("reducer is not a function");
  const iterator = values[Symbol.iterator]();
  let done, next, index2 = -1;
  if (arguments.length < 3) {
    ({ done, value } = iterator.next());
    if (done)
      return;
    ++index2;
  }
  while ({ done, value: next } = iterator.next(), !done) {
    value = reducer2(value, next, ++index2, values);
  }
  return value;
}
var init_reduce = __esm({
  "../../node_modules/d3-array/src/reduce.js"() {
  }
});

// ../../node_modules/d3-array/src/reverse.js
function reverse(values) {
  if (typeof values[Symbol.iterator] !== "function")
    throw new TypeError("values is not iterable");
  return Array.from(values).reverse();
}
var init_reverse = __esm({
  "../../node_modules/d3-array/src/reverse.js"() {
  }
});

// ../../node_modules/d3-array/src/difference.js
function difference(values, ...others) {
  values = new InternSet(values);
  for (const other of others) {
    for (const value of other) {
      values.delete(value);
    }
  }
  return values;
}
var init_difference = __esm({
  "../../node_modules/d3-array/src/difference.js"() {
    init_src();
  }
});

// ../../node_modules/d3-array/src/disjoint.js
function disjoint(values, other) {
  const iterator = other[Symbol.iterator](), set6 = new InternSet();
  for (const v4 of values) {
    if (set6.has(v4))
      return false;
    let value, done;
    while ({ value, done } = iterator.next()) {
      if (done)
        break;
      if (Object.is(v4, value))
        return false;
      set6.add(value);
    }
  }
  return true;
}
var init_disjoint = __esm({
  "../../node_modules/d3-array/src/disjoint.js"() {
    init_src();
  }
});

// ../../node_modules/d3-array/src/intersection.js
function intersection(values, ...others) {
  values = new InternSet(values);
  others = others.map(set);
  out:
    for (const value of values) {
      for (const other of others) {
        if (!other.has(value)) {
          values.delete(value);
          continue out;
        }
      }
    }
  return values;
}
function set(values) {
  return values instanceof InternSet ? values : new InternSet(values);
}
var init_intersection = __esm({
  "../../node_modules/d3-array/src/intersection.js"() {
    init_src();
  }
});

// ../../node_modules/d3-array/src/superset.js
function superset(values, other) {
  const iterator = values[Symbol.iterator](), set6 = /* @__PURE__ */ new Set();
  for (const o2 of other) {
    const io2 = intern(o2);
    if (set6.has(io2))
      continue;
    let value, done;
    while ({ value, done } = iterator.next()) {
      if (done)
        return false;
      const ivalue = intern(value);
      set6.add(ivalue);
      if (Object.is(io2, ivalue))
        break;
    }
  }
  return true;
}
function intern(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}
var init_superset = __esm({
  "../../node_modules/d3-array/src/superset.js"() {
  }
});

// ../../node_modules/d3-array/src/subset.js
function subset(values, other) {
  return superset(other, values);
}
var init_subset = __esm({
  "../../node_modules/d3-array/src/subset.js"() {
    init_superset();
  }
});

// ../../node_modules/d3-array/src/union.js
function union(...others) {
  const set6 = new InternSet();
  for (const other of others) {
    for (const o2 of other) {
      set6.add(o2);
    }
  }
  return set6;
}
var init_union = __esm({
  "../../node_modules/d3-array/src/union.js"() {
    init_src();
  }
});

// ../../node_modules/d3-array/src/index.js
var src_exports = {};
__export(src_exports, {
  Adder: () => Adder,
  InternMap: () => InternMap,
  InternSet: () => InternSet,
  ascending: () => ascending,
  bin: () => bin,
  bisect: () => bisect_default,
  bisectCenter: () => bisectCenter,
  bisectLeft: () => bisectLeft,
  bisectRight: () => bisectRight,
  bisector: () => bisector,
  blur: () => blur,
  blur2: () => blur2,
  blurImage: () => blurImage,
  count: () => count,
  cross: () => cross,
  cumsum: () => cumsum,
  descending: () => descending,
  deviation: () => deviation,
  difference: () => difference,
  disjoint: () => disjoint,
  every: () => every,
  extent: () => extent,
  fcumsum: () => fcumsum,
  filter: () => filter,
  flatGroup: () => flatGroup,
  flatRollup: () => flatRollup,
  fsum: () => fsum,
  greatest: () => greatest,
  greatestIndex: () => greatestIndex,
  group: () => group,
  groupSort: () => groupSort,
  groups: () => groups,
  histogram: () => bin,
  index: () => index,
  indexes: () => indexes,
  intersection: () => intersection,
  least: () => least,
  leastIndex: () => leastIndex,
  map: () => map2,
  max: () => max2,
  maxIndex: () => maxIndex,
  mean: () => mean,
  median: () => median,
  medianIndex: () => medianIndex,
  merge: () => merge,
  min: () => min,
  minIndex: () => minIndex,
  mode: () => mode,
  nice: () => nice,
  pairs: () => pairs,
  permute: () => permute,
  quantile: () => quantile,
  quantileIndex: () => quantileIndex,
  quantileSorted: () => quantileSorted,
  quickselect: () => quickselect,
  range: () => range,
  rank: () => rank,
  reduce: () => reduce,
  reverse: () => reverse,
  rollup: () => rollup,
  rollups: () => rollups,
  scan: () => scan,
  shuffle: () => shuffle_default,
  shuffler: () => shuffler,
  some: () => some,
  sort: () => sort,
  subset: () => subset,
  sum: () => sum,
  superset: () => superset,
  thresholdFreedmanDiaconis: () => thresholdFreedmanDiaconis,
  thresholdScott: () => thresholdScott,
  thresholdSturges: () => thresholdSturges,
  tickIncrement: () => tickIncrement,
  tickStep: () => tickStep,
  ticks: () => ticks,
  transpose: () => transpose,
  union: () => union,
  variance: () => variance,
  zip: () => zip
});
var init_src2 = __esm({
  "../../node_modules/d3-array/src/index.js"() {
    init_bisect();
    init_ascending();
    init_bisector();
    init_blur();
    init_count();
    init_cross();
    init_cumsum();
    init_descending();
    init_deviation();
    init_extent();
    init_fsum();
    init_group();
    init_groupSort();
    init_bin();
    init_freedmanDiaconis();
    init_scott();
    init_sturges();
    init_max();
    init_maxIndex();
    init_mean();
    init_median();
    init_merge();
    init_min();
    init_minIndex();
    init_mode();
    init_nice();
    init_pairs();
    init_permute();
    init_quantile();
    init_quickselect();
    init_range();
    init_rank();
    init_least();
    init_leastIndex();
    init_greatest();
    init_greatestIndex();
    init_scan();
    init_shuffle();
    init_sum();
    init_ticks();
    init_transpose();
    init_variance();
    init_zip();
    init_every();
    init_some();
    init_filter();
    init_map();
    init_reduce();
    init_reverse();
    init_sort();
    init_difference();
    init_disjoint();
    init_intersection();
    init_subset();
    init_superset();
    init_union();
    init_src();
  }
});

// ../../node_modules/d3-scale/node_modules/d3-array/src/ascending.js
function ascending2(a5, b3) {
  return a5 == null || b3 == null ? NaN : a5 < b3 ? -1 : a5 > b3 ? 1 : a5 >= b3 ? 0 : NaN;
}
var init_ascending2 = __esm({
  "../../node_modules/d3-scale/node_modules/d3-array/src/ascending.js"() {
  }
});

// ../../node_modules/d3-scale/node_modules/d3-array/src/bisector.js
function bisector2(f4) {
  let delta = f4;
  let compare1 = f4;
  let compare2 = f4;
  if (f4.length !== 2) {
    delta = (d2, x4) => f4(d2) - x4;
    compare1 = ascending2;
    compare2 = (d2, x4) => ascending2(f4(d2), x4);
  }
  function left(a5, x4, lo2 = 0, hi = a5.length) {
    if (lo2 < hi) {
      if (compare1(x4, x4) !== 0)
        return hi;
      do {
        const mid = lo2 + hi >>> 1;
        if (compare2(a5[mid], x4) < 0)
          lo2 = mid + 1;
        else
          hi = mid;
      } while (lo2 < hi);
    }
    return lo2;
  }
  function right(a5, x4, lo2 = 0, hi = a5.length) {
    if (lo2 < hi) {
      if (compare1(x4, x4) !== 0)
        return hi;
      do {
        const mid = lo2 + hi >>> 1;
        if (compare2(a5[mid], x4) <= 0)
          lo2 = mid + 1;
        else
          hi = mid;
      } while (lo2 < hi);
    }
    return lo2;
  }
  function center(a5, x4, lo2 = 0, hi = a5.length) {
    const i4 = left(a5, x4, lo2, hi - 1);
    return i4 > lo2 && delta(a5[i4 - 1], x4) > -delta(a5[i4], x4) ? i4 - 1 : i4;
  }
  return { left, center, right };
}
var init_bisector2 = __esm({
  "../../node_modules/d3-scale/node_modules/d3-array/src/bisector.js"() {
    init_ascending2();
  }
});

// ../../node_modules/d3-scale/node_modules/d3-array/src/number.js
function number2(x4) {
  return x4 === null ? NaN : +x4;
}
function* numbers2(values, valueof) {
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        yield value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (value = +value) >= value) {
        yield value;
      }
    }
  }
}
var init_number2 = __esm({
  "../../node_modules/d3-scale/node_modules/d3-array/src/number.js"() {
  }
});

// ../../node_modules/d3-scale/node_modules/d3-array/src/bisect.js
var ascendingBisect2, bisectRight2, bisectLeft2, bisectCenter2, bisect_default2;
var init_bisect2 = __esm({
  "../../node_modules/d3-scale/node_modules/d3-array/src/bisect.js"() {
    init_ascending2();
    init_bisector2();
    init_number2();
    ascendingBisect2 = bisector2(ascending2);
    bisectRight2 = ascendingBisect2.right;
    bisectLeft2 = ascendingBisect2.left;
    bisectCenter2 = bisector2(number2).center;
    bisect_default2 = bisectRight2;
  }
});

// ../../node_modules/d3-scale/node_modules/d3-array/src/sort.js
function compareDefined2(compare = ascending2) {
  if (compare === ascending2)
    return ascendingDefined2;
  if (typeof compare !== "function")
    throw new TypeError("compare is not a function");
  return (a5, b3) => {
    const x4 = compare(a5, b3);
    if (x4 || x4 === 0)
      return x4;
    return (compare(b3, b3) === 0) - (compare(a5, a5) === 0);
  };
}
function ascendingDefined2(a5, b3) {
  return (a5 == null || !(a5 >= a5)) - (b3 == null || !(b3 >= b3)) || (a5 < b3 ? -1 : a5 > b3 ? 1 : 0);
}
var init_sort2 = __esm({
  "../../node_modules/d3-scale/node_modules/d3-array/src/sort.js"() {
    init_ascending2();
  }
});

// ../../node_modules/d3-scale/node_modules/d3-array/src/ticks.js
function ticks2(start2, stop, count3) {
  var reverse2, i4 = -1, n3, ticks4, step;
  stop = +stop, start2 = +start2, count3 = +count3;
  if (start2 === stop && count3 > 0)
    return [start2];
  if (reverse2 = stop < start2)
    n3 = start2, start2 = stop, stop = n3;
  if ((step = tickIncrement2(start2, stop, count3)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    let r0 = Math.round(start2 / step), r1 = Math.round(stop / step);
    if (r0 * step < start2)
      ++r0;
    if (r1 * step > stop)
      --r1;
    ticks4 = new Array(n3 = r1 - r0 + 1);
    while (++i4 < n3)
      ticks4[i4] = (r0 + i4) * step;
  } else {
    step = -step;
    let r0 = Math.round(start2 * step), r1 = Math.round(stop * step);
    if (r0 / step < start2)
      ++r0;
    if (r1 / step > stop)
      --r1;
    ticks4 = new Array(n3 = r1 - r0 + 1);
    while (++i4 < n3)
      ticks4[i4] = (r0 + i4) / step;
  }
  if (reverse2)
    ticks4.reverse();
  return ticks4;
}
function tickIncrement2(start2, stop, count3) {
  var step = (stop - start2) / Math.max(0, count3), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e102 ? 10 : error >= e52 ? 5 : error >= e22 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e102 ? 10 : error >= e52 ? 5 : error >= e22 ? 2 : 1);
}
function tickStep2(start2, stop, count3) {
  var step0 = Math.abs(stop - start2) / Math.max(0, count3), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e102)
    step1 *= 10;
  else if (error >= e52)
    step1 *= 5;
  else if (error >= e22)
    step1 *= 2;
  return stop < start2 ? -step1 : step1;
}
var e102, e52, e22;
var init_ticks2 = __esm({
  "../../node_modules/d3-scale/node_modules/d3-array/src/ticks.js"() {
    e102 = Math.sqrt(50);
    e52 = Math.sqrt(10);
    e22 = Math.sqrt(2);
  }
});

// ../../node_modules/d3-scale/node_modules/d3-array/src/max.js
function max3(values, valueof) {
  let max6;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (max6 < value || max6 === void 0 && value >= value)) {
        max6 = value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (max6 < value || max6 === void 0 && value >= value)) {
        max6 = value;
      }
    }
  }
  return max6;
}
var init_max2 = __esm({
  "../../node_modules/d3-scale/node_modules/d3-array/src/max.js"() {
  }
});

// ../../node_modules/d3-scale/node_modules/d3-array/src/min.js
function min2(values, valueof) {
  let min5;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (min5 > value || min5 === void 0 && value >= value)) {
        min5 = value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (min5 > value || min5 === void 0 && value >= value)) {
        min5 = value;
      }
    }
  }
  return min5;
}
var init_min2 = __esm({
  "../../node_modules/d3-scale/node_modules/d3-array/src/min.js"() {
  }
});

// ../../node_modules/d3-scale/node_modules/d3-array/src/quickselect.js
function quickselect2(array6, k4, left = 0, right = array6.length - 1, compare) {
  compare = compare === void 0 ? ascendingDefined2 : compareDefined2(compare);
  while (right > left) {
    if (right - left > 600) {
      const n3 = right - left + 1;
      const m4 = k4 - left + 1;
      const z3 = Math.log(n3);
      const s3 = 0.5 * Math.exp(2 * z3 / 3);
      const sd = 0.5 * Math.sqrt(z3 * s3 * (n3 - s3) / n3) * (m4 - n3 / 2 < 0 ? -1 : 1);
      const newLeft = Math.max(left, Math.floor(k4 - m4 * s3 / n3 + sd));
      const newRight = Math.min(right, Math.floor(k4 + (n3 - m4) * s3 / n3 + sd));
      quickselect2(array6, k4, newLeft, newRight, compare);
    }
    const t2 = array6[k4];
    let i4 = left;
    let j4 = right;
    swap2(array6, left, k4);
    if (compare(array6[right], t2) > 0)
      swap2(array6, left, right);
    while (i4 < j4) {
      swap2(array6, i4, j4), ++i4, --j4;
      while (compare(array6[i4], t2) < 0)
        ++i4;
      while (compare(array6[j4], t2) > 0)
        --j4;
    }
    if (compare(array6[left], t2) === 0)
      swap2(array6, left, j4);
    else
      ++j4, swap2(array6, j4, right);
    if (j4 <= k4)
      left = j4 + 1;
    if (k4 <= j4)
      right = j4 - 1;
  }
  return array6;
}
function swap2(array6, i4, j4) {
  const t2 = array6[i4];
  array6[i4] = array6[j4];
  array6[j4] = t2;
}
var init_quickselect2 = __esm({
  "../../node_modules/d3-scale/node_modules/d3-array/src/quickselect.js"() {
    init_sort2();
  }
});

// ../../node_modules/d3-scale/node_modules/d3-array/src/quantile.js
function quantile2(values, p2, valueof) {
  values = Float64Array.from(numbers2(values, valueof));
  if (!(n3 = values.length))
    return;
  if ((p2 = +p2) <= 0 || n3 < 2)
    return min2(values);
  if (p2 >= 1)
    return max3(values);
  var n3, i4 = (n3 - 1) * p2, i0 = Math.floor(i4), value0 = max3(quickselect2(values, i0).subarray(0, i0 + 1)), value1 = min2(values.subarray(i0 + 1));
  return value0 + (value1 - value0) * (i4 - i0);
}
function quantileSorted2(values, p2, valueof = number2) {
  if (!(n3 = values.length))
    return;
  if ((p2 = +p2) <= 0 || n3 < 2)
    return +valueof(values[0], 0, values);
  if (p2 >= 1)
    return +valueof(values[n3 - 1], n3 - 1, values);
  var n3, i4 = (n3 - 1) * p2, i0 = Math.floor(i4), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i4 - i0);
}
var init_quantile2 = __esm({
  "../../node_modules/d3-scale/node_modules/d3-array/src/quantile.js"() {
    init_max2();
    init_min2();
    init_quickselect2();
    init_number2();
  }
});

// ../../node_modules/d3-scale/node_modules/d3-array/src/range.js
function range2(start2, stop, step) {
  start2 = +start2, stop = +stop, step = (n3 = arguments.length) < 2 ? (stop = start2, start2 = 0, 1) : n3 < 3 ? 1 : +step;
  var i4 = -1, n3 = Math.max(0, Math.ceil((stop - start2) / step)) | 0, range4 = new Array(n3);
  while (++i4 < n3) {
    range4[i4] = start2 + i4 * step;
  }
  return range4;
}
var init_range2 = __esm({
  "../../node_modules/d3-scale/node_modules/d3-array/src/range.js"() {
  }
});

// ../../node_modules/d3-scale/node_modules/d3-array/src/index.js
var init_src3 = __esm({
  "../../node_modules/d3-scale/node_modules/d3-array/src/index.js"() {
    init_bisect2();
    init_ascending2();
    init_quantile2();
    init_range2();
    init_ticks2();
    init_src();
  }
});

// ../../node_modules/d3-scale/src/init.js
function initRange(domain, range4) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range4).domain(domain);
      break;
  }
  return this;
}
function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;
    case 1: {
      if (typeof domain === "function")
        this.interpolator(domain);
      else
        this.range(domain);
      break;
    }
    default: {
      this.domain(domain);
      if (typeof interpolator === "function")
        this.interpolator(interpolator);
      else
        this.range(interpolator);
      break;
    }
  }
  return this;
}
var init_init = __esm({
  "../../node_modules/d3-scale/src/init.js"() {
  }
});

// ../../node_modules/d3-scale/src/ordinal.js
function ordinal() {
  var index2 = new InternMap(), domain = [], range4 = [], unknown = implicit;
  function scale(d2) {
    let i4 = index2.get(d2);
    if (i4 === void 0) {
      if (unknown !== implicit)
        return unknown;
      index2.set(d2, i4 = domain.push(d2) - 1);
    }
    return range4[i4 % range4.length];
  }
  scale.domain = function(_4) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index2 = new InternMap();
    for (const value of _4) {
      if (index2.has(value))
        continue;
      index2.set(value, domain.push(value) - 1);
    }
    return scale;
  };
  scale.range = function(_4) {
    return arguments.length ? (range4 = Array.from(_4), scale) : range4.slice();
  };
  scale.unknown = function(_4) {
    return arguments.length ? (unknown = _4, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range4).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}
var implicit;
var init_ordinal = __esm({
  "../../node_modules/d3-scale/src/ordinal.js"() {
    init_src3();
    init_init();
    implicit = Symbol("implicit");
  }
});

// ../../node_modules/d3-scale/src/band.js
function band() {
  var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale.unknown;
  function rescale() {
    var n3 = domain().length, reverse2 = r1 < r0, start2 = reverse2 ? r1 : r0, stop = reverse2 ? r0 : r1;
    step = (stop - start2) / Math.max(1, n3 - paddingInner + paddingOuter * 2);
    if (round)
      step = Math.floor(step);
    start2 += (stop - start2 - step * (n3 - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round)
      start2 = Math.round(start2), bandwidth = Math.round(bandwidth);
    var values = range2(n3).map(function(i4) {
      return start2 + step * i4;
    });
    return ordinalRange(reverse2 ? values.reverse() : values);
  }
  scale.domain = function(_4) {
    return arguments.length ? (domain(_4), rescale()) : domain();
  };
  scale.range = function(_4) {
    return arguments.length ? ([r0, r1] = _4, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale.rangeRound = function(_4) {
    return [r0, r1] = _4, r0 = +r0, r1 = +r1, round = true, rescale();
  };
  scale.bandwidth = function() {
    return bandwidth;
  };
  scale.step = function() {
    return step;
  };
  scale.round = function(_4) {
    return arguments.length ? (round = !!_4, rescale()) : round;
  };
  scale.padding = function(_4) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_4), rescale()) : paddingInner;
  };
  scale.paddingInner = function(_4) {
    return arguments.length ? (paddingInner = Math.min(1, _4), rescale()) : paddingInner;
  };
  scale.paddingOuter = function(_4) {
    return arguments.length ? (paddingOuter = +_4, rescale()) : paddingOuter;
  };
  scale.align = function(_4) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _4)), rescale()) : align;
  };
  scale.copy = function() {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}
function pointish(scale) {
  var copy4 = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;
  scale.copy = function() {
    return pointish(copy4());
  };
  return scale;
}
function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}
var init_band = __esm({
  "../../node_modules/d3-scale/src/band.js"() {
    init_src3();
    init_init();
    init_ordinal();
  }
});

// ../../node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}
var init_define = __esm({
  "../../node_modules/d3-color/src/define.js"() {
  }
});

// ../../node_modules/d3-color/src/color.js
function Color() {
}
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format4) {
  var m4, l3;
  format4 = (format4 + "").trim().toLowerCase();
  return (m4 = reHex.exec(format4)) ? (l3 = m4[1].length, m4 = parseInt(m4[1], 16), l3 === 6 ? rgbn(m4) : l3 === 3 ? new Rgb(m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, (m4 & 15) << 4 | m4 & 15, 1) : l3 === 8 ? rgba(m4 >> 24 & 255, m4 >> 16 & 255, m4 >> 8 & 255, (m4 & 255) / 255) : l3 === 4 ? rgba(m4 >> 12 & 15 | m4 >> 8 & 240, m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, ((m4 & 15) << 4 | m4 & 15) / 255) : null) : (m4 = reRgbInteger.exec(format4)) ? new Rgb(m4[1], m4[2], m4[3], 1) : (m4 = reRgbPercent.exec(format4)) ? new Rgb(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, 1) : (m4 = reRgbaInteger.exec(format4)) ? rgba(m4[1], m4[2], m4[3], m4[4]) : (m4 = reRgbaPercent.exec(format4)) ? rgba(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, m4[4]) : (m4 = reHslPercent.exec(format4)) ? hsla(m4[1], m4[2] / 100, m4[3] / 100, 1) : (m4 = reHslaPercent.exec(format4)) ? hsla(m4[1], m4[2] / 100, m4[3] / 100, m4[4]) : named.hasOwnProperty(format4) ? rgbn(named[format4]) : format4 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n3) {
  return new Rgb(n3 >> 16 & 255, n3 >> 8 & 255, n3 & 255, 1);
}
function rgba(r2, g3, b3, a5) {
  if (a5 <= 0)
    r2 = g3 = b3 = NaN;
  return new Rgb(r2, g3, b3, a5);
}
function rgbConvert(o2) {
  if (!(o2 instanceof Color))
    o2 = color(o2);
  if (!o2)
    return new Rgb();
  o2 = o2.rgb();
  return new Rgb(o2.r, o2.g, o2.b, o2.opacity);
}
function rgb(r2, g3, b3, opacity) {
  return arguments.length === 1 ? rgbConvert(r2) : new Rgb(r2, g3, b3, opacity == null ? 1 : opacity);
}
function Rgb(r2, g3, b3, opacity) {
  this.r = +r2;
  this.g = +g3;
  this.b = +b3;
  this.opacity = +opacity;
}
function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}
function rgb_formatRgb() {
  var a5 = this.opacity;
  a5 = isNaN(a5) ? 1 : Math.max(0, Math.min(1, a5));
  return (a5 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a5 === 1 ? ")" : ", " + a5 + ")");
}
function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h4, s3, l3, a5) {
  if (a5 <= 0)
    h4 = s3 = l3 = NaN;
  else if (l3 <= 0 || l3 >= 1)
    h4 = s3 = NaN;
  else if (s3 <= 0)
    h4 = NaN;
  return new Hsl(h4, s3, l3, a5);
}
function hslConvert(o2) {
  if (o2 instanceof Hsl)
    return new Hsl(o2.h, o2.s, o2.l, o2.opacity);
  if (!(o2 instanceof Color))
    o2 = color(o2);
  if (!o2)
    return new Hsl();
  if (o2 instanceof Hsl)
    return o2;
  o2 = o2.rgb();
  var r2 = o2.r / 255, g3 = o2.g / 255, b3 = o2.b / 255, min5 = Math.min(r2, g3, b3), max6 = Math.max(r2, g3, b3), h4 = NaN, s3 = max6 - min5, l3 = (max6 + min5) / 2;
  if (s3) {
    if (r2 === max6)
      h4 = (g3 - b3) / s3 + (g3 < b3) * 6;
    else if (g3 === max6)
      h4 = (b3 - r2) / s3 + 2;
    else
      h4 = (r2 - g3) / s3 + 4;
    s3 /= l3 < 0.5 ? max6 + min5 : 2 - max6 - min5;
    h4 *= 60;
  } else {
    s3 = l3 > 0 && l3 < 1 ? 0 : h4;
  }
  return new Hsl(h4, s3, l3, o2.opacity);
}
function hsl(h4, s3, l3, opacity) {
  return arguments.length === 1 ? hslConvert(h4) : new Hsl(h4, s3, l3, opacity == null ? 1 : opacity);
}
function Hsl(h4, s3, l3, opacity) {
  this.h = +h4;
  this.s = +s3;
  this.l = +l3;
  this.opacity = +opacity;
}
function hsl2rgb(h4, m1, m22) {
  return (h4 < 60 ? m1 + (m22 - m1) * h4 / 60 : h4 < 180 ? m22 : h4 < 240 ? m1 + (m22 - m1) * (240 - h4) / 60 : m1) * 255;
}
var darker, brighter, reI, reN, reP, reHex, reRgbInteger, reRgbPercent, reRgbaInteger, reRgbaPercent, reHslPercent, reHslaPercent, named;
var init_color = __esm({
  "../../node_modules/d3-color/src/color.js"() {
    init_define();
    darker = 0.7;
    brighter = 1 / darker;
    reI = "\\s*([+-]?\\d+)\\s*";
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
    reHex = /^#([0-9a-f]{3,8})$/;
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
    named = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    };
    define_default(Color, color, {
      copy: function(channels) {
        return Object.assign(new this.constructor(), this, channels);
      },
      displayable: function() {
        return this.rgb().displayable();
      },
      hex: color_formatHex,
      formatHex: color_formatHex,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });
    define_default(Rgb, rgb, extend(Color, {
      brighter: function(k4) {
        k4 = k4 == null ? brighter : Math.pow(brighter, k4);
        return new Rgb(this.r * k4, this.g * k4, this.b * k4, this.opacity);
      },
      darker: function(k4) {
        k4 = k4 == null ? darker : Math.pow(darker, k4);
        return new Rgb(this.r * k4, this.g * k4, this.b * k4, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex,
      formatHex: rgb_formatHex,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));
    define_default(Hsl, hsl, extend(Color, {
      brighter: function(k4) {
        k4 = k4 == null ? brighter : Math.pow(brighter, k4);
        return new Hsl(this.h, this.s, this.l * k4, this.opacity);
      },
      darker: function(k4) {
        k4 = k4 == null ? darker : Math.pow(darker, k4);
        return new Hsl(this.h, this.s, this.l * k4, this.opacity);
      },
      rgb: function() {
        var h4 = this.h % 360 + (this.h < 0) * 360, s3 = isNaN(h4) || isNaN(this.s) ? 0 : this.s, l3 = this.l, m22 = l3 + (l3 < 0.5 ? l3 : 1 - l3) * s3, m1 = 2 * l3 - m22;
        return new Rgb(
          hsl2rgb(h4 >= 240 ? h4 - 240 : h4 + 120, m1, m22),
          hsl2rgb(h4, m1, m22),
          hsl2rgb(h4 < 120 ? h4 + 240 : h4 - 120, m1, m22),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl: function() {
        var a5 = this.opacity;
        a5 = isNaN(a5) ? 1 : Math.max(0, Math.min(1, a5));
        return (a5 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a5 === 1 ? ")" : ", " + a5 + ")");
      }
    }));
  }
});

// ../../node_modules/d3-color/src/math.js
var radians, degrees;
var init_math = __esm({
  "../../node_modules/d3-color/src/math.js"() {
    radians = Math.PI / 180;
    degrees = 180 / Math.PI;
  }
});

// ../../node_modules/d3-color/src/cubehelix.js
function cubehelixConvert(o2) {
  if (o2 instanceof Cubehelix)
    return new Cubehelix(o2.h, o2.s, o2.l, o2.opacity);
  if (!(o2 instanceof Rgb))
    o2 = rgbConvert(o2);
  var r2 = o2.r / 255, g3 = o2.g / 255, b3 = o2.b / 255, l3 = (BC_DA * b3 + ED * r2 - EB * g3) / (BC_DA + ED - EB), bl = b3 - l3, k4 = (E4 * (g3 - l3) - C4 * bl) / D4, s3 = Math.sqrt(k4 * k4 + bl * bl) / (E4 * l3 * (1 - l3)), h4 = s3 ? Math.atan2(k4, bl) * degrees - 120 : NaN;
  return new Cubehelix(h4 < 0 ? h4 + 360 : h4, s3, l3, o2.opacity);
}
function cubehelix(h4, s3, l3, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h4) : new Cubehelix(h4, s3, l3, opacity == null ? 1 : opacity);
}
function Cubehelix(h4, s3, l3, opacity) {
  this.h = +h4;
  this.s = +s3;
  this.l = +l3;
  this.opacity = +opacity;
}
var A4, B4, C4, D4, E4, ED, EB, BC_DA;
var init_cubehelix = __esm({
  "../../node_modules/d3-color/src/cubehelix.js"() {
    init_define();
    init_color();
    init_math();
    A4 = -0.14861;
    B4 = 1.78277;
    C4 = -0.29227;
    D4 = -0.90649;
    E4 = 1.97294;
    ED = E4 * D4;
    EB = E4 * B4;
    BC_DA = B4 * C4 - D4 * A4;
    define_default(Cubehelix, cubehelix, extend(Color, {
      brighter: function(k4) {
        k4 = k4 == null ? brighter : Math.pow(brighter, k4);
        return new Cubehelix(this.h, this.s, this.l * k4, this.opacity);
      },
      darker: function(k4) {
        k4 = k4 == null ? darker : Math.pow(darker, k4);
        return new Cubehelix(this.h, this.s, this.l * k4, this.opacity);
      },
      rgb: function() {
        var h4 = isNaN(this.h) ? 0 : (this.h + 120) * radians, l3 = +this.l, a5 = isNaN(this.s) ? 0 : this.s * l3 * (1 - l3), cosh2 = Math.cos(h4), sinh2 = Math.sin(h4);
        return new Rgb(
          255 * (l3 + a5 * (A4 * cosh2 + B4 * sinh2)),
          255 * (l3 + a5 * (C4 * cosh2 + D4 * sinh2)),
          255 * (l3 + a5 * (E4 * cosh2)),
          this.opacity
        );
      }
    }));
  }
});

// ../../node_modules/d3-color/src/index.js
var init_src4 = __esm({
  "../../node_modules/d3-color/src/index.js"() {
    init_color();
    init_cubehelix();
  }
});

// ../../node_modules/d3-interpolate/src/basis.js
function basis(t12, v0, v1, v22, v32) {
  var t2 = t12 * t12, t3 = t2 * t12;
  return ((1 - 3 * t12 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t12 + 3 * t2 - 3 * t3) * v22 + t3 * v32) / 6;
}
function basis_default(values) {
  var n3 = values.length - 1;
  return function(t2) {
    var i4 = t2 <= 0 ? t2 = 0 : t2 >= 1 ? (t2 = 1, n3 - 1) : Math.floor(t2 * n3), v1 = values[i4], v22 = values[i4 + 1], v0 = i4 > 0 ? values[i4 - 1] : 2 * v1 - v22, v32 = i4 < n3 - 1 ? values[i4 + 2] : 2 * v22 - v1;
    return basis((t2 - i4 / n3) * n3, v0, v1, v22, v32);
  };
}
var init_basis = __esm({
  "../../node_modules/d3-interpolate/src/basis.js"() {
  }
});

// ../../node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n3 = values.length;
  return function(t2) {
    var i4 = Math.floor(((t2 %= 1) < 0 ? ++t2 : t2) * n3), v0 = values[(i4 + n3 - 1) % n3], v1 = values[i4 % n3], v22 = values[(i4 + 1) % n3], v32 = values[(i4 + 2) % n3];
    return basis((t2 - i4 / n3) * n3, v0, v1, v22, v32);
  };
}
var init_basisClosed = __esm({
  "../../node_modules/d3-interpolate/src/basisClosed.js"() {
    init_basis();
  }
});

// ../../node_modules/d3-interpolate/src/constant.js
var constant_default;
var init_constant2 = __esm({
  "../../node_modules/d3-interpolate/src/constant.js"() {
    constant_default = (x4) => () => x4;
  }
});

// ../../node_modules/d3-interpolate/src/color.js
function linear(a5, d2) {
  return function(t2) {
    return a5 + t2 * d2;
  };
}
function exponential(a5, b3, y3) {
  return a5 = Math.pow(a5, y3), b3 = Math.pow(b3, y3) - a5, y3 = 1 / y3, function(t2) {
    return Math.pow(a5 + t2 * b3, y3);
  };
}
function hue(a5, b3) {
  var d2 = b3 - a5;
  return d2 ? linear(a5, d2 > 180 || d2 < -180 ? d2 - 360 * Math.round(d2 / 360) : d2) : constant_default(isNaN(a5) ? b3 : a5);
}
function gamma(y3) {
  return (y3 = +y3) === 1 ? nogamma : function(a5, b3) {
    return b3 - a5 ? exponential(a5, b3, y3) : constant_default(isNaN(a5) ? b3 : a5);
  };
}
function nogamma(a5, b3) {
  var d2 = b3 - a5;
  return d2 ? linear(a5, d2) : constant_default(isNaN(a5) ? b3 : a5);
}
var init_color2 = __esm({
  "../../node_modules/d3-interpolate/src/color.js"() {
    init_constant2();
  }
});

// ../../node_modules/d3-interpolate/src/rgb.js
function rgbSpline(spline) {
  return function(colors) {
    var n3 = colors.length, r2 = new Array(n3), g3 = new Array(n3), b3 = new Array(n3), i4, color4;
    for (i4 = 0; i4 < n3; ++i4) {
      color4 = rgb(colors[i4]);
      r2[i4] = color4.r || 0;
      g3[i4] = color4.g || 0;
      b3[i4] = color4.b || 0;
    }
    r2 = spline(r2);
    g3 = spline(g3);
    b3 = spline(b3);
    color4.opacity = 1;
    return function(t2) {
      color4.r = r2(t2);
      color4.g = g3(t2);
      color4.b = b3(t2);
      return color4 + "";
    };
  };
}
var rgb_default, rgbBasis, rgbBasisClosed;
var init_rgb = __esm({
  "../../node_modules/d3-interpolate/src/rgb.js"() {
    init_src4();
    init_basis();
    init_basisClosed();
    init_color2();
    rgb_default = function rgbGamma(y3) {
      var color4 = gamma(y3);
      function rgb3(start2, end) {
        var r2 = color4((start2 = rgb(start2)).r, (end = rgb(end)).r), g3 = color4(start2.g, end.g), b3 = color4(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
        return function(t2) {
          start2.r = r2(t2);
          start2.g = g3(t2);
          start2.b = b3(t2);
          start2.opacity = opacity(t2);
          return start2 + "";
        };
      }
      rgb3.gamma = rgbGamma;
      return rgb3;
    }(1);
    rgbBasis = rgbSpline(basis_default);
    rgbBasisClosed = rgbSpline(basisClosed_default);
  }
});

// ../../node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a5, b3) {
  if (!b3)
    b3 = [];
  var n3 = a5 ? Math.min(b3.length, a5.length) : 0, c6 = b3.slice(), i4;
  return function(t2) {
    for (i4 = 0; i4 < n3; ++i4)
      c6[i4] = a5[i4] * (1 - t2) + b3[i4] * t2;
    return c6;
  };
}
function isNumberArray(x4) {
  return ArrayBuffer.isView(x4) && !(x4 instanceof DataView);
}
var init_numberArray = __esm({
  "../../node_modules/d3-interpolate/src/numberArray.js"() {
  }
});

// ../../node_modules/d3-interpolate/src/array.js
function genericArray(a5, b3) {
  var nb = b3 ? b3.length : 0, na2 = a5 ? Math.min(nb, a5.length) : 0, x4 = new Array(na2), c6 = new Array(nb), i4;
  for (i4 = 0; i4 < na2; ++i4)
    x4[i4] = value_default(a5[i4], b3[i4]);
  for (; i4 < nb; ++i4)
    c6[i4] = b3[i4];
  return function(t2) {
    for (i4 = 0; i4 < na2; ++i4)
      c6[i4] = x4[i4](t2);
    return c6;
  };
}
var init_array2 = __esm({
  "../../node_modules/d3-interpolate/src/array.js"() {
    init_value();
  }
});

// ../../node_modules/d3-interpolate/src/date.js
function date_default(a5, b3) {
  var d2 = new Date();
  return a5 = +a5, b3 = +b3, function(t2) {
    return d2.setTime(a5 * (1 - t2) + b3 * t2), d2;
  };
}
var init_date = __esm({
  "../../node_modules/d3-interpolate/src/date.js"() {
  }
});

// ../../node_modules/d3-interpolate/src/number.js
function number_default(a5, b3) {
  return a5 = +a5, b3 = +b3, function(t2) {
    return a5 * (1 - t2) + b3 * t2;
  };
}
var init_number3 = __esm({
  "../../node_modules/d3-interpolate/src/number.js"() {
  }
});

// ../../node_modules/d3-interpolate/src/object.js
function object_default(a5, b3) {
  var i4 = {}, c6 = {}, k4;
  if (a5 === null || typeof a5 !== "object")
    a5 = {};
  if (b3 === null || typeof b3 !== "object")
    b3 = {};
  for (k4 in b3) {
    if (k4 in a5) {
      i4[k4] = value_default(a5[k4], b3[k4]);
    } else {
      c6[k4] = b3[k4];
    }
  }
  return function(t2) {
    for (k4 in i4)
      c6[k4] = i4[k4](t2);
    return c6;
  };
}
var init_object = __esm({
  "../../node_modules/d3-interpolate/src/object.js"() {
    init_value();
  }
});

// ../../node_modules/d3-interpolate/src/string.js
function zero2(b3) {
  return function() {
    return b3;
  };
}
function one(b3) {
  return function(t2) {
    return b3(t2) + "";
  };
}
function string_default(a5, b3) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i4 = -1, s3 = [], q4 = [];
  a5 = a5 + "", b3 = b3 + "";
  while ((am = reA.exec(a5)) && (bm = reB.exec(b3))) {
    if ((bs = bm.index) > bi) {
      bs = b3.slice(bi, bs);
      if (s3[i4])
        s3[i4] += bs;
      else
        s3[++i4] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s3[i4])
        s3[i4] += bm;
      else
        s3[++i4] = bm;
    } else {
      s3[++i4] = null;
      q4.push({ i: i4, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b3.length) {
    bs = b3.slice(bi);
    if (s3[i4])
      s3[i4] += bs;
    else
      s3[++i4] = bs;
  }
  return s3.length < 2 ? q4[0] ? one(q4[0].x) : zero2(b3) : (b3 = q4.length, function(t2) {
    for (var i5 = 0, o2; i5 < b3; ++i5)
      s3[(o2 = q4[i5]).i] = o2.x(t2);
    return s3.join("");
  });
}
var reA, reB;
var init_string = __esm({
  "../../node_modules/d3-interpolate/src/string.js"() {
    init_number3();
    reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
    reB = new RegExp(reA.source, "g");
  }
});

// ../../node_modules/d3-interpolate/src/value.js
function value_default(a5, b3) {
  var t2 = typeof b3, c6;
  return b3 == null || t2 === "boolean" ? constant_default(b3) : (t2 === "number" ? number_default : t2 === "string" ? (c6 = color(b3)) ? (b3 = c6, rgb_default) : string_default : b3 instanceof color ? rgb_default : b3 instanceof Date ? date_default : isNumberArray(b3) ? numberArray_default : Array.isArray(b3) ? genericArray : typeof b3.valueOf !== "function" && typeof b3.toString !== "function" || isNaN(b3) ? object_default : number_default)(a5, b3);
}
var init_value = __esm({
  "../../node_modules/d3-interpolate/src/value.js"() {
    init_src4();
    init_rgb();
    init_array2();
    init_date();
    init_number3();
    init_object();
    init_string();
    init_constant2();
    init_numberArray();
  }
});

// ../../node_modules/d3-interpolate/src/round.js
function round_default(a5, b3) {
  return a5 = +a5, b3 = +b3, function(t2) {
    return Math.round(a5 * (1 - t2) + b3 * t2);
  };
}
var init_round = __esm({
  "../../node_modules/d3-interpolate/src/round.js"() {
  }
});

// ../../node_modules/d3-interpolate/src/transform/decompose.js
function decompose_default(a5, b3, c6, d2, e3, f4) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a5 * a5 + b3 * b3))
    a5 /= scaleX, b3 /= scaleX;
  if (skewX = a5 * c6 + b3 * d2)
    c6 -= a5 * skewX, d2 -= b3 * skewX;
  if (scaleY = Math.sqrt(c6 * c6 + d2 * d2))
    c6 /= scaleY, d2 /= scaleY, skewX /= scaleY;
  if (a5 * d2 < b3 * c6)
    a5 = -a5, b3 = -b3, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e3,
    translateY: f4,
    rotate: Math.atan2(b3, a5) * degrees2,
    skewX: Math.atan(skewX) * degrees2,
    scaleX,
    scaleY
  };
}
var degrees2, identity2;
var init_decompose = __esm({
  "../../node_modules/d3-interpolate/src/transform/decompose.js"() {
    degrees2 = 180 / Math.PI;
    identity2 = {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      scaleX: 1,
      scaleY: 1
    };
  }
});

// ../../node_modules/d3-interpolate/src/transform/parse.js
function parseCss(value) {
  const m4 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m4.isIdentity ? identity2 : decompose_default(m4.a, m4.b, m4.c, m4.d, m4.e, m4.f);
}
function parseSvg(value) {
  if (value == null)
    return identity2;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity2;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}
var svgNode;
var init_parse = __esm({
  "../../node_modules/d3-interpolate/src/transform/parse.js"() {
    init_decompose();
  }
});

// ../../node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse2, pxComma, pxParen, degParen) {
  function pop(s3) {
    return s3.length ? s3.pop() + " " : "";
  }
  function translate(xa2, ya2, xb, yb, s3, q4) {
    if (xa2 !== xb || ya2 !== yb) {
      var i4 = s3.push("translate(", null, pxComma, null, pxParen);
      q4.push({ i: i4 - 4, x: number_default(xa2, xb) }, { i: i4 - 2, x: number_default(ya2, yb) });
    } else if (xb || yb) {
      s3.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a5, b3, s3, q4) {
    if (a5 !== b3) {
      if (a5 - b3 > 180)
        b3 += 360;
      else if (b3 - a5 > 180)
        a5 += 360;
      q4.push({ i: s3.push(pop(s3) + "rotate(", null, degParen) - 2, x: number_default(a5, b3) });
    } else if (b3) {
      s3.push(pop(s3) + "rotate(" + b3 + degParen);
    }
  }
  function skewX(a5, b3, s3, q4) {
    if (a5 !== b3) {
      q4.push({ i: s3.push(pop(s3) + "skewX(", null, degParen) - 2, x: number_default(a5, b3) });
    } else if (b3) {
      s3.push(pop(s3) + "skewX(" + b3 + degParen);
    }
  }
  function scale(xa2, ya2, xb, yb, s3, q4) {
    if (xa2 !== xb || ya2 !== yb) {
      var i4 = s3.push(pop(s3) + "scale(", null, ",", null, ")");
      q4.push({ i: i4 - 4, x: number_default(xa2, xb) }, { i: i4 - 2, x: number_default(ya2, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s3.push(pop(s3) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a5, b3) {
    var s3 = [], q4 = [];
    a5 = parse2(a5), b3 = parse2(b3);
    translate(a5.translateX, a5.translateY, b3.translateX, b3.translateY, s3, q4);
    rotate(a5.rotate, b3.rotate, s3, q4);
    skewX(a5.skewX, b3.skewX, s3, q4);
    scale(a5.scaleX, a5.scaleY, b3.scaleX, b3.scaleY, s3, q4);
    a5 = b3 = null;
    return function(t2) {
      var i4 = -1, n3 = q4.length, o2;
      while (++i4 < n3)
        s3[(o2 = q4[i4]).i] = o2.x(t2);
      return s3.join("");
    };
  };
}
var interpolateTransformCss, interpolateTransformSvg;
var init_transform = __esm({
  "../../node_modules/d3-interpolate/src/transform/index.js"() {
    init_number3();
    init_parse();
    interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
  }
});

// ../../node_modules/d3-interpolate/src/zoom.js
function cosh(x4) {
  return ((x4 = Math.exp(x4)) + 1 / x4) / 2;
}
function sinh(x4) {
  return ((x4 = Math.exp(x4)) - 1 / x4) / 2;
}
function tanh(x4) {
  return ((x4 = Math.exp(2 * x4)) - 1) / (x4 + 1);
}
var epsilon2, zoom_default;
var init_zoom = __esm({
  "../../node_modules/d3-interpolate/src/zoom.js"() {
    epsilon2 = 1e-12;
    zoom_default = function zoomRho(rho, rho2, rho4) {
      function zoom(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i4, S3;
        if (d2 < epsilon2) {
          S3 = Math.log(w1 / w0) / rho;
          i4 = function(t2) {
            return [
              ux0 + t2 * dx,
              uy0 + t2 * dy,
              w0 * Math.exp(rho * t2 * S3)
            ];
          };
        } else {
          var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
          S3 = (r1 - r0) / rho;
          i4 = function(t2) {
            var s3 = t2 * S3, coshr0 = cosh(r0), u3 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s3 + r0) - sinh(r0));
            return [
              ux0 + u3 * dx,
              uy0 + u3 * dy,
              w0 * coshr0 / cosh(rho * s3 + r0)
            ];
          };
        }
        i4.duration = S3 * 1e3 * rho / Math.SQRT2;
        return i4;
      }
      zoom.rho = function(_4) {
        var _1 = Math.max(1e-3, +_4), _22 = _1 * _1, _42 = _22 * _22;
        return zoomRho(_1, _22, _42);
      };
      return zoom;
    }(Math.SQRT2, 2, 4);
  }
});

// ../../node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue3) {
  return function cubehelixGamma(y3) {
    y3 = +y3;
    function cubehelix5(start2, end) {
      var h4 = hue3((start2 = cubehelix(start2)).h, (end = cubehelix(end)).h), s3 = nogamma(start2.s, end.s), l3 = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
      return function(t2) {
        start2.h = h4(t2);
        start2.s = s3(t2);
        start2.l = l3(Math.pow(t2, y3));
        start2.opacity = opacity(t2);
        return start2 + "";
      };
    }
    cubehelix5.gamma = cubehelixGamma;
    return cubehelix5;
  }(1);
}
var cubehelix_default, cubehelixLong;
var init_cubehelix2 = __esm({
  "../../node_modules/d3-interpolate/src/cubehelix.js"() {
    init_src4();
    init_color2();
    cubehelix_default = cubehelix2(hue);
    cubehelixLong = cubehelix2(nogamma);
  }
});

// ../../node_modules/d3-interpolate/src/piecewise.js
function piecewise(interpolate, values) {
  if (values === void 0)
    values = interpolate, interpolate = value_default;
  var i4 = 0, n3 = values.length - 1, v4 = values[0], I4 = new Array(n3 < 0 ? 0 : n3);
  while (i4 < n3)
    I4[i4] = interpolate(v4, v4 = values[++i4]);
  return function(t2) {
    var i5 = Math.max(0, Math.min(n3 - 1, Math.floor(t2 *= n3)));
    return I4[i5](t2 - i5);
  };
}
var init_piecewise = __esm({
  "../../node_modules/d3-interpolate/src/piecewise.js"() {
    init_value();
  }
});

// ../../node_modules/d3-interpolate/src/index.js
var init_src5 = __esm({
  "../../node_modules/d3-interpolate/src/index.js"() {
    init_value();
    init_number3();
    init_round();
    init_string();
    init_transform();
    init_zoom();
    init_rgb();
    init_cubehelix2();
    init_piecewise();
  }
});

// ../../node_modules/d3-scale/src/constant.js
function constants(x4) {
  return function() {
    return x4;
  };
}
var init_constant3 = __esm({
  "../../node_modules/d3-scale/src/constant.js"() {
  }
});

// ../../node_modules/d3-scale/src/number.js
function number3(x4) {
  return +x4;
}
var init_number4 = __esm({
  "../../node_modules/d3-scale/src/number.js"() {
  }
});

// ../../node_modules/d3-scale/src/continuous.js
function identity3(x4) {
  return x4;
}
function normalize(a5, b3) {
  return (b3 -= a5 = +a5) ? function(x4) {
    return (x4 - a5) / b3;
  } : constants(isNaN(b3) ? NaN : 0.5);
}
function clamper(a5, b3) {
  var t2;
  if (a5 > b3)
    t2 = a5, a5 = b3, b3 = t2;
  return function(x4) {
    return Math.max(a5, Math.min(b3, x4));
  };
}
function bimap(domain, range4, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range4[0], r1 = range4[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x4) {
    return r0(d0(x4));
  };
}
function polymap(domain, range4, interpolate) {
  var j4 = Math.min(domain.length, range4.length) - 1, d2 = new Array(j4), r2 = new Array(j4), i4 = -1;
  if (domain[j4] < domain[0]) {
    domain = domain.slice().reverse();
    range4 = range4.slice().reverse();
  }
  while (++i4 < j4) {
    d2[i4] = normalize(domain[i4], domain[i4 + 1]);
    r2[i4] = interpolate(range4[i4], range4[i4 + 1]);
  }
  return function(x4) {
    var i5 = bisect_default2(domain, x4, 1, j4) - 1;
    return r2[i5](d2[i5](x4));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range4 = unit, interpolate = value_default, transform2, untransform, unknown, clamp = identity3, piecewise2, output, input;
  function rescale() {
    var n3 = Math.min(domain.length, range4.length);
    if (clamp !== identity3)
      clamp = clamper(domain[0], domain[n3 - 1]);
    piecewise2 = n3 > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x4) {
    return x4 == null || isNaN(x4 = +x4) ? unknown : (output || (output = piecewise2(domain.map(transform2), range4, interpolate)))(transform2(clamp(x4)));
  }
  scale.invert = function(y3) {
    return clamp(untransform((input || (input = piecewise2(range4, domain.map(transform2), number_default)))(y3)));
  };
  scale.domain = function(_4) {
    return arguments.length ? (domain = Array.from(_4, number3), rescale()) : domain.slice();
  };
  scale.range = function(_4) {
    return arguments.length ? (range4 = Array.from(_4), rescale()) : range4.slice();
  };
  scale.rangeRound = function(_4) {
    return range4 = Array.from(_4), interpolate = round_default, rescale();
  };
  scale.clamp = function(_4) {
    return arguments.length ? (clamp = _4 ? true : identity3, rescale()) : clamp !== identity3;
  };
  scale.interpolate = function(_4) {
    return arguments.length ? (interpolate = _4, rescale()) : interpolate;
  };
  scale.unknown = function(_4) {
    return arguments.length ? (unknown = _4, scale) : unknown;
  };
  return function(t2, u3) {
    transform2 = t2, untransform = u3;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity3, identity3);
}
var unit;
var init_continuous = __esm({
  "../../node_modules/d3-scale/src/continuous.js"() {
    init_src3();
    init_src5();
    init_constant3();
    init_number4();
    unit = [0, 1];
  }
});

// ../../node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x4) {
  return Math.abs(x4 = Math.round(x4)) >= 1e21 ? x4.toLocaleString("en").replace(/,/g, "") : x4.toString(10);
}
function formatDecimalParts(x4, p2) {
  if ((i4 = (x4 = p2 ? x4.toExponential(p2 - 1) : x4.toExponential()).indexOf("e")) < 0)
    return null;
  var i4, coefficient = x4.slice(0, i4);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x4.slice(i4 + 1)
  ];
}
var init_formatDecimal = __esm({
  "../../node_modules/d3-format/src/formatDecimal.js"() {
  }
});

// ../../node_modules/d3-format/src/exponent.js
function exponent_default(x4) {
  return x4 = formatDecimalParts(Math.abs(x4)), x4 ? x4[1] : NaN;
}
var init_exponent = __esm({
  "../../node_modules/d3-format/src/exponent.js"() {
    init_formatDecimal();
  }
});

// ../../node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i4 = value.length, t2 = [], j4 = 0, g3 = grouping[0], length3 = 0;
    while (i4 > 0 && g3 > 0) {
      if (length3 + g3 + 1 > width)
        g3 = Math.max(1, width - length3);
      t2.push(value.substring(i4 -= g3, i4 + g3));
      if ((length3 += g3 + 1) > width)
        break;
      g3 = grouping[j4 = (j4 + 1) % grouping.length];
    }
    return t2.reverse().join(thousands);
  };
}
var init_formatGroup = __esm({
  "../../node_modules/d3-format/src/formatGroup.js"() {
  }
});

// ../../node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i4) {
      return numerals[+i4];
    });
  };
}
var init_formatNumerals = __esm({
  "../../node_modules/d3-format/src/formatNumerals.js"() {
  }
});

// ../../node_modules/d3-format/src/formatSpecifier.js
function formatSpecifier(specifier) {
  if (!(match = re4.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
var re4;
var init_formatSpecifier = __esm({
  "../../node_modules/d3-format/src/formatSpecifier.js"() {
    re4 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
    formatSpecifier.prototype = FormatSpecifier.prototype;
    FormatSpecifier.prototype.toString = function() {
      return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
    };
  }
});

// ../../node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s3) {
  out:
    for (var n3 = s3.length, i4 = 1, i0 = -1, i1; i4 < n3; ++i4) {
      switch (s3[i4]) {
        case ".":
          i0 = i1 = i4;
          break;
        case "0":
          if (i0 === 0)
            i0 = i4;
          i1 = i4;
          break;
        default:
          if (!+s3[i4])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s3.slice(0, i0) + s3.slice(i1 + 1) : s3;
}
var init_formatTrim = __esm({
  "../../node_modules/d3-format/src/formatTrim.js"() {
  }
});

// ../../node_modules/d3-format/src/formatPrefixAuto.js
function formatPrefixAuto_default(x4, p2) {
  var d2 = formatDecimalParts(x4, p2);
  if (!d2)
    return x4 + "";
  var coefficient = d2[0], exponent = d2[1], i4 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n3 = coefficient.length;
  return i4 === n3 ? coefficient : i4 > n3 ? coefficient + new Array(i4 - n3 + 1).join("0") : i4 > 0 ? coefficient.slice(0, i4) + "." + coefficient.slice(i4) : "0." + new Array(1 - i4).join("0") + formatDecimalParts(x4, Math.max(0, p2 + i4 - 1))[0];
}
var prefixExponent;
var init_formatPrefixAuto = __esm({
  "../../node_modules/d3-format/src/formatPrefixAuto.js"() {
    init_formatDecimal();
  }
});

// ../../node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x4, p2) {
  var d2 = formatDecimalParts(x4, p2);
  if (!d2)
    return x4 + "";
  var coefficient = d2[0], exponent = d2[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}
var init_formatRounded = __esm({
  "../../node_modules/d3-format/src/formatRounded.js"() {
    init_formatDecimal();
  }
});

// ../../node_modules/d3-format/src/formatTypes.js
var formatTypes_default;
var init_formatTypes = __esm({
  "../../node_modules/d3-format/src/formatTypes.js"() {
    init_formatDecimal();
    init_formatPrefixAuto();
    init_formatRounded();
    formatTypes_default = {
      "%": (x4, p2) => (x4 * 100).toFixed(p2),
      "b": (x4) => Math.round(x4).toString(2),
      "c": (x4) => x4 + "",
      "d": formatDecimal_default,
      "e": (x4, p2) => x4.toExponential(p2),
      "f": (x4, p2) => x4.toFixed(p2),
      "g": (x4, p2) => x4.toPrecision(p2),
      "o": (x4) => Math.round(x4).toString(8),
      "p": (x4, p2) => formatRounded_default(x4 * 100, p2),
      "r": formatRounded_default,
      "s": formatPrefixAuto_default,
      "X": (x4) => Math.round(x4).toString(16).toUpperCase(),
      "x": (x4) => Math.round(x4).toString(16)
    };
  }
});

// ../../node_modules/d3-format/src/identity.js
function identity_default(x4) {
  return x4;
}
var init_identity2 = __esm({
  "../../node_modules/d3-format/src/identity.js"() {
  }
});

// ../../node_modules/d3-format/src/locale.js
function locale_default(locale5) {
  var group2 = locale5.grouping === void 0 || locale5.thousands === void 0 ? identity_default : formatGroup_default(map3.call(locale5.grouping, Number), locale5.thousands + ""), currencyPrefix = locale5.currency === void 0 ? "" : locale5.currency[0] + "", currencySuffix = locale5.currency === void 0 ? "" : locale5.currency[1] + "", decimal = locale5.decimal === void 0 ? "." : locale5.decimal + "", numerals = locale5.numerals === void 0 ? identity_default : formatNumerals_default(map3.call(locale5.numerals, String)), percent = locale5.percent === void 0 ? "%" : locale5.percent + "", minus = locale5.minus === void 0 ? "\u2212" : locale5.minus + "", nan = locale5.nan === void 0 ? "NaN" : locale5.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol2 = specifier.symbol, zero4 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
    if (type2 === "n")
      comma = true, type2 = "g";
    else if (!formatTypes_default[type2])
      precision === void 0 && (precision = 12), trim = true, type2 = "g";
    if (zero4 || fill === "0" && align === "=")
      zero4 = true, fill = "0", align = "=";
    var prefix2 = symbol2 === "$" ? currencyPrefix : symbol2 === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol2 === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
    var formatType = formatTypes_default[type2], maybeSuffix = /[defgprs%]/.test(type2);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format4(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i4, n3, c6;
      if (type2 === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign2 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i4 = -1, n3 = value.length;
          while (++i4 < n3) {
            if (c6 = value.charCodeAt(i4), 48 > c6 || c6 > 57) {
              valueSuffix = (c6 === 46 ? decimal + value.slice(i4 + 1) : value.slice(i4)) + valueSuffix;
              value = value.slice(0, i4);
              break;
            }
          }
        }
      }
      if (comma && !zero4)
        value = group2(value, Infinity);
      var length3 = valuePrefix.length + value.length + valueSuffix.length, padding = length3 < width ? new Array(width - length3 + 1).join(fill) : "";
      if (comma && zero4)
        value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length3 = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length3);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format4.toString = function() {
      return specifier + "";
    };
    return format4;
  }
  function formatPrefix4(specifier, value) {
    var f4 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e3 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k4 = Math.pow(10, -e3), prefix2 = prefixes[8 + e3 / 3];
    return function(value2) {
      return f4(k4 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix4
  };
}
var map3, prefixes;
var init_locale = __esm({
  "../../node_modules/d3-format/src/locale.js"() {
    init_exponent();
    init_formatGroup();
    init_formatNumerals();
    init_formatSpecifier();
    init_formatTrim();
    init_formatTypes();
    init_formatPrefixAuto();
    init_identity2();
    map3 = Array.prototype.map;
    prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  }
});

// ../../node_modules/d3-format/src/defaultLocale.js
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}
var locale, format, formatPrefix;
var init_defaultLocale = __esm({
  "../../node_modules/d3-format/src/defaultLocale.js"() {
    init_locale();
    defaultLocale({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });
  }
});

// ../../node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}
var init_precisionFixed = __esm({
  "../../node_modules/d3-format/src/precisionFixed.js"() {
    init_exponent();
  }
});

// ../../node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}
var init_precisionPrefix = __esm({
  "../../node_modules/d3-format/src/precisionPrefix.js"() {
    init_exponent();
  }
});

// ../../node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max6) {
  step = Math.abs(step), max6 = Math.abs(max6) - step;
  return Math.max(0, exponent_default(max6) - exponent_default(step)) + 1;
}
var init_precisionRound = __esm({
  "../../node_modules/d3-format/src/precisionRound.js"() {
    init_exponent();
  }
});

// ../../node_modules/d3-format/src/index.js
var init_src6 = __esm({
  "../../node_modules/d3-format/src/index.js"() {
    init_defaultLocale();
    init_formatSpecifier();
    init_precisionFixed();
    init_precisionPrefix();
    init_precisionRound();
  }
});

// ../../node_modules/d3-scale/src/tickFormat.js
function tickFormat(start2, stop, count3, specifier) {
  var step = tickStep2(start2, stop, count3), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}
var init_tickFormat = __esm({
  "../../node_modules/d3-scale/src/tickFormat.js"() {
    init_src3();
    init_src6();
  }
});

// ../../node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count3) {
    var d2 = domain();
    return ticks2(d2[0], d2[d2.length - 1], count3 == null ? 10 : count3);
  };
  scale.tickFormat = function(count3, specifier) {
    var d2 = domain();
    return tickFormat(d2[0], d2[d2.length - 1], count3 == null ? 10 : count3, specifier);
  };
  scale.nice = function(count3) {
    if (count3 == null)
      count3 = 10;
    var d2 = domain();
    var i0 = 0;
    var i1 = d2.length - 1;
    var start2 = d2[i0];
    var stop = d2[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start2) {
      step = start2, start2 = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement2(start2, stop, count3);
      if (step === prestep) {
        d2[i0] = start2;
        d2[i1] = stop;
        return domain(d2);
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear2() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear2());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}
var init_linear = __esm({
  "../../node_modules/d3-scale/src/linear.js"() {
    init_src3();
    init_continuous();
    init_init();
    init_tickFormat();
  }
});

// ../../node_modules/d3-scale/src/identity.js
function identity4(domain) {
  var unknown;
  function scale(x4) {
    return x4 == null || isNaN(x4 = +x4) ? unknown : x4;
  }
  scale.invert = scale;
  scale.domain = scale.range = function(_4) {
    return arguments.length ? (domain = Array.from(_4, number3), scale) : domain.slice();
  };
  scale.unknown = function(_4) {
    return arguments.length ? (unknown = _4, scale) : unknown;
  };
  scale.copy = function() {
    return identity4(domain).unknown(unknown);
  };
  domain = arguments.length ? Array.from(domain, number3) : [0, 1];
  return linearish(scale);
}
var init_identity3 = __esm({
  "../../node_modules/d3-scale/src/identity.js"() {
    init_linear();
    init_number4();
  }
});

// ../../node_modules/d3-scale/src/nice.js
function nice2(domain, interval2) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t2;
  if (x1 < x0) {
    t2 = i0, i0 = i1, i1 = t2;
    t2 = x0, x0 = x1, x1 = t2;
  }
  domain[i0] = interval2.floor(x0);
  domain[i1] = interval2.ceil(x1);
  return domain;
}
var init_nice2 = __esm({
  "../../node_modules/d3-scale/src/nice.js"() {
  }
});

// ../../node_modules/d3-scale/src/log.js
function transformLog(x4) {
  return Math.log(x4);
}
function transformExp(x4) {
  return Math.exp(x4);
}
function transformLogn(x4) {
  return -Math.log(-x4);
}
function transformExpn(x4) {
  return -Math.exp(-x4);
}
function pow10(x4) {
  return isFinite(x4) ? +("1e" + x4) : x4 < 0 ? 0 : x4;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : (x4) => Math.pow(base, x4);
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x4) => Math.log(x4) / base);
}
function reflect(f4) {
  return (x4, k4) => -f4(-x4, k4);
}
function loggish(transform2) {
  const scale = transform2(transformLog, transformExp);
  const domain = scale.domain;
  let base = 10;
  let logs;
  let pows;
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform2(transformLogn, transformExpn);
    } else {
      transform2(transformLog, transformExp);
    }
    return scale;
  }
  scale.base = function(_4) {
    return arguments.length ? (base = +_4, rescale()) : base;
  };
  scale.domain = function(_4) {
    return arguments.length ? (domain(_4), rescale()) : domain();
  };
  scale.ticks = (count3) => {
    const d2 = domain();
    let u3 = d2[0];
    let v4 = d2[d2.length - 1];
    const r2 = v4 < u3;
    if (r2)
      [u3, v4] = [v4, u3];
    let i4 = logs(u3);
    let j4 = logs(v4);
    let k4;
    let t2;
    const n3 = count3 == null ? 10 : +count3;
    let z3 = [];
    if (!(base % 1) && j4 - i4 < n3) {
      i4 = Math.floor(i4), j4 = Math.ceil(j4);
      if (u3 > 0)
        for (; i4 <= j4; ++i4) {
          for (k4 = 1; k4 < base; ++k4) {
            t2 = i4 < 0 ? k4 / pows(-i4) : k4 * pows(i4);
            if (t2 < u3)
              continue;
            if (t2 > v4)
              break;
            z3.push(t2);
          }
        }
      else
        for (; i4 <= j4; ++i4) {
          for (k4 = base - 1; k4 >= 1; --k4) {
            t2 = i4 > 0 ? k4 / pows(-i4) : k4 * pows(i4);
            if (t2 < u3)
              continue;
            if (t2 > v4)
              break;
            z3.push(t2);
          }
        }
      if (z3.length * 2 < n3)
        z3 = ticks2(u3, v4, n3);
    } else {
      z3 = ticks2(i4, j4, Math.min(j4 - i4, n3)).map(pows);
    }
    return r2 ? z3.reverse() : z3;
  };
  scale.tickFormat = (count3, specifier) => {
    if (count3 == null)
      count3 = 10;
    if (specifier == null)
      specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null)
        specifier.trim = true;
      specifier = format(specifier);
    }
    if (count3 === Infinity)
      return specifier;
    const k4 = Math.max(1, base * count3 / scale.ticks().length);
    return (d2) => {
      let i4 = d2 / pows(Math.round(logs(d2)));
      if (i4 * base < base - 0.5)
        i4 *= base;
      return i4 <= k4 ? specifier(d2) : "";
    };
  };
  scale.nice = () => {
    return domain(nice2(domain(), {
      floor: (x4) => pows(Math.floor(logs(x4))),
      ceil: (x4) => pows(Math.ceil(logs(x4)))
    }));
  };
  return scale;
}
function log() {
  const scale = loggish(transformer()).domain([1, 10]);
  scale.copy = () => copy(scale, log()).base(scale.base());
  initRange.apply(scale, arguments);
  return scale;
}
var init_log = __esm({
  "../../node_modules/d3-scale/src/log.js"() {
    init_src3();
    init_src6();
    init_nice2();
    init_continuous();
    init_init();
  }
});

// ../../node_modules/d3-scale/src/symlog.js
function transformSymlog(c6) {
  return function(x4) {
    return Math.sign(x4) * Math.log1p(Math.abs(x4 / c6));
  };
}
function transformSymexp(c6) {
  return function(x4) {
    return Math.sign(x4) * Math.expm1(Math.abs(x4)) * c6;
  };
}
function symlogish(transform2) {
  var c6 = 1, scale = transform2(transformSymlog(c6), transformSymexp(c6));
  scale.constant = function(_4) {
    return arguments.length ? transform2(transformSymlog(c6 = +_4), transformSymexp(c6)) : c6;
  };
  return linearish(scale);
}
function symlog() {
  var scale = symlogish(transformer());
  scale.copy = function() {
    return copy(scale, symlog()).constant(scale.constant());
  };
  return initRange.apply(scale, arguments);
}
var init_symlog = __esm({
  "../../node_modules/d3-scale/src/symlog.js"() {
    init_linear();
    init_continuous();
    init_init();
  }
});

// ../../node_modules/d3-scale/src/pow.js
function transformPow(exponent) {
  return function(x4) {
    return x4 < 0 ? -Math.pow(-x4, exponent) : Math.pow(x4, exponent);
  };
}
function transformSqrt(x4) {
  return x4 < 0 ? -Math.sqrt(-x4) : Math.sqrt(x4);
}
function transformSquare(x4) {
  return x4 < 0 ? -x4 * x4 : x4 * x4;
}
function powish(transform2) {
  var scale = transform2(identity3, identity3), exponent = 1;
  function rescale() {
    return exponent === 1 ? transform2(identity3, identity3) : exponent === 0.5 ? transform2(transformSqrt, transformSquare) : transform2(transformPow(exponent), transformPow(1 / exponent));
  }
  scale.exponent = function(_4) {
    return arguments.length ? (exponent = +_4, rescale()) : exponent;
  };
  return linearish(scale);
}
function pow() {
  var scale = powish(transformer());
  scale.copy = function() {
    return copy(scale, pow()).exponent(scale.exponent());
  };
  initRange.apply(scale, arguments);
  return scale;
}
function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}
var init_pow = __esm({
  "../../node_modules/d3-scale/src/pow.js"() {
    init_linear();
    init_continuous();
    init_init();
  }
});

// ../../node_modules/d3-scale/src/radial.js
function square(x4) {
  return Math.sign(x4) * x4 * x4;
}
function unsquare(x4) {
  return Math.sign(x4) * Math.sqrt(Math.abs(x4));
}
function radial() {
  var squared = continuous(), range4 = [0, 1], round = false, unknown;
  function scale(x4) {
    var y3 = unsquare(squared(x4));
    return isNaN(y3) ? unknown : round ? Math.round(y3) : y3;
  }
  scale.invert = function(y3) {
    return squared.invert(square(y3));
  };
  scale.domain = function(_4) {
    return arguments.length ? (squared.domain(_4), scale) : squared.domain();
  };
  scale.range = function(_4) {
    return arguments.length ? (squared.range((range4 = Array.from(_4, number3)).map(square)), scale) : range4.slice();
  };
  scale.rangeRound = function(_4) {
    return scale.range(_4).round(true);
  };
  scale.round = function(_4) {
    return arguments.length ? (round = !!_4, scale) : round;
  };
  scale.clamp = function(_4) {
    return arguments.length ? (squared.clamp(_4), scale) : squared.clamp();
  };
  scale.unknown = function(_4) {
    return arguments.length ? (unknown = _4, scale) : unknown;
  };
  scale.copy = function() {
    return radial(squared.domain(), range4).round(round).clamp(squared.clamp()).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}
var init_radial = __esm({
  "../../node_modules/d3-scale/src/radial.js"() {
    init_continuous();
    init_init();
    init_linear();
    init_number4();
  }
});

// ../../node_modules/d3-scale/src/quantile.js
function quantile3() {
  var domain = [], range4 = [], thresholds = [], unknown;
  function rescale() {
    var i4 = 0, n3 = Math.max(1, range4.length);
    thresholds = new Array(n3 - 1);
    while (++i4 < n3)
      thresholds[i4 - 1] = quantileSorted2(domain, i4 / n3);
    return scale;
  }
  function scale(x4) {
    return x4 == null || isNaN(x4 = +x4) ? unknown : range4[bisect_default2(thresholds, x4)];
  }
  scale.invertExtent = function(y3) {
    var i4 = range4.indexOf(y3);
    return i4 < 0 ? [NaN, NaN] : [
      i4 > 0 ? thresholds[i4 - 1] : domain[0],
      i4 < thresholds.length ? thresholds[i4] : domain[domain.length - 1]
    ];
  };
  scale.domain = function(_4) {
    if (!arguments.length)
      return domain.slice();
    domain = [];
    for (let d2 of _4)
      if (d2 != null && !isNaN(d2 = +d2))
        domain.push(d2);
    domain.sort(ascending2);
    return rescale();
  };
  scale.range = function(_4) {
    return arguments.length ? (range4 = Array.from(_4), rescale()) : range4.slice();
  };
  scale.unknown = function(_4) {
    return arguments.length ? (unknown = _4, scale) : unknown;
  };
  scale.quantiles = function() {
    return thresholds.slice();
  };
  scale.copy = function() {
    return quantile3().domain(domain).range(range4).unknown(unknown);
  };
  return initRange.apply(scale, arguments);
}
var init_quantile3 = __esm({
  "../../node_modules/d3-scale/src/quantile.js"() {
    init_src3();
    init_init();
  }
});

// ../../node_modules/d3-scale/src/quantize.js
function quantize() {
  var x0 = 0, x1 = 1, n3 = 1, domain = [0.5], range4 = [0, 1], unknown;
  function scale(x4) {
    return x4 != null && x4 <= x4 ? range4[bisect_default2(domain, x4, 0, n3)] : unknown;
  }
  function rescale() {
    var i4 = -1;
    domain = new Array(n3);
    while (++i4 < n3)
      domain[i4] = ((i4 + 1) * x1 - (i4 - n3) * x0) / (n3 + 1);
    return scale;
  }
  scale.domain = function(_4) {
    return arguments.length ? ([x0, x1] = _4, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
  };
  scale.range = function(_4) {
    return arguments.length ? (n3 = (range4 = Array.from(_4)).length - 1, rescale()) : range4.slice();
  };
  scale.invertExtent = function(y3) {
    var i4 = range4.indexOf(y3);
    return i4 < 0 ? [NaN, NaN] : i4 < 1 ? [x0, domain[0]] : i4 >= n3 ? [domain[n3 - 1], x1] : [domain[i4 - 1], domain[i4]];
  };
  scale.unknown = function(_4) {
    return arguments.length ? (unknown = _4, scale) : scale;
  };
  scale.thresholds = function() {
    return domain.slice();
  };
  scale.copy = function() {
    return quantize().domain([x0, x1]).range(range4).unknown(unknown);
  };
  return initRange.apply(linearish(scale), arguments);
}
var init_quantize = __esm({
  "../../node_modules/d3-scale/src/quantize.js"() {
    init_src3();
    init_linear();
    init_init();
  }
});

// ../../node_modules/d3-scale/src/threshold.js
function threshold() {
  var domain = [0.5], range4 = [0, 1], unknown, n3 = 1;
  function scale(x4) {
    return x4 != null && x4 <= x4 ? range4[bisect_default2(domain, x4, 0, n3)] : unknown;
  }
  scale.domain = function(_4) {
    return arguments.length ? (domain = Array.from(_4), n3 = Math.min(domain.length, range4.length - 1), scale) : domain.slice();
  };
  scale.range = function(_4) {
    return arguments.length ? (range4 = Array.from(_4), n3 = Math.min(domain.length, range4.length - 1), scale) : range4.slice();
  };
  scale.invertExtent = function(y3) {
    var i4 = range4.indexOf(y3);
    return [domain[i4 - 1], domain[i4]];
  };
  scale.unknown = function(_4) {
    return arguments.length ? (unknown = _4, scale) : unknown;
  };
  scale.copy = function() {
    return threshold().domain(domain).range(range4).unknown(unknown);
  };
  return initRange.apply(scale, arguments);
}
var init_threshold = __esm({
  "../../node_modules/d3-scale/src/threshold.js"() {
    init_src3();
    init_init();
  }
});

// ../../node_modules/d3-time/src/interval.js
function newInterval(floori, offseti, count3, field) {
  function interval2(date2) {
    return floori(date2 = arguments.length === 0 ? new Date() : new Date(+date2)), date2;
  }
  interval2.floor = function(date2) {
    return floori(date2 = new Date(+date2)), date2;
  };
  interval2.ceil = function(date2) {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval2.round = function(date2) {
    var d0 = interval2(date2), d1 = interval2.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval2.offset = function(date2, step) {
    return offseti(date2 = new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval2.range = function(start2, stop, step) {
    var range4 = [], previous;
    start2 = interval2.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop) || !(step > 0))
      return range4;
    do
      range4.push(previous = new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop);
    return range4;
  };
  interval2.filter = function(test) {
    return newInterval(function(date2) {
      if (date2 >= date2)
        while (floori(date2), !test(date2))
          date2.setTime(date2 - 1);
    }, function(date2, step) {
      if (date2 >= date2) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date2, -1), !test(date2)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date2, 1), !test(date2)) {
            }
          }
      }
    });
  };
  if (count3) {
    interval2.count = function(start2, end) {
      t0.setTime(+start2), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count3(t0, t1));
    };
    interval2.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval2 : interval2.filter(field ? function(d2) {
        return field(d2) % step === 0;
      } : function(d2) {
        return interval2.count(0, d2) % step === 0;
      });
    };
  }
  return interval2;
}
var t0, t1;
var init_interval = __esm({
  "../../node_modules/d3-time/src/interval.js"() {
    t0 = new Date();
    t1 = new Date();
  }
});

// ../../node_modules/d3-time/src/millisecond.js
var millisecond, millisecond_default, milliseconds;
var init_millisecond = __esm({
  "../../node_modules/d3-time/src/millisecond.js"() {
    init_interval();
    millisecond = newInterval(function() {
    }, function(date2, step) {
      date2.setTime(+date2 + step);
    }, function(start2, end) {
      return end - start2;
    });
    millisecond.every = function(k4) {
      k4 = Math.floor(k4);
      if (!isFinite(k4) || !(k4 > 0))
        return null;
      if (!(k4 > 1))
        return millisecond;
      return newInterval(function(date2) {
        date2.setTime(Math.floor(date2 / k4) * k4);
      }, function(date2, step) {
        date2.setTime(+date2 + step * k4);
      }, function(start2, end) {
        return (end - start2) / k4;
      });
    };
    millisecond_default = millisecond;
    milliseconds = millisecond.range;
  }
});

// ../../node_modules/d3-time/src/duration.js
var durationSecond, durationMinute, durationHour, durationDay, durationWeek, durationMonth, durationYear;
var init_duration = __esm({
  "../../node_modules/d3-time/src/duration.js"() {
    durationSecond = 1e3;
    durationMinute = durationSecond * 60;
    durationHour = durationMinute * 60;
    durationDay = durationHour * 24;
    durationWeek = durationDay * 7;
    durationMonth = durationDay * 30;
    durationYear = durationDay * 365;
  }
});

// ../../node_modules/d3-time/src/second.js
var second, second_default, seconds;
var init_second = __esm({
  "../../node_modules/d3-time/src/second.js"() {
    init_interval();
    init_duration();
    second = newInterval(function(date2) {
      date2.setTime(date2 - date2.getMilliseconds());
    }, function(date2, step) {
      date2.setTime(+date2 + step * durationSecond);
    }, function(start2, end) {
      return (end - start2) / durationSecond;
    }, function(date2) {
      return date2.getUTCSeconds();
    });
    second_default = second;
    seconds = second.range;
  }
});

// ../../node_modules/d3-time/src/minute.js
var minute, minute_default, minutes;
var init_minute = __esm({
  "../../node_modules/d3-time/src/minute.js"() {
    init_interval();
    init_duration();
    minute = newInterval(function(date2) {
      date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
    }, function(date2, step) {
      date2.setTime(+date2 + step * durationMinute);
    }, function(start2, end) {
      return (end - start2) / durationMinute;
    }, function(date2) {
      return date2.getMinutes();
    });
    minute_default = minute;
    minutes = minute.range;
  }
});

// ../../node_modules/d3-time/src/hour.js
var hour, hour_default, hours;
var init_hour = __esm({
  "../../node_modules/d3-time/src/hour.js"() {
    init_interval();
    init_duration();
    hour = newInterval(function(date2) {
      date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
    }, function(date2, step) {
      date2.setTime(+date2 + step * durationHour);
    }, function(start2, end) {
      return (end - start2) / durationHour;
    }, function(date2) {
      return date2.getHours();
    });
    hour_default = hour;
    hours = hour.range;
  }
});

// ../../node_modules/d3-time/src/day.js
var day, day_default, days;
var init_day = __esm({
  "../../node_modules/d3-time/src/day.js"() {
    init_interval();
    init_duration();
    day = newInterval(
      (date2) => date2.setHours(0, 0, 0, 0),
      (date2, step) => date2.setDate(date2.getDate() + step),
      (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationDay,
      (date2) => date2.getDate() - 1
    );
    day_default = day;
    days = day.range;
  }
});

// ../../node_modules/d3-time/src/week.js
function weekday(i4) {
  return newInterval(function(date2) {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i4) % 7);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setDate(date2.getDate() + step * 7);
  }, function(start2, end) {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var sunday, monday, tuesday, wednesday, thursday, friday, saturday, sundays, mondays, tuesdays, wednesdays, thursdays, fridays, saturdays;
var init_week = __esm({
  "../../node_modules/d3-time/src/week.js"() {
    init_interval();
    init_duration();
    sunday = weekday(0);
    monday = weekday(1);
    tuesday = weekday(2);
    wednesday = weekday(3);
    thursday = weekday(4);
    friday = weekday(5);
    saturday = weekday(6);
    sundays = sunday.range;
    mondays = monday.range;
    tuesdays = tuesday.range;
    wednesdays = wednesday.range;
    thursdays = thursday.range;
    fridays = friday.range;
    saturdays = saturday.range;
  }
});

// ../../node_modules/d3-time/src/month.js
var month, month_default, months;
var init_month = __esm({
  "../../node_modules/d3-time/src/month.js"() {
    init_interval();
    month = newInterval(function(date2) {
      date2.setDate(1);
      date2.setHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setMonth(date2.getMonth() + step);
    }, function(start2, end) {
      return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
    }, function(date2) {
      return date2.getMonth();
    });
    month_default = month;
    months = month.range;
  }
});

// ../../node_modules/d3-time/src/year.js
var year, year_default, years;
var init_year = __esm({
  "../../node_modules/d3-time/src/year.js"() {
    init_interval();
    year = newInterval(function(date2) {
      date2.setMonth(0, 1);
      date2.setHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setFullYear(date2.getFullYear() + step);
    }, function(start2, end) {
      return end.getFullYear() - start2.getFullYear();
    }, function(date2) {
      return date2.getFullYear();
    });
    year.every = function(k4) {
      return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval(function(date2) {
        date2.setFullYear(Math.floor(date2.getFullYear() / k4) * k4);
        date2.setMonth(0, 1);
        date2.setHours(0, 0, 0, 0);
      }, function(date2, step) {
        date2.setFullYear(date2.getFullYear() + step * k4);
      });
    };
    year_default = year;
    years = year.range;
  }
});

// ../../node_modules/d3-time/src/utcMinute.js
var utcMinute, utcMinute_default, utcMinutes;
var init_utcMinute = __esm({
  "../../node_modules/d3-time/src/utcMinute.js"() {
    init_interval();
    init_duration();
    utcMinute = newInterval(function(date2) {
      date2.setUTCSeconds(0, 0);
    }, function(date2, step) {
      date2.setTime(+date2 + step * durationMinute);
    }, function(start2, end) {
      return (end - start2) / durationMinute;
    }, function(date2) {
      return date2.getUTCMinutes();
    });
    utcMinute_default = utcMinute;
    utcMinutes = utcMinute.range;
  }
});

// ../../node_modules/d3-time/src/utcHour.js
var utcHour, utcHour_default, utcHours;
var init_utcHour = __esm({
  "../../node_modules/d3-time/src/utcHour.js"() {
    init_interval();
    init_duration();
    utcHour = newInterval(function(date2) {
      date2.setUTCMinutes(0, 0, 0);
    }, function(date2, step) {
      date2.setTime(+date2 + step * durationHour);
    }, function(start2, end) {
      return (end - start2) / durationHour;
    }, function(date2) {
      return date2.getUTCHours();
    });
    utcHour_default = utcHour;
    utcHours = utcHour.range;
  }
});

// ../../node_modules/d3-time/src/utcDay.js
var utcDay, utcDay_default, utcDays;
var init_utcDay = __esm({
  "../../node_modules/d3-time/src/utcDay.js"() {
    init_interval();
    init_duration();
    utcDay = newInterval(function(date2) {
      date2.setUTCHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setUTCDate(date2.getUTCDate() + step);
    }, function(start2, end) {
      return (end - start2) / durationDay;
    }, function(date2) {
      return date2.getUTCDate() - 1;
    });
    utcDay_default = utcDay;
    utcDays = utcDay.range;
  }
});

// ../../node_modules/d3-time/src/utcWeek.js
function utcWeekday(i4) {
  return newInterval(function(date2) {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i4) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, function(start2, end) {
    return (end - start2) / durationWeek;
  });
}
var utcSunday, utcMonday, utcTuesday, utcWednesday, utcThursday, utcFriday, utcSaturday, utcSundays, utcMondays, utcTuesdays, utcWednesdays, utcThursdays, utcFridays, utcSaturdays;
var init_utcWeek = __esm({
  "../../node_modules/d3-time/src/utcWeek.js"() {
    init_interval();
    init_duration();
    utcSunday = utcWeekday(0);
    utcMonday = utcWeekday(1);
    utcTuesday = utcWeekday(2);
    utcWednesday = utcWeekday(3);
    utcThursday = utcWeekday(4);
    utcFriday = utcWeekday(5);
    utcSaturday = utcWeekday(6);
    utcSundays = utcSunday.range;
    utcMondays = utcMonday.range;
    utcTuesdays = utcTuesday.range;
    utcWednesdays = utcWednesday.range;
    utcThursdays = utcThursday.range;
    utcFridays = utcFriday.range;
    utcSaturdays = utcSaturday.range;
  }
});

// ../../node_modules/d3-time/src/utcMonth.js
var utcMonth, utcMonth_default, utcMonths;
var init_utcMonth = __esm({
  "../../node_modules/d3-time/src/utcMonth.js"() {
    init_interval();
    utcMonth = newInterval(function(date2) {
      date2.setUTCDate(1);
      date2.setUTCHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setUTCMonth(date2.getUTCMonth() + step);
    }, function(start2, end) {
      return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
    }, function(date2) {
      return date2.getUTCMonth();
    });
    utcMonth_default = utcMonth;
    utcMonths = utcMonth.range;
  }
});

// ../../node_modules/d3-time/src/utcYear.js
var utcYear, utcYear_default, utcYears;
var init_utcYear = __esm({
  "../../node_modules/d3-time/src/utcYear.js"() {
    init_interval();
    utcYear = newInterval(function(date2) {
      date2.setUTCMonth(0, 1);
      date2.setUTCHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setUTCFullYear(date2.getUTCFullYear() + step);
    }, function(start2, end) {
      return end.getUTCFullYear() - start2.getUTCFullYear();
    }, function(date2) {
      return date2.getUTCFullYear();
    });
    utcYear.every = function(k4) {
      return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval(function(date2) {
        date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k4) * k4);
        date2.setUTCMonth(0, 1);
        date2.setUTCHours(0, 0, 0, 0);
      }, function(date2, step) {
        date2.setUTCFullYear(date2.getUTCFullYear() + step * k4);
      });
    };
    utcYear_default = utcYear;
    utcYears = utcYear.range;
  }
});

// ../../node_modules/d3-time/node_modules/d3-array/src/ascending.js
function ascending3(a5, b3) {
  return a5 == null || b3 == null ? NaN : a5 < b3 ? -1 : a5 > b3 ? 1 : a5 >= b3 ? 0 : NaN;
}
var init_ascending3 = __esm({
  "../../node_modules/d3-time/node_modules/d3-array/src/ascending.js"() {
  }
});

// ../../node_modules/d3-time/node_modules/d3-array/src/bisector.js
function bisector3(f4) {
  let delta = f4;
  let compare1 = f4;
  let compare2 = f4;
  if (f4.length !== 2) {
    delta = (d2, x4) => f4(d2) - x4;
    compare1 = ascending3;
    compare2 = (d2, x4) => ascending3(f4(d2), x4);
  }
  function left(a5, x4, lo2 = 0, hi = a5.length) {
    if (lo2 < hi) {
      if (compare1(x4, x4) !== 0)
        return hi;
      do {
        const mid = lo2 + hi >>> 1;
        if (compare2(a5[mid], x4) < 0)
          lo2 = mid + 1;
        else
          hi = mid;
      } while (lo2 < hi);
    }
    return lo2;
  }
  function right(a5, x4, lo2 = 0, hi = a5.length) {
    if (lo2 < hi) {
      if (compare1(x4, x4) !== 0)
        return hi;
      do {
        const mid = lo2 + hi >>> 1;
        if (compare2(a5[mid], x4) <= 0)
          lo2 = mid + 1;
        else
          hi = mid;
      } while (lo2 < hi);
    }
    return lo2;
  }
  function center(a5, x4, lo2 = 0, hi = a5.length) {
    const i4 = left(a5, x4, lo2, hi - 1);
    return i4 > lo2 && delta(a5[i4 - 1], x4) > -delta(a5[i4], x4) ? i4 - 1 : i4;
  }
  return { left, center, right };
}
var init_bisector3 = __esm({
  "../../node_modules/d3-time/node_modules/d3-array/src/bisector.js"() {
    init_ascending3();
  }
});

// ../../node_modules/d3-time/node_modules/d3-array/src/ticks.js
function tickStep3(start2, stop, count3) {
  var step0 = Math.abs(stop - start2) / Math.max(0, count3), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e103)
    step1 *= 10;
  else if (error >= e53)
    step1 *= 5;
  else if (error >= e23)
    step1 *= 2;
  return stop < start2 ? -step1 : step1;
}
var e103, e53, e23;
var init_ticks3 = __esm({
  "../../node_modules/d3-time/node_modules/d3-array/src/ticks.js"() {
    e103 = Math.sqrt(50);
    e53 = Math.sqrt(10);
    e23 = Math.sqrt(2);
  }
});

// ../../node_modules/d3-time/node_modules/d3-array/src/index.js
var init_src7 = __esm({
  "../../node_modules/d3-time/node_modules/d3-array/src/index.js"() {
    init_bisector3();
    init_ticks3();
  }
});

// ../../node_modules/d3-time/src/ticks.js
function ticker(year2, month2, week, day2, hour2, minute2) {
  const tickIntervals = [
    [second_default, 1, durationSecond],
    [second_default, 5, 5 * durationSecond],
    [second_default, 15, 15 * durationSecond],
    [second_default, 30, 30 * durationSecond],
    [minute2, 1, durationMinute],
    [minute2, 5, 5 * durationMinute],
    [minute2, 15, 15 * durationMinute],
    [minute2, 30, 30 * durationMinute],
    [hour2, 1, durationHour],
    [hour2, 3, 3 * durationHour],
    [hour2, 6, 6 * durationHour],
    [hour2, 12, 12 * durationHour],
    [day2, 1, durationDay],
    [day2, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month2, 1, durationMonth],
    [month2, 3, 3 * durationMonth],
    [year2, 1, durationYear]
  ];
  function ticks4(start2, stop, count3) {
    const reverse2 = stop < start2;
    if (reverse2)
      [start2, stop] = [stop, start2];
    const interval2 = count3 && typeof count3.range === "function" ? count3 : tickInterval(start2, stop, count3);
    const ticks5 = interval2 ? interval2.range(start2, +stop + 1) : [];
    return reverse2 ? ticks5.reverse() : ticks5;
  }
  function tickInterval(start2, stop, count3) {
    const target = Math.abs(stop - start2) / count3;
    const i4 = bisector3(([, , step2]) => step2).right(tickIntervals, target);
    if (i4 === tickIntervals.length)
      return year2.every(tickStep3(start2 / durationYear, stop / durationYear, count3));
    if (i4 === 0)
      return millisecond_default.every(Math.max(tickStep3(start2, stop, count3), 1));
    const [t2, step] = tickIntervals[target / tickIntervals[i4 - 1][2] < tickIntervals[i4][2] / target ? i4 - 1 : i4];
    return t2.every(step);
  }
  return [ticks4, tickInterval];
}
var utcTicks, utcTickInterval, timeTicks, timeTickInterval;
var init_ticks4 = __esm({
  "../../node_modules/d3-time/src/ticks.js"() {
    init_src7();
    init_duration();
    init_millisecond();
    init_second();
    init_minute();
    init_hour();
    init_day();
    init_week();
    init_month();
    init_year();
    init_utcMinute();
    init_utcHour();
    init_utcDay();
    init_utcWeek();
    init_utcMonth();
    init_utcYear();
    [utcTicks, utcTickInterval] = ticker(utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default);
    [timeTicks, timeTickInterval] = ticker(year_default, month_default, sunday, day_default, hour_default, minute_default);
  }
});

// ../../node_modules/d3-time/src/index.js
var src_exports2 = {};
__export(src_exports2, {
  timeDay: () => day_default,
  timeDays: () => days,
  timeFriday: () => friday,
  timeFridays: () => fridays,
  timeHour: () => hour_default,
  timeHours: () => hours,
  timeInterval: () => newInterval,
  timeMillisecond: () => millisecond_default,
  timeMilliseconds: () => milliseconds,
  timeMinute: () => minute_default,
  timeMinutes: () => minutes,
  timeMonday: () => monday,
  timeMondays: () => mondays,
  timeMonth: () => month_default,
  timeMonths: () => months,
  timeSaturday: () => saturday,
  timeSaturdays: () => saturdays,
  timeSecond: () => second_default,
  timeSeconds: () => seconds,
  timeSunday: () => sunday,
  timeSundays: () => sundays,
  timeThursday: () => thursday,
  timeThursdays: () => thursdays,
  timeTickInterval: () => timeTickInterval,
  timeTicks: () => timeTicks,
  timeTuesday: () => tuesday,
  timeTuesdays: () => tuesdays,
  timeWednesday: () => wednesday,
  timeWednesdays: () => wednesdays,
  timeWeek: () => sunday,
  timeWeeks: () => sundays,
  timeYear: () => year_default,
  timeYears: () => years,
  utcDay: () => utcDay_default,
  utcDays: () => utcDays,
  utcFriday: () => utcFriday,
  utcFridays: () => utcFridays,
  utcHour: () => utcHour_default,
  utcHours: () => utcHours,
  utcMillisecond: () => millisecond_default,
  utcMilliseconds: () => milliseconds,
  utcMinute: () => utcMinute_default,
  utcMinutes: () => utcMinutes,
  utcMonday: () => utcMonday,
  utcMondays: () => utcMondays,
  utcMonth: () => utcMonth_default,
  utcMonths: () => utcMonths,
  utcSaturday: () => utcSaturday,
  utcSaturdays: () => utcSaturdays,
  utcSecond: () => second_default,
  utcSeconds: () => seconds,
  utcSunday: () => utcSunday,
  utcSundays: () => utcSundays,
  utcThursday: () => utcThursday,
  utcThursdays: () => utcThursdays,
  utcTickInterval: () => utcTickInterval,
  utcTicks: () => utcTicks,
  utcTuesday: () => utcTuesday,
  utcTuesdays: () => utcTuesdays,
  utcWednesday: () => utcWednesday,
  utcWednesdays: () => utcWednesdays,
  utcWeek: () => utcSunday,
  utcWeeks: () => utcSundays,
  utcYear: () => utcYear_default,
  utcYears: () => utcYears
});
var init_src8 = __esm({
  "../../node_modules/d3-time/src/index.js"() {
    init_interval();
    init_millisecond();
    init_second();
    init_minute();
    init_hour();
    init_day();
    init_week();
    init_month();
    init_year();
    init_utcMinute();
    init_utcHour();
    init_utcDay();
    init_utcWeek();
    init_utcMonth();
    init_utcYear();
    init_ticks4();
  }
});

// ../../node_modules/d3-time-format/src/locale.js
function localDate(d2) {
  if (0 <= d2.y && d2.y < 100) {
    var date2 = new Date(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
    date2.setFullYear(d2.y);
    return date2;
  }
  return new Date(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
}
function utcDate(d2) {
  if (0 <= d2.y && d2.y < 100) {
    var date2 = new Date(Date.UTC(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
    date2.setUTCFullYear(d2.y);
    return date2;
  }
  return new Date(Date.UTC(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
}
function newDate(y3, m4, d2) {
  return { y: y3, m: m4, d: d2, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale5) {
  var locale_dateTime = locale5.dateTime, locale_date = locale5.date, locale_time = locale5.time, locale_periods = locale5.periods, locale_weekdays = locale5.days, locale_shortWeekdays = locale5.shortDays, locale_months = locale5.months, locale_shortMonths = locale5.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date2) {
      var string = [], i4 = -1, j4 = 0, n3 = specifier.length, c6, pad3, format4;
      if (!(date2 instanceof Date))
        date2 = new Date(+date2);
      while (++i4 < n3) {
        if (specifier.charCodeAt(i4) === 37) {
          string.push(specifier.slice(j4, i4));
          if ((pad3 = pads[c6 = specifier.charAt(++i4)]) != null)
            c6 = specifier.charAt(++i4);
          else
            pad3 = c6 === "e" ? " " : "0";
          if (format4 = formats2[c6])
            c6 = format4(date2, pad3);
          string.push(c6);
          j4 = i4 + 1;
        }
      }
      string.push(specifier.slice(j4, i4));
      return string.join("");
    };
  }
  function newParse(specifier, Z5) {
    return function(string) {
      var d2 = newDate(1900, void 0, 1), i4 = parseSpecifier(d2, specifier, string += "", 0), week, day2;
      if (i4 != string.length)
        return null;
      if ("Q" in d2)
        return new Date(d2.Q);
      if ("s" in d2)
        return new Date(d2.s * 1e3 + ("L" in d2 ? d2.L : 0));
      if (Z5 && !("Z" in d2))
        d2.Z = 0;
      if ("p" in d2)
        d2.H = d2.H % 12 + d2.p * 12;
      if (d2.m === void 0)
        d2.m = "q" in d2 ? d2.q : 0;
      if ("V" in d2) {
        if (d2.V < 1 || d2.V > 53)
          return null;
        if (!("w" in d2))
          d2.w = 1;
        if ("Z" in d2) {
          week = utcDate(newDate(d2.y, 0, 1)), day2 = week.getUTCDay();
          week = day2 > 4 || day2 === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay_default.offset(week, (d2.V - 1) * 7);
          d2.y = week.getUTCFullYear();
          d2.m = week.getUTCMonth();
          d2.d = week.getUTCDate() + (d2.w + 6) % 7;
        } else {
          week = localDate(newDate(d2.y, 0, 1)), day2 = week.getDay();
          week = day2 > 4 || day2 === 0 ? monday.ceil(week) : monday(week);
          week = day_default.offset(week, (d2.V - 1) * 7);
          d2.y = week.getFullYear();
          d2.m = week.getMonth();
          d2.d = week.getDate() + (d2.w + 6) % 7;
        }
      } else if ("W" in d2 || "U" in d2) {
        if (!("w" in d2))
          d2.w = "u" in d2 ? d2.u % 7 : "W" in d2 ? 1 : 0;
        day2 = "Z" in d2 ? utcDate(newDate(d2.y, 0, 1)).getUTCDay() : localDate(newDate(d2.y, 0, 1)).getDay();
        d2.m = 0;
        d2.d = "W" in d2 ? (d2.w + 6) % 7 + d2.W * 7 - (day2 + 5) % 7 : d2.w + d2.U * 7 - (day2 + 6) % 7;
      }
      if ("Z" in d2) {
        d2.H += d2.Z / 100 | 0;
        d2.M += d2.Z % 100;
        return utcDate(d2);
      }
      return localDate(d2);
    };
  }
  function parseSpecifier(d2, specifier, string, j4) {
    var i4 = 0, n3 = specifier.length, m4 = string.length, c6, parse2;
    while (i4 < n3) {
      if (j4 >= m4)
        return -1;
      c6 = specifier.charCodeAt(i4++);
      if (c6 === 37) {
        c6 = specifier.charAt(i4++);
        parse2 = parses[c6 in pads ? specifier.charAt(i4++) : c6];
        if (!parse2 || (j4 = parse2(d2, string, j4)) < 0)
          return -1;
      } else if (c6 != string.charCodeAt(j4++)) {
        return -1;
      }
    }
    return j4;
  }
  function parsePeriod(d2, string, i4) {
    var n3 = periodRe.exec(string.slice(i4));
    return n3 ? (d2.p = periodLookup.get(n3[0].toLowerCase()), i4 + n3[0].length) : -1;
  }
  function parseShortWeekday(d2, string, i4) {
    var n3 = shortWeekdayRe.exec(string.slice(i4));
    return n3 ? (d2.w = shortWeekdayLookup.get(n3[0].toLowerCase()), i4 + n3[0].length) : -1;
  }
  function parseWeekday(d2, string, i4) {
    var n3 = weekdayRe.exec(string.slice(i4));
    return n3 ? (d2.w = weekdayLookup.get(n3[0].toLowerCase()), i4 + n3[0].length) : -1;
  }
  function parseShortMonth(d2, string, i4) {
    var n3 = shortMonthRe.exec(string.slice(i4));
    return n3 ? (d2.m = shortMonthLookup.get(n3[0].toLowerCase()), i4 + n3[0].length) : -1;
  }
  function parseMonth(d2, string, i4) {
    var n3 = monthRe.exec(string.slice(i4));
    return n3 ? (d2.m = monthLookup.get(n3[0].toLowerCase()), i4 + n3[0].length) : -1;
  }
  function parseLocaleDateTime(d2, string, i4) {
    return parseSpecifier(d2, locale_dateTime, string, i4);
  }
  function parseLocaleDate(d2, string, i4) {
    return parseSpecifier(d2, locale_date, string, i4);
  }
  function parseLocaleTime(d2, string, i4) {
    return parseSpecifier(d2, locale_time, string, i4);
  }
  function formatShortWeekday(d2) {
    return locale_shortWeekdays[d2.getDay()];
  }
  function formatWeekday(d2) {
    return locale_weekdays[d2.getDay()];
  }
  function formatShortMonth(d2) {
    return locale_shortMonths[d2.getMonth()];
  }
  function formatMonth(d2) {
    return locale_months[d2.getMonth()];
  }
  function formatPeriod(d2) {
    return locale_periods[+(d2.getHours() >= 12)];
  }
  function formatQuarter(d2) {
    return 1 + ~~(d2.getMonth() / 3);
  }
  function formatUTCShortWeekday(d2) {
    return locale_shortWeekdays[d2.getUTCDay()];
  }
  function formatUTCWeekday(d2) {
    return locale_weekdays[d2.getUTCDay()];
  }
  function formatUTCShortMonth(d2) {
    return locale_shortMonths[d2.getUTCMonth()];
  }
  function formatUTCMonth(d2) {
    return locale_months[d2.getUTCMonth()];
  }
  function formatUTCPeriod(d2) {
    return locale_periods[+(d2.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d2) {
    return 1 + ~~(d2.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f4 = newFormat(specifier += "", formats);
      f4.toString = function() {
        return specifier;
      };
      return f4;
    },
    parse: function(specifier) {
      var p2 = newParse(specifier += "", false);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    },
    utcFormat: function(specifier) {
      var f4 = newFormat(specifier += "", utcFormats);
      f4.toString = function() {
        return specifier;
      };
      return f4;
    },
    utcParse: function(specifier) {
      var p2 = newParse(specifier += "", true);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    }
  };
}
function pad(value, fill, width) {
  var sign2 = value < 0 ? "-" : "", string = (sign2 ? -value : value) + "", length3 = string.length;
  return sign2 + (length3 < width ? new Array(width - length3 + 1).join(fill) + string : string);
}
function requote(s3) {
  return s3.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i4) => [name.toLowerCase(), i4]));
}
function parseWeekdayNumberSunday(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 1));
  return n3 ? (d2.w = +n3[0], i4 + n3[0].length) : -1;
}
function parseWeekdayNumberMonday(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 1));
  return n3 ? (d2.u = +n3[0], i4 + n3[0].length) : -1;
}
function parseWeekNumberSunday(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 2));
  return n3 ? (d2.U = +n3[0], i4 + n3[0].length) : -1;
}
function parseWeekNumberISO(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 2));
  return n3 ? (d2.V = +n3[0], i4 + n3[0].length) : -1;
}
function parseWeekNumberMonday(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 2));
  return n3 ? (d2.W = +n3[0], i4 + n3[0].length) : -1;
}
function parseFullYear(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 4));
  return n3 ? (d2.y = +n3[0], i4 + n3[0].length) : -1;
}
function parseYear(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 2));
  return n3 ? (d2.y = +n3[0] + (+n3[0] > 68 ? 1900 : 2e3), i4 + n3[0].length) : -1;
}
function parseZone(d2, string, i4) {
  var n3 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i4, i4 + 6));
  return n3 ? (d2.Z = n3[1] ? 0 : -(n3[2] + (n3[3] || "00")), i4 + n3[0].length) : -1;
}
function parseQuarter(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 1));
  return n3 ? (d2.q = n3[0] * 3 - 3, i4 + n3[0].length) : -1;
}
function parseMonthNumber(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 2));
  return n3 ? (d2.m = n3[0] - 1, i4 + n3[0].length) : -1;
}
function parseDayOfMonth(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 2));
  return n3 ? (d2.d = +n3[0], i4 + n3[0].length) : -1;
}
function parseDayOfYear(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 3));
  return n3 ? (d2.m = 0, d2.d = +n3[0], i4 + n3[0].length) : -1;
}
function parseHour24(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 2));
  return n3 ? (d2.H = +n3[0], i4 + n3[0].length) : -1;
}
function parseMinutes(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 2));
  return n3 ? (d2.M = +n3[0], i4 + n3[0].length) : -1;
}
function parseSeconds(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 2));
  return n3 ? (d2.S = +n3[0], i4 + n3[0].length) : -1;
}
function parseMilliseconds(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 3));
  return n3 ? (d2.L = +n3[0], i4 + n3[0].length) : -1;
}
function parseMicroseconds(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4, i4 + 6));
  return n3 ? (d2.L = Math.floor(n3[0] / 1e3), i4 + n3[0].length) : -1;
}
function parseLiteralPercent(d2, string, i4) {
  var n3 = percentRe.exec(string.slice(i4, i4 + 1));
  return n3 ? i4 + n3[0].length : -1;
}
function parseUnixTimestamp(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4));
  return n3 ? (d2.Q = +n3[0], i4 + n3[0].length) : -1;
}
function parseUnixTimestampSeconds(d2, string, i4) {
  var n3 = numberRe.exec(string.slice(i4));
  return n3 ? (d2.s = +n3[0], i4 + n3[0].length) : -1;
}
function formatDayOfMonth(d2, p2) {
  return pad(d2.getDate(), p2, 2);
}
function formatHour24(d2, p2) {
  return pad(d2.getHours(), p2, 2);
}
function formatHour12(d2, p2) {
  return pad(d2.getHours() % 12 || 12, p2, 2);
}
function formatDayOfYear(d2, p2) {
  return pad(1 + day_default.count(year_default(d2), d2), p2, 3);
}
function formatMilliseconds(d2, p2) {
  return pad(d2.getMilliseconds(), p2, 3);
}
function formatMicroseconds(d2, p2) {
  return formatMilliseconds(d2, p2) + "000";
}
function formatMonthNumber(d2, p2) {
  return pad(d2.getMonth() + 1, p2, 2);
}
function formatMinutes(d2, p2) {
  return pad(d2.getMinutes(), p2, 2);
}
function formatSeconds(d2, p2) {
  return pad(d2.getSeconds(), p2, 2);
}
function formatWeekdayNumberMonday(d2) {
  var day2 = d2.getDay();
  return day2 === 0 ? 7 : day2;
}
function formatWeekNumberSunday(d2, p2) {
  return pad(sunday.count(year_default(d2) - 1, d2), p2, 2);
}
function dISO(d2) {
  var day2 = d2.getDay();
  return day2 >= 4 || day2 === 0 ? thursday(d2) : thursday.ceil(d2);
}
function formatWeekNumberISO(d2, p2) {
  d2 = dISO(d2);
  return pad(thursday.count(year_default(d2), d2) + (year_default(d2).getDay() === 4), p2, 2);
}
function formatWeekdayNumberSunday(d2) {
  return d2.getDay();
}
function formatWeekNumberMonday(d2, p2) {
  return pad(monday.count(year_default(d2) - 1, d2), p2, 2);
}
function formatYear(d2, p2) {
  return pad(d2.getFullYear() % 100, p2, 2);
}
function formatYearISO(d2, p2) {
  d2 = dISO(d2);
  return pad(d2.getFullYear() % 100, p2, 2);
}
function formatFullYear(d2, p2) {
  return pad(d2.getFullYear() % 1e4, p2, 4);
}
function formatFullYearISO(d2, p2) {
  var day2 = d2.getDay();
  d2 = day2 >= 4 || day2 === 0 ? thursday(d2) : thursday.ceil(d2);
  return pad(d2.getFullYear() % 1e4, p2, 4);
}
function formatZone(d2) {
  var z3 = d2.getTimezoneOffset();
  return (z3 > 0 ? "-" : (z3 *= -1, "+")) + pad(z3 / 60 | 0, "0", 2) + pad(z3 % 60, "0", 2);
}
function formatUTCDayOfMonth(d2, p2) {
  return pad(d2.getUTCDate(), p2, 2);
}
function formatUTCHour24(d2, p2) {
  return pad(d2.getUTCHours(), p2, 2);
}
function formatUTCHour12(d2, p2) {
  return pad(d2.getUTCHours() % 12 || 12, p2, 2);
}
function formatUTCDayOfYear(d2, p2) {
  return pad(1 + utcDay_default.count(utcYear_default(d2), d2), p2, 3);
}
function formatUTCMilliseconds(d2, p2) {
  return pad(d2.getUTCMilliseconds(), p2, 3);
}
function formatUTCMicroseconds(d2, p2) {
  return formatUTCMilliseconds(d2, p2) + "000";
}
function formatUTCMonthNumber(d2, p2) {
  return pad(d2.getUTCMonth() + 1, p2, 2);
}
function formatUTCMinutes(d2, p2) {
  return pad(d2.getUTCMinutes(), p2, 2);
}
function formatUTCSeconds(d2, p2) {
  return pad(d2.getUTCSeconds(), p2, 2);
}
function formatUTCWeekdayNumberMonday(d2) {
  var dow = d2.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d2, p2) {
  return pad(utcSunday.count(utcYear_default(d2) - 1, d2), p2, 2);
}
function UTCdISO(d2) {
  var day2 = d2.getUTCDay();
  return day2 >= 4 || day2 === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
}
function formatUTCWeekNumberISO(d2, p2) {
  d2 = UTCdISO(d2);
  return pad(utcThursday.count(utcYear_default(d2), d2) + (utcYear_default(d2).getUTCDay() === 4), p2, 2);
}
function formatUTCWeekdayNumberSunday(d2) {
  return d2.getUTCDay();
}
function formatUTCWeekNumberMonday(d2, p2) {
  return pad(utcMonday.count(utcYear_default(d2) - 1, d2), p2, 2);
}
function formatUTCYear(d2, p2) {
  return pad(d2.getUTCFullYear() % 100, p2, 2);
}
function formatUTCYearISO(d2, p2) {
  d2 = UTCdISO(d2);
  return pad(d2.getUTCFullYear() % 100, p2, 2);
}
function formatUTCFullYear(d2, p2) {
  return pad(d2.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCFullYearISO(d2, p2) {
  var day2 = d2.getUTCDay();
  d2 = day2 >= 4 || day2 === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
  return pad(d2.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d2) {
  return +d2;
}
function formatUnixTimestampSeconds(d2) {
  return Math.floor(+d2 / 1e3);
}
var pads, numberRe, percentRe, requoteRe;
var init_locale2 = __esm({
  "../../node_modules/d3-time-format/src/locale.js"() {
    init_src8();
    pads = { "-": "", "_": " ", "0": "0" };
    numberRe = /^\s*\d+/;
    percentRe = /^%/;
    requoteRe = /[\\^$*+?|[\]().{}]/g;
  }
});

// ../../node_modules/d3-time-format/src/defaultLocale.js
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}
var locale2, timeFormat, timeParse, utcFormat, utcParse;
var init_defaultLocale2 = __esm({
  "../../node_modules/d3-time-format/src/defaultLocale.js"() {
    init_locale2();
    defaultLocale2({
      dateTime: "%x, %X",
      date: "%-m/%-d/%Y",
      time: "%-I:%M:%S %p",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });
  }
});

// ../../node_modules/d3-time-format/src/index.js
var init_src9 = __esm({
  "../../node_modules/d3-time-format/src/index.js"() {
    init_defaultLocale2();
  }
});

// ../../node_modules/d3-scale/src/time.js
function date(t2) {
  return new Date(t2);
}
function number4(t2) {
  return t2 instanceof Date ? +t2 : +new Date(+t2);
}
function calendar(ticks4, tickInterval, year2, month2, week, day2, hour2, minute2, second2, format4) {
  var scale = continuous(), invert = scale.invert, domain = scale.domain;
  var formatMillisecond = format4(".%L"), formatSecond = format4(":%S"), formatMinute = format4("%I:%M"), formatHour = format4("%I %p"), formatDay = format4("%a %d"), formatWeek = format4("%b %d"), formatMonth = format4("%B"), formatYear3 = format4("%Y");
  function tickFormat2(date2) {
    return (second2(date2) < date2 ? formatMillisecond : minute2(date2) < date2 ? formatSecond : hour2(date2) < date2 ? formatMinute : day2(date2) < date2 ? formatHour : month2(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year2(date2) < date2 ? formatMonth : formatYear3)(date2);
  }
  scale.invert = function(y3) {
    return new Date(invert(y3));
  };
  scale.domain = function(_4) {
    return arguments.length ? domain(Array.from(_4, number4)) : domain().map(date);
  };
  scale.ticks = function(interval2) {
    var d2 = domain();
    return ticks4(d2[0], d2[d2.length - 1], interval2 == null ? 10 : interval2);
  };
  scale.tickFormat = function(count3, specifier) {
    return specifier == null ? tickFormat2 : format4(specifier);
  };
  scale.nice = function(interval2) {
    var d2 = domain();
    if (!interval2 || typeof interval2.range !== "function")
      interval2 = tickInterval(d2[0], d2[d2.length - 1], interval2 == null ? 10 : interval2);
    return interval2 ? domain(nice2(d2, interval2)) : scale;
  };
  scale.copy = function() {
    return copy(scale, calendar(ticks4, tickInterval, year2, month2, week, day2, hour2, minute2, second2, format4));
  };
  return scale;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, year_default, month_default, sunday, day_default, hour_default, minute_default, second_default, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}
var init_time = __esm({
  "../../node_modules/d3-scale/src/time.js"() {
    init_src8();
    init_src9();
    init_continuous();
    init_init();
    init_nice2();
  }
});

// ../../node_modules/d3-scale/src/utcTime.js
function utcTime() {
  return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default, second_default, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
}
var init_utcTime = __esm({
  "../../node_modules/d3-scale/src/utcTime.js"() {
    init_src8();
    init_src9();
    init_time();
    init_init();
  }
});

// ../../node_modules/d3-scale/src/sequential.js
function transformer2() {
  var x0 = 0, x1 = 1, t02, t12, k10, transform2, interpolator = identity3, clamp = false, unknown;
  function scale(x4) {
    return x4 == null || isNaN(x4 = +x4) ? unknown : interpolator(k10 === 0 ? 0.5 : (x4 = (transform2(x4) - t02) * k10, clamp ? Math.max(0, Math.min(1, x4)) : x4));
  }
  scale.domain = function(_4) {
    return arguments.length ? ([x0, x1] = _4, t02 = transform2(x0 = +x0), t12 = transform2(x1 = +x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02), scale) : [x0, x1];
  };
  scale.clamp = function(_4) {
    return arguments.length ? (clamp = !!_4, scale) : clamp;
  };
  scale.interpolator = function(_4) {
    return arguments.length ? (interpolator = _4, scale) : interpolator;
  };
  function range4(interpolate) {
    return function(_4) {
      var r0, r1;
      return arguments.length ? ([r0, r1] = _4, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
    };
  }
  scale.range = range4(value_default);
  scale.rangeRound = range4(round_default);
  scale.unknown = function(_4) {
    return arguments.length ? (unknown = _4, scale) : unknown;
  };
  return function(t2) {
    transform2 = t2, t02 = t2(x0), t12 = t2(x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02);
    return scale;
  };
}
function copy2(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}
function sequential() {
  var scale = linearish(transformer2()(identity3));
  scale.copy = function() {
    return copy2(scale, sequential());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialLog() {
  var scale = loggish(transformer2()).domain([1, 10]);
  scale.copy = function() {
    return copy2(scale, sequentialLog()).base(scale.base());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialSymlog() {
  var scale = symlogish(transformer2());
  scale.copy = function() {
    return copy2(scale, sequentialSymlog()).constant(scale.constant());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialPow() {
  var scale = powish(transformer2());
  scale.copy = function() {
    return copy2(scale, sequentialPow()).exponent(scale.exponent());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}
var init_sequential = __esm({
  "../../node_modules/d3-scale/src/sequential.js"() {
    init_src5();
    init_continuous();
    init_init();
    init_linear();
    init_log();
    init_symlog();
    init_pow();
  }
});

// ../../node_modules/d3-scale/src/sequentialQuantile.js
function sequentialQuantile() {
  var domain = [], interpolator = identity3;
  function scale(x4) {
    if (x4 != null && !isNaN(x4 = +x4))
      return interpolator((bisect_default2(domain, x4, 1) - 1) / (domain.length - 1));
  }
  scale.domain = function(_4) {
    if (!arguments.length)
      return domain.slice();
    domain = [];
    for (let d2 of _4)
      if (d2 != null && !isNaN(d2 = +d2))
        domain.push(d2);
    domain.sort(ascending2);
    return scale;
  };
  scale.interpolator = function(_4) {
    return arguments.length ? (interpolator = _4, scale) : interpolator;
  };
  scale.range = function() {
    return domain.map((d2, i4) => interpolator(i4 / (domain.length - 1)));
  };
  scale.quantiles = function(n3) {
    return Array.from({ length: n3 + 1 }, (_4, i4) => quantile2(domain, i4 / n3));
  };
  scale.copy = function() {
    return sequentialQuantile(interpolator).domain(domain);
  };
  return initInterpolator.apply(scale, arguments);
}
var init_sequentialQuantile = __esm({
  "../../node_modules/d3-scale/src/sequentialQuantile.js"() {
    init_src3();
    init_continuous();
    init_init();
  }
});

// ../../node_modules/d3-scale/src/diverging.js
function transformer3() {
  var x0 = 0, x1 = 0.5, x22 = 1, s3 = 1, t02, t12, t2, k10, k21, interpolator = identity3, transform2, clamp = false, unknown;
  function scale(x4) {
    return isNaN(x4 = +x4) ? unknown : (x4 = 0.5 + ((x4 = +transform2(x4)) - t12) * (s3 * x4 < s3 * t12 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x4)) : x4));
  }
  scale.domain = function(_4) {
    return arguments.length ? ([x0, x1, x22] = _4, t02 = transform2(x0 = +x0), t12 = transform2(x1 = +x1), t2 = transform2(x22 = +x22), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s3 = t12 < t02 ? -1 : 1, scale) : [x0, x1, x22];
  };
  scale.clamp = function(_4) {
    return arguments.length ? (clamp = !!_4, scale) : clamp;
  };
  scale.interpolator = function(_4) {
    return arguments.length ? (interpolator = _4, scale) : interpolator;
  };
  function range4(interpolate) {
    return function(_4) {
      var r0, r1, r2;
      return arguments.length ? ([r0, r1, r2] = _4, interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
    };
  }
  scale.range = range4(value_default);
  scale.rangeRound = range4(round_default);
  scale.unknown = function(_4) {
    return arguments.length ? (unknown = _4, scale) : unknown;
  };
  return function(t3) {
    transform2 = t3, t02 = t3(x0), t12 = t3(x1), t2 = t3(x22), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s3 = t12 < t02 ? -1 : 1;
    return scale;
  };
}
function diverging() {
  var scale = linearish(transformer3()(identity3));
  scale.copy = function() {
    return copy2(scale, diverging());
  };
  return initInterpolator.apply(scale, arguments);
}
function divergingLog() {
  var scale = loggish(transformer3()).domain([0.1, 1, 10]);
  scale.copy = function() {
    return copy2(scale, divergingLog()).base(scale.base());
  };
  return initInterpolator.apply(scale, arguments);
}
function divergingSymlog() {
  var scale = symlogish(transformer3());
  scale.copy = function() {
    return copy2(scale, divergingSymlog()).constant(scale.constant());
  };
  return initInterpolator.apply(scale, arguments);
}
function divergingPow() {
  var scale = powish(transformer3());
  scale.copy = function() {
    return copy2(scale, divergingPow()).exponent(scale.exponent());
  };
  return initInterpolator.apply(scale, arguments);
}
function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}
var init_diverging = __esm({
  "../../node_modules/d3-scale/src/diverging.js"() {
    init_src5();
    init_continuous();
    init_init();
    init_linear();
    init_log();
    init_sequential();
    init_symlog();
    init_pow();
  }
});

// ../../node_modules/d3-scale/src/index.js
var src_exports3 = {};
__export(src_exports3, {
  scaleBand: () => band,
  scaleDiverging: () => diverging,
  scaleDivergingLog: () => divergingLog,
  scaleDivergingPow: () => divergingPow,
  scaleDivergingSqrt: () => divergingSqrt,
  scaleDivergingSymlog: () => divergingSymlog,
  scaleIdentity: () => identity4,
  scaleImplicit: () => implicit,
  scaleLinear: () => linear2,
  scaleLog: () => log,
  scaleOrdinal: () => ordinal,
  scalePoint: () => point,
  scalePow: () => pow,
  scaleQuantile: () => quantile3,
  scaleQuantize: () => quantize,
  scaleRadial: () => radial,
  scaleSequential: () => sequential,
  scaleSequentialLog: () => sequentialLog,
  scaleSequentialPow: () => sequentialPow,
  scaleSequentialQuantile: () => sequentialQuantile,
  scaleSequentialSqrt: () => sequentialSqrt,
  scaleSequentialSymlog: () => sequentialSymlog,
  scaleSqrt: () => sqrt,
  scaleSymlog: () => symlog,
  scaleThreshold: () => threshold,
  scaleTime: () => time,
  scaleUtc: () => utcTime,
  tickFormat: () => tickFormat
});
var init_src10 = __esm({
  "../../node_modules/d3-scale/src/index.js"() {
    init_band();
    init_identity3();
    init_linear();
    init_log();
    init_symlog();
    init_ordinal();
    init_pow();
    init_radial();
    init_quantile3();
    init_quantize();
    init_threshold();
    init_time();
    init_utcTime();
    init_sequential();
    init_sequentialQuantile();
    init_diverging();
    init_tickFormat();
  }
});

// ../../node_modules/d3-random/src/defaultSource.js
var defaultSource_default;
var init_defaultSource = __esm({
  "../../node_modules/d3-random/src/defaultSource.js"() {
    defaultSource_default = Math.random;
  }
});

// ../../node_modules/d3-random/src/uniform.js
var uniform_default;
var init_uniform = __esm({
  "../../node_modules/d3-random/src/uniform.js"() {
    init_defaultSource();
    uniform_default = function sourceRandomUniform(source) {
      function randomUniform(min5, max6) {
        min5 = min5 == null ? 0 : +min5;
        max6 = max6 == null ? 1 : +max6;
        if (arguments.length === 1)
          max6 = min5, min5 = 0;
        else
          max6 -= min5;
        return function() {
          return source() * max6 + min5;
        };
      }
      randomUniform.source = sourceRandomUniform;
      return randomUniform;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/int.js
var int_default;
var init_int = __esm({
  "../../node_modules/d3-random/src/int.js"() {
    init_defaultSource();
    int_default = function sourceRandomInt(source) {
      function randomInt(min5, max6) {
        if (arguments.length < 2)
          max6 = min5, min5 = 0;
        min5 = Math.floor(min5);
        max6 = Math.floor(max6) - min5;
        return function() {
          return Math.floor(source() * max6 + min5);
        };
      }
      randomInt.source = sourceRandomInt;
      return randomInt;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/normal.js
var normal_default;
var init_normal = __esm({
  "../../node_modules/d3-random/src/normal.js"() {
    init_defaultSource();
    normal_default = function sourceRandomNormal(source) {
      function randomNormal(mu, sigma) {
        var x4, r2;
        mu = mu == null ? 0 : +mu;
        sigma = sigma == null ? 1 : +sigma;
        return function() {
          var y3;
          if (x4 != null)
            y3 = x4, x4 = null;
          else
            do {
              x4 = source() * 2 - 1;
              y3 = source() * 2 - 1;
              r2 = x4 * x4 + y3 * y3;
            } while (!r2 || r2 > 1);
          return mu + sigma * y3 * Math.sqrt(-2 * Math.log(r2) / r2);
        };
      }
      randomNormal.source = sourceRandomNormal;
      return randomNormal;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/logNormal.js
var logNormal_default;
var init_logNormal = __esm({
  "../../node_modules/d3-random/src/logNormal.js"() {
    init_defaultSource();
    init_normal();
    logNormal_default = function sourceRandomLogNormal(source) {
      var N5 = normal_default.source(source);
      function randomLogNormal() {
        var randomNormal = N5.apply(this, arguments);
        return function() {
          return Math.exp(randomNormal());
        };
      }
      randomLogNormal.source = sourceRandomLogNormal;
      return randomLogNormal;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/irwinHall.js
var irwinHall_default;
var init_irwinHall = __esm({
  "../../node_modules/d3-random/src/irwinHall.js"() {
    init_defaultSource();
    irwinHall_default = function sourceRandomIrwinHall(source) {
      function randomIrwinHall(n3) {
        if ((n3 = +n3) <= 0)
          return () => 0;
        return function() {
          for (var sum3 = 0, i4 = n3; i4 > 1; --i4)
            sum3 += source();
          return sum3 + i4 * source();
        };
      }
      randomIrwinHall.source = sourceRandomIrwinHall;
      return randomIrwinHall;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/bates.js
var bates_default;
var init_bates = __esm({
  "../../node_modules/d3-random/src/bates.js"() {
    init_defaultSource();
    init_irwinHall();
    bates_default = function sourceRandomBates(source) {
      var I4 = irwinHall_default.source(source);
      function randomBates(n3) {
        if ((n3 = +n3) === 0)
          return source;
        var randomIrwinHall = I4(n3);
        return function() {
          return randomIrwinHall() / n3;
        };
      }
      randomBates.source = sourceRandomBates;
      return randomBates;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/exponential.js
var exponential_default;
var init_exponential = __esm({
  "../../node_modules/d3-random/src/exponential.js"() {
    init_defaultSource();
    exponential_default = function sourceRandomExponential(source) {
      function randomExponential(lambda) {
        return function() {
          return -Math.log1p(-source()) / lambda;
        };
      }
      randomExponential.source = sourceRandomExponential;
      return randomExponential;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/pareto.js
var pareto_default;
var init_pareto = __esm({
  "../../node_modules/d3-random/src/pareto.js"() {
    init_defaultSource();
    pareto_default = function sourceRandomPareto(source) {
      function randomPareto(alpha) {
        if ((alpha = +alpha) < 0)
          throw new RangeError("invalid alpha");
        alpha = 1 / -alpha;
        return function() {
          return Math.pow(1 - source(), alpha);
        };
      }
      randomPareto.source = sourceRandomPareto;
      return randomPareto;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/bernoulli.js
var bernoulli_default;
var init_bernoulli = __esm({
  "../../node_modules/d3-random/src/bernoulli.js"() {
    init_defaultSource();
    bernoulli_default = function sourceRandomBernoulli(source) {
      function randomBernoulli(p2) {
        if ((p2 = +p2) < 0 || p2 > 1)
          throw new RangeError("invalid p");
        return function() {
          return Math.floor(source() + p2);
        };
      }
      randomBernoulli.source = sourceRandomBernoulli;
      return randomBernoulli;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/geometric.js
var geometric_default;
var init_geometric = __esm({
  "../../node_modules/d3-random/src/geometric.js"() {
    init_defaultSource();
    geometric_default = function sourceRandomGeometric(source) {
      function randomGeometric(p2) {
        if ((p2 = +p2) < 0 || p2 > 1)
          throw new RangeError("invalid p");
        if (p2 === 0)
          return () => Infinity;
        if (p2 === 1)
          return () => 1;
        p2 = Math.log1p(-p2);
        return function() {
          return 1 + Math.floor(Math.log1p(-source()) / p2);
        };
      }
      randomGeometric.source = sourceRandomGeometric;
      return randomGeometric;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/gamma.js
var gamma_default;
var init_gamma = __esm({
  "../../node_modules/d3-random/src/gamma.js"() {
    init_defaultSource();
    init_normal();
    gamma_default = function sourceRandomGamma(source) {
      var randomNormal = normal_default.source(source)();
      function randomGamma(k4, theta) {
        if ((k4 = +k4) < 0)
          throw new RangeError("invalid k");
        if (k4 === 0)
          return () => 0;
        theta = theta == null ? 1 : +theta;
        if (k4 === 1)
          return () => -Math.log1p(-source()) * theta;
        var d2 = (k4 < 1 ? k4 + 1 : k4) - 1 / 3, c6 = 1 / (3 * Math.sqrt(d2)), multiplier = k4 < 1 ? () => Math.pow(source(), 1 / k4) : () => 1;
        return function() {
          do {
            do {
              var x4 = randomNormal(), v4 = 1 + c6 * x4;
            } while (v4 <= 0);
            v4 *= v4 * v4;
            var u3 = 1 - source();
          } while (u3 >= 1 - 0.0331 * x4 * x4 * x4 * x4 && Math.log(u3) >= 0.5 * x4 * x4 + d2 * (1 - v4 + Math.log(v4)));
          return d2 * v4 * multiplier() * theta;
        };
      }
      randomGamma.source = sourceRandomGamma;
      return randomGamma;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/beta.js
var beta_default;
var init_beta = __esm({
  "../../node_modules/d3-random/src/beta.js"() {
    init_defaultSource();
    init_gamma();
    beta_default = function sourceRandomBeta(source) {
      var G4 = gamma_default.source(source);
      function randomBeta(alpha, beta) {
        var X6 = G4(alpha), Y6 = G4(beta);
        return function() {
          var x4 = X6();
          return x4 === 0 ? 0 : x4 / (x4 + Y6());
        };
      }
      randomBeta.source = sourceRandomBeta;
      return randomBeta;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/binomial.js
var binomial_default;
var init_binomial = __esm({
  "../../node_modules/d3-random/src/binomial.js"() {
    init_defaultSource();
    init_beta();
    init_geometric();
    binomial_default = function sourceRandomBinomial(source) {
      var G4 = geometric_default.source(source), B6 = beta_default.source(source);
      function randomBinomial(n3, p2) {
        n3 = +n3;
        if ((p2 = +p2) >= 1)
          return () => n3;
        if (p2 <= 0)
          return () => 0;
        return function() {
          var acc = 0, nn2 = n3, pp = p2;
          while (nn2 * pp > 16 && nn2 * (1 - pp) > 16) {
            var i4 = Math.floor((nn2 + 1) * pp), y3 = B6(i4, nn2 - i4 + 1)();
            if (y3 <= pp) {
              acc += i4;
              nn2 -= i4;
              pp = (pp - y3) / (1 - y3);
            } else {
              nn2 = i4 - 1;
              pp /= y3;
            }
          }
          var sign2 = pp < 0.5, pFinal = sign2 ? pp : 1 - pp, g3 = G4(pFinal);
          for (var s3 = g3(), k4 = 0; s3 <= nn2; ++k4)
            s3 += g3();
          return acc + (sign2 ? k4 : nn2 - k4);
        };
      }
      randomBinomial.source = sourceRandomBinomial;
      return randomBinomial;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/weibull.js
var weibull_default;
var init_weibull = __esm({
  "../../node_modules/d3-random/src/weibull.js"() {
    init_defaultSource();
    weibull_default = function sourceRandomWeibull(source) {
      function randomWeibull(k4, a5, b3) {
        var outerFunc;
        if ((k4 = +k4) === 0) {
          outerFunc = (x4) => -Math.log(x4);
        } else {
          k4 = 1 / k4;
          outerFunc = (x4) => Math.pow(x4, k4);
        }
        a5 = a5 == null ? 0 : +a5;
        b3 = b3 == null ? 1 : +b3;
        return function() {
          return a5 + b3 * outerFunc(-Math.log1p(-source()));
        };
      }
      randomWeibull.source = sourceRandomWeibull;
      return randomWeibull;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/cauchy.js
var cauchy_default;
var init_cauchy = __esm({
  "../../node_modules/d3-random/src/cauchy.js"() {
    init_defaultSource();
    cauchy_default = function sourceRandomCauchy(source) {
      function randomCauchy(a5, b3) {
        a5 = a5 == null ? 0 : +a5;
        b3 = b3 == null ? 1 : +b3;
        return function() {
          return a5 + b3 * Math.tan(Math.PI * source());
        };
      }
      randomCauchy.source = sourceRandomCauchy;
      return randomCauchy;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/logistic.js
var logistic_default;
var init_logistic = __esm({
  "../../node_modules/d3-random/src/logistic.js"() {
    init_defaultSource();
    logistic_default = function sourceRandomLogistic(source) {
      function randomLogistic(a5, b3) {
        a5 = a5 == null ? 0 : +a5;
        b3 = b3 == null ? 1 : +b3;
        return function() {
          var u3 = source();
          return a5 + b3 * Math.log(u3 / (1 - u3));
        };
      }
      randomLogistic.source = sourceRandomLogistic;
      return randomLogistic;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/poisson.js
var poisson_default;
var init_poisson = __esm({
  "../../node_modules/d3-random/src/poisson.js"() {
    init_defaultSource();
    init_binomial();
    init_gamma();
    poisson_default = function sourceRandomPoisson(source) {
      var G4 = gamma_default.source(source), B6 = binomial_default.source(source);
      function randomPoisson(lambda) {
        return function() {
          var acc = 0, l3 = lambda;
          while (l3 > 16) {
            var n3 = Math.floor(0.875 * l3), t2 = G4(n3)();
            if (t2 > l3)
              return acc + B6(n3 - 1, l3 / t2)();
            acc += n3;
            l3 -= t2;
          }
          for (var s3 = -Math.log1p(-source()), k4 = 0; s3 <= l3; ++k4)
            s3 -= Math.log1p(-source());
          return acc + k4;
        };
      }
      randomPoisson.source = sourceRandomPoisson;
      return randomPoisson;
    }(defaultSource_default);
  }
});

// ../../node_modules/d3-random/src/lcg.js
function lcg(seed = Math.random()) {
  let state = (0 <= seed && seed < 1 ? seed / eps : Math.abs(seed)) | 0;
  return () => (state = mul * state + inc | 0, eps * (state >>> 0));
}
var mul, inc, eps;
var init_lcg = __esm({
  "../../node_modules/d3-random/src/lcg.js"() {
    mul = 1664525;
    inc = 1013904223;
    eps = 1 / 4294967296;
  }
});

// ../../node_modules/d3-random/src/index.js
var src_exports4 = {};
__export(src_exports4, {
  randomBates: () => bates_default,
  randomBernoulli: () => bernoulli_default,
  randomBeta: () => beta_default,
  randomBinomial: () => binomial_default,
  randomCauchy: () => cauchy_default,
  randomExponential: () => exponential_default,
  randomGamma: () => gamma_default,
  randomGeometric: () => geometric_default,
  randomInt: () => int_default,
  randomIrwinHall: () => irwinHall_default,
  randomLcg: () => lcg,
  randomLogNormal: () => logNormal_default,
  randomLogistic: () => logistic_default,
  randomNormal: () => normal_default,
  randomPareto: () => pareto_default,
  randomPoisson: () => poisson_default,
  randomUniform: () => uniform_default,
  randomWeibull: () => weibull_default
});
var init_src11 = __esm({
  "../../node_modules/d3-random/src/index.js"() {
    init_uniform();
    init_int();
    init_normal();
    init_logNormal();
    init_bates();
    init_irwinHall();
    init_exponential();
    init_pareto();
    init_bernoulli();
    init_geometric();
    init_binomial();
    init_gamma();
    init_beta();
    init_weibull();
    init_cauchy();
    init_logistic();
    init_poisson();
    init_lcg();
  }
});

// ../../node_modules/d3-fetch/src/blob.js
function responseBlob(response) {
  if (!response.ok)
    throw new Error(response.status + " " + response.statusText);
  return response.blob();
}
function blob_default(input, init2) {
  return fetch(input, init2).then(responseBlob);
}
var init_blob = __esm({
  "../../node_modules/d3-fetch/src/blob.js"() {
  }
});

// ../../node_modules/d3-fetch/src/buffer.js
function responseArrayBuffer(response) {
  if (!response.ok)
    throw new Error(response.status + " " + response.statusText);
  return response.arrayBuffer();
}
function buffer_default(input, init2) {
  return fetch(input, init2).then(responseArrayBuffer);
}
var init_buffer = __esm({
  "../../node_modules/d3-fetch/src/buffer.js"() {
  }
});

// ../../node_modules/d3-dsv/src/dsv.js
function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function(name, i4) {
    return JSON.stringify(name) + ": d[" + i4 + '] || ""';
  }).join(",") + "}");
}
function customConverter(columns, f4) {
  var object = objectConverter(columns);
  return function(row, i4) {
    return f4(object(row), i4, columns);
  };
}
function inferColumns(rows) {
  var columnSet = /* @__PURE__ */ Object.create(null), columns = [];
  rows.forEach(function(row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });
  return columns;
}
function pad2(value, width) {
  var s3 = value + "", length3 = s3.length;
  return length3 < width ? new Array(width - length3 + 1).join(0) + s3 : s3;
}
function formatYear2(year2) {
  return year2 < 0 ? "-" + pad2(-year2, 6) : year2 > 9999 ? "+" + pad2(year2, 6) : pad2(year2, 4);
}
function formatDate(date2) {
  var hours2 = date2.getUTCHours(), minutes2 = date2.getUTCMinutes(), seconds2 = date2.getUTCSeconds(), milliseconds2 = date2.getUTCMilliseconds();
  return isNaN(date2) ? "Invalid Date" : formatYear2(date2.getUTCFullYear(), 4) + "-" + pad2(date2.getUTCMonth() + 1, 2) + "-" + pad2(date2.getUTCDate(), 2) + (milliseconds2 ? "T" + pad2(hours2, 2) + ":" + pad2(minutes2, 2) + ":" + pad2(seconds2, 2) + "." + pad2(milliseconds2, 3) + "Z" : seconds2 ? "T" + pad2(hours2, 2) + ":" + pad2(minutes2, 2) + ":" + pad2(seconds2, 2) + "Z" : minutes2 || hours2 ? "T" + pad2(hours2, 2) + ":" + pad2(minutes2, 2) + "Z" : "");
}
function dsv_default(delimiter) {
  var reFormat = new RegExp('["' + delimiter + "\n\r]"), DELIMITER = delimiter.charCodeAt(0);
  function parse2(text, f4) {
    var convert, columns, rows = parseRows(text, function(row, i4) {
      if (convert)
        return convert(row, i4 - 1);
      columns = row, convert = f4 ? customConverter(row, f4) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }
  function parseRows(text, f4) {
    var rows = [], N5 = text.length, I4 = 0, n3 = 0, t2, eof = N5 <= 0, eol = false;
    if (text.charCodeAt(N5 - 1) === NEWLINE)
      --N5;
    if (text.charCodeAt(N5 - 1) === RETURN)
      --N5;
    function token() {
      if (eof)
        return EOF;
      if (eol)
        return eol = false, EOL;
      var i4, j4 = I4, c6;
      if (text.charCodeAt(j4) === QUOTE) {
        while (I4++ < N5 && text.charCodeAt(I4) !== QUOTE || text.charCodeAt(++I4) === QUOTE)
          ;
        if ((i4 = I4) >= N5)
          eof = true;
        else if ((c6 = text.charCodeAt(I4++)) === NEWLINE)
          eol = true;
        else if (c6 === RETURN) {
          eol = true;
          if (text.charCodeAt(I4) === NEWLINE)
            ++I4;
        }
        return text.slice(j4 + 1, i4 - 1).replace(/""/g, '"');
      }
      while (I4 < N5) {
        if ((c6 = text.charCodeAt(i4 = I4++)) === NEWLINE)
          eol = true;
        else if (c6 === RETURN) {
          eol = true;
          if (text.charCodeAt(I4) === NEWLINE)
            ++I4;
        } else if (c6 !== DELIMITER)
          continue;
        return text.slice(j4, i4);
      }
      return eof = true, text.slice(j4, N5);
    }
    while ((t2 = token()) !== EOF) {
      var row = [];
      while (t2 !== EOL && t2 !== EOF)
        row.push(t2), t2 = token();
      if (f4 && (row = f4(row, n3++)) == null)
        continue;
      rows.push(row);
    }
    return rows;
  }
  function preformatBody(rows, columns) {
    return rows.map(function(row) {
      return columns.map(function(column) {
        return formatValue(row[column]);
      }).join(delimiter);
    });
  }
  function format4(rows, columns) {
    if (columns == null)
      columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
  }
  function formatBody(rows, columns) {
    if (columns == null)
      columns = inferColumns(rows);
    return preformatBody(rows, columns).join("\n");
  }
  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }
  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }
  function formatValue(value) {
    return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? '"' + value.replace(/"/g, '""') + '"' : value;
  }
  return {
    parse: parse2,
    parseRows,
    format: format4,
    formatBody,
    formatRows,
    formatRow,
    formatValue
  };
}
var EOL, EOF, QUOTE, NEWLINE, RETURN;
var init_dsv = __esm({
  "../../node_modules/d3-dsv/src/dsv.js"() {
    EOL = {};
    EOF = {};
    QUOTE = 34;
    NEWLINE = 10;
    RETURN = 13;
  }
});

// ../../node_modules/d3-dsv/src/csv.js
var csv, csvParse, csvParseRows, csvFormat, csvFormatBody, csvFormatRows, csvFormatRow, csvFormatValue;
var init_csv = __esm({
  "../../node_modules/d3-dsv/src/csv.js"() {
    init_dsv();
    csv = dsv_default(",");
    csvParse = csv.parse;
    csvParseRows = csv.parseRows;
    csvFormat = csv.format;
    csvFormatBody = csv.formatBody;
    csvFormatRows = csv.formatRows;
    csvFormatRow = csv.formatRow;
    csvFormatValue = csv.formatValue;
  }
});

// ../../node_modules/d3-dsv/src/tsv.js
var tsv, tsvParse, tsvParseRows, tsvFormat, tsvFormatBody, tsvFormatRows, tsvFormatRow, tsvFormatValue;
var init_tsv = __esm({
  "../../node_modules/d3-dsv/src/tsv.js"() {
    init_dsv();
    tsv = dsv_default("	");
    tsvParse = tsv.parse;
    tsvParseRows = tsv.parseRows;
    tsvFormat = tsv.format;
    tsvFormatBody = tsv.formatBody;
    tsvFormatRows = tsv.formatRows;
    tsvFormatRow = tsv.formatRow;
    tsvFormatValue = tsv.formatValue;
  }
});

// ../../node_modules/d3-dsv/src/index.js
var init_src12 = __esm({
  "../../node_modules/d3-dsv/src/index.js"() {
    init_dsv();
    init_csv();
    init_tsv();
  }
});

// ../../node_modules/d3-fetch/src/text.js
function responseText(response) {
  if (!response.ok)
    throw new Error(response.status + " " + response.statusText);
  return response.text();
}
function text_default(input, init2) {
  return fetch(input, init2).then(responseText);
}
var init_text = __esm({
  "../../node_modules/d3-fetch/src/text.js"() {
  }
});

// ../../node_modules/d3-fetch/src/dsv.js
function dsvParse(parse2) {
  return function(input, init2, row) {
    if (arguments.length === 2 && typeof init2 === "function")
      row = init2, init2 = void 0;
    return text_default(input, init2).then(function(response) {
      return parse2(response, row);
    });
  };
}
function dsv(delimiter, input, init2, row) {
  if (arguments.length === 3 && typeof init2 === "function")
    row = init2, init2 = void 0;
  var format4 = dsv_default(delimiter);
  return text_default(input, init2).then(function(response) {
    return format4.parse(response, row);
  });
}
var csv2, tsv2;
var init_dsv2 = __esm({
  "../../node_modules/d3-fetch/src/dsv.js"() {
    init_src12();
    init_text();
    csv2 = dsvParse(csvParse);
    tsv2 = dsvParse(tsvParse);
  }
});

// ../../node_modules/d3-fetch/src/image.js
function image_default(input, init2) {
  return new Promise(function(resolve, reject) {
    var image = new Image();
    for (var key in init2)
      image[key] = init2[key];
    image.onerror = reject;
    image.onload = function() {
      resolve(image);
    };
    image.src = input;
  });
}
var init_image = __esm({
  "../../node_modules/d3-fetch/src/image.js"() {
  }
});

// ../../node_modules/d3-fetch/src/json.js
function responseJson(response) {
  if (!response.ok)
    throw new Error(response.status + " " + response.statusText);
  if (response.status === 204 || response.status === 205)
    return;
  return response.json();
}
function json_default(input, init2) {
  return fetch(input, init2).then(responseJson);
}
var init_json = __esm({
  "../../node_modules/d3-fetch/src/json.js"() {
  }
});

// ../../node_modules/d3-fetch/src/xml.js
function parser(type2) {
  return (input, init2) => text_default(input, init2).then((text) => new DOMParser().parseFromString(text, type2));
}
var xml_default, html, svg;
var init_xml = __esm({
  "../../node_modules/d3-fetch/src/xml.js"() {
    init_text();
    xml_default = parser("application/xml");
    html = parser("text/html");
    svg = parser("image/svg+xml");
  }
});

// ../../node_modules/d3-fetch/src/index.js
var src_exports5 = {};
__export(src_exports5, {
  blob: () => blob_default,
  buffer: () => buffer_default,
  csv: () => csv2,
  dsv: () => dsv,
  html: () => html,
  image: () => image_default,
  json: () => json_default,
  svg: () => svg,
  text: () => text_default,
  tsv: () => tsv2,
  xml: () => xml_default
});
var init_src13 = __esm({
  "../../node_modules/d3-fetch/src/index.js"() {
    init_blob();
    init_buffer();
    init_dsv2();
    init_image();
    init_json();
    init_text();
    init_xml();
  }
});

// ../../node_modules/d3-path/src/path.js
function Path() {
  this._x0 = this._y0 = this._x1 = this._y1 = null;
  this._ = "";
}
function path() {
  return new Path();
}
var pi, tau, epsilon, tauEpsilon, path_default;
var init_path = __esm({
  "../../node_modules/d3-path/src/path.js"() {
    pi = Math.PI;
    tau = 2 * pi;
    epsilon = 1e-6;
    tauEpsilon = tau - epsilon;
    Path.prototype = path.prototype = {
      constructor: Path,
      moveTo: function(x4, y3) {
        this._ += "M" + (this._x0 = this._x1 = +x4) + "," + (this._y0 = this._y1 = +y3);
      },
      closePath: function() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      },
      lineTo: function(x4, y3) {
        this._ += "L" + (this._x1 = +x4) + "," + (this._y1 = +y3);
      },
      quadraticCurveTo: function(x1, y1, x4, y3) {
        this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x4) + "," + (this._y1 = +y3);
      },
      bezierCurveTo: function(x1, y1, x22, y22, x4, y3) {
        this._ += "C" + +x1 + "," + +y1 + "," + +x22 + "," + +y22 + "," + (this._x1 = +x4) + "," + (this._y1 = +y3);
      },
      arcTo: function(x1, y1, x22, y22, r2) {
        x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r2 = +r2;
        var x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        if (r2 < 0)
          throw new Error("negative radius: " + r2);
        if (this._x1 === null) {
          this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        } else if (!(l01_2 > epsilon))
          ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r2) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        } else {
          var x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l3 = r2 * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l3 / l01, t21 = l3 / l21;
          if (Math.abs(t01 - 1) > epsilon) {
            this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
          }
          this._ += "A" + r2 + "," + r2 + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
      },
      arc: function(x4, y3, r2, a0, a1, ccw) {
        x4 = +x4, y3 = +y3, r2 = +r2, ccw = !!ccw;
        var dx = r2 * Math.cos(a0), dy = r2 * Math.sin(a0), x0 = x4 + dx, y0 = y3 + dy, cw = 1 ^ ccw, da2 = ccw ? a0 - a1 : a1 - a0;
        if (r2 < 0)
          throw new Error("negative radius: " + r2);
        if (this._x1 === null) {
          this._ += "M" + x0 + "," + y0;
        } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
          this._ += "L" + x0 + "," + y0;
        }
        if (!r2)
          return;
        if (da2 < 0)
          da2 = da2 % tau + tau;
        if (da2 > tauEpsilon) {
          this._ += "A" + r2 + "," + r2 + ",0,1," + cw + "," + (x4 - dx) + "," + (y3 - dy) + "A" + r2 + "," + r2 + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        } else if (da2 > epsilon) {
          this._ += "A" + r2 + "," + r2 + ",0," + +(da2 >= pi) + "," + cw + "," + (this._x1 = x4 + r2 * Math.cos(a1)) + "," + (this._y1 = y3 + r2 * Math.sin(a1));
        }
      },
      rect: function(x4, y3, w4, h4) {
        this._ += "M" + (this._x0 = this._x1 = +x4) + "," + (this._y0 = this._y1 = +y3) + "h" + +w4 + "v" + +h4 + "h" + -w4 + "Z";
      },
      toString: function() {
        return this._;
      }
    };
    path_default = path;
  }
});

// ../../node_modules/d3-path/src/index.js
var src_exports6 = {};
__export(src_exports6, {
  path: () => path_default
});
var init_src14 = __esm({
  "../../node_modules/d3-path/src/index.js"() {
    init_path();
  }
});

// ../../node_modules/d3-selection/src/namespaces.js
var xhtml, namespaces_default;
var init_namespaces = __esm({
  "../../node_modules/d3-selection/src/namespaces.js"() {
    xhtml = "http://www.w3.org/1999/xhtml";
    namespaces_default = {
      svg: "http://www.w3.org/2000/svg",
      xhtml,
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace",
      xmlns: "http://www.w3.org/2000/xmlns/"
    };
  }
});

// ../../node_modules/d3-selection/src/namespace.js
function namespace_default(name) {
  var prefix2 = name += "", i4 = prefix2.indexOf(":");
  if (i4 >= 0 && (prefix2 = name.slice(0, i4)) !== "xmlns")
    name = name.slice(i4 + 1);
  return namespaces_default.hasOwnProperty(prefix2) ? { space: namespaces_default[prefix2], local: name } : name;
}
var init_namespace = __esm({
  "../../node_modules/d3-selection/src/namespace.js"() {
    init_namespaces();
  }
});

// ../../node_modules/d3-selection/src/creator.js
function creatorInherit(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name) {
  var fullname = namespace_default(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
var init_creator = __esm({
  "../../node_modules/d3-selection/src/creator.js"() {
    init_namespace();
    init_namespaces();
  }
});

// ../../node_modules/d3-selection/src/selector.js
function none() {
}
function selector_default(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}
var init_selector = __esm({
  "../../node_modules/d3-selection/src/selector.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/select.js
function select_default(select) {
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups2 = this._groups, m4 = groups2.length, subgroups = new Array(m4), j4 = 0; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], n3 = group2.length, subgroup = subgroups[j4] = new Array(n3), node, subnode, i4 = 0; i4 < n3; ++i4) {
      if ((node = group2[i4]) && (subnode = select.call(node, node.__data__, i4, group2))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i4] = subnode;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}
var init_select = __esm({
  "../../node_modules/d3-selection/src/selection/select.js"() {
    init_selection();
    init_selector();
  }
});

// ../../node_modules/d3-selection/src/array.js
function array2(x4) {
  return x4 == null ? [] : Array.isArray(x4) ? x4 : Array.from(x4);
}
var init_array3 = __esm({
  "../../node_modules/d3-selection/src/array.js"() {
  }
});

// ../../node_modules/d3-selection/src/selectorAll.js
function empty2() {
  return [];
}
function selectorAll_default(selector) {
  return selector == null ? empty2 : function() {
    return this.querySelectorAll(selector);
  };
}
var init_selectorAll = __esm({
  "../../node_modules/d3-selection/src/selectorAll.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/selectAll.js
function arrayAll(select) {
  return function() {
    return array2(select.apply(this, arguments));
  };
}
function selectAll_default(select) {
  if (typeof select === "function")
    select = arrayAll(select);
  else
    select = selectorAll_default(select);
  for (var groups2 = this._groups, m4 = groups2.length, subgroups = [], parents = [], j4 = 0; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], n3 = group2.length, node, i4 = 0; i4 < n3; ++i4) {
      if (node = group2[i4]) {
        subgroups.push(select.call(node, node.__data__, i4, group2));
        parents.push(node);
      }
    }
  }
  return new Selection(subgroups, parents);
}
var init_selectAll = __esm({
  "../../node_modules/d3-selection/src/selection/selectAll.js"() {
    init_selection();
    init_array3();
    init_selectorAll();
  }
});

// ../../node_modules/d3-selection/src/matcher.js
function matcher_default(selector) {
  return function() {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}
var init_matcher = __esm({
  "../../node_modules/d3-selection/src/matcher.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/selectChild.js
function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selectChild_default(match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}
var find;
var init_selectChild = __esm({
  "../../node_modules/d3-selection/src/selection/selectChild.js"() {
    init_matcher();
    find = Array.prototype.find;
  }
});

// ../../node_modules/d3-selection/src/selection/selectChildren.js
function children() {
  return Array.from(this.children);
}
function childrenFilter(match) {
  return function() {
    return filter2.call(this.children, match);
  };
}
function selectChildren_default(match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}
var filter2;
var init_selectChildren = __esm({
  "../../node_modules/d3-selection/src/selection/selectChildren.js"() {
    init_matcher();
    filter2 = Array.prototype.filter;
  }
});

// ../../node_modules/d3-selection/src/selection/filter.js
function filter_default(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups2 = this._groups, m4 = groups2.length, subgroups = new Array(m4), j4 = 0; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], n3 = group2.length, subgroup = subgroups[j4] = [], node, i4 = 0; i4 < n3; ++i4) {
      if ((node = group2[i4]) && match.call(node, node.__data__, i4, group2)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection(subgroups, this._parents);
}
var init_filter2 = __esm({
  "../../node_modules/d3-selection/src/selection/filter.js"() {
    init_selection();
    init_matcher();
  }
});

// ../../node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update) {
  return new Array(update.length);
}
var init_sparse = __esm({
  "../../node_modules/d3-selection/src/selection/sparse.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
}
function EnterNode(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
var init_enter = __esm({
  "../../node_modules/d3-selection/src/selection/enter.js"() {
    init_sparse();
    init_selection();
    EnterNode.prototype = {
      constructor: EnterNode,
      appendChild: function(child) {
        return this._parent.insertBefore(child, this._next);
      },
      insertBefore: function(child, next) {
        return this._parent.insertBefore(child, next);
      },
      querySelector: function(selector) {
        return this._parent.querySelector(selector);
      },
      querySelectorAll: function(selector) {
        return this._parent.querySelectorAll(selector);
      }
    };
  }
});

// ../../node_modules/d3-selection/src/constant.js
function constant_default2(x4) {
  return function() {
    return x4;
  };
}
var init_constant4 = __esm({
  "../../node_modules/d3-selection/src/constant.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/data.js
function bindIndex(parent, group2, enter, update, exit, data) {
  var i4 = 0, node, groupLength = group2.length, dataLength = data.length;
  for (; i4 < dataLength; ++i4) {
    if (node = group2[i4]) {
      node.__data__ = data[i4];
      update[i4] = node;
    } else {
      enter[i4] = new EnterNode(parent, data[i4]);
    }
  }
  for (; i4 < groupLength; ++i4) {
    if (node = group2[i4]) {
      exit[i4] = node;
    }
  }
}
function bindKey(parent, group2, enter, update, exit, data, key) {
  var i4, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group2.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i4 = 0; i4 < groupLength; ++i4) {
    if (node = group2[i4]) {
      keyValues[i4] = keyValue = key.call(node, node.__data__, i4, group2) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i4] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i4 = 0; i4 < dataLength; ++i4) {
    keyValue = key.call(parent, data[i4], i4, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i4] = node;
      node.__data__ = data[i4];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i4] = new EnterNode(parent, data[i4]);
    }
  }
  for (i4 = 0; i4 < groupLength; ++i4) {
    if ((node = group2[i4]) && nodeByKeyValue.get(keyValues[i4]) === node) {
      exit[i4] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function data_default(value, key) {
  if (!arguments.length)
    return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups2 = this._groups;
  if (typeof value !== "function")
    value = constant_default2(value);
  for (var m4 = groups2.length, update = new Array(m4), enter = new Array(m4), exit = new Array(m4), j4 = 0; j4 < m4; ++j4) {
    var parent = parents[j4], group2 = groups2[j4], groupLength = group2.length, data = arraylike(value.call(parent, parent && parent.__data__, j4, parents)), dataLength = data.length, enterGroup = enter[j4] = new Array(dataLength), updateGroup = update[j4] = new Array(dataLength), exitGroup = exit[j4] = new Array(groupLength);
    bind(parent, group2, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
function arraylike(data) {
  return typeof data === "object" && "length" in data ? data : Array.from(data);
}
var init_data = __esm({
  "../../node_modules/d3-selection/src/selection/data.js"() {
    init_selection();
    init_enter();
    init_constant4();
  }
});

// ../../node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
}
var init_exit = __esm({
  "../../node_modules/d3-selection/src/selection/exit.js"() {
    init_sparse();
    init_selection();
  }
});

// ../../node_modules/d3-selection/src/selection/join.js
function join_default(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter)
      enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update = onupdate(update);
    if (update)
      update = update.selection();
  }
  if (onexit == null)
    exit.remove();
  else
    onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}
var init_join = __esm({
  "../../node_modules/d3-selection/src/selection/join.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/merge.js
function merge_default(context) {
  var selection3 = context.selection ? context.selection() : context;
  for (var groups0 = this._groups, groups1 = selection3._groups, m0 = groups0.length, m1 = groups1.length, m4 = Math.min(m0, m1), merges = new Array(m0), j4 = 0; j4 < m4; ++j4) {
    for (var group0 = groups0[j4], group1 = groups1[j4], n3 = group0.length, merge2 = merges[j4] = new Array(n3), node, i4 = 0; i4 < n3; ++i4) {
      if (node = group0[i4] || group1[i4]) {
        merge2[i4] = node;
      }
    }
  }
  for (; j4 < m0; ++j4) {
    merges[j4] = groups0[j4];
  }
  return new Selection(merges, this._parents);
}
var init_merge2 = __esm({
  "../../node_modules/d3-selection/src/selection/merge.js"() {
    init_selection();
  }
});

// ../../node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups2 = this._groups, j4 = -1, m4 = groups2.length; ++j4 < m4; ) {
    for (var group2 = groups2[j4], i4 = group2.length - 1, next = group2[i4], node; --i4 >= 0; ) {
      if (node = group2[i4]) {
        if (next && node.compareDocumentPosition(next) ^ 4)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}
var init_order = __esm({
  "../../node_modules/d3-selection/src/selection/order.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/sort.js
function sort_default(compare) {
  if (!compare)
    compare = ascending4;
  function compareNode(a5, b3) {
    return a5 && b3 ? compare(a5.__data__, b3.__data__) : !a5 - !b3;
  }
  for (var groups2 = this._groups, m4 = groups2.length, sortgroups = new Array(m4), j4 = 0; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], n3 = group2.length, sortgroup = sortgroups[j4] = new Array(n3), node, i4 = 0; i4 < n3; ++i4) {
      if (node = group2[i4]) {
        sortgroup[i4] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection(sortgroups, this._parents).order();
}
function ascending4(a5, b3) {
  return a5 < b3 ? -1 : a5 > b3 ? 1 : a5 >= b3 ? 0 : NaN;
}
var init_sort3 = __esm({
  "../../node_modules/d3-selection/src/selection/sort.js"() {
    init_selection();
  }
});

// ../../node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
var init_call = __esm({
  "../../node_modules/d3-selection/src/selection/call.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  return Array.from(this);
}
var init_nodes = __esm({
  "../../node_modules/d3-selection/src/selection/nodes.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups2 = this._groups, j4 = 0, m4 = groups2.length; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], i4 = 0, n3 = group2.length; i4 < n3; ++i4) {
      var node = group2[i4];
      if (node)
        return node;
    }
  }
  return null;
}
var init_node = __esm({
  "../../node_modules/d3-selection/src/selection/node.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/size.js
function size_default() {
  let size = 0;
  for (const node of this)
    ++size;
  return size;
}
var init_size = __esm({
  "../../node_modules/d3-selection/src/selection/size.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}
var init_empty = __esm({
  "../../node_modules/d3-selection/src/selection/empty.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/each.js
function each_default(callback) {
  for (var groups2 = this._groups, j4 = 0, m4 = groups2.length; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], i4 = 0, n3 = group2.length, node; i4 < n3; ++i4) {
      if (node = group2[i4])
        callback.call(node, node.__data__, i4, group2);
    }
  }
  return this;
}
var init_each = __esm({
  "../../node_modules/d3-selection/src/selection/each.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/attr.js
function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction(name, value) {
  return function() {
    var v4 = value.apply(this, arguments);
    if (v4 == null)
      this.removeAttribute(name);
    else
      this.setAttribute(name, v4);
  };
}
function attrFunctionNS(fullname, value) {
  return function() {
    var v4 = value.apply(this, arguments);
    if (v4 == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v4);
  };
}
function attr_default(name, value) {
  var fullname = namespace_default(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}
var init_attr = __esm({
  "../../node_modules/d3-selection/src/selection/attr.js"() {
    init_namespace();
  }
});

// ../../node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}
var init_window = __esm({
  "../../node_modules/d3-selection/src/window.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/style.js
function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction(name, value, priority) {
  return function() {
    var v4 = value.apply(this, arguments);
    if (v4 == null)
      this.style.removeProperty(name);
    else
      this.style.setProperty(name, v4, priority);
  };
}
function style_default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
}
var init_style = __esm({
  "../../node_modules/d3-selection/src/selection/style.js"() {
    init_window();
  }
});

// ../../node_modules/d3-selection/src/selection/property.js
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction(name, value) {
  return function() {
    var v4 = value.apply(this, arguments);
    if (v4 == null)
      delete this[name];
    else
      this[name] = v4;
  };
}
function property_default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}
var init_property = __esm({
  "../../node_modules/d3-selection/src/selection/property.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/classed.js
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
function classedAdd(node, names) {
  var list = classList(node), i4 = -1, n3 = names.length;
  while (++i4 < n3)
    list.add(names[i4]);
}
function classedRemove(node, names) {
  var list = classList(node), i4 = -1, n3 = names.length;
  while (++i4 < n3)
    list.remove(names[i4]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function classed_default(name, value) {
  var names = classArray(name + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i4 = -1, n3 = names.length;
    while (++i4 < n3)
      if (!list.contains(names[i4]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}
var init_classed = __esm({
  "../../node_modules/d3-selection/src/selection/classed.js"() {
    ClassList.prototype = {
      add: function(name) {
        var i4 = this._names.indexOf(name);
        if (i4 < 0) {
          this._names.push(name);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      remove: function(name) {
        var i4 = this._names.indexOf(name);
        if (i4 >= 0) {
          this._names.splice(i4, 1);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      contains: function(name) {
        return this._names.indexOf(name) >= 0;
      }
    };
  }
});

// ../../node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var v4 = value.apply(this, arguments);
    this.textContent = v4 == null ? "" : v4;
  };
}
function text_default2(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}
var init_text2 = __esm({
  "../../node_modules/d3-selection/src/selection/text.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v4 = value.apply(this, arguments);
    this.innerHTML = v4 == null ? "" : v4;
  };
}
function html_default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}
var init_html = __esm({
  "../../node_modules/d3-selection/src/selection/html.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/raise.js
function raise() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise);
}
var init_raise = __esm({
  "../../node_modules/d3-selection/src/selection/raise.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/lower.js
function lower() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower);
}
var init_lower = __esm({
  "../../node_modules/d3-selection/src/selection/lower.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/append.js
function append_default(name) {
  var create2 = typeof name === "function" ? name : creator_default(name);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}
var init_append = __esm({
  "../../node_modules/d3-selection/src/selection/append.js"() {
    init_creator();
  }
});

// ../../node_modules/d3-selection/src/selection/insert.js
function constantNull() {
  return null;
}
function insert_default(name, before) {
  var create2 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
  });
}
var init_insert = __esm({
  "../../node_modules/d3-selection/src/selection/insert.js"() {
    init_creator();
    init_selector();
  }
});

// ../../node_modules/d3-selection/src/selection/remove.js
function remove() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function remove_default() {
  return this.each(remove);
}
var init_remove = __esm({
  "../../node_modules/d3-selection/src/selection/remove.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function clone_default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}
var init_clone = __esm({
  "../../node_modules/d3-selection/src/selection/clone.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/datum.js
function datum_default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}
var init_datum = __esm({
  "../../node_modules/d3-selection/src/selection/datum.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/on.js
function contextListener(listener) {
  return function(event2) {
    listener.call(this, event2, this.__data__);
  };
}
function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t2) {
    var name = "", i4 = t2.indexOf(".");
    if (i4 >= 0)
      name = t2.slice(i4 + 1), t2 = t2.slice(0, i4);
    return { type: t2, name };
  });
}
function onRemove(typename) {
  return function() {
    var on2 = this.__on;
    if (!on2)
      return;
    for (var j4 = 0, i4 = -1, m4 = on2.length, o2; j4 < m4; ++j4) {
      if (o2 = on2[j4], (!typename.type || o2.type === typename.type) && o2.name === typename.name) {
        this.removeEventListener(o2.type, o2.listener, o2.options);
      } else {
        on2[++i4] = o2;
      }
    }
    if (++i4)
      on2.length = i4;
    else
      delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function() {
    var on2 = this.__on, o2, listener = contextListener(value);
    if (on2)
      for (var j4 = 0, m4 = on2.length; j4 < m4; ++j4) {
        if ((o2 = on2[j4]).type === typename.type && o2.name === typename.name) {
          this.removeEventListener(o2.type, o2.listener, o2.options);
          this.addEventListener(o2.type, o2.listener = listener, o2.options = options);
          o2.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, options);
    o2 = { type: typename.type, name: typename.name, value, listener, options };
    if (!on2)
      this.__on = [o2];
    else
      on2.push(o2);
  };
}
function on_default(typename, value, options) {
  var typenames = parseTypenames(typename + ""), i4, n3 = typenames.length, t2;
  if (arguments.length < 2) {
    var on2 = this.node().__on;
    if (on2)
      for (var j4 = 0, m4 = on2.length, o2; j4 < m4; ++j4) {
        for (i4 = 0, o2 = on2[j4]; i4 < n3; ++i4) {
          if ((t2 = typenames[i4]).type === o2.type && t2.name === o2.name) {
            return o2.value;
          }
        }
      }
    return;
  }
  on2 = value ? onAdd : onRemove;
  for (i4 = 0; i4 < n3; ++i4)
    this.each(on2(typenames[i4], value, options));
  return this;
}
var init_on = __esm({
  "../../node_modules/d3-selection/src/selection/on.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type2, params) {
  var window2 = window_default(node), event2 = window2.CustomEvent;
  if (typeof event2 === "function") {
    event2 = new event2(type2, params);
  } else {
    event2 = window2.document.createEvent("Event");
    if (params)
      event2.initEvent(type2, params.bubbles, params.cancelable), event2.detail = params.detail;
    else
      event2.initEvent(type2, false, false);
  }
  node.dispatchEvent(event2);
}
function dispatchConstant(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params);
  };
}
function dispatchFunction(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params.apply(this, arguments));
  };
}
function dispatch_default(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
}
var init_dispatch = __esm({
  "../../node_modules/d3-selection/src/selection/dispatch.js"() {
    init_window();
  }
});

// ../../node_modules/d3-selection/src/selection/iterator.js
function* iterator_default() {
  for (var groups2 = this._groups, j4 = 0, m4 = groups2.length; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], i4 = 0, n3 = group2.length, node; i4 < n3; ++i4) {
      if (node = group2[i4])
        yield node;
    }
  }
}
var init_iterator = __esm({
  "../../node_modules/d3-selection/src/selection/iterator.js"() {
  }
});

// ../../node_modules/d3-selection/src/selection/index.js
function Selection(groups2, parents) {
  this._groups = groups2;
  this._parents = parents;
}
function selection() {
  return new Selection([[document.documentElement]], root);
}
function selection_selection() {
  return this;
}
var root, selection_default;
var init_selection = __esm({
  "../../node_modules/d3-selection/src/selection/index.js"() {
    init_select();
    init_selectAll();
    init_selectChild();
    init_selectChildren();
    init_filter2();
    init_data();
    init_enter();
    init_exit();
    init_join();
    init_merge2();
    init_order();
    init_sort3();
    init_call();
    init_nodes();
    init_node();
    init_size();
    init_empty();
    init_each();
    init_attr();
    init_style();
    init_property();
    init_classed();
    init_text2();
    init_html();
    init_raise();
    init_lower();
    init_append();
    init_insert();
    init_remove();
    init_clone();
    init_datum();
    init_on();
    init_dispatch();
    init_iterator();
    root = [null];
    Selection.prototype = selection.prototype = {
      constructor: Selection,
      select: select_default,
      selectAll: selectAll_default,
      selectChild: selectChild_default,
      selectChildren: selectChildren_default,
      filter: filter_default,
      data: data_default,
      enter: enter_default,
      exit: exit_default,
      join: join_default,
      merge: merge_default,
      selection: selection_selection,
      order: order_default,
      sort: sort_default,
      call: call_default,
      nodes: nodes_default,
      node: node_default,
      size: size_default,
      empty: empty_default,
      each: each_default,
      attr: attr_default,
      style: style_default,
      property: property_default,
      classed: classed_default,
      text: text_default2,
      html: html_default,
      raise: raise_default,
      lower: lower_default,
      append: append_default,
      insert: insert_default,
      remove: remove_default,
      clone: clone_default,
      datum: datum_default,
      on: on_default,
      dispatch: dispatch_default,
      [Symbol.iterator]: iterator_default
    };
    selection_default = selection;
  }
});

// ../../node_modules/d3-selection/src/select.js
function select_default2(selector) {
  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
}
var init_select2 = __esm({
  "../../node_modules/d3-selection/src/select.js"() {
    init_selection();
  }
});

// ../../node_modules/d3-selection/src/create.js
function create_default(name) {
  return select_default2(creator_default(name).call(document.documentElement));
}
var init_create = __esm({
  "../../node_modules/d3-selection/src/create.js"() {
    init_creator();
    init_select2();
  }
});

// ../../node_modules/d3-selection/src/local.js
function local() {
  return new Local();
}
function Local() {
  this._ = "@" + (++nextId).toString(36);
}
var nextId;
var init_local = __esm({
  "../../node_modules/d3-selection/src/local.js"() {
    nextId = 0;
    Local.prototype = local.prototype = {
      constructor: Local,
      get: function(node) {
        var id2 = this._;
        while (!(id2 in node))
          if (!(node = node.parentNode))
            return;
        return node[id2];
      },
      set: function(node, value) {
        return node[this._] = value;
      },
      remove: function(node) {
        return this._ in node && delete node[this._];
      },
      toString: function() {
        return this._;
      }
    };
  }
});

// ../../node_modules/d3-selection/src/sourceEvent.js
function sourceEvent_default(event2) {
  let sourceEvent;
  while (sourceEvent = event2.sourceEvent)
    event2 = sourceEvent;
  return event2;
}
var init_sourceEvent = __esm({
  "../../node_modules/d3-selection/src/sourceEvent.js"() {
  }
});

// ../../node_modules/d3-selection/src/pointer.js
function pointer_default(event2, node) {
  event2 = sourceEvent_default(event2);
  if (node === void 0)
    node = event2.currentTarget;
  if (node) {
    var svg2 = node.ownerSVGElement || node;
    if (svg2.createSVGPoint) {
      var point7 = svg2.createSVGPoint();
      point7.x = event2.clientX, point7.y = event2.clientY;
      point7 = point7.matrixTransform(node.getScreenCTM().inverse());
      return [point7.x, point7.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event2.clientX - rect.left - node.clientLeft, event2.clientY - rect.top - node.clientTop];
    }
  }
  return [event2.pageX, event2.pageY];
}
var init_pointer = __esm({
  "../../node_modules/d3-selection/src/pointer.js"() {
    init_sourceEvent();
  }
});

// ../../node_modules/d3-selection/src/pointers.js
function pointers_default(events, node) {
  if (events.target) {
    events = sourceEvent_default(events);
    if (node === void 0)
      node = events.currentTarget;
    events = events.touches || [events];
  }
  return Array.from(events, (event2) => pointer_default(event2, node));
}
var init_pointers = __esm({
  "../../node_modules/d3-selection/src/pointers.js"() {
    init_pointer();
    init_sourceEvent();
  }
});

// ../../node_modules/d3-selection/src/selectAll.js
function selectAll_default2(selector) {
  return typeof selector === "string" ? new Selection([document.querySelectorAll(selector)], [document.documentElement]) : new Selection([array2(selector)], root);
}
var init_selectAll2 = __esm({
  "../../node_modules/d3-selection/src/selectAll.js"() {
    init_array3();
    init_selection();
  }
});

// ../../node_modules/d3-selection/src/index.js
var src_exports7 = {};
__export(src_exports7, {
  create: () => create_default,
  creator: () => creator_default,
  local: () => local,
  matcher: () => matcher_default,
  namespace: () => namespace_default,
  namespaces: () => namespaces_default,
  pointer: () => pointer_default,
  pointers: () => pointers_default,
  select: () => select_default2,
  selectAll: () => selectAll_default2,
  selection: () => selection_default,
  selector: () => selector_default,
  selectorAll: () => selectorAll_default,
  style: () => styleValue,
  window: () => window_default
});
var init_src15 = __esm({
  "../../node_modules/d3-selection/src/index.js"() {
    init_create();
    init_creator();
    init_local();
    init_matcher();
    init_namespace();
    init_namespaces();
    init_pointer();
    init_pointers();
    init_select2();
    init_selectAll2();
    init_selection();
    init_selector();
    init_selectorAll();
    init_style();
    init_window();
  }
});

// ../../node_modules/d3-shape/src/constant.js
function constant_default3(x4) {
  return function constant2() {
    return x4;
  };
}
var init_constant5 = __esm({
  "../../node_modules/d3-shape/src/constant.js"() {
  }
});

// ../../node_modules/d3-shape/src/math.js
function acos(x4) {
  return x4 > 1 ? 0 : x4 < -1 ? pi2 : Math.acos(x4);
}
function asin(x4) {
  return x4 >= 1 ? halfPi : x4 <= -1 ? -halfPi : Math.asin(x4);
}
var abs, atan2, cos, max4, min3, sin, sqrt2, epsilon3, pi2, halfPi, tau2;
var init_math2 = __esm({
  "../../node_modules/d3-shape/src/math.js"() {
    abs = Math.abs;
    atan2 = Math.atan2;
    cos = Math.cos;
    max4 = Math.max;
    min3 = Math.min;
    sin = Math.sin;
    sqrt2 = Math.sqrt;
    epsilon3 = 1e-12;
    pi2 = Math.PI;
    halfPi = pi2 / 2;
    tau2 = 2 * pi2;
  }
});

// ../../node_modules/d3-shape/src/arc.js
function arcInnerRadius(d2) {
  return d2.innerRadius;
}
function arcOuterRadius(d2) {
  return d2.outerRadius;
}
function arcStartAngle(d2) {
  return d2.startAngle;
}
function arcEndAngle(d2) {
  return d2.endAngle;
}
function arcPadAngle(d2) {
  return d2 && d2.padAngle;
}
function intersect(x0, y0, x1, y1, x22, y22, x32, y3) {
  var x10 = x1 - x0, y10 = y1 - y0, x322 = x32 - x22, y32 = y3 - y22, t2 = y32 * x10 - x322 * y10;
  if (t2 * t2 < epsilon3)
    return;
  t2 = (x322 * (y0 - y22) - y32 * (x0 - x22)) / t2;
  return [x0 + t2 * x10, y0 + t2 * y10];
}
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1, y01 = y0 - y1, lo2 = (cw ? rc : -rc) / sqrt2(x01 * x01 + y01 * y01), ox = lo2 * y01, oy = -lo2 * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r2 = r1 - rc, D7 = x11 * y10 - x10 * y11, d3 = (dy < 0 ? -1 : 1) * sqrt2(max4(0, r2 * r2 * d2 - D7 * D7)), cx0 = (D7 * dy - dx * d3) / d2, cy0 = (-D7 * dx - dy * d3) / d2, cx1 = (D7 * dy + dx * d3) / d2, cy1 = (-D7 * dx + dy * d3) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
    cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r2 - 1),
    y11: cy0 * (r1 / r2 - 1)
  };
}
function arc_default() {
  var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default3(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
  function arc() {
    var buffer, r2, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da2 = abs(a1 - a0), cw = a1 > a0;
    if (!context)
      context = buffer = path_default();
    if (r1 < r0)
      r2 = r1, r1 = r0, r0 = r2;
    if (!(r1 > epsilon3))
      context.moveTo(0, 0);
    else if (da2 > tau2 - epsilon3) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon3) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    } else {
      var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da2, da1 = da2, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon3 && (padRadius ? +padRadius.apply(this, arguments) : sqrt2(r0 * r0 + r1 * r1)), rc = min3(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t02, t12;
      if (rp > epsilon3) {
        var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon3)
          p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
        else
          da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon3)
          p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
        else
          da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
      if (rc > epsilon3) {
        var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
        if (da2 < pi2 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
          var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt2(ax * ax + ay * ay) * sqrt2(bx * bx + by * by))) / 2), lc = sqrt2(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = min3(rc, (r0 - lc) / (kc - 1));
          rc1 = min3(rc, (r1 - lc) / (kc + 1));
        }
      }
      if (!(da1 > epsilon3))
        context.moveTo(x01, y01);
      else if (rc1 > epsilon3) {
        t02 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t12 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t02.cx + t02.x01, t02.cy + t02.y01);
        if (rc1 < rc)
          context.arc(t02.cx, t02.cy, rc1, atan2(t02.y01, t02.x01), atan2(t12.y01, t12.x01), !cw);
        else {
          context.arc(t02.cx, t02.cy, rc1, atan2(t02.y01, t02.x01), atan2(t02.y11, t02.x11), !cw);
          context.arc(0, 0, r1, atan2(t02.cy + t02.y11, t02.cx + t02.x11), atan2(t12.cy + t12.y11, t12.cx + t12.x11), !cw);
          context.arc(t12.cx, t12.cy, rc1, atan2(t12.y11, t12.x11), atan2(t12.y01, t12.x01), !cw);
        }
      } else
        context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
      if (!(r0 > epsilon3) || !(da0 > epsilon3))
        context.lineTo(x10, y10);
      else if (rc0 > epsilon3) {
        t02 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t12 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
        context.lineTo(t02.cx + t02.x01, t02.cy + t02.y01);
        if (rc0 < rc)
          context.arc(t02.cx, t02.cy, rc0, atan2(t02.y01, t02.x01), atan2(t12.y01, t12.x01), !cw);
        else {
          context.arc(t02.cx, t02.cy, rc0, atan2(t02.y01, t02.x01), atan2(t02.y11, t02.x11), !cw);
          context.arc(0, 0, r0, atan2(t02.cy + t02.y11, t02.cx + t02.x11), atan2(t12.cy + t12.y11, t12.cx + t12.x11), cw);
          context.arc(t12.cx, t12.cy, rc0, atan2(t12.y11, t12.x11), atan2(t12.y01, t12.x01), !cw);
        }
      } else
        context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer)
      return context = null, buffer + "" || null;
  }
  arc.centroid = function() {
    var r2 = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a5 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi2 / 2;
    return [cos(a5) * r2, sin(a5) * r2];
  };
  arc.innerRadius = function(_4) {
    return arguments.length ? (innerRadius = typeof _4 === "function" ? _4 : constant_default3(+_4), arc) : innerRadius;
  };
  arc.outerRadius = function(_4) {
    return arguments.length ? (outerRadius = typeof _4 === "function" ? _4 : constant_default3(+_4), arc) : outerRadius;
  };
  arc.cornerRadius = function(_4) {
    return arguments.length ? (cornerRadius = typeof _4 === "function" ? _4 : constant_default3(+_4), arc) : cornerRadius;
  };
  arc.padRadius = function(_4) {
    return arguments.length ? (padRadius = _4 == null ? null : typeof _4 === "function" ? _4 : constant_default3(+_4), arc) : padRadius;
  };
  arc.startAngle = function(_4) {
    return arguments.length ? (startAngle = typeof _4 === "function" ? _4 : constant_default3(+_4), arc) : startAngle;
  };
  arc.endAngle = function(_4) {
    return arguments.length ? (endAngle = typeof _4 === "function" ? _4 : constant_default3(+_4), arc) : endAngle;
  };
  arc.padAngle = function(_4) {
    return arguments.length ? (padAngle = typeof _4 === "function" ? _4 : constant_default3(+_4), arc) : padAngle;
  };
  arc.context = function(_4) {
    return arguments.length ? (context = _4 == null ? null : _4, arc) : context;
  };
  return arc;
}
var init_arc = __esm({
  "../../node_modules/d3-shape/src/arc.js"() {
    init_src14();
    init_constant5();
    init_math2();
  }
});

// ../../node_modules/d3-shape/src/array.js
function array_default(x4) {
  return typeof x4 === "object" && "length" in x4 ? x4 : Array.from(x4);
}
var slice2;
var init_array4 = __esm({
  "../../node_modules/d3-shape/src/array.js"() {
    slice2 = Array.prototype.slice;
  }
});

// ../../node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
function linear_default(context) {
  return new Linear(context);
}
var init_linear2 = __esm({
  "../../node_modules/d3-shape/src/curve/linear.js"() {
    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x4, y3) {
        x4 = +x4, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x4, y3) : this._context.moveTo(x4, y3);
            break;
          case 1:
            this._point = 2;
          default:
            this._context.lineTo(x4, y3);
            break;
        }
      }
    };
  }
});

// ../../node_modules/d3-shape/src/point.js
function x3(p2) {
  return p2[0];
}
function y2(p2) {
  return p2[1];
}
var init_point = __esm({
  "../../node_modules/d3-shape/src/point.js"() {
  }
});

// ../../node_modules/d3-shape/src/line.js
function line_default(x4, y3) {
  var defined = constant_default3(true), context = null, curve = linear_default, output = null;
  x4 = typeof x4 === "function" ? x4 : x4 === void 0 ? x3 : constant_default3(x4);
  y3 = typeof y3 === "function" ? y3 : y3 === void 0 ? y2 : constant_default3(y3);
  function line(data) {
    var i4, n3 = (data = array_default(data)).length, d2, defined0 = false, buffer;
    if (context == null)
      output = curve(buffer = path_default());
    for (i4 = 0; i4 <= n3; ++i4) {
      if (!(i4 < n3 && defined(d2 = data[i4], i4, data)) === defined0) {
        if (defined0 = !defined0)
          output.lineStart();
        else
          output.lineEnd();
      }
      if (defined0)
        output.point(+x4(d2, i4, data), +y3(d2, i4, data));
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  line.x = function(_4) {
    return arguments.length ? (x4 = typeof _4 === "function" ? _4 : constant_default3(+_4), line) : x4;
  };
  line.y = function(_4) {
    return arguments.length ? (y3 = typeof _4 === "function" ? _4 : constant_default3(+_4), line) : y3;
  };
  line.defined = function(_4) {
    return arguments.length ? (defined = typeof _4 === "function" ? _4 : constant_default3(!!_4), line) : defined;
  };
  line.curve = function(_4) {
    return arguments.length ? (curve = _4, context != null && (output = curve(context)), line) : curve;
  };
  line.context = function(_4) {
    return arguments.length ? (_4 == null ? context = output = null : output = curve(context = _4), line) : context;
  };
  return line;
}
var init_line = __esm({
  "../../node_modules/d3-shape/src/line.js"() {
    init_src14();
    init_array4();
    init_constant5();
    init_linear2();
    init_point();
  }
});

// ../../node_modules/d3-shape/src/area.js
function area_default(x0, y0, y1) {
  var x1 = null, defined = constant_default3(true), context = null, curve = linear_default, output = null;
  x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x3 : constant_default3(+x0);
  y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant_default3(0) : constant_default3(+y0);
  y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y2 : constant_default3(+y1);
  function area(data) {
    var i4, j4, k4, n3 = (data = array_default(data)).length, d2, defined0 = false, buffer, x0z = new Array(n3), y0z = new Array(n3);
    if (context == null)
      output = curve(buffer = path_default());
    for (i4 = 0; i4 <= n3; ++i4) {
      if (!(i4 < n3 && defined(d2 = data[i4], i4, data)) === defined0) {
        if (defined0 = !defined0) {
          j4 = i4;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k4 = i4 - 1; k4 >= j4; --k4) {
            output.point(x0z[k4], y0z[k4]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i4] = +x0(d2, i4, data), y0z[i4] = +y0(d2, i4, data);
        output.point(x1 ? +x1(d2, i4, data) : x0z[i4], y1 ? +y1(d2, i4, data) : y0z[i4]);
      }
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  function arealine() {
    return line_default().defined(defined).curve(curve).context(context);
  }
  area.x = function(_4) {
    return arguments.length ? (x0 = typeof _4 === "function" ? _4 : constant_default3(+_4), x1 = null, area) : x0;
  };
  area.x0 = function(_4) {
    return arguments.length ? (x0 = typeof _4 === "function" ? _4 : constant_default3(+_4), area) : x0;
  };
  area.x1 = function(_4) {
    return arguments.length ? (x1 = _4 == null ? null : typeof _4 === "function" ? _4 : constant_default3(+_4), area) : x1;
  };
  area.y = function(_4) {
    return arguments.length ? (y0 = typeof _4 === "function" ? _4 : constant_default3(+_4), y1 = null, area) : y0;
  };
  area.y0 = function(_4) {
    return arguments.length ? (y0 = typeof _4 === "function" ? _4 : constant_default3(+_4), area) : y0;
  };
  area.y1 = function(_4) {
    return arguments.length ? (y1 = _4 == null ? null : typeof _4 === "function" ? _4 : constant_default3(+_4), area) : y1;
  };
  area.lineX0 = area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };
  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };
  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };
  area.defined = function(_4) {
    return arguments.length ? (defined = typeof _4 === "function" ? _4 : constant_default3(!!_4), area) : defined;
  };
  area.curve = function(_4) {
    return arguments.length ? (curve = _4, context != null && (output = curve(context)), area) : curve;
  };
  area.context = function(_4) {
    return arguments.length ? (_4 == null ? context = output = null : output = curve(context = _4), area) : context;
  };
  return area;
}
var init_area = __esm({
  "../../node_modules/d3-shape/src/area.js"() {
    init_src14();
    init_array4();
    init_constant5();
    init_linear2();
    init_line();
    init_point();
  }
});

// ../../node_modules/d3-shape/src/descending.js
function descending_default(a5, b3) {
  return b3 < a5 ? -1 : b3 > a5 ? 1 : b3 >= a5 ? 0 : NaN;
}
var init_descending2 = __esm({
  "../../node_modules/d3-shape/src/descending.js"() {
  }
});

// ../../node_modules/d3-shape/src/identity.js
function identity_default2(d2) {
  return d2;
}
var init_identity4 = __esm({
  "../../node_modules/d3-shape/src/identity.js"() {
  }
});

// ../../node_modules/d3-shape/src/pie.js
function pie_default() {
  var value = identity_default2, sortValues = descending_default, sort2 = null, startAngle = constant_default3(0), endAngle = constant_default3(tau2), padAngle = constant_default3(0);
  function pie(data) {
    var i4, n3 = (data = array_default(data)).length, j4, k4, sum3 = 0, index2 = new Array(n3), arcs = new Array(n3), a0 = +startAngle.apply(this, arguments), da2 = Math.min(tau2, Math.max(-tau2, endAngle.apply(this, arguments) - a0)), a1, p2 = Math.min(Math.abs(da2) / n3, padAngle.apply(this, arguments)), pa2 = p2 * (da2 < 0 ? -1 : 1), v4;
    for (i4 = 0; i4 < n3; ++i4) {
      if ((v4 = arcs[index2[i4] = i4] = +value(data[i4], i4, data)) > 0) {
        sum3 += v4;
      }
    }
    if (sortValues != null)
      index2.sort(function(i5, j5) {
        return sortValues(arcs[i5], arcs[j5]);
      });
    else if (sort2 != null)
      index2.sort(function(i5, j5) {
        return sort2(data[i5], data[j5]);
      });
    for (i4 = 0, k4 = sum3 ? (da2 - n3 * pa2) / sum3 : 0; i4 < n3; ++i4, a0 = a1) {
      j4 = index2[i4], v4 = arcs[j4], a1 = a0 + (v4 > 0 ? v4 * k4 : 0) + pa2, arcs[j4] = {
        data: data[j4],
        index: i4,
        value: v4,
        startAngle: a0,
        endAngle: a1,
        padAngle: p2
      };
    }
    return arcs;
  }
  pie.value = function(_4) {
    return arguments.length ? (value = typeof _4 === "function" ? _4 : constant_default3(+_4), pie) : value;
  };
  pie.sortValues = function(_4) {
    return arguments.length ? (sortValues = _4, sort2 = null, pie) : sortValues;
  };
  pie.sort = function(_4) {
    return arguments.length ? (sort2 = _4, sortValues = null, pie) : sort2;
  };
  pie.startAngle = function(_4) {
    return arguments.length ? (startAngle = typeof _4 === "function" ? _4 : constant_default3(+_4), pie) : startAngle;
  };
  pie.endAngle = function(_4) {
    return arguments.length ? (endAngle = typeof _4 === "function" ? _4 : constant_default3(+_4), pie) : endAngle;
  };
  pie.padAngle = function(_4) {
    return arguments.length ? (padAngle = typeof _4 === "function" ? _4 : constant_default3(+_4), pie) : padAngle;
  };
  return pie;
}
var init_pie = __esm({
  "../../node_modules/d3-shape/src/pie.js"() {
    init_array4();
    init_constant5();
    init_descending2();
    init_identity4();
    init_math2();
  }
});

// ../../node_modules/d3-shape/src/curve/radial.js
function Radial(curve) {
  this._curve = curve;
}
function curveRadial(curve) {
  function radial2(context) {
    return new Radial(curve(context));
  }
  radial2._curve = curve;
  return radial2;
}
var curveRadialLinear;
var init_radial2 = __esm({
  "../../node_modules/d3-shape/src/curve/radial.js"() {
    init_linear2();
    curveRadialLinear = curveRadial(linear_default);
    Radial.prototype = {
      areaStart: function() {
        this._curve.areaStart();
      },
      areaEnd: function() {
        this._curve.areaEnd();
      },
      lineStart: function() {
        this._curve.lineStart();
      },
      lineEnd: function() {
        this._curve.lineEnd();
      },
      point: function(a5, r2) {
        this._curve.point(r2 * Math.sin(a5), r2 * -Math.cos(a5));
      }
    };
  }
});

// ../../node_modules/d3-shape/src/lineRadial.js
function lineRadial(l3) {
  var c6 = l3.curve;
  l3.angle = l3.x, delete l3.x;
  l3.radius = l3.y, delete l3.y;
  l3.curve = function(_4) {
    return arguments.length ? c6(curveRadial(_4)) : c6()._curve;
  };
  return l3;
}
function lineRadial_default() {
  return lineRadial(line_default().curve(curveRadialLinear));
}
var init_lineRadial = __esm({
  "../../node_modules/d3-shape/src/lineRadial.js"() {
    init_radial2();
    init_line();
  }
});

// ../../node_modules/d3-shape/src/areaRadial.js
function areaRadial_default() {
  var a5 = area_default().curve(curveRadialLinear), c6 = a5.curve, x0 = a5.lineX0, x1 = a5.lineX1, y0 = a5.lineY0, y1 = a5.lineY1;
  a5.angle = a5.x, delete a5.x;
  a5.startAngle = a5.x0, delete a5.x0;
  a5.endAngle = a5.x1, delete a5.x1;
  a5.radius = a5.y, delete a5.y;
  a5.innerRadius = a5.y0, delete a5.y0;
  a5.outerRadius = a5.y1, delete a5.y1;
  a5.lineStartAngle = function() {
    return lineRadial(x0());
  }, delete a5.lineX0;
  a5.lineEndAngle = function() {
    return lineRadial(x1());
  }, delete a5.lineX1;
  a5.lineInnerRadius = function() {
    return lineRadial(y0());
  }, delete a5.lineY0;
  a5.lineOuterRadius = function() {
    return lineRadial(y1());
  }, delete a5.lineY1;
  a5.curve = function(_4) {
    return arguments.length ? c6(curveRadial(_4)) : c6()._curve;
  };
  return a5;
}
var init_areaRadial = __esm({
  "../../node_modules/d3-shape/src/areaRadial.js"() {
    init_radial2();
    init_area();
    init_lineRadial();
  }
});

// ../../node_modules/d3-shape/src/pointRadial.js
function pointRadial_default(x4, y3) {
  return [(y3 = +y3) * Math.cos(x4 -= Math.PI / 2), y3 * Math.sin(x4)];
}
var init_pointRadial = __esm({
  "../../node_modules/d3-shape/src/pointRadial.js"() {
  }
});

// ../../node_modules/d3-shape/src/link/index.js
function linkSource(d2) {
  return d2.source;
}
function linkTarget(d2) {
  return d2.target;
}
function link(curve) {
  var source = linkSource, target = linkTarget, x4 = x3, y3 = y2, context = null;
  function link2() {
    var buffer, argv = slice2.call(arguments), s3 = source.apply(this, argv), t2 = target.apply(this, argv);
    if (!context)
      context = buffer = path_default();
    curve(context, +x4.apply(this, (argv[0] = s3, argv)), +y3.apply(this, argv), +x4.apply(this, (argv[0] = t2, argv)), +y3.apply(this, argv));
    if (buffer)
      return context = null, buffer + "" || null;
  }
  link2.source = function(_4) {
    return arguments.length ? (source = _4, link2) : source;
  };
  link2.target = function(_4) {
    return arguments.length ? (target = _4, link2) : target;
  };
  link2.x = function(_4) {
    return arguments.length ? (x4 = typeof _4 === "function" ? _4 : constant_default3(+_4), link2) : x4;
  };
  link2.y = function(_4) {
    return arguments.length ? (y3 = typeof _4 === "function" ? _4 : constant_default3(+_4), link2) : y3;
  };
  link2.context = function(_4) {
    return arguments.length ? (context = _4 == null ? null : _4, link2) : context;
  };
  return link2;
}
function curveHorizontal(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}
function curveVertical(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
}
function curveRadial2(context, x0, y0, x1, y1) {
  var p0 = pointRadial_default(x0, y0), p1 = pointRadial_default(x0, y0 = (y0 + y1) / 2), p2 = pointRadial_default(x1, y0), p3 = pointRadial_default(x1, y1);
  context.moveTo(p0[0], p0[1]);
  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
}
function linkHorizontal() {
  return link(curveHorizontal);
}
function linkVertical() {
  return link(curveVertical);
}
function linkRadial() {
  var l3 = link(curveRadial2);
  l3.angle = l3.x, delete l3.x;
  l3.radius = l3.y, delete l3.y;
  return l3;
}
var init_link = __esm({
  "../../node_modules/d3-shape/src/link/index.js"() {
    init_src14();
    init_array4();
    init_constant5();
    init_point();
    init_pointRadial();
  }
});

// ../../node_modules/d3-shape/src/symbol/circle.js
var circle_default;
var init_circle = __esm({
  "../../node_modules/d3-shape/src/symbol/circle.js"() {
    init_math2();
    circle_default = {
      draw: function(context, size) {
        var r2 = Math.sqrt(size / pi2);
        context.moveTo(r2, 0);
        context.arc(0, 0, r2, 0, tau2);
      }
    };
  }
});

// ../../node_modules/d3-shape/src/symbol/cross.js
var cross_default;
var init_cross2 = __esm({
  "../../node_modules/d3-shape/src/symbol/cross.js"() {
    cross_default = {
      draw: function(context, size) {
        var r2 = Math.sqrt(size / 5) / 2;
        context.moveTo(-3 * r2, -r2);
        context.lineTo(-r2, -r2);
        context.lineTo(-r2, -3 * r2);
        context.lineTo(r2, -3 * r2);
        context.lineTo(r2, -r2);
        context.lineTo(3 * r2, -r2);
        context.lineTo(3 * r2, r2);
        context.lineTo(r2, r2);
        context.lineTo(r2, 3 * r2);
        context.lineTo(-r2, 3 * r2);
        context.lineTo(-r2, r2);
        context.lineTo(-3 * r2, r2);
        context.closePath();
      }
    };
  }
});

// ../../node_modules/d3-shape/src/symbol/diamond.js
var tan30, tan30_2, diamond_default;
var init_diamond = __esm({
  "../../node_modules/d3-shape/src/symbol/diamond.js"() {
    tan30 = Math.sqrt(1 / 3);
    tan30_2 = tan30 * 2;
    diamond_default = {
      draw: function(context, size) {
        var y3 = Math.sqrt(size / tan30_2), x4 = y3 * tan30;
        context.moveTo(0, -y3);
        context.lineTo(x4, 0);
        context.lineTo(0, y3);
        context.lineTo(-x4, 0);
        context.closePath();
      }
    };
  }
});

// ../../node_modules/d3-shape/src/symbol/star.js
var ka, kr, kx, ky, star_default;
var init_star = __esm({
  "../../node_modules/d3-shape/src/symbol/star.js"() {
    init_math2();
    ka = 0.8908130915292852;
    kr = Math.sin(pi2 / 10) / Math.sin(7 * pi2 / 10);
    kx = Math.sin(tau2 / 10) * kr;
    ky = -Math.cos(tau2 / 10) * kr;
    star_default = {
      draw: function(context, size) {
        var r2 = Math.sqrt(size * ka), x4 = kx * r2, y3 = ky * r2;
        context.moveTo(0, -r2);
        context.lineTo(x4, y3);
        for (var i4 = 1; i4 < 5; ++i4) {
          var a5 = tau2 * i4 / 5, c6 = Math.cos(a5), s3 = Math.sin(a5);
          context.lineTo(s3 * r2, -c6 * r2);
          context.lineTo(c6 * x4 - s3 * y3, s3 * x4 + c6 * y3);
        }
        context.closePath();
      }
    };
  }
});

// ../../node_modules/d3-shape/src/symbol/square.js
var square_default;
var init_square = __esm({
  "../../node_modules/d3-shape/src/symbol/square.js"() {
    square_default = {
      draw: function(context, size) {
        var w4 = Math.sqrt(size), x4 = -w4 / 2;
        context.rect(x4, x4, w4, w4);
      }
    };
  }
});

// ../../node_modules/d3-shape/src/symbol/triangle.js
var sqrt3, triangle_default;
var init_triangle = __esm({
  "../../node_modules/d3-shape/src/symbol/triangle.js"() {
    sqrt3 = Math.sqrt(3);
    triangle_default = {
      draw: function(context, size) {
        var y3 = -Math.sqrt(size / (sqrt3 * 3));
        context.moveTo(0, y3 * 2);
        context.lineTo(-sqrt3 * y3, -y3);
        context.lineTo(sqrt3 * y3, -y3);
        context.closePath();
      }
    };
  }
});

// ../../node_modules/d3-shape/src/symbol/wye.js
var c3, s2, k3, a4, wye_default;
var init_wye = __esm({
  "../../node_modules/d3-shape/src/symbol/wye.js"() {
    c3 = -0.5;
    s2 = Math.sqrt(3) / 2;
    k3 = 1 / Math.sqrt(12);
    a4 = (k3 / 2 + 1) * 3;
    wye_default = {
      draw: function(context, size) {
        var r2 = Math.sqrt(size / a4), x0 = r2 / 2, y0 = r2 * k3, x1 = x0, y1 = r2 * k3 + r2, x22 = -x1, y22 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x22, y22);
        context.lineTo(c3 * x0 - s2 * y0, s2 * x0 + c3 * y0);
        context.lineTo(c3 * x1 - s2 * y1, s2 * x1 + c3 * y1);
        context.lineTo(c3 * x22 - s2 * y22, s2 * x22 + c3 * y22);
        context.lineTo(c3 * x0 + s2 * y0, c3 * y0 - s2 * x0);
        context.lineTo(c3 * x1 + s2 * y1, c3 * y1 - s2 * x1);
        context.lineTo(c3 * x22 + s2 * y22, c3 * y22 - s2 * x22);
        context.closePath();
      }
    };
  }
});

// ../../node_modules/d3-shape/src/symbol.js
function symbol_default(type2, size) {
  var context = null;
  type2 = typeof type2 === "function" ? type2 : constant_default3(type2 || circle_default);
  size = typeof size === "function" ? size : constant_default3(size === void 0 ? 64 : +size);
  function symbol2() {
    var buffer;
    if (!context)
      context = buffer = path_default();
    type2.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer)
      return context = null, buffer + "" || null;
  }
  symbol2.type = function(_4) {
    return arguments.length ? (type2 = typeof _4 === "function" ? _4 : constant_default3(_4), symbol2) : type2;
  };
  symbol2.size = function(_4) {
    return arguments.length ? (size = typeof _4 === "function" ? _4 : constant_default3(+_4), symbol2) : size;
  };
  symbol2.context = function(_4) {
    return arguments.length ? (context = _4 == null ? null : _4, symbol2) : context;
  };
  return symbol2;
}
var symbols;
var init_symbol = __esm({
  "../../node_modules/d3-shape/src/symbol.js"() {
    init_src14();
    init_circle();
    init_cross2();
    init_diamond();
    init_star();
    init_square();
    init_triangle();
    init_wye();
    init_constant5();
    symbols = [
      circle_default,
      cross_default,
      diamond_default,
      square_default,
      star_default,
      triangle_default,
      wye_default
    ];
  }
});

// ../../node_modules/d3-shape/src/noop.js
function noop_default() {
}
var init_noop = __esm({
  "../../node_modules/d3-shape/src/noop.js"() {
  }
});

// ../../node_modules/d3-shape/src/curve/basis.js
function point2(that, x4, y3) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x4) / 6,
    (that._y0 + 4 * that._y1 + y3) / 6
  );
}
function Basis(context) {
  this._context = context;
}
function basis_default2(context) {
  return new Basis(context);
}
var init_basis2 = __esm({
  "../../node_modules/d3-shape/src/curve/basis.js"() {
    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3:
            point2(this, this._x1, this._y1);
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x4, y3) {
        x4 = +x4, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x4, y3) : this._context.moveTo(x4, y3);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
          default:
            point2(this, x4, y3);
            break;
        }
        this._x0 = this._x1, this._x1 = x4;
        this._y0 = this._y1, this._y1 = y3;
      }
    };
  }
});

// ../../node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
function basisClosed_default2(context) {
  return new BasisClosed(context);
}
var init_basisClosed2 = __esm({
  "../../node_modules/d3-shape/src/curve/basisClosed.js"() {
    init_noop();
    init_basis2();
    BasisClosed.prototype = {
      areaStart: noop_default,
      areaEnd: noop_default,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x2, this._y2);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
        }
      },
      point: function(x4, y3) {
        x4 = +x4, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x2 = x4, this._y2 = y3;
            break;
          case 1:
            this._point = 2;
            this._x3 = x4, this._y3 = y3;
            break;
          case 2:
            this._point = 3;
            this._x4 = x4, this._y4 = y3;
            this._context.moveTo((this._x0 + 4 * this._x1 + x4) / 6, (this._y0 + 4 * this._y1 + y3) / 6);
            break;
          default:
            point2(this, x4, y3);
            break;
        }
        this._x0 = this._x1, this._x1 = x4;
        this._y0 = this._y1, this._y1 = y3;
      }
    };
  }
});

// ../../node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
function basisOpen_default(context) {
  return new BasisOpen(context);
}
var init_basisOpen = __esm({
  "../../node_modules/d3-shape/src/curve/basisOpen.js"() {
    init_basis2();
    BasisOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x4, y3) {
        x4 = +x4, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            var x0 = (this._x0 + 4 * this._x1 + x4) / 6, y0 = (this._y0 + 4 * this._y1 + y3) / 6;
            this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
            break;
          case 3:
            this._point = 4;
          default:
            point2(this, x4, y3);
            break;
        }
        this._x0 = this._x1, this._x1 = x4;
        this._y0 = this._y1, this._y1 = y3;
      }
    };
  }
});

// ../../node_modules/d3-shape/src/curve/bump.js
function bumpX(context) {
  return new Bump(context, true);
}
function bumpY(context) {
  return new Bump(context, false);
}
var Bump;
var init_bump = __esm({
  "../../node_modules/d3-shape/src/curve/bump.js"() {
    Bump = class {
      constructor(context, x4) {
        this._context = context;
        this._x = x4;
      }
      areaStart() {
        this._line = 0;
      }
      areaEnd() {
        this._line = NaN;
      }
      lineStart() {
        this._point = 0;
      }
      lineEnd() {
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      }
      point(x4, y3) {
        x4 = +x4, y3 = +y3;
        switch (this._point) {
          case 0: {
            this._point = 1;
            if (this._line)
              this._context.lineTo(x4, y3);
            else
              this._context.moveTo(x4, y3);
            break;
          }
          case 1:
            this._point = 2;
          default: {
            if (this._x)
              this._context.bezierCurveTo(this._x0 = (this._x0 + x4) / 2, this._y0, this._x0, y3, x4, y3);
            else
              this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y3) / 2, x4, this._y0, x4, y3);
            break;
          }
        }
        this._x0 = x4, this._y0 = y3;
      }
    };
  }
});

// ../../node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
var bundle_default;
var init_bundle = __esm({
  "../../node_modules/d3-shape/src/curve/bundle.js"() {
    init_basis2();
    Bundle.prototype = {
      lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
      },
      lineEnd: function() {
        var x4 = this._x, y3 = this._y, j4 = x4.length - 1;
        if (j4 > 0) {
          var x0 = x4[0], y0 = y3[0], dx = x4[j4] - x0, dy = y3[j4] - y0, i4 = -1, t2;
          while (++i4 <= j4) {
            t2 = i4 / j4;
            this._basis.point(
              this._beta * x4[i4] + (1 - this._beta) * (x0 + t2 * dx),
              this._beta * y3[i4] + (1 - this._beta) * (y0 + t2 * dy)
            );
          }
        }
        this._x = this._y = null;
        this._basis.lineEnd();
      },
      point: function(x4, y3) {
        this._x.push(+x4);
        this._y.push(+y3);
      }
    };
    bundle_default = function custom(beta) {
      function bundle(context) {
        return beta === 1 ? new Basis(context) : new Bundle(context, beta);
      }
      bundle.beta = function(beta2) {
        return custom(+beta2);
      };
      return bundle;
    }(0.85);
  }
});

// ../../node_modules/d3-shape/src/curve/cardinal.js
function point3(that, x4, y3) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x4),
    that._y2 + that._k * (that._y1 - y3),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
var cardinal_default;
var init_cardinal = __esm({
  "../../node_modules/d3-shape/src/curve/cardinal.js"() {
    Cardinal.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            point3(this, this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x4, y3) {
        x4 = +x4, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x4, y3) : this._context.moveTo(x4, y3);
            break;
          case 1:
            this._point = 2;
            this._x1 = x4, this._y1 = y3;
            break;
          case 2:
            this._point = 3;
          default:
            point3(this, x4, y3);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
      }
    };
    cardinal_default = function custom2(tension) {
      function cardinal(context) {
        return new Cardinal(context, tension);
      }
      cardinal.tension = function(tension2) {
        return custom2(+tension2);
      };
      return cardinal;
    }(0);
  }
});

// ../../node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
var cardinalClosed_default;
var init_cardinalClosed = __esm({
  "../../node_modules/d3-shape/src/curve/cardinalClosed.js"() {
    init_noop();
    init_cardinal();
    CardinalClosed.prototype = {
      areaStart: noop_default,
      areaEnd: noop_default,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x4, y3) {
        x4 = +x4, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x4, this._y3 = y3;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x4, this._y4 = y3);
            break;
          case 2:
            this._point = 3;
            this._x5 = x4, this._y5 = y3;
            break;
          default:
            point3(this, x4, y3);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
      }
    };
    cardinalClosed_default = function custom3(tension) {
      function cardinal(context) {
        return new CardinalClosed(context, tension);
      }
      cardinal.tension = function(tension2) {
        return custom3(+tension2);
      };
      return cardinal;
    }(0);
  }
});

// ../../node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
var cardinalOpen_default;
var init_cardinalOpen = __esm({
  "../../node_modules/d3-shape/src/curve/cardinalOpen.js"() {
    init_cardinal();
    CardinalOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x4, y3) {
        x4 = +x4, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          default:
            point3(this, x4, y3);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
      }
    };
    cardinalOpen_default = function custom4(tension) {
      function cardinal(context) {
        return new CardinalOpen(context, tension);
      }
      cardinal.tension = function(tension2) {
        return custom4(+tension2);
      };
      return cardinal;
    }(0);
  }
});

// ../../node_modules/d3-shape/src/curve/catmullRom.js
function point4(that, x4, y3) {
  var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon3) {
    var a5 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n3 = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a5 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n3;
    y1 = (y1 * a5 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n3;
  }
  if (that._l23_a > epsilon3) {
    var b3 = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m4 = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b3 + that._x1 * that._l23_2a - x4 * that._l12_2a) / m4;
    y22 = (y22 * b3 + that._y1 * that._l23_2a - y3 * that._l12_2a) / m4;
  }
  that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
var catmullRom_default;
var init_catmullRom = __esm({
  "../../node_modules/d3-shape/src/curve/catmullRom.js"() {
    init_math2();
    init_cardinal();
    CatmullRom.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            this.point(this._x2, this._y2);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x4, y3) {
        x4 = +x4, y3 = +y3;
        if (this._point) {
          var x23 = this._x2 - x4, y23 = this._y2 - y3;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x4, y3) : this._context.moveTo(x4, y3);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
          default:
            point4(this, x4, y3);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
      }
    };
    catmullRom_default = function custom5(alpha) {
      function catmullRom(context) {
        return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
      }
      catmullRom.alpha = function(alpha2) {
        return custom5(+alpha2);
      };
      return catmullRom;
    }(0.5);
  }
});

// ../../node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
var catmullRomClosed_default;
var init_catmullRomClosed = __esm({
  "../../node_modules/d3-shape/src/curve/catmullRomClosed.js"() {
    init_cardinalClosed();
    init_noop();
    init_catmullRom();
    CatmullRomClosed.prototype = {
      areaStart: noop_default,
      areaEnd: noop_default,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x4, y3) {
        x4 = +x4, y3 = +y3;
        if (this._point) {
          var x23 = this._x2 - x4, y23 = this._y2 - y3;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x4, this._y3 = y3;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x4, this._y4 = y3);
            break;
          case 2:
            this._point = 3;
            this._x5 = x4, this._y5 = y3;
            break;
          default:
            point4(this, x4, y3);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
      }
    };
    catmullRomClosed_default = function custom6(alpha) {
      function catmullRom(context) {
        return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
      }
      catmullRom.alpha = function(alpha2) {
        return custom6(+alpha2);
      };
      return catmullRom;
    }(0.5);
  }
});

// ../../node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
var catmullRomOpen_default;
var init_catmullRomOpen = __esm({
  "../../node_modules/d3-shape/src/curve/catmullRomOpen.js"() {
    init_cardinalOpen();
    init_catmullRom();
    CatmullRomOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x4, y3) {
        x4 = +x4, y3 = +y3;
        if (this._point) {
          var x23 = this._x2 - x4, y23 = this._y2 - y3;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          default:
            point4(this, x4, y3);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
      }
    };
    catmullRomOpen_default = function custom7(alpha) {
      function catmullRom(context) {
        return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
      }
      catmullRom.alpha = function(alpha2) {
        return custom7(+alpha2);
      };
      return catmullRom;
    }(0.5);
  }
});

// ../../node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
function linearClosed_default(context) {
  return new LinearClosed(context);
}
var init_linearClosed = __esm({
  "../../node_modules/d3-shape/src/curve/linearClosed.js"() {
    init_noop();
    LinearClosed.prototype = {
      areaStart: noop_default,
      areaEnd: noop_default,
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._point)
          this._context.closePath();
      },
      point: function(x4, y3) {
        x4 = +x4, y3 = +y3;
        if (this._point)
          this._context.lineTo(x4, y3);
        else
          this._point = 1, this._context.moveTo(x4, y3);
      }
    };
  }
});

// ../../node_modules/d3-shape/src/curve/monotone.js
function sign(x4) {
  return x4 < 0 ? -1 : 1;
}
function slope3(that, x22, y22) {
  var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p2 = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p2)) || 0;
}
function slope2(that, t2) {
  var h4 = that._x1 - that._x0;
  return h4 ? (3 * (that._y1 - that._y0) / h4 - t2) / 2 : t2;
}
function point5(that, t02, t12) {
  var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t02, x1 - dx, y1 - dx * t12, x1, y1);
}
function MonotoneX(context) {
  this._context = context;
}
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
function ReflectContext(context) {
  this._context = context;
}
function monotoneX(context) {
  return new MonotoneX(context);
}
function monotoneY(context) {
  return new MonotoneY(context);
}
var init_monotone = __esm({
  "../../node_modules/d3-shape/src/curve/monotone.js"() {
    MonotoneX.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
          case 3:
            point5(this, this._t0, slope2(this, this._t0));
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x4, y3) {
        var t12 = NaN;
        x4 = +x4, y3 = +y3;
        if (x4 === this._x1 && y3 === this._y1)
          return;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x4, y3) : this._context.moveTo(x4, y3);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            point5(this, slope2(this, t12 = slope3(this, x4, y3)), t12);
            break;
          default:
            point5(this, this._t0, t12 = slope3(this, x4, y3));
            break;
        }
        this._x0 = this._x1, this._x1 = x4;
        this._y0 = this._y1, this._y1 = y3;
        this._t0 = t12;
      }
    };
    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x4, y3) {
      MonotoneX.prototype.point.call(this, y3, x4);
    };
    ReflectContext.prototype = {
      moveTo: function(x4, y3) {
        this._context.moveTo(y3, x4);
      },
      closePath: function() {
        this._context.closePath();
      },
      lineTo: function(x4, y3) {
        this._context.lineTo(y3, x4);
      },
      bezierCurveTo: function(x1, y1, x22, y22, x4, y3) {
        this._context.bezierCurveTo(y1, x1, y22, x22, y3, x4);
      }
    };
  }
});

// ../../node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
function controlPoints(x4) {
  var i4, n3 = x4.length - 1, m4, a5 = new Array(n3), b3 = new Array(n3), r2 = new Array(n3);
  a5[0] = 0, b3[0] = 2, r2[0] = x4[0] + 2 * x4[1];
  for (i4 = 1; i4 < n3 - 1; ++i4)
    a5[i4] = 1, b3[i4] = 4, r2[i4] = 4 * x4[i4] + 2 * x4[i4 + 1];
  a5[n3 - 1] = 2, b3[n3 - 1] = 7, r2[n3 - 1] = 8 * x4[n3 - 1] + x4[n3];
  for (i4 = 1; i4 < n3; ++i4)
    m4 = a5[i4] / b3[i4 - 1], b3[i4] -= m4, r2[i4] -= m4 * r2[i4 - 1];
  a5[n3 - 1] = r2[n3 - 1] / b3[n3 - 1];
  for (i4 = n3 - 2; i4 >= 0; --i4)
    a5[i4] = (r2[i4] - a5[i4 + 1]) / b3[i4];
  b3[n3 - 1] = (x4[n3] + a5[n3 - 1]) / 2;
  for (i4 = 0; i4 < n3 - 1; ++i4)
    b3[i4] = 2 * x4[i4 + 1] - a5[i4 + 1];
  return [a5, b3];
}
function natural_default(context) {
  return new Natural(context);
}
var init_natural = __esm({
  "../../node_modules/d3-shape/src/curve/natural.js"() {
    Natural.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = [];
        this._y = [];
      },
      lineEnd: function() {
        var x4 = this._x, y3 = this._y, n3 = x4.length;
        if (n3) {
          this._line ? this._context.lineTo(x4[0], y3[0]) : this._context.moveTo(x4[0], y3[0]);
          if (n3 === 2) {
            this._context.lineTo(x4[1], y3[1]);
          } else {
            var px = controlPoints(x4), py = controlPoints(y3);
            for (var i0 = 0, i1 = 1; i1 < n3; ++i0, ++i1) {
              this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x4[i1], y3[i1]);
            }
          }
        }
        if (this._line || this._line !== 0 && n3 === 1)
          this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
      },
      point: function(x4, y3) {
        this._x.push(+x4);
        this._y.push(+y3);
      }
    };
  }
});

// ../../node_modules/d3-shape/src/curve/step.js
function Step(context, t2) {
  this._context = context;
  this._t = t2;
}
function step_default(context) {
  return new Step(context, 0.5);
}
function stepBefore(context) {
  return new Step(context, 0);
}
function stepAfter(context) {
  return new Step(context, 1);
}
var init_step = __esm({
  "../../node_modules/d3-shape/src/curve/step.js"() {
    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2)
          this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        if (this._line >= 0)
          this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x4, y3) {
        x4 = +x4, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x4, y3) : this._context.moveTo(x4, y3);
            break;
          case 1:
            this._point = 2;
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y3);
              this._context.lineTo(x4, y3);
            } else {
              var x1 = this._x * (1 - this._t) + x4 * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y3);
            }
            break;
          }
        }
        this._x = x4, this._y = y3;
      }
    };
  }
});

// ../../node_modules/d3-shape/src/offset/none.js
function none_default(series, order) {
  if (!((n3 = series.length) > 1))
    return;
  for (var i4 = 1, j4, s0, s1 = series[order[0]], n3, m4 = s1.length; i4 < n3; ++i4) {
    s0 = s1, s1 = series[order[i4]];
    for (j4 = 0; j4 < m4; ++j4) {
      s1[j4][1] += s1[j4][0] = isNaN(s0[j4][1]) ? s0[j4][0] : s0[j4][1];
    }
  }
}
var init_none = __esm({
  "../../node_modules/d3-shape/src/offset/none.js"() {
  }
});

// ../../node_modules/d3-shape/src/order/none.js
function none_default2(series) {
  var n3 = series.length, o2 = new Array(n3);
  while (--n3 >= 0)
    o2[n3] = n3;
  return o2;
}
var init_none2 = __esm({
  "../../node_modules/d3-shape/src/order/none.js"() {
  }
});

// ../../node_modules/d3-shape/src/stack.js
function stackValue(d2, key) {
  return d2[key];
}
function stackSeries(key) {
  const series = [];
  series.key = key;
  return series;
}
function stack_default() {
  var keys = constant_default3([]), order = none_default2, offset = none_default, value = stackValue;
  function stack(data) {
    var sz = Array.from(keys.apply(this, arguments), stackSeries), i4, n3 = sz.length, j4 = -1, oz;
    for (const d2 of data) {
      for (i4 = 0, ++j4; i4 < n3; ++i4) {
        (sz[i4][j4] = [0, +value(d2, sz[i4].key, j4, data)]).data = d2;
      }
    }
    for (i4 = 0, oz = array_default(order(sz)); i4 < n3; ++i4) {
      sz[oz[i4]].index = i4;
    }
    offset(sz, oz);
    return sz;
  }
  stack.keys = function(_4) {
    return arguments.length ? (keys = typeof _4 === "function" ? _4 : constant_default3(Array.from(_4)), stack) : keys;
  };
  stack.value = function(_4) {
    return arguments.length ? (value = typeof _4 === "function" ? _4 : constant_default3(+_4), stack) : value;
  };
  stack.order = function(_4) {
    return arguments.length ? (order = _4 == null ? none_default2 : typeof _4 === "function" ? _4 : constant_default3(Array.from(_4)), stack) : order;
  };
  stack.offset = function(_4) {
    return arguments.length ? (offset = _4 == null ? none_default : _4, stack) : offset;
  };
  return stack;
}
var init_stack = __esm({
  "../../node_modules/d3-shape/src/stack.js"() {
    init_array4();
    init_constant5();
    init_none();
    init_none2();
  }
});

// ../../node_modules/d3-shape/src/offset/expand.js
function expand_default(series, order) {
  if (!((n3 = series.length) > 0))
    return;
  for (var i4, n3, j4 = 0, m4 = series[0].length, y3; j4 < m4; ++j4) {
    for (y3 = i4 = 0; i4 < n3; ++i4)
      y3 += series[i4][j4][1] || 0;
    if (y3)
      for (i4 = 0; i4 < n3; ++i4)
        series[i4][j4][1] /= y3;
  }
  none_default(series, order);
}
var init_expand = __esm({
  "../../node_modules/d3-shape/src/offset/expand.js"() {
    init_none();
  }
});

// ../../node_modules/d3-shape/src/offset/diverging.js
function diverging_default(series, order) {
  if (!((n3 = series.length) > 0))
    return;
  for (var i4, j4 = 0, d2, dy, yp, yn2, n3, m4 = series[order[0]].length; j4 < m4; ++j4) {
    for (yp = yn2 = 0, i4 = 0; i4 < n3; ++i4) {
      if ((dy = (d2 = series[order[i4]][j4])[1] - d2[0]) > 0) {
        d2[0] = yp, d2[1] = yp += dy;
      } else if (dy < 0) {
        d2[1] = yn2, d2[0] = yn2 += dy;
      } else {
        d2[0] = 0, d2[1] = dy;
      }
    }
  }
}
var init_diverging2 = __esm({
  "../../node_modules/d3-shape/src/offset/diverging.js"() {
  }
});

// ../../node_modules/d3-shape/src/offset/silhouette.js
function silhouette_default(series, order) {
  if (!((n3 = series.length) > 0))
    return;
  for (var j4 = 0, s0 = series[order[0]], n3, m4 = s0.length; j4 < m4; ++j4) {
    for (var i4 = 0, y3 = 0; i4 < n3; ++i4)
      y3 += series[i4][j4][1] || 0;
    s0[j4][1] += s0[j4][0] = -y3 / 2;
  }
  none_default(series, order);
}
var init_silhouette = __esm({
  "../../node_modules/d3-shape/src/offset/silhouette.js"() {
    init_none();
  }
});

// ../../node_modules/d3-shape/src/offset/wiggle.js
function wiggle_default(series, order) {
  if (!((n3 = series.length) > 0) || !((m4 = (s0 = series[order[0]]).length) > 0))
    return;
  for (var y3 = 0, j4 = 1, s0, m4, n3; j4 < m4; ++j4) {
    for (var i4 = 0, s1 = 0, s22 = 0; i4 < n3; ++i4) {
      var si = series[order[i4]], sij0 = si[j4][1] || 0, sij1 = si[j4 - 1][1] || 0, s3 = (sij0 - sij1) / 2;
      for (var k4 = 0; k4 < i4; ++k4) {
        var sk = series[order[k4]], skj0 = sk[j4][1] || 0, skj1 = sk[j4 - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s22 += s3 * sij0;
    }
    s0[j4 - 1][1] += s0[j4 - 1][0] = y3;
    if (s1)
      y3 -= s22 / s1;
  }
  s0[j4 - 1][1] += s0[j4 - 1][0] = y3;
  none_default(series, order);
}
var init_wiggle = __esm({
  "../../node_modules/d3-shape/src/offset/wiggle.js"() {
    init_none();
  }
});

// ../../node_modules/d3-shape/src/order/appearance.js
function appearance_default(series) {
  var peaks = series.map(peak);
  return none_default2(series).sort(function(a5, b3) {
    return peaks[a5] - peaks[b3];
  });
}
function peak(series) {
  var i4 = -1, j4 = 0, n3 = series.length, vi, vj = -Infinity;
  while (++i4 < n3)
    if ((vi = +series[i4][1]) > vj)
      vj = vi, j4 = i4;
  return j4;
}
var init_appearance = __esm({
  "../../node_modules/d3-shape/src/order/appearance.js"() {
    init_none2();
  }
});

// ../../node_modules/d3-shape/src/order/ascending.js
function ascending_default(series) {
  var sums = series.map(sum2);
  return none_default2(series).sort(function(a5, b3) {
    return sums[a5] - sums[b3];
  });
}
function sum2(series) {
  var s3 = 0, i4 = -1, n3 = series.length, v4;
  while (++i4 < n3)
    if (v4 = +series[i4][1])
      s3 += v4;
  return s3;
}
var init_ascending4 = __esm({
  "../../node_modules/d3-shape/src/order/ascending.js"() {
    init_none2();
  }
});

// ../../node_modules/d3-shape/src/order/descending.js
function descending_default2(series) {
  return ascending_default(series).reverse();
}
var init_descending3 = __esm({
  "../../node_modules/d3-shape/src/order/descending.js"() {
    init_ascending4();
  }
});

// ../../node_modules/d3-shape/src/order/insideOut.js
function insideOut_default(series) {
  var n3 = series.length, i4, j4, sums = series.map(sum2), order = appearance_default(series), top = 0, bottom = 0, tops = [], bottoms = [];
  for (i4 = 0; i4 < n3; ++i4) {
    j4 = order[i4];
    if (top < bottom) {
      top += sums[j4];
      tops.push(j4);
    } else {
      bottom += sums[j4];
      bottoms.push(j4);
    }
  }
  return bottoms.reverse().concat(tops);
}
var init_insideOut = __esm({
  "../../node_modules/d3-shape/src/order/insideOut.js"() {
    init_appearance();
    init_ascending4();
  }
});

// ../../node_modules/d3-shape/src/order/reverse.js
function reverse_default(series) {
  return none_default2(series).reverse();
}
var init_reverse2 = __esm({
  "../../node_modules/d3-shape/src/order/reverse.js"() {
    init_none2();
  }
});

// ../../node_modules/d3-shape/src/index.js
var src_exports8 = {};
__export(src_exports8, {
  arc: () => arc_default,
  area: () => area_default,
  areaRadial: () => areaRadial_default,
  curveBasis: () => basis_default2,
  curveBasisClosed: () => basisClosed_default2,
  curveBasisOpen: () => basisOpen_default,
  curveBumpX: () => bumpX,
  curveBumpY: () => bumpY,
  curveBundle: () => bundle_default,
  curveCardinal: () => cardinal_default,
  curveCardinalClosed: () => cardinalClosed_default,
  curveCardinalOpen: () => cardinalOpen_default,
  curveCatmullRom: () => catmullRom_default,
  curveCatmullRomClosed: () => catmullRomClosed_default,
  curveCatmullRomOpen: () => catmullRomOpen_default,
  curveLinear: () => linear_default,
  curveLinearClosed: () => linearClosed_default,
  curveMonotoneX: () => monotoneX,
  curveMonotoneY: () => monotoneY,
  curveNatural: () => natural_default,
  curveStep: () => step_default,
  curveStepAfter: () => stepAfter,
  curveStepBefore: () => stepBefore,
  line: () => line_default,
  lineRadial: () => lineRadial_default,
  linkHorizontal: () => linkHorizontal,
  linkRadial: () => linkRadial,
  linkVertical: () => linkVertical,
  pie: () => pie_default,
  pointRadial: () => pointRadial_default,
  radialArea: () => areaRadial_default,
  radialLine: () => lineRadial_default,
  stack: () => stack_default,
  stackOffsetDiverging: () => diverging_default,
  stackOffsetExpand: () => expand_default,
  stackOffsetNone: () => none_default,
  stackOffsetSilhouette: () => silhouette_default,
  stackOffsetWiggle: () => wiggle_default,
  stackOrderAppearance: () => appearance_default,
  stackOrderAscending: () => ascending_default,
  stackOrderDescending: () => descending_default2,
  stackOrderInsideOut: () => insideOut_default,
  stackOrderNone: () => none_default2,
  stackOrderReverse: () => reverse_default,
  symbol: () => symbol_default,
  symbolCircle: () => circle_default,
  symbolCross: () => cross_default,
  symbolDiamond: () => diamond_default,
  symbolSquare: () => square_default,
  symbolStar: () => star_default,
  symbolTriangle: () => triangle_default,
  symbolWye: () => wye_default,
  symbols: () => symbols
});
var init_src16 = __esm({
  "../../node_modules/d3-shape/src/index.js"() {
    init_arc();
    init_area();
    init_line();
    init_pie();
    init_areaRadial();
    init_lineRadial();
    init_pointRadial();
    init_link();
    init_symbol();
    init_circle();
    init_cross2();
    init_diamond();
    init_square();
    init_star();
    init_triangle();
    init_wye();
    init_basisClosed2();
    init_basisOpen();
    init_basis2();
    init_bump();
    init_bundle();
    init_cardinalClosed();
    init_cardinalOpen();
    init_cardinal();
    init_catmullRomClosed();
    init_catmullRomOpen();
    init_catmullRom();
    init_linearClosed();
    init_linear2();
    init_monotone();
    init_natural();
    init_step();
    init_stack();
    init_expand();
    init_diverging2();
    init_none();
    init_silhouette();
    init_wiggle();
    init_appearance();
    init_ascending4();
    init_descending3();
    init_insideOut();
    init_none2();
    init_reverse2();
  }
});

// ../../node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n3 = specifier.length / 6 | 0, colors = new Array(n3), i4 = 0;
  while (i4 < n3)
    colors[i4] = "#" + specifier.slice(i4 * 6, ++i4 * 6);
  return colors;
}
var init_colors = __esm({
  "../../node_modules/d3-scale-chromatic/src/colors.js"() {
  }
});

// ../../node_modules/d3-scale-chromatic/src/categorical/category10.js
var category10_default;
var init_category10 = __esm({
  "../../node_modules/d3-scale-chromatic/src/categorical/category10.js"() {
    init_colors();
    category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");
  }
});

// ../../node_modules/d3-scale-chromatic/src/categorical/Accent.js
var Accent_default;
var init_Accent = __esm({
  "../../node_modules/d3-scale-chromatic/src/categorical/Accent.js"() {
    init_colors();
    Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");
  }
});

// ../../node_modules/d3-scale-chromatic/src/categorical/Dark2.js
var Dark2_default;
var init_Dark2 = __esm({
  "../../node_modules/d3-scale-chromatic/src/categorical/Dark2.js"() {
    init_colors();
    Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");
  }
});

// ../../node_modules/d3-scale-chromatic/src/categorical/Paired.js
var Paired_default;
var init_Paired = __esm({
  "../../node_modules/d3-scale-chromatic/src/categorical/Paired.js"() {
    init_colors();
    Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");
  }
});

// ../../node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
var Pastel1_default;
var init_Pastel1 = __esm({
  "../../node_modules/d3-scale-chromatic/src/categorical/Pastel1.js"() {
    init_colors();
    Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");
  }
});

// ../../node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
var Pastel2_default;
var init_Pastel2 = __esm({
  "../../node_modules/d3-scale-chromatic/src/categorical/Pastel2.js"() {
    init_colors();
    Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");
  }
});

// ../../node_modules/d3-scale-chromatic/src/categorical/Set1.js
var Set1_default;
var init_Set1 = __esm({
  "../../node_modules/d3-scale-chromatic/src/categorical/Set1.js"() {
    init_colors();
    Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");
  }
});

// ../../node_modules/d3-scale-chromatic/src/categorical/Set2.js
var Set2_default;
var init_Set2 = __esm({
  "../../node_modules/d3-scale-chromatic/src/categorical/Set2.js"() {
    init_colors();
    Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");
  }
});

// ../../node_modules/d3-scale-chromatic/src/categorical/Set3.js
var Set3_default;
var init_Set3 = __esm({
  "../../node_modules/d3-scale-chromatic/src/categorical/Set3.js"() {
    init_colors();
    Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");
  }
});

// ../../node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
var Tableau10_default;
var init_Tableau10 = __esm({
  "../../node_modules/d3-scale-chromatic/src/categorical/Tableau10.js"() {
    init_colors();
    Tableau10_default = colors_default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");
  }
});

// ../../node_modules/d3-scale-chromatic/src/ramp.js
var ramp_default;
var init_ramp = __esm({
  "../../node_modules/d3-scale-chromatic/src/ramp.js"() {
    init_src5();
    ramp_default = (scheme28) => rgbBasis(scheme28[scheme28.length - 1]);
  }
});

// ../../node_modules/d3-scale-chromatic/src/diverging/BrBG.js
var scheme, BrBG_default;
var init_BrBG = __esm({
  "../../node_modules/d3-scale-chromatic/src/diverging/BrBG.js"() {
    init_colors();
    init_ramp();
    scheme = new Array(3).concat(
      "d8b365f5f5f55ab4ac",
      "a6611adfc27d80cdc1018571",
      "a6611adfc27df5f5f580cdc1018571",
      "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
      "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
      "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
      "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
      "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
      "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
    ).map(colors_default);
    BrBG_default = ramp_default(scheme);
  }
});

// ../../node_modules/d3-scale-chromatic/src/diverging/PRGn.js
var scheme2, PRGn_default;
var init_PRGn = __esm({
  "../../node_modules/d3-scale-chromatic/src/diverging/PRGn.js"() {
    init_colors();
    init_ramp();
    scheme2 = new Array(3).concat(
      "af8dc3f7f7f77fbf7b",
      "7b3294c2a5cfa6dba0008837",
      "7b3294c2a5cff7f7f7a6dba0008837",
      "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
      "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
      "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
      "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
      "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
      "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
    ).map(colors_default);
    PRGn_default = ramp_default(scheme2);
  }
});

// ../../node_modules/d3-scale-chromatic/src/diverging/PiYG.js
var scheme3, PiYG_default;
var init_PiYG = __esm({
  "../../node_modules/d3-scale-chromatic/src/diverging/PiYG.js"() {
    init_colors();
    init_ramp();
    scheme3 = new Array(3).concat(
      "e9a3c9f7f7f7a1d76a",
      "d01c8bf1b6dab8e1864dac26",
      "d01c8bf1b6daf7f7f7b8e1864dac26",
      "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
      "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
      "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
      "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
      "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
      "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
    ).map(colors_default);
    PiYG_default = ramp_default(scheme3);
  }
});

// ../../node_modules/d3-scale-chromatic/src/diverging/PuOr.js
var scheme4, PuOr_default;
var init_PuOr = __esm({
  "../../node_modules/d3-scale-chromatic/src/diverging/PuOr.js"() {
    init_colors();
    init_ramp();
    scheme4 = new Array(3).concat(
      "998ec3f7f7f7f1a340",
      "5e3c99b2abd2fdb863e66101",
      "5e3c99b2abd2f7f7f7fdb863e66101",
      "542788998ec3d8daebfee0b6f1a340b35806",
      "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
      "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
      "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
      "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
      "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
    ).map(colors_default);
    PuOr_default = ramp_default(scheme4);
  }
});

// ../../node_modules/d3-scale-chromatic/src/diverging/RdBu.js
var scheme5, RdBu_default;
var init_RdBu = __esm({
  "../../node_modules/d3-scale-chromatic/src/diverging/RdBu.js"() {
    init_colors();
    init_ramp();
    scheme5 = new Array(3).concat(
      "ef8a62f7f7f767a9cf",
      "ca0020f4a58292c5de0571b0",
      "ca0020f4a582f7f7f792c5de0571b0",
      "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
      "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
      "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
      "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
      "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
      "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
    ).map(colors_default);
    RdBu_default = ramp_default(scheme5);
  }
});

// ../../node_modules/d3-scale-chromatic/src/diverging/RdGy.js
var scheme6, RdGy_default;
var init_RdGy = __esm({
  "../../node_modules/d3-scale-chromatic/src/diverging/RdGy.js"() {
    init_colors();
    init_ramp();
    scheme6 = new Array(3).concat(
      "ef8a62ffffff999999",
      "ca0020f4a582bababa404040",
      "ca0020f4a582ffffffbababa404040",
      "b2182bef8a62fddbc7e0e0e09999994d4d4d",
      "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
      "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
      "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
      "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
      "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
    ).map(colors_default);
    RdGy_default = ramp_default(scheme6);
  }
});

// ../../node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
var scheme7, RdYlBu_default;
var init_RdYlBu = __esm({
  "../../node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js"() {
    init_colors();
    init_ramp();
    scheme7 = new Array(3).concat(
      "fc8d59ffffbf91bfdb",
      "d7191cfdae61abd9e92c7bb6",
      "d7191cfdae61ffffbfabd9e92c7bb6",
      "d73027fc8d59fee090e0f3f891bfdb4575b4",
      "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
      "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
      "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
      "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
      "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
    ).map(colors_default);
    RdYlBu_default = ramp_default(scheme7);
  }
});

// ../../node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
var scheme8, RdYlGn_default;
var init_RdYlGn = __esm({
  "../../node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js"() {
    init_colors();
    init_ramp();
    scheme8 = new Array(3).concat(
      "fc8d59ffffbf91cf60",
      "d7191cfdae61a6d96a1a9641",
      "d7191cfdae61ffffbfa6d96a1a9641",
      "d73027fc8d59fee08bd9ef8b91cf601a9850",
      "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
      "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
      "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
      "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
      "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
    ).map(colors_default);
    RdYlGn_default = ramp_default(scheme8);
  }
});

// ../../node_modules/d3-scale-chromatic/src/diverging/Spectral.js
var scheme9, Spectral_default;
var init_Spectral = __esm({
  "../../node_modules/d3-scale-chromatic/src/diverging/Spectral.js"() {
    init_colors();
    init_ramp();
    scheme9 = new Array(3).concat(
      "fc8d59ffffbf99d594",
      "d7191cfdae61abdda42b83ba",
      "d7191cfdae61ffffbfabdda42b83ba",
      "d53e4ffc8d59fee08be6f59899d5943288bd",
      "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
      "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
      "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
      "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
      "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
    ).map(colors_default);
    Spectral_default = ramp_default(scheme9);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
var scheme10, BuGn_default;
var init_BuGn = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js"() {
    init_colors();
    init_ramp();
    scheme10 = new Array(3).concat(
      "e5f5f999d8c92ca25f",
      "edf8fbb2e2e266c2a4238b45",
      "edf8fbb2e2e266c2a42ca25f006d2c",
      "edf8fbccece699d8c966c2a42ca25f006d2c",
      "edf8fbccece699d8c966c2a441ae76238b45005824",
      "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
      "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
    ).map(colors_default);
    BuGn_default = ramp_default(scheme10);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
var scheme11, BuPu_default;
var init_BuPu = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js"() {
    init_colors();
    init_ramp();
    scheme11 = new Array(3).concat(
      "e0ecf49ebcda8856a7",
      "edf8fbb3cde38c96c688419d",
      "edf8fbb3cde38c96c68856a7810f7c",
      "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
      "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
      "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
      "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
    ).map(colors_default);
    BuPu_default = ramp_default(scheme11);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
var scheme12, GnBu_default;
var init_GnBu = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js"() {
    init_colors();
    init_ramp();
    scheme12 = new Array(3).concat(
      "e0f3dba8ddb543a2ca",
      "f0f9e8bae4bc7bccc42b8cbe",
      "f0f9e8bae4bc7bccc443a2ca0868ac",
      "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
      "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
      "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
      "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
    ).map(colors_default);
    GnBu_default = ramp_default(scheme12);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
var scheme13, OrRd_default;
var init_OrRd = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js"() {
    init_colors();
    init_ramp();
    scheme13 = new Array(3).concat(
      "fee8c8fdbb84e34a33",
      "fef0d9fdcc8afc8d59d7301f",
      "fef0d9fdcc8afc8d59e34a33b30000",
      "fef0d9fdd49efdbb84fc8d59e34a33b30000",
      "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
      "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
      "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
    ).map(colors_default);
    OrRd_default = ramp_default(scheme13);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
var scheme14, PuBuGn_default;
var init_PuBuGn = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js"() {
    init_colors();
    init_ramp();
    scheme14 = new Array(3).concat(
      "ece2f0a6bddb1c9099",
      "f6eff7bdc9e167a9cf02818a",
      "f6eff7bdc9e167a9cf1c9099016c59",
      "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
      "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
      "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
      "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
    ).map(colors_default);
    PuBuGn_default = ramp_default(scheme14);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
var scheme15, PuBu_default;
var init_PuBu = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js"() {
    init_colors();
    init_ramp();
    scheme15 = new Array(3).concat(
      "ece7f2a6bddb2b8cbe",
      "f1eef6bdc9e174a9cf0570b0",
      "f1eef6bdc9e174a9cf2b8cbe045a8d",
      "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
      "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
      "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
      "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
    ).map(colors_default);
    PuBu_default = ramp_default(scheme15);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
var scheme16, PuRd_default;
var init_PuRd = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js"() {
    init_colors();
    init_ramp();
    scheme16 = new Array(3).concat(
      "e7e1efc994c7dd1c77",
      "f1eef6d7b5d8df65b0ce1256",
      "f1eef6d7b5d8df65b0dd1c77980043",
      "f1eef6d4b9dac994c7df65b0dd1c77980043",
      "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
      "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
      "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
    ).map(colors_default);
    PuRd_default = ramp_default(scheme16);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
var scheme17, RdPu_default;
var init_RdPu = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js"() {
    init_colors();
    init_ramp();
    scheme17 = new Array(3).concat(
      "fde0ddfa9fb5c51b8a",
      "feebe2fbb4b9f768a1ae017e",
      "feebe2fbb4b9f768a1c51b8a7a0177",
      "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
      "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
      "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
      "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
    ).map(colors_default);
    RdPu_default = ramp_default(scheme17);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
var scheme18, YlGnBu_default;
var init_YlGnBu = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js"() {
    init_colors();
    init_ramp();
    scheme18 = new Array(3).concat(
      "edf8b17fcdbb2c7fb8",
      "ffffcca1dab441b6c4225ea8",
      "ffffcca1dab441b6c42c7fb8253494",
      "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
      "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
      "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
      "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
    ).map(colors_default);
    YlGnBu_default = ramp_default(scheme18);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
var scheme19, YlGn_default;
var init_YlGn = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js"() {
    init_colors();
    init_ramp();
    scheme19 = new Array(3).concat(
      "f7fcb9addd8e31a354",
      "ffffccc2e69978c679238443",
      "ffffccc2e69978c67931a354006837",
      "ffffccd9f0a3addd8e78c67931a354006837",
      "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
      "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
      "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
    ).map(colors_default);
    YlGn_default = ramp_default(scheme19);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
var scheme20, YlOrBr_default;
var init_YlOrBr = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js"() {
    init_colors();
    init_ramp();
    scheme20 = new Array(3).concat(
      "fff7bcfec44fd95f0e",
      "ffffd4fed98efe9929cc4c02",
      "ffffd4fed98efe9929d95f0e993404",
      "ffffd4fee391fec44ffe9929d95f0e993404",
      "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
      "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
      "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
    ).map(colors_default);
    YlOrBr_default = ramp_default(scheme20);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
var scheme21, YlOrRd_default;
var init_YlOrRd = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js"() {
    init_colors();
    init_ramp();
    scheme21 = new Array(3).concat(
      "ffeda0feb24cf03b20",
      "ffffb2fecc5cfd8d3ce31a1c",
      "ffffb2fecc5cfd8d3cf03b20bd0026",
      "ffffb2fed976feb24cfd8d3cf03b20bd0026",
      "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
      "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
      "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
    ).map(colors_default);
    YlOrRd_default = ramp_default(scheme21);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
var scheme22, Blues_default;
var init_Blues = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-single/Blues.js"() {
    init_colors();
    init_ramp();
    scheme22 = new Array(3).concat(
      "deebf79ecae13182bd",
      "eff3ffbdd7e76baed62171b5",
      "eff3ffbdd7e76baed63182bd08519c",
      "eff3ffc6dbef9ecae16baed63182bd08519c",
      "eff3ffc6dbef9ecae16baed64292c62171b5084594",
      "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
      "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
    ).map(colors_default);
    Blues_default = ramp_default(scheme22);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
var scheme23, Greens_default;
var init_Greens = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-single/Greens.js"() {
    init_colors();
    init_ramp();
    scheme23 = new Array(3).concat(
      "e5f5e0a1d99b31a354",
      "edf8e9bae4b374c476238b45",
      "edf8e9bae4b374c47631a354006d2c",
      "edf8e9c7e9c0a1d99b74c47631a354006d2c",
      "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
      "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
      "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
    ).map(colors_default);
    Greens_default = ramp_default(scheme23);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
var scheme24, Greys_default;
var init_Greys = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-single/Greys.js"() {
    init_colors();
    init_ramp();
    scheme24 = new Array(3).concat(
      "f0f0f0bdbdbd636363",
      "f7f7f7cccccc969696525252",
      "f7f7f7cccccc969696636363252525",
      "f7f7f7d9d9d9bdbdbd969696636363252525",
      "f7f7f7d9d9d9bdbdbd969696737373525252252525",
      "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
      "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
    ).map(colors_default);
    Greys_default = ramp_default(scheme24);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
var scheme25, Purples_default;
var init_Purples = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-single/Purples.js"() {
    init_colors();
    init_ramp();
    scheme25 = new Array(3).concat(
      "efedf5bcbddc756bb1",
      "f2f0f7cbc9e29e9ac86a51a3",
      "f2f0f7cbc9e29e9ac8756bb154278f",
      "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
      "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
      "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
      "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
    ).map(colors_default);
    Purples_default = ramp_default(scheme25);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
var scheme26, Reds_default;
var init_Reds = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-single/Reds.js"() {
    init_colors();
    init_ramp();
    scheme26 = new Array(3).concat(
      "fee0d2fc9272de2d26",
      "fee5d9fcae91fb6a4acb181d",
      "fee5d9fcae91fb6a4ade2d26a50f15",
      "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
      "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
      "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
      "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
    ).map(colors_default);
    Reds_default = ramp_default(scheme26);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
var scheme27, Oranges_default;
var init_Oranges = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js"() {
    init_colors();
    init_ramp();
    scheme27 = new Array(3).concat(
      "fee6cefdae6be6550d",
      "feeddefdbe85fd8d3cd94701",
      "feeddefdbe85fd8d3ce6550da63603",
      "feeddefdd0a2fdae6bfd8d3ce6550da63603",
      "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
      "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
      "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
    ).map(colors_default);
    Oranges_default = ramp_default(scheme27);
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js
function cividis_default(t2) {
  t2 = Math.max(0, Math.min(1, t2));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t2 * (35.34 - t2 * (2381.73 - t2 * (6402.7 - t2 * (7024.72 - t2 * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t2 * (170.73 + t2 * (52.82 - t2 * (131.46 - t2 * (176.58 - t2 * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t2 * (442.36 - t2 * (2482.43 - t2 * (6167.24 - t2 * (6614.94 - t2 * 2475.67))))))) + ")";
}
var init_cividis = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js"() {
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
var cubehelix_default2;
var init_cubehelix3 = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js"() {
    init_src4();
    init_src5();
    cubehelix_default2 = cubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
function rainbow_default(t2) {
  if (t2 < 0 || t2 > 1)
    t2 -= Math.floor(t2);
  var ts = Math.abs(t2 - 0.5);
  c4.h = 360 * t2 - 100;
  c4.s = 1.5 - 1.5 * ts;
  c4.l = 0.8 - 0.9 * ts;
  return c4 + "";
}
var warm, cool, c4;
var init_rainbow = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js"() {
    init_src4();
    init_src5();
    warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
    cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
    c4 = cubehelix();
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
function sinebow_default(t2) {
  var x4;
  t2 = (0.5 - t2) * Math.PI;
  c5.r = 255 * (x4 = Math.sin(t2)) * x4;
  c5.g = 255 * (x4 = Math.sin(t2 + pi_1_3)) * x4;
  c5.b = 255 * (x4 = Math.sin(t2 + pi_2_3)) * x4;
  return c5 + "";
}
var c5, pi_1_3, pi_2_3;
var init_sinebow = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js"() {
    init_src4();
    c5 = rgb();
    pi_1_3 = Math.PI / 3;
    pi_2_3 = Math.PI * 2 / 3;
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js
function turbo_default(t2) {
  t2 = Math.max(0, Math.min(1, t2));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t2 * (1172.33 - t2 * (10793.56 - t2 * (33300.12 - t2 * (38394.49 - t2 * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t2 * (557.33 + t2 * (1225.33 - t2 * (3574.96 - t2 * (1073.77 + t2 * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t2 * (3211.1 - t2 * (15327.97 - t2 * (27814 - t2 * (22569.18 - t2 * 6838.66))))))) + ")";
}
var init_turbo = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js"() {
  }
});

// ../../node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
function ramp(range4) {
  var n3 = range4.length;
  return function(t2) {
    return range4[Math.max(0, Math.min(n3 - 1, Math.floor(t2 * n3)))];
  };
}
var viridis_default, magma, inferno, plasma;
var init_viridis = __esm({
  "../../node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js"() {
    init_colors();
    viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
    magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
    inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
    plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
  }
});

// ../../node_modules/d3-scale-chromatic/src/index.js
var src_exports9 = {};
__export(src_exports9, {
  interpolateBlues: () => Blues_default,
  interpolateBrBG: () => BrBG_default,
  interpolateBuGn: () => BuGn_default,
  interpolateBuPu: () => BuPu_default,
  interpolateCividis: () => cividis_default,
  interpolateCool: () => cool,
  interpolateCubehelixDefault: () => cubehelix_default2,
  interpolateGnBu: () => GnBu_default,
  interpolateGreens: () => Greens_default,
  interpolateGreys: () => Greys_default,
  interpolateInferno: () => inferno,
  interpolateMagma: () => magma,
  interpolateOrRd: () => OrRd_default,
  interpolateOranges: () => Oranges_default,
  interpolatePRGn: () => PRGn_default,
  interpolatePiYG: () => PiYG_default,
  interpolatePlasma: () => plasma,
  interpolatePuBu: () => PuBu_default,
  interpolatePuBuGn: () => PuBuGn_default,
  interpolatePuOr: () => PuOr_default,
  interpolatePuRd: () => PuRd_default,
  interpolatePurples: () => Purples_default,
  interpolateRainbow: () => rainbow_default,
  interpolateRdBu: () => RdBu_default,
  interpolateRdGy: () => RdGy_default,
  interpolateRdPu: () => RdPu_default,
  interpolateRdYlBu: () => RdYlBu_default,
  interpolateRdYlGn: () => RdYlGn_default,
  interpolateReds: () => Reds_default,
  interpolateSinebow: () => sinebow_default,
  interpolateSpectral: () => Spectral_default,
  interpolateTurbo: () => turbo_default,
  interpolateViridis: () => viridis_default,
  interpolateWarm: () => warm,
  interpolateYlGn: () => YlGn_default,
  interpolateYlGnBu: () => YlGnBu_default,
  interpolateYlOrBr: () => YlOrBr_default,
  interpolateYlOrRd: () => YlOrRd_default,
  schemeAccent: () => Accent_default,
  schemeBlues: () => scheme22,
  schemeBrBG: () => scheme,
  schemeBuGn: () => scheme10,
  schemeBuPu: () => scheme11,
  schemeCategory10: () => category10_default,
  schemeDark2: () => Dark2_default,
  schemeGnBu: () => scheme12,
  schemeGreens: () => scheme23,
  schemeGreys: () => scheme24,
  schemeOrRd: () => scheme13,
  schemeOranges: () => scheme27,
  schemePRGn: () => scheme2,
  schemePaired: () => Paired_default,
  schemePastel1: () => Pastel1_default,
  schemePastel2: () => Pastel2_default,
  schemePiYG: () => scheme3,
  schemePuBu: () => scheme15,
  schemePuBuGn: () => scheme14,
  schemePuOr: () => scheme4,
  schemePuRd: () => scheme16,
  schemePurples: () => scheme25,
  schemeRdBu: () => scheme5,
  schemeRdGy: () => scheme6,
  schemeRdPu: () => scheme17,
  schemeRdYlBu: () => scheme7,
  schemeRdYlGn: () => scheme8,
  schemeReds: () => scheme26,
  schemeSet1: () => Set1_default,
  schemeSet2: () => Set2_default,
  schemeSet3: () => Set3_default,
  schemeSpectral: () => scheme9,
  schemeTableau10: () => Tableau10_default,
  schemeYlGn: () => scheme19,
  schemeYlGnBu: () => scheme18,
  schemeYlOrBr: () => scheme20,
  schemeYlOrRd: () => scheme21
});
var init_src17 = __esm({
  "../../node_modules/d3-scale-chromatic/src/index.js"() {
    init_category10();
    init_Accent();
    init_Dark2();
    init_Paired();
    init_Pastel1();
    init_Pastel2();
    init_Set1();
    init_Set2();
    init_Set3();
    init_Tableau10();
    init_BrBG();
    init_PRGn();
    init_PiYG();
    init_PuOr();
    init_RdBu();
    init_RdGy();
    init_RdYlBu();
    init_RdYlGn();
    init_Spectral();
    init_BuGn();
    init_BuPu();
    init_GnBu();
    init_OrRd();
    init_PuBuGn();
    init_PuBu();
    init_PuRd();
    init_RdPu();
    init_YlGnBu();
    init_YlGn();
    init_YlOrBr();
    init_YlOrRd();
    init_Blues();
    init_Greens();
    init_Greys();
    init_Purples();
    init_Reds();
    init_Oranges();
    init_cividis();
    init_cubehelix3();
    init_rainbow();
    init_sinebow();
    init_turbo();
    init_viridis();
  }
});

// ../../node_modules/d3-dispatch/src/dispatch.js
function dispatch() {
  for (var i4 = 0, n3 = arguments.length, _4 = {}, t2; i4 < n3; ++i4) {
    if (!(t2 = arguments[i4] + "") || t2 in _4 || /[\s.]/.test(t2))
      throw new Error("illegal type: " + t2);
    _4[t2] = [];
  }
  return new Dispatch(_4);
}
function Dispatch(_4) {
  this._ = _4;
}
function parseTypenames2(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t2) {
    var name = "", i4 = t2.indexOf(".");
    if (i4 >= 0)
      name = t2.slice(i4 + 1), t2 = t2.slice(0, i4);
    if (t2 && !types.hasOwnProperty(t2))
      throw new Error("unknown type: " + t2);
    return { type: t2, name };
  });
}
function get(type2, name) {
  for (var i4 = 0, n3 = type2.length, c6; i4 < n3; ++i4) {
    if ((c6 = type2[i4]).name === name) {
      return c6.value;
    }
  }
}
function set2(type2, name, callback) {
  for (var i4 = 0, n3 = type2.length; i4 < n3; ++i4) {
    if (type2[i4].name === name) {
      type2[i4] = noop, type2 = type2.slice(0, i4).concat(type2.slice(i4 + 1));
      break;
    }
  }
  if (callback != null)
    type2.push({ name, value: callback });
  return type2;
}
var noop, dispatch_default2;
var init_dispatch2 = __esm({
  "../../node_modules/d3-dispatch/src/dispatch.js"() {
    noop = { value: () => {
    } };
    Dispatch.prototype = dispatch.prototype = {
      constructor: Dispatch,
      on: function(typename, callback) {
        var _4 = this._, T3 = parseTypenames2(typename + "", _4), t2, i4 = -1, n3 = T3.length;
        if (arguments.length < 2) {
          while (++i4 < n3)
            if ((t2 = (typename = T3[i4]).type) && (t2 = get(_4[t2], typename.name)))
              return t2;
          return;
        }
        if (callback != null && typeof callback !== "function")
          throw new Error("invalid callback: " + callback);
        while (++i4 < n3) {
          if (t2 = (typename = T3[i4]).type)
            _4[t2] = set2(_4[t2], typename.name, callback);
          else if (callback == null)
            for (t2 in _4)
              _4[t2] = set2(_4[t2], typename.name, null);
        }
        return this;
      },
      copy: function() {
        var copy4 = {}, _4 = this._;
        for (var t2 in _4)
          copy4[t2] = _4[t2].slice();
        return new Dispatch(copy4);
      },
      call: function(type2, that) {
        if ((n3 = arguments.length - 2) > 0)
          for (var args = new Array(n3), i4 = 0, n3, t2; i4 < n3; ++i4)
            args[i4] = arguments[i4 + 2];
        if (!this._.hasOwnProperty(type2))
          throw new Error("unknown type: " + type2);
        for (t2 = this._[type2], i4 = 0, n3 = t2.length; i4 < n3; ++i4)
          t2[i4].value.apply(that, args);
      },
      apply: function(type2, that, args) {
        if (!this._.hasOwnProperty(type2))
          throw new Error("unknown type: " + type2);
        for (var t2 = this._[type2], i4 = 0, n3 = t2.length; i4 < n3; ++i4)
          t2[i4].value.apply(that, args);
      }
    };
    dispatch_default2 = dispatch;
  }
});

// ../../node_modules/d3-dispatch/src/index.js
var src_exports10 = {};
__export(src_exports10, {
  dispatch: () => dispatch_default2
});
var init_src18 = __esm({
  "../../node_modules/d3-dispatch/src/index.js"() {
    init_dispatch2();
  }
});

// ../../node_modules/d3-drag/src/noevent.js
function nopropagation(event2) {
  event2.stopImmediatePropagation();
}
function noevent_default(event2) {
  event2.preventDefault();
  event2.stopImmediatePropagation();
}
var nonpassive, nonpassivecapture;
var init_noevent = __esm({
  "../../node_modules/d3-drag/src/noevent.js"() {
    nonpassive = { passive: false };
    nonpassivecapture = { capture: true, passive: false };
  }
});

// ../../node_modules/d3-drag/src/nodrag.js
function nodrag_default(view) {
  var root3 = view.document.documentElement, selection3 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
  if ("onselectstart" in root3) {
    selection3.on("selectstart.drag", noevent_default, nonpassivecapture);
  } else {
    root3.__noselect = root3.style.MozUserSelect;
    root3.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root3 = view.document.documentElement, selection3 = select_default2(view).on("dragstart.drag", null);
  if (noclick) {
    selection3.on("click.drag", noevent_default, nonpassivecapture);
    setTimeout(function() {
      selection3.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root3) {
    selection3.on("selectstart.drag", null);
  } else {
    root3.style.MozUserSelect = root3.__noselect;
    delete root3.__noselect;
  }
}
var init_nodrag = __esm({
  "../../node_modules/d3-drag/src/nodrag.js"() {
    init_src15();
    init_noevent();
  }
});

// ../../node_modules/d3-drag/src/constant.js
var constant_default4;
var init_constant6 = __esm({
  "../../node_modules/d3-drag/src/constant.js"() {
    constant_default4 = (x4) => () => x4;
  }
});

// ../../node_modules/d3-drag/src/event.js
function DragEvent(type2, {
  sourceEvent,
  subject,
  target,
  identifier,
  active,
  x: x4,
  y: y3,
  dx,
  dy,
  dispatch: dispatch3
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    subject: { value: subject, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    identifier: { value: identifier, enumerable: true, configurable: true },
    active: { value: active, enumerable: true, configurable: true },
    x: { value: x4, enumerable: true, configurable: true },
    y: { value: y3, enumerable: true, configurable: true },
    dx: { value: dx, enumerable: true, configurable: true },
    dy: { value: dy, enumerable: true, configurable: true },
    _: { value: dispatch3 }
  });
}
var init_event = __esm({
  "../../node_modules/d3-drag/src/event.js"() {
    DragEvent.prototype.on = function() {
      var value = this._.on.apply(this._, arguments);
      return value === this._ ? this : value;
    };
  }
});

// ../../node_modules/d3-drag/src/drag.js
function defaultFilter(event2) {
  return !event2.ctrlKey && !event2.button;
}
function defaultContainer() {
  return this.parentNode;
}
function defaultSubject(event2, d2) {
  return d2 == null ? { x: event2.x, y: event2.y } : d2;
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function drag_default() {
  var filter3 = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = dispatch_default2("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
  function drag(selection3) {
    selection3.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  function mousedowned(event2, d2) {
    if (touchending || !filter3.call(this, event2, d2))
      return;
    var gesture = beforestart(this, container.call(this, event2, d2), event2, d2, "mouse");
    if (!gesture)
      return;
    select_default2(event2.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
    nodrag_default(event2.view);
    nopropagation(event2);
    mousemoving = false;
    mousedownx = event2.clientX;
    mousedowny = event2.clientY;
    gesture("start", event2);
  }
  function mousemoved(event2) {
    noevent_default(event2);
    if (!mousemoving) {
      var dx = event2.clientX - mousedownx, dy = event2.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }
    gestures.mouse("drag", event2);
  }
  function mouseupped(event2) {
    select_default2(event2.view).on("mousemove.drag mouseup.drag", null);
    yesdrag(event2.view, mousemoving);
    noevent_default(event2);
    gestures.mouse("end", event2);
  }
  function touchstarted(event2, d2) {
    if (!filter3.call(this, event2, d2))
      return;
    var touches = event2.changedTouches, c6 = container.call(this, event2, d2), n3 = touches.length, i4, gesture;
    for (i4 = 0; i4 < n3; ++i4) {
      if (gesture = beforestart(this, c6, event2, d2, touches[i4].identifier, touches[i4])) {
        nopropagation(event2);
        gesture("start", event2, touches[i4]);
      }
    }
  }
  function touchmoved(event2) {
    var touches = event2.changedTouches, n3 = touches.length, i4, gesture;
    for (i4 = 0; i4 < n3; ++i4) {
      if (gesture = gestures[touches[i4].identifier]) {
        noevent_default(event2);
        gesture("drag", event2, touches[i4]);
      }
    }
  }
  function touchended(event2) {
    var touches = event2.changedTouches, n3 = touches.length, i4, gesture;
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, 500);
    for (i4 = 0; i4 < n3; ++i4) {
      if (gesture = gestures[touches[i4].identifier]) {
        nopropagation(event2);
        gesture("end", event2, touches[i4]);
      }
    }
  }
  function beforestart(that, container2, event2, d2, identifier, touch) {
    var dispatch3 = listeners.copy(), p2 = pointer_default(touch || event2, container2), dx, dy, s3;
    if ((s3 = subject.call(that, new DragEvent("beforestart", {
      sourceEvent: event2,
      target: drag,
      identifier,
      active,
      x: p2[0],
      y: p2[1],
      dx: 0,
      dy: 0,
      dispatch: dispatch3
    }), d2)) == null)
      return;
    dx = s3.x - p2[0] || 0;
    dy = s3.y - p2[1] || 0;
    return function gesture(type2, event3, touch2) {
      var p0 = p2, n3;
      switch (type2) {
        case "start":
          gestures[identifier] = gesture, n3 = active++;
          break;
        case "end":
          delete gestures[identifier], --active;
        case "drag":
          p2 = pointer_default(touch2 || event3, container2), n3 = active;
          break;
      }
      dispatch3.call(
        type2,
        that,
        new DragEvent(type2, {
          sourceEvent: event3,
          subject: s3,
          target: drag,
          identifier,
          active: n3,
          x: p2[0] + dx,
          y: p2[1] + dy,
          dx: p2[0] - p0[0],
          dy: p2[1] - p0[1],
          dispatch: dispatch3
        }),
        d2
      );
    };
  }
  drag.filter = function(_4) {
    return arguments.length ? (filter3 = typeof _4 === "function" ? _4 : constant_default4(!!_4), drag) : filter3;
  };
  drag.container = function(_4) {
    return arguments.length ? (container = typeof _4 === "function" ? _4 : constant_default4(_4), drag) : container;
  };
  drag.subject = function(_4) {
    return arguments.length ? (subject = typeof _4 === "function" ? _4 : constant_default4(_4), drag) : subject;
  };
  drag.touchable = function(_4) {
    return arguments.length ? (touchable = typeof _4 === "function" ? _4 : constant_default4(!!_4), drag) : touchable;
  };
  drag.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };
  drag.clickDistance = function(_4) {
    return arguments.length ? (clickDistance2 = (_4 = +_4) * _4, drag) : Math.sqrt(clickDistance2);
  };
  return drag;
}
var init_drag = __esm({
  "../../node_modules/d3-drag/src/drag.js"() {
    init_src18();
    init_src15();
    init_nodrag();
    init_noevent();
    init_constant6();
    init_event();
  }
});

// ../../node_modules/d3-drag/src/index.js
var init_src19 = __esm({
  "../../node_modules/d3-drag/src/index.js"() {
    init_drag();
    init_nodrag();
  }
});

// ../../node_modules/d3-timer/src/timer.js
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
function timer(callback, delay, time2) {
  var t2 = new Timer();
  t2.restart(callback, delay, time2);
  return t2;
}
function timerFlush() {
  now();
  ++frame;
  var t2 = taskHead, e3;
  while (t2) {
    if ((e3 = clockNow - t2._time) >= 0)
      t2._call.call(void 0, e3);
    t2 = t2._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t02, t12 = taskHead, t2, time2 = Infinity;
  while (t12) {
    if (t12._call) {
      if (time2 > t12._time)
        time2 = t12._time;
      t02 = t12, t12 = t12._next;
    } else {
      t2 = t12._next, t12._next = null;
      t12 = t02 ? t02._next = t2 : taskHead = t2;
    }
  }
  taskTail = t02;
  sleep(time2);
}
function sleep(time2) {
  if (frame)
    return;
  if (timeout)
    timeout = clearTimeout(timeout);
  var delay = time2 - clockNow;
  if (delay > 24) {
    if (time2 < Infinity)
      timeout = setTimeout(wake, time2 - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}
var frame, timeout, interval, pokeDelay, taskHead, taskTail, clockLast, clockNow, clockSkew, clock, setFrame;
var init_timer = __esm({
  "../../node_modules/d3-timer/src/timer.js"() {
    frame = 0;
    timeout = 0;
    interval = 0;
    pokeDelay = 1e3;
    clockLast = 0;
    clockNow = 0;
    clockSkew = 0;
    clock = typeof performance === "object" && performance.now ? performance : Date;
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f4) {
      setTimeout(f4, 17);
    };
    Timer.prototype = timer.prototype = {
      constructor: Timer,
      restart: function(callback, delay, time2) {
        if (typeof callback !== "function")
          throw new TypeError("callback is not a function");
        time2 = (time2 == null ? now() : +time2) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
          if (taskTail)
            taskTail._next = this;
          else
            taskHead = this;
          taskTail = this;
        }
        this._call = callback;
        this._time = time2;
        sleep();
      },
      stop: function() {
        if (this._call) {
          this._call = null;
          this._time = Infinity;
          sleep();
        }
      }
    };
  }
});

// ../../node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time2) {
  var t2 = new Timer();
  delay = delay == null ? 0 : +delay;
  t2.restart((elapsed) => {
    t2.stop();
    callback(elapsed + delay);
  }, delay, time2);
  return t2;
}
var init_timeout = __esm({
  "../../node_modules/d3-timer/src/timeout.js"() {
    init_timer();
  }
});

// ../../node_modules/d3-timer/src/index.js
var init_src20 = __esm({
  "../../node_modules/d3-timer/src/index.js"() {
    init_timer();
    init_timeout();
  }
});

// ../../node_modules/d3-transition/src/transition/schedule.js
function schedule_default(node, name, id2, index2, group2, timing) {
  var schedules = node.__transition;
  if (!schedules)
    node.__transition = {};
  else if (id2 in schedules)
    return;
  create(node, id2, {
    name,
    index: index2,
    group: group2,
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > CREATED)
    throw new Error("too late; already scheduled");
  return schedule;
}
function set3(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > STARTED)
    throw new Error("too late; already running");
  return schedule;
}
function get2(node, id2) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id2]))
    throw new Error("transition not found");
  return schedule;
}
function create(node, id2, self2) {
  var schedules = node.__transition, tween;
  schedules[id2] = self2;
  self2.timer = timer(schedule, 0, self2.time);
  function schedule(elapsed) {
    self2.state = SCHEDULED;
    self2.timer.restart(start2, self2.delay, self2.time);
    if (self2.delay <= elapsed)
      start2(elapsed - self2.delay);
  }
  function start2(elapsed) {
    var i4, j4, n3, o2;
    if (self2.state !== SCHEDULED)
      return stop();
    for (i4 in schedules) {
      o2 = schedules[i4];
      if (o2.name !== self2.name)
        continue;
      if (o2.state === STARTED)
        return timeout_default(start2);
      if (o2.state === RUNNING) {
        o2.state = ENDED;
        o2.timer.stop();
        o2.on.call("interrupt", node, node.__data__, o2.index, o2.group);
        delete schedules[i4];
      } else if (+i4 < id2) {
        o2.state = ENDED;
        o2.timer.stop();
        o2.on.call("cancel", node, node.__data__, o2.index, o2.group);
        delete schedules[i4];
      }
    }
    timeout_default(function() {
      if (self2.state === STARTED) {
        self2.state = RUNNING;
        self2.timer.restart(tick, self2.delay, self2.time);
        tick(elapsed);
      }
    });
    self2.state = STARTING;
    self2.on.call("start", node, node.__data__, self2.index, self2.group);
    if (self2.state !== STARTING)
      return;
    self2.state = STARTED;
    tween = new Array(n3 = self2.tween.length);
    for (i4 = 0, j4 = -1; i4 < n3; ++i4) {
      if (o2 = self2.tween[i4].value.call(node, node.__data__, self2.index, self2.group)) {
        tween[++j4] = o2;
      }
    }
    tween.length = j4 + 1;
  }
  function tick(elapsed) {
    var t2 = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i4 = -1, n3 = tween.length;
    while (++i4 < n3) {
      tween[i4].call(node, t2);
    }
    if (self2.state === ENDING) {
      self2.on.call("end", node, node.__data__, self2.index, self2.group);
      stop();
    }
  }
  function stop() {
    self2.state = ENDED;
    self2.timer.stop();
    delete schedules[id2];
    for (var i4 in schedules)
      return;
    delete node.__transition;
  }
}
var emptyOn, emptyTween, CREATED, SCHEDULED, STARTING, STARTED, RUNNING, ENDING, ENDED;
var init_schedule = __esm({
  "../../node_modules/d3-transition/src/transition/schedule.js"() {
    init_src18();
    init_src20();
    emptyOn = dispatch_default2("start", "end", "cancel", "interrupt");
    emptyTween = [];
    CREATED = 0;
    SCHEDULED = 1;
    STARTING = 2;
    STARTED = 3;
    RUNNING = 4;
    ENDING = 5;
    ENDED = 6;
  }
});

// ../../node_modules/d3-transition/src/interrupt.js
function interrupt_default(node, name) {
  var schedules = node.__transition, schedule, active, empty5 = true, i4;
  if (!schedules)
    return;
  name = name == null ? null : name + "";
  for (i4 in schedules) {
    if ((schedule = schedules[i4]).name !== name) {
      empty5 = false;
      continue;
    }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i4];
  }
  if (empty5)
    delete node.__transition;
}
var init_interrupt = __esm({
  "../../node_modules/d3-transition/src/interrupt.js"() {
    init_schedule();
  }
});

// ../../node_modules/d3-transition/src/selection/interrupt.js
function interrupt_default2(name) {
  return this.each(function() {
    interrupt_default(this, name);
  });
}
var init_interrupt2 = __esm({
  "../../node_modules/d3-transition/src/selection/interrupt.js"() {
    init_interrupt();
  }
});

// ../../node_modules/d3-transition/src/transition/tween.js
function tweenRemove(id2, name) {
  var tween0, tween1;
  return function() {
    var schedule = set3(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i4 = 0, n3 = tween1.length; i4 < n3; ++i4) {
        if (tween1[i4].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i4, 1);
          break;
        }
      }
    }
    schedule.tween = tween1;
  };
}
function tweenFunction(id2, name, value) {
  var tween0, tween1;
  if (typeof value !== "function")
    throw new Error();
  return function() {
    var schedule = set3(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t2 = { name, value }, i4 = 0, n3 = tween1.length; i4 < n3; ++i4) {
        if (tween1[i4].name === name) {
          tween1[i4] = t2;
          break;
        }
      }
      if (i4 === n3)
        tween1.push(t2);
    }
    schedule.tween = tween1;
  };
}
function tween_default(name, value) {
  var id2 = this._id;
  name += "";
  if (arguments.length < 2) {
    var tween = get2(this.node(), id2).tween;
    for (var i4 = 0, n3 = tween.length, t2; i4 < n3; ++i4) {
      if ((t2 = tween[i4]).name === name) {
        return t2.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id2, name, value));
}
function tweenValue(transition2, name, value) {
  var id2 = transition2._id;
  transition2.each(function() {
    var schedule = set3(this, id2);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function(node) {
    return get2(node, id2).value[name];
  };
}
var init_tween = __esm({
  "../../node_modules/d3-transition/src/transition/tween.js"() {
    init_schedule();
  }
});

// ../../node_modules/d3-transition/src/transition/interpolate.js
function interpolate_default(a5, b3) {
  var c6;
  return (typeof b3 === "number" ? number_default : b3 instanceof color ? rgb_default : (c6 = color(b3)) ? (b3 = c6, rgb_default) : string_default)(a5, b3);
}
var init_interpolate = __esm({
  "../../node_modules/d3-transition/src/transition/interpolate.js"() {
    init_src4();
    init_src5();
  }
});

// ../../node_modules/d3-transition/src/transition/attr.js
function attrRemove2(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS2(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrConstantNS2(fullname, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attrFunctionNS2(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attr_default2(name, value) {
  var fullname = namespace_default(name), i4 = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i4, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i4, value));
}
var init_attr2 = __esm({
  "../../node_modules/d3-transition/src/transition/attr.js"() {
    init_src5();
    init_src15();
    init_tween();
    init_interpolate();
  }
});

// ../../node_modules/d3-transition/src/transition/attrTween.js
function attrInterpolate(name, i4) {
  return function(t2) {
    this.setAttribute(name, i4.call(this, t2));
  };
}
function attrInterpolateNS(fullname, i4) {
  return function(t2) {
    this.setAttributeNS(fullname.space, fullname.local, i4.call(this, t2));
  };
}
function attrTweenNS(fullname, value) {
  var t02, i0;
  function tween() {
    var i4 = value.apply(this, arguments);
    if (i4 !== i0)
      t02 = (i0 = i4) && attrInterpolateNS(fullname, i4);
    return t02;
  }
  tween._value = value;
  return tween;
}
function attrTween(name, value) {
  var t02, i0;
  function tween() {
    var i4 = value.apply(this, arguments);
    if (i4 !== i0)
      t02 = (i0 = i4) && attrInterpolate(name, i4);
    return t02;
  }
  tween._value = value;
  return tween;
}
function attrTween_default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  var fullname = namespace_default(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}
var init_attrTween = __esm({
  "../../node_modules/d3-transition/src/transition/attrTween.js"() {
    init_src15();
  }
});

// ../../node_modules/d3-transition/src/transition/delay.js
function delayFunction(id2, value) {
  return function() {
    init(this, id2).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id2, value) {
  return value = +value, function() {
    init(this, id2).delay = value;
  };
}
function delay_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get2(this.node(), id2).delay;
}
var init_delay = __esm({
  "../../node_modules/d3-transition/src/transition/delay.js"() {
    init_schedule();
  }
});

// ../../node_modules/d3-transition/src/transition/duration.js
function durationFunction(id2, value) {
  return function() {
    set3(this, id2).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id2, value) {
  return value = +value, function() {
    set3(this, id2).duration = value;
  };
}
function duration_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get2(this.node(), id2).duration;
}
var init_duration2 = __esm({
  "../../node_modules/d3-transition/src/transition/duration.js"() {
    init_schedule();
  }
});

// ../../node_modules/d3-transition/src/transition/ease.js
function easeConstant(id2, value) {
  if (typeof value !== "function")
    throw new Error();
  return function() {
    set3(this, id2).ease = value;
  };
}
function ease_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each(easeConstant(id2, value)) : get2(this.node(), id2).ease;
}
var init_ease = __esm({
  "../../node_modules/d3-transition/src/transition/ease.js"() {
    init_schedule();
  }
});

// ../../node_modules/d3-transition/src/transition/easeVarying.js
function easeVarying(id2, value) {
  return function() {
    var v4 = value.apply(this, arguments);
    if (typeof v4 !== "function")
      throw new Error();
    set3(this, id2).ease = v4;
  };
}
function easeVarying_default(value) {
  if (typeof value !== "function")
    throw new Error();
  return this.each(easeVarying(this._id, value));
}
var init_easeVarying = __esm({
  "../../node_modules/d3-transition/src/transition/easeVarying.js"() {
    init_schedule();
  }
});

// ../../node_modules/d3-transition/src/transition/filter.js
function filter_default2(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups2 = this._groups, m4 = groups2.length, subgroups = new Array(m4), j4 = 0; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], n3 = group2.length, subgroup = subgroups[j4] = [], node, i4 = 0; i4 < n3; ++i4) {
      if ((node = group2[i4]) && match.call(node, node.__data__, i4, group2)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}
var init_filter3 = __esm({
  "../../node_modules/d3-transition/src/transition/filter.js"() {
    init_src15();
    init_transition2();
  }
});

// ../../node_modules/d3-transition/src/transition/merge.js
function merge_default2(transition2) {
  if (transition2._id !== this._id)
    throw new Error();
  for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m4 = Math.min(m0, m1), merges = new Array(m0), j4 = 0; j4 < m4; ++j4) {
    for (var group0 = groups0[j4], group1 = groups1[j4], n3 = group0.length, merge2 = merges[j4] = new Array(n3), node, i4 = 0; i4 < n3; ++i4) {
      if (node = group0[i4] || group1[i4]) {
        merge2[i4] = node;
      }
    }
  }
  for (; j4 < m0; ++j4) {
    merges[j4] = groups0[j4];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}
var init_merge3 = __esm({
  "../../node_modules/d3-transition/src/transition/merge.js"() {
    init_transition2();
  }
});

// ../../node_modules/d3-transition/src/transition/on.js
function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t2) {
    var i4 = t2.indexOf(".");
    if (i4 >= 0)
      t2 = t2.slice(0, i4);
    return !t2 || t2 === "start";
  });
}
function onFunction(id2, name, listener) {
  var on0, on1, sit = start(name) ? init : set3;
  return function() {
    var schedule = sit(this, id2), on2 = schedule.on;
    if (on2 !== on0)
      (on1 = (on0 = on2).copy()).on(name, listener);
    schedule.on = on1;
  };
}
function on_default2(name, listener) {
  var id2 = this._id;
  return arguments.length < 2 ? get2(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
}
var init_on2 = __esm({
  "../../node_modules/d3-transition/src/transition/on.js"() {
    init_schedule();
  }
});

// ../../node_modules/d3-transition/src/transition/remove.js
function removeFunction(id2) {
  return function() {
    var parent = this.parentNode;
    for (var i4 in this.__transition)
      if (+i4 !== id2)
        return;
    if (parent)
      parent.removeChild(this);
  };
}
function remove_default2() {
  return this.on("end.remove", removeFunction(this._id));
}
var init_remove2 = __esm({
  "../../node_modules/d3-transition/src/transition/remove.js"() {
  }
});

// ../../node_modules/d3-transition/src/transition/select.js
function select_default3(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups2 = this._groups, m4 = groups2.length, subgroups = new Array(m4), j4 = 0; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], n3 = group2.length, subgroup = subgroups[j4] = new Array(n3), node, subnode, i4 = 0; i4 < n3; ++i4) {
      if ((node = group2[i4]) && (subnode = select.call(node, node.__data__, i4, group2))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i4] = subnode;
        schedule_default(subgroup[i4], name, id2, i4, subgroup, get2(node, id2));
      }
    }
  }
  return new Transition(subgroups, this._parents, name, id2);
}
var init_select3 = __esm({
  "../../node_modules/d3-transition/src/transition/select.js"() {
    init_src15();
    init_transition2();
    init_schedule();
  }
});

// ../../node_modules/d3-transition/src/transition/selectAll.js
function selectAll_default3(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selectorAll_default(select);
  for (var groups2 = this._groups, m4 = groups2.length, subgroups = [], parents = [], j4 = 0; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], n3 = group2.length, node, i4 = 0; i4 < n3; ++i4) {
      if (node = group2[i4]) {
        for (var children2 = select.call(node, node.__data__, i4, group2), child, inherit2 = get2(node, id2), k4 = 0, l3 = children2.length; k4 < l3; ++k4) {
          if (child = children2[k4]) {
            schedule_default(child, name, id2, k4, children2, inherit2);
          }
        }
        subgroups.push(children2);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name, id2);
}
var init_selectAll3 = __esm({
  "../../node_modules/d3-transition/src/transition/selectAll.js"() {
    init_src15();
    init_transition2();
    init_schedule();
  }
});

// ../../node_modules/d3-transition/src/transition/selection.js
function selection_default2() {
  return new Selection2(this._groups, this._parents);
}
var Selection2;
var init_selection2 = __esm({
  "../../node_modules/d3-transition/src/transition/selection.js"() {
    init_src15();
    Selection2 = selection_default.prototype.constructor;
  }
});

// ../../node_modules/d3-transition/src/transition/style.js
function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}
function styleRemove2(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function styleFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
    if (value1 == null)
      string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function styleMaybeRemove(id2, name) {
  var on0, on1, listener0, key = "style." + name, event2 = "end." + key, remove3;
  return function() {
    var schedule = set3(this, id2), on2 = schedule.on, listener = schedule.value[key] == null ? remove3 || (remove3 = styleRemove2(name)) : void 0;
    if (on2 !== on0 || listener0 !== listener)
      (on1 = (on0 = on2).copy()).on(event2, listener0 = listener);
    schedule.on = on1;
  };
}
function style_default2(name, value, priority) {
  var i4 = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
  return value == null ? this.styleTween(name, styleNull(name, i4)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i4, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i4, value), priority).on("end.style." + name, null);
}
var init_style2 = __esm({
  "../../node_modules/d3-transition/src/transition/style.js"() {
    init_src5();
    init_src15();
    init_schedule();
    init_tween();
    init_interpolate();
  }
});

// ../../node_modules/d3-transition/src/transition/styleTween.js
function styleInterpolate(name, i4, priority) {
  return function(t2) {
    this.style.setProperty(name, i4.call(this, t2), priority);
  };
}
function styleTween(name, value, priority) {
  var t2, i0;
  function tween() {
    var i4 = value.apply(this, arguments);
    if (i4 !== i0)
      t2 = (i0 = i4) && styleInterpolate(name, i4, priority);
    return t2;
  }
  tween._value = value;
  return tween;
}
function styleTween_default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}
var init_styleTween = __esm({
  "../../node_modules/d3-transition/src/transition/styleTween.js"() {
  }
});

// ../../node_modules/d3-transition/src/transition/text.js
function textConstant2(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction2(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function text_default3(value) {
  return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
}
var init_text3 = __esm({
  "../../node_modules/d3-transition/src/transition/text.js"() {
    init_tween();
  }
});

// ../../node_modules/d3-transition/src/transition/textTween.js
function textInterpolate(i4) {
  return function(t2) {
    this.textContent = i4.call(this, t2);
  };
}
function textTween(value) {
  var t02, i0;
  function tween() {
    var i4 = value.apply(this, arguments);
    if (i4 !== i0)
      t02 = (i0 = i4) && textInterpolate(i4);
    return t02;
  }
  tween._value = value;
  return tween;
}
function textTween_default(value) {
  var key = "text";
  if (arguments.length < 1)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, textTween(value));
}
var init_textTween = __esm({
  "../../node_modules/d3-transition/src/transition/textTween.js"() {
  }
});

// ../../node_modules/d3-transition/src/transition/transition.js
function transition_default() {
  var name = this._name, id0 = this._id, id1 = newId();
  for (var groups2 = this._groups, m4 = groups2.length, j4 = 0; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], n3 = group2.length, node, i4 = 0; i4 < n3; ++i4) {
      if (node = group2[i4]) {
        var inherit2 = get2(node, id0);
        schedule_default(node, name, id1, i4, group2, {
          time: inherit2.time + inherit2.delay + inherit2.duration,
          delay: 0,
          duration: inherit2.duration,
          ease: inherit2.ease
        });
      }
    }
  }
  return new Transition(groups2, this._parents, name, id1);
}
var init_transition = __esm({
  "../../node_modules/d3-transition/src/transition/transition.js"() {
    init_transition2();
    init_schedule();
  }
});

// ../../node_modules/d3-transition/src/transition/end.js
function end_default() {
  var on0, on1, that = this, id2 = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end = { value: function() {
      if (--size === 0)
        resolve();
    } };
    that.each(function() {
      var schedule = set3(this, id2), on2 = schedule.on;
      if (on2 !== on0) {
        on1 = (on0 = on2).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule.on = on1;
    });
    if (size === 0)
      resolve();
  });
}
var init_end = __esm({
  "../../node_modules/d3-transition/src/transition/end.js"() {
    init_schedule();
  }
});

// ../../node_modules/d3-transition/src/transition/index.js
function Transition(groups2, parents, name, id2) {
  this._groups = groups2;
  this._parents = parents;
  this._name = name;
  this._id = id2;
}
function transition(name) {
  return selection_default().transition(name);
}
function newId() {
  return ++id;
}
var id, selection_prototype;
var init_transition2 = __esm({
  "../../node_modules/d3-transition/src/transition/index.js"() {
    init_src15();
    init_attr2();
    init_attrTween();
    init_delay();
    init_duration2();
    init_ease();
    init_easeVarying();
    init_filter3();
    init_merge3();
    init_on2();
    init_remove2();
    init_select3();
    init_selectAll3();
    init_selection2();
    init_style2();
    init_styleTween();
    init_text3();
    init_textTween();
    init_transition();
    init_tween();
    init_end();
    id = 0;
    selection_prototype = selection_default.prototype;
    Transition.prototype = transition.prototype = {
      constructor: Transition,
      select: select_default3,
      selectAll: selectAll_default3,
      selectChild: selection_prototype.selectChild,
      selectChildren: selection_prototype.selectChildren,
      filter: filter_default2,
      merge: merge_default2,
      selection: selection_default2,
      transition: transition_default,
      call: selection_prototype.call,
      nodes: selection_prototype.nodes,
      node: selection_prototype.node,
      size: selection_prototype.size,
      empty: selection_prototype.empty,
      each: selection_prototype.each,
      on: on_default2,
      attr: attr_default2,
      attrTween: attrTween_default,
      style: style_default2,
      styleTween: styleTween_default,
      text: text_default3,
      textTween: textTween_default,
      remove: remove_default2,
      tween: tween_default,
      delay: delay_default,
      duration: duration_default,
      ease: ease_default,
      easeVarying: easeVarying_default,
      end: end_default,
      [Symbol.iterator]: selection_prototype[Symbol.iterator]
    };
  }
});

// ../../node_modules/d3-ease/src/cubic.js
function cubicOut(t2) {
  return --t2 * t2 * t2 + 1;
}
function cubicInOut(t2) {
  return ((t2 *= 2) <= 1 ? t2 * t2 * t2 : (t2 -= 2) * t2 * t2 + 2) / 2;
}
var init_cubic = __esm({
  "../../node_modules/d3-ease/src/cubic.js"() {
  }
});

// ../../node_modules/d3-ease/src/index.js
var init_src21 = __esm({
  "../../node_modules/d3-ease/src/index.js"() {
    init_cubic();
  }
});

// ../../node_modules/d3-transition/src/selection/transition.js
function inherit(node, id2) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id2])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id2} not found`);
    }
  }
  return timing;
}
function transition_default2(name) {
  var id2, timing;
  if (name instanceof Transition) {
    id2 = name._id, name = name._name;
  } else {
    id2 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }
  for (var groups2 = this._groups, m4 = groups2.length, j4 = 0; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], n3 = group2.length, node, i4 = 0; i4 < n3; ++i4) {
      if (node = group2[i4]) {
        schedule_default(node, name, id2, i4, group2, timing || inherit(node, id2));
      }
    }
  }
  return new Transition(groups2, this._parents, name, id2);
}
var defaultTiming;
var init_transition3 = __esm({
  "../../node_modules/d3-transition/src/selection/transition.js"() {
    init_transition2();
    init_schedule();
    init_src21();
    init_src20();
    defaultTiming = {
      time: null,
      delay: 0,
      duration: 250,
      ease: cubicInOut
    };
  }
});

// ../../node_modules/d3-transition/src/selection/index.js
var init_selection3 = __esm({
  "../../node_modules/d3-transition/src/selection/index.js"() {
    init_src15();
    init_interrupt2();
    init_transition3();
    selection_default.prototype.interrupt = interrupt_default2;
    selection_default.prototype.transition = transition_default2;
  }
});

// ../../node_modules/d3-transition/src/index.js
var init_src22 = __esm({
  "../../node_modules/d3-transition/src/index.js"() {
    init_selection3();
    init_interrupt();
  }
});

// ../../node_modules/d3-brush/src/constant.js
var constant_default5;
var init_constant7 = __esm({
  "../../node_modules/d3-brush/src/constant.js"() {
    constant_default5 = (x4) => () => x4;
  }
});

// ../../node_modules/d3-brush/src/event.js
function BrushEvent(type2, {
  sourceEvent,
  target,
  selection: selection3,
  mode: mode2,
  dispatch: dispatch3
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    selection: { value: selection3, enumerable: true, configurable: true },
    mode: { value: mode2, enumerable: true, configurable: true },
    _: { value: dispatch3 }
  });
}
var init_event2 = __esm({
  "../../node_modules/d3-brush/src/event.js"() {
  }
});

// ../../node_modules/d3-brush/src/noevent.js
function nopropagation2(event2) {
  event2.stopImmediatePropagation();
}
function noevent_default2(event2) {
  event2.preventDefault();
  event2.stopImmediatePropagation();
}
var init_noevent2 = __esm({
  "../../node_modules/d3-brush/src/noevent.js"() {
  }
});

// ../../node_modules/d3-brush/src/brush.js
function number1(e3) {
  return [+e3[0], +e3[1]];
}
function number22(e3) {
  return [number1(e3[0]), number1(e3[1])];
}
function type(t2) {
  return { type: t2 };
}
function defaultFilter2(event2) {
  return !event2.ctrlKey && !event2.button;
}
function defaultExtent() {
  var svg2 = this.ownerSVGElement || this;
  if (svg2.hasAttribute("viewBox")) {
    svg2 = svg2.viewBox.baseVal;
    return [[svg2.x, svg2.y], [svg2.x + svg2.width, svg2.y + svg2.height]];
  }
  return [[0, 0], [svg2.width.baseVal.value, svg2.height.baseVal.value]];
}
function defaultTouchable2() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function local2(node) {
  while (!node.__brush)
    if (!(node = node.parentNode))
      return;
  return node.__brush;
}
function empty3(extent2) {
  return extent2[0][0] === extent2[1][0] || extent2[0][1] === extent2[1][1];
}
function brushSelection(node) {
  var state = node.__brush;
  return state ? state.dim.output(state.selection) : null;
}
function brushX() {
  return brush(X4);
}
function brushY() {
  return brush(Y4);
}
function brush_default() {
  return brush(XY);
}
function brush(dim) {
  var extent2 = defaultExtent, filter3 = defaultFilter2, touchable = defaultTouchable2, keys = true, listeners = dispatch_default2("start", "brush", "end"), handleSize = 6, touchending;
  function brush2(group2) {
    var overlay = group2.property("__brush", initialize2).selectAll(".overlay").data([type("overlay")]);
    overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function() {
      var extent3 = local2(this).extent;
      select_default2(this).attr("x", extent3[0][0]).attr("y", extent3[0][1]).attr("width", extent3[1][0] - extent3[0][0]).attr("height", extent3[1][1] - extent3[0][1]);
    });
    group2.selectAll(".selection").data([type("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
    var handle = group2.selectAll(".handle").data(dim.handles, function(d2) {
      return d2.type;
    });
    handle.exit().remove();
    handle.enter().append("rect").attr("class", function(d2) {
      return "handle handle--" + d2.type;
    }).attr("cursor", function(d2) {
      return cursors[d2.type];
    });
    group2.each(redraw).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", started).filter(touchable).on("touchstart.brush", started).on("touchmove.brush", touchmoved).on("touchend.brush touchcancel.brush", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  brush2.move = function(group2, selection3, event2) {
    if (group2.tween) {
      group2.on("start.brush", function(event3) {
        emitter(this, arguments).beforestart().start(event3);
      }).on("interrupt.brush end.brush", function(event3) {
        emitter(this, arguments).end(event3);
      }).tween("brush", function() {
        var that = this, state = that.__brush, emit = emitter(that, arguments), selection0 = state.selection, selection1 = dim.input(typeof selection3 === "function" ? selection3.apply(this, arguments) : selection3, state.extent), i4 = value_default(selection0, selection1);
        function tween(t2) {
          state.selection = t2 === 1 && selection1 === null ? null : i4(t2);
          redraw.call(that);
          emit.brush();
        }
        return selection0 !== null && selection1 !== null ? tween : tween(1);
      });
    } else {
      group2.each(function() {
        var that = this, args = arguments, state = that.__brush, selection1 = dim.input(typeof selection3 === "function" ? selection3.apply(that, args) : selection3, state.extent), emit = emitter(that, args).beforestart();
        interrupt_default(that);
        state.selection = selection1 === null ? null : selection1;
        redraw.call(that);
        emit.start(event2).brush(event2).end(event2);
      });
    }
  };
  brush2.clear = function(group2, event2) {
    brush2.move(group2, null, event2);
  };
  function redraw() {
    var group2 = select_default2(this), selection3 = local2(this).selection;
    if (selection3) {
      group2.selectAll(".selection").style("display", null).attr("x", selection3[0][0]).attr("y", selection3[0][1]).attr("width", selection3[1][0] - selection3[0][0]).attr("height", selection3[1][1] - selection3[0][1]);
      group2.selectAll(".handle").style("display", null).attr("x", function(d2) {
        return d2.type[d2.type.length - 1] === "e" ? selection3[1][0] - handleSize / 2 : selection3[0][0] - handleSize / 2;
      }).attr("y", function(d2) {
        return d2.type[0] === "s" ? selection3[1][1] - handleSize / 2 : selection3[0][1] - handleSize / 2;
      }).attr("width", function(d2) {
        return d2.type === "n" || d2.type === "s" ? selection3[1][0] - selection3[0][0] + handleSize : handleSize;
      }).attr("height", function(d2) {
        return d2.type === "e" || d2.type === "w" ? selection3[1][1] - selection3[0][1] + handleSize : handleSize;
      });
    } else {
      group2.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
    }
  }
  function emitter(that, args, clean) {
    var emit = that.__brush.emitter;
    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);
  }
  function Emitter(that, args, clean) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
    this.clean = clean;
  }
  Emitter.prototype = {
    beforestart: function() {
      if (++this.active === 1)
        this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function(event2, mode2) {
      if (this.starting)
        this.starting = false, this.emit("start", event2, mode2);
      else
        this.emit("brush", event2);
      return this;
    },
    brush: function(event2, mode2) {
      this.emit("brush", event2, mode2);
      return this;
    },
    end: function(event2, mode2) {
      if (--this.active === 0)
        delete this.state.emitter, this.emit("end", event2, mode2);
      return this;
    },
    emit: function(type2, event2, mode2) {
      var d2 = select_default2(this.that).datum();
      listeners.call(
        type2,
        this.that,
        new BrushEvent(type2, {
          sourceEvent: event2,
          target: brush2,
          selection: dim.output(this.state.selection),
          mode: mode2,
          dispatch: listeners
        }),
        d2
      );
    }
  };
  function started(event2) {
    if (touchending && !event2.touches)
      return;
    if (!filter3.apply(this, arguments))
      return;
    var that = this, type2 = event2.target.__data__.type, mode2 = (keys && event2.metaKey ? type2 = "overlay" : type2) === "selection" ? MODE_DRAG : keys && event2.altKey ? MODE_CENTER : MODE_HANDLE, signX = dim === Y4 ? null : signsX[type2], signY = dim === X4 ? null : signsY[type2], state = local2(that), extent3 = state.extent, selection3 = state.selection, W4 = extent3[0][0], w0, w1, N5 = extent3[0][1], n0, n1, E6 = extent3[1][0], e0, e1, S3 = extent3[1][1], s0, s1, dx = 0, dy = 0, moving, shifting = signX && signY && keys && event2.shiftKey, lockX, lockY, points = Array.from(event2.touches || [event2], (t2) => {
      const i4 = t2.identifier;
      t2 = pointer_default(t2, that);
      t2.point0 = t2.slice();
      t2.identifier = i4;
      return t2;
    });
    interrupt_default(that);
    var emit = emitter(that, arguments, true).beforestart();
    if (type2 === "overlay") {
      if (selection3)
        moving = true;
      const pts = [points[0], points[1] || points[0]];
      state.selection = selection3 = [[
        w0 = dim === Y4 ? W4 : min4(pts[0][0], pts[1][0]),
        n0 = dim === X4 ? N5 : min4(pts[0][1], pts[1][1])
      ], [
        e0 = dim === Y4 ? E6 : max5(pts[0][0], pts[1][0]),
        s0 = dim === X4 ? S3 : max5(pts[0][1], pts[1][1])
      ]];
      if (points.length > 1)
        move(event2);
    } else {
      w0 = selection3[0][0];
      n0 = selection3[0][1];
      e0 = selection3[1][0];
      s0 = selection3[1][1];
    }
    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;
    var group2 = select_default2(that).attr("pointer-events", "none");
    var overlay = group2.selectAll(".overlay").attr("cursor", cursors[type2]);
    if (event2.touches) {
      emit.moved = moved;
      emit.ended = ended;
    } else {
      var view = select_default2(event2.view).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
      if (keys)
        view.on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true);
      nodrag_default(event2.view);
    }
    redraw.call(that);
    emit.start(event2, mode2.name);
    function moved(event3) {
      for (const p2 of event3.changedTouches || [event3]) {
        for (const d2 of points)
          if (d2.identifier === p2.identifier)
            d2.cur = pointer_default(p2, that);
      }
      if (shifting && !lockX && !lockY && points.length === 1) {
        const point7 = points[0];
        if (abs2(point7.cur[0] - point7[0]) > abs2(point7.cur[1] - point7[1]))
          lockY = true;
        else
          lockX = true;
      }
      for (const point7 of points)
        if (point7.cur)
          point7[0] = point7.cur[0], point7[1] = point7.cur[1];
      moving = true;
      noevent_default2(event3);
      move(event3);
    }
    function move(event3) {
      const point7 = points[0], point0 = point7.point0;
      var t2;
      dx = point7[0] - point0[0];
      dy = point7[1] - point0[1];
      switch (mode2) {
        case MODE_SPACE:
        case MODE_DRAG: {
          if (signX)
            dx = max5(W4 - w0, min4(E6 - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
          if (signY)
            dy = max5(N5 - n0, min4(S3 - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
          break;
        }
        case MODE_HANDLE: {
          if (points[1]) {
            if (signX)
              w1 = max5(W4, min4(E6, points[0][0])), e1 = max5(W4, min4(E6, points[1][0])), signX = 1;
            if (signY)
              n1 = max5(N5, min4(S3, points[0][1])), s1 = max5(N5, min4(S3, points[1][1])), signY = 1;
          } else {
            if (signX < 0)
              dx = max5(W4 - w0, min4(E6 - w0, dx)), w1 = w0 + dx, e1 = e0;
            else if (signX > 0)
              dx = max5(W4 - e0, min4(E6 - e0, dx)), w1 = w0, e1 = e0 + dx;
            if (signY < 0)
              dy = max5(N5 - n0, min4(S3 - n0, dy)), n1 = n0 + dy, s1 = s0;
            else if (signY > 0)
              dy = max5(N5 - s0, min4(S3 - s0, dy)), n1 = n0, s1 = s0 + dy;
          }
          break;
        }
        case MODE_CENTER: {
          if (signX)
            w1 = max5(W4, min4(E6, w0 - dx * signX)), e1 = max5(W4, min4(E6, e0 + dx * signX));
          if (signY)
            n1 = max5(N5, min4(S3, n0 - dy * signY)), s1 = max5(N5, min4(S3, s0 + dy * signY));
          break;
        }
      }
      if (e1 < w1) {
        signX *= -1;
        t2 = w0, w0 = e0, e0 = t2;
        t2 = w1, w1 = e1, e1 = t2;
        if (type2 in flipX)
          overlay.attr("cursor", cursors[type2 = flipX[type2]]);
      }
      if (s1 < n1) {
        signY *= -1;
        t2 = n0, n0 = s0, s0 = t2;
        t2 = n1, n1 = s1, s1 = t2;
        if (type2 in flipY)
          overlay.attr("cursor", cursors[type2 = flipY[type2]]);
      }
      if (state.selection)
        selection3 = state.selection;
      if (lockX)
        w1 = selection3[0][0], e1 = selection3[1][0];
      if (lockY)
        n1 = selection3[0][1], s1 = selection3[1][1];
      if (selection3[0][0] !== w1 || selection3[0][1] !== n1 || selection3[1][0] !== e1 || selection3[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush(event3, mode2.name);
      }
    }
    function ended(event3) {
      nopropagation2(event3);
      if (event3.touches) {
        if (event3.touches.length)
          return;
        if (touchending)
          clearTimeout(touchending);
        touchending = setTimeout(function() {
          touchending = null;
        }, 500);
      } else {
        yesdrag(event3.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }
      group2.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection)
        selection3 = state.selection;
      if (empty3(selection3))
        state.selection = null, redraw.call(that);
      emit.end(event3, mode2.name);
    }
    function keydowned(event3) {
      switch (event3.keyCode) {
        case 16: {
          shifting = signX && signY;
          break;
        }
        case 18: {
          if (mode2 === MODE_HANDLE) {
            if (signX)
              e0 = e1 - dx * signX, w0 = w1 + dx * signX;
            if (signY)
              s0 = s1 - dy * signY, n0 = n1 + dy * signY;
            mode2 = MODE_CENTER;
            move(event3);
          }
          break;
        }
        case 32: {
          if (mode2 === MODE_HANDLE || mode2 === MODE_CENTER) {
            if (signX < 0)
              e0 = e1 - dx;
            else if (signX > 0)
              w0 = w1 - dx;
            if (signY < 0)
              s0 = s1 - dy;
            else if (signY > 0)
              n0 = n1 - dy;
            mode2 = MODE_SPACE;
            overlay.attr("cursor", cursors.selection);
            move(event3);
          }
          break;
        }
        default:
          return;
      }
      noevent_default2(event3);
    }
    function keyupped(event3) {
      switch (event3.keyCode) {
        case 16: {
          if (shifting) {
            lockX = lockY = shifting = false;
            move(event3);
          }
          break;
        }
        case 18: {
          if (mode2 === MODE_CENTER) {
            if (signX < 0)
              e0 = e1;
            else if (signX > 0)
              w0 = w1;
            if (signY < 0)
              s0 = s1;
            else if (signY > 0)
              n0 = n1;
            mode2 = MODE_HANDLE;
            move(event3);
          }
          break;
        }
        case 32: {
          if (mode2 === MODE_SPACE) {
            if (event3.altKey) {
              if (signX)
                e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY)
                s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode2 = MODE_CENTER;
            } else {
              if (signX < 0)
                e0 = e1;
              else if (signX > 0)
                w0 = w1;
              if (signY < 0)
                s0 = s1;
              else if (signY > 0)
                n0 = n1;
              mode2 = MODE_HANDLE;
            }
            overlay.attr("cursor", cursors[type2]);
            move(event3);
          }
          break;
        }
        default:
          return;
      }
      noevent_default2(event3);
    }
  }
  function touchmoved(event2) {
    emitter(this, arguments).moved(event2);
  }
  function touchended(event2) {
    emitter(this, arguments).ended(event2);
  }
  function initialize2() {
    var state = this.__brush || { selection: null };
    state.extent = number22(extent2.apply(this, arguments));
    state.dim = dim;
    return state;
  }
  brush2.extent = function(_4) {
    return arguments.length ? (extent2 = typeof _4 === "function" ? _4 : constant_default5(number22(_4)), brush2) : extent2;
  };
  brush2.filter = function(_4) {
    return arguments.length ? (filter3 = typeof _4 === "function" ? _4 : constant_default5(!!_4), brush2) : filter3;
  };
  brush2.touchable = function(_4) {
    return arguments.length ? (touchable = typeof _4 === "function" ? _4 : constant_default5(!!_4), brush2) : touchable;
  };
  brush2.handleSize = function(_4) {
    return arguments.length ? (handleSize = +_4, brush2) : handleSize;
  };
  brush2.keyModifiers = function(_4) {
    return arguments.length ? (keys = !!_4, brush2) : keys;
  };
  brush2.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush2 : value;
  };
  return brush2;
}
var MODE_DRAG, MODE_SPACE, MODE_HANDLE, MODE_CENTER, abs2, max5, min4, X4, Y4, XY, cursors, flipX, flipY, signsX, signsY;
var init_brush = __esm({
  "../../node_modules/d3-brush/src/brush.js"() {
    init_src18();
    init_src19();
    init_src5();
    init_src15();
    init_src22();
    init_constant7();
    init_event2();
    init_noevent2();
    MODE_DRAG = { name: "drag" };
    MODE_SPACE = { name: "space" };
    MODE_HANDLE = { name: "handle" };
    MODE_CENTER = { name: "center" };
    ({ abs: abs2, max: max5, min: min4 } = Math);
    X4 = {
      name: "x",
      handles: ["w", "e"].map(type),
      input: function(x4, e3) {
        return x4 == null ? null : [[+x4[0], e3[0][1]], [+x4[1], e3[1][1]]];
      },
      output: function(xy) {
        return xy && [xy[0][0], xy[1][0]];
      }
    };
    Y4 = {
      name: "y",
      handles: ["n", "s"].map(type),
      input: function(y3, e3) {
        return y3 == null ? null : [[e3[0][0], +y3[0]], [e3[1][0], +y3[1]]];
      },
      output: function(xy) {
        return xy && [xy[0][1], xy[1][1]];
      }
    };
    XY = {
      name: "xy",
      handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
      input: function(xy) {
        return xy == null ? null : number22(xy);
      },
      output: function(xy) {
        return xy;
      }
    };
    cursors = {
      overlay: "crosshair",
      selection: "move",
      n: "ns-resize",
      e: "ew-resize",
      s: "ns-resize",
      w: "ew-resize",
      nw: "nwse-resize",
      ne: "nesw-resize",
      se: "nwse-resize",
      sw: "nesw-resize"
    };
    flipX = {
      e: "w",
      w: "e",
      nw: "ne",
      ne: "nw",
      se: "sw",
      sw: "se"
    };
    flipY = {
      n: "s",
      s: "n",
      nw: "sw",
      ne: "se",
      se: "ne",
      sw: "nw"
    };
    signsX = {
      overlay: 1,
      selection: 1,
      n: null,
      e: 1,
      s: null,
      w: -1,
      nw: -1,
      ne: 1,
      se: 1,
      sw: -1
    };
    signsY = {
      overlay: 1,
      selection: 1,
      n: -1,
      e: null,
      s: 1,
      w: null,
      nw: -1,
      ne: -1,
      se: 1,
      sw: 1
    };
  }
});

// ../../node_modules/d3-brush/src/index.js
var src_exports11 = {};
__export(src_exports11, {
  brush: () => brush_default,
  brushSelection: () => brushSelection,
  brushX: () => brushX,
  brushY: () => brushY
});
var init_src23 = __esm({
  "../../node_modules/d3-brush/src/index.js"() {
    init_brush();
  }
});

// ../../node_modules/d3-zoom/src/constant.js
var constant_default6;
var init_constant8 = __esm({
  "../../node_modules/d3-zoom/src/constant.js"() {
    constant_default6 = (x4) => () => x4;
  }
});

// ../../node_modules/d3-zoom/src/event.js
function ZoomEvent(type2, {
  sourceEvent,
  target,
  transform: transform2,
  dispatch: dispatch3
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    transform: { value: transform2, enumerable: true, configurable: true },
    _: { value: dispatch3 }
  });
}
var init_event3 = __esm({
  "../../node_modules/d3-zoom/src/event.js"() {
  }
});

// ../../node_modules/d3-zoom/src/transform.js
function Transform(k4, x4, y3) {
  this.k = k4;
  this.x = x4;
  this.y = y3;
}
function transform(node) {
  while (!node.__zoom)
    if (!(node = node.parentNode))
      return identity5;
  return node.__zoom;
}
var identity5;
var init_transform2 = __esm({
  "../../node_modules/d3-zoom/src/transform.js"() {
    Transform.prototype = {
      constructor: Transform,
      scale: function(k4) {
        return k4 === 1 ? this : new Transform(this.k * k4, this.x, this.y);
      },
      translate: function(x4, y3) {
        return x4 === 0 & y3 === 0 ? this : new Transform(this.k, this.x + this.k * x4, this.y + this.k * y3);
      },
      apply: function(point7) {
        return [point7[0] * this.k + this.x, point7[1] * this.k + this.y];
      },
      applyX: function(x4) {
        return x4 * this.k + this.x;
      },
      applyY: function(y3) {
        return y3 * this.k + this.y;
      },
      invert: function(location) {
        return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
      },
      invertX: function(x4) {
        return (x4 - this.x) / this.k;
      },
      invertY: function(y3) {
        return (y3 - this.y) / this.k;
      },
      rescaleX: function(x4) {
        return x4.copy().domain(x4.range().map(this.invertX, this).map(x4.invert, x4));
      },
      rescaleY: function(y3) {
        return y3.copy().domain(y3.range().map(this.invertY, this).map(y3.invert, y3));
      },
      toString: function() {
        return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
      }
    };
    identity5 = new Transform(1, 0, 0);
    transform.prototype = Transform.prototype;
  }
});

// ../../node_modules/d3-zoom/src/noevent.js
function nopropagation3(event2) {
  event2.stopImmediatePropagation();
}
function noevent_default3(event2) {
  event2.preventDefault();
  event2.stopImmediatePropagation();
}
var init_noevent3 = __esm({
  "../../node_modules/d3-zoom/src/noevent.js"() {
  }
});

// ../../node_modules/d3-zoom/src/zoom.js
function defaultFilter3(event2) {
  return (!event2.ctrlKey || event2.type === "wheel") && !event2.button;
}
function defaultExtent2() {
  var e3 = this;
  if (e3 instanceof SVGElement) {
    e3 = e3.ownerSVGElement || e3;
    if (e3.hasAttribute("viewBox")) {
      e3 = e3.viewBox.baseVal;
      return [[e3.x, e3.y], [e3.x + e3.width, e3.y + e3.height]];
    }
    return [[0, 0], [e3.width.baseVal.value, e3.height.baseVal.value]];
  }
  return [[0, 0], [e3.clientWidth, e3.clientHeight]];
}
function defaultTransform() {
  return this.__zoom || identity5;
}
function defaultWheelDelta(event2) {
  return -event2.deltaY * (event2.deltaMode === 1 ? 0.05 : event2.deltaMode ? 1 : 2e-3) * (event2.ctrlKey ? 10 : 1);
}
function defaultTouchable3() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform2, extent2, translateExtent) {
  var dx0 = transform2.invertX(extent2[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent2[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent2[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent2[1][1]) - translateExtent[1][1];
  return transform2.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}
function zoom_default2() {
  var filter3 = defaultFilter3, extent2 = defaultExtent2, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable3, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default, listeners = dispatch_default2("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
  function zoom(selection3) {
    selection3.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  zoom.transform = function(collection, transform2, point7, event2) {
    var selection3 = collection.selection ? collection.selection() : collection;
    selection3.property("__zoom", defaultTransform);
    if (collection !== selection3) {
      schedule(collection, transform2, point7, event2);
    } else {
      selection3.interrupt().each(function() {
        gesture(this, arguments).event(event2).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
      });
    }
  };
  zoom.scaleBy = function(selection3, k4, p2, event2) {
    zoom.scaleTo(selection3, function() {
      var k0 = this.__zoom.k, k1 = typeof k4 === "function" ? k4.apply(this, arguments) : k4;
      return k0 * k1;
    }, p2, event2);
  };
  zoom.scaleTo = function(selection3, k4, p2, event2) {
    zoom.transform(selection3, function() {
      var e3 = extent2.apply(this, arguments), t02 = this.__zoom, p0 = p2 == null ? centroid(e3) : typeof p2 === "function" ? p2.apply(this, arguments) : p2, p1 = t02.invert(p0), k1 = typeof k4 === "function" ? k4.apply(this, arguments) : k4;
      return constrain(translate(scale(t02, k1), p0, p1), e3, translateExtent);
    }, p2, event2);
  };
  zoom.translateBy = function(selection3, x4, y3, event2) {
    zoom.transform(selection3, function() {
      return constrain(this.__zoom.translate(
        typeof x4 === "function" ? x4.apply(this, arguments) : x4,
        typeof y3 === "function" ? y3.apply(this, arguments) : y3
      ), extent2.apply(this, arguments), translateExtent);
    }, null, event2);
  };
  zoom.translateTo = function(selection3, x4, y3, p2, event2) {
    zoom.transform(selection3, function() {
      var e3 = extent2.apply(this, arguments), t2 = this.__zoom, p0 = p2 == null ? centroid(e3) : typeof p2 === "function" ? p2.apply(this, arguments) : p2;
      return constrain(identity5.translate(p0[0], p0[1]).scale(t2.k).translate(
        typeof x4 === "function" ? -x4.apply(this, arguments) : -x4,
        typeof y3 === "function" ? -y3.apply(this, arguments) : -y3
      ), e3, translateExtent);
    }, p2, event2);
  };
  function scale(transform2, k4) {
    k4 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k4));
    return k4 === transform2.k ? transform2 : new Transform(k4, transform2.x, transform2.y);
  }
  function translate(transform2, p0, p1) {
    var x4 = p0[0] - p1[0] * transform2.k, y3 = p0[1] - p1[1] * transform2.k;
    return x4 === transform2.x && y3 === transform2.y ? transform2 : new Transform(transform2.k, x4, y3);
  }
  function centroid(extent3) {
    return [(+extent3[0][0] + +extent3[1][0]) / 2, (+extent3[0][1] + +extent3[1][1]) / 2];
  }
  function schedule(transition2, transform2, point7, event2) {
    transition2.on("start.zoom", function() {
      gesture(this, arguments).event(event2).start();
    }).on("interrupt.zoom end.zoom", function() {
      gesture(this, arguments).event(event2).end();
    }).tween("zoom", function() {
      var that = this, args = arguments, g3 = gesture(that, args).event(event2), e3 = extent2.apply(that, args), p2 = point7 == null ? centroid(e3) : typeof point7 === "function" ? point7.apply(that, args) : point7, w4 = Math.max(e3[1][0] - e3[0][0], e3[1][1] - e3[0][1]), a5 = that.__zoom, b3 = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i4 = interpolate(a5.invert(p2).concat(w4 / a5.k), b3.invert(p2).concat(w4 / b3.k));
      return function(t2) {
        if (t2 === 1)
          t2 = b3;
        else {
          var l3 = i4(t2), k4 = w4 / l3[2];
          t2 = new Transform(k4, p2[0] - l3[0] * k4, p2[1] - l3[1] * k4);
        }
        g3.zoom(null, t2);
      };
    });
  }
  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }
  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent2.apply(that, args);
    this.taps = 0;
  }
  Gesture.prototype = {
    event: function(event2) {
      if (event2)
        this.sourceEvent = event2;
      return this;
    },
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform2) {
      if (this.mouse && key !== "mouse")
        this.mouse[1] = transform2.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch")
        this.touch0[1] = transform2.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch")
        this.touch1[1] = transform2.invert(this.touch1[0]);
      this.that.__zoom = transform2;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type2) {
      var d2 = select_default2(this.that).datum();
      listeners.call(
        type2,
        this.that,
        new ZoomEvent(type2, {
          sourceEvent: this.sourceEvent,
          target: zoom,
          type: type2,
          transform: this.that.__zoom,
          dispatch: listeners
        }),
        d2
      );
    }
  };
  function wheeled(event2, ...args) {
    if (!filter3.apply(this, arguments))
      return;
    var g3 = gesture(this, args).event(event2), t2 = this.__zoom, k4 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t2.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p2 = pointer_default(event2);
    if (g3.wheel) {
      if (g3.mouse[0][0] !== p2[0] || g3.mouse[0][1] !== p2[1]) {
        g3.mouse[1] = t2.invert(g3.mouse[0] = p2);
      }
      clearTimeout(g3.wheel);
    } else if (t2.k === k4)
      return;
    else {
      g3.mouse = [p2, t2.invert(p2)];
      interrupt_default(this);
      g3.start();
    }
    noevent_default3(event2);
    g3.wheel = setTimeout(wheelidled, wheelDelay);
    g3.zoom("mouse", constrain(translate(scale(t2, k4), g3.mouse[0], g3.mouse[1]), g3.extent, translateExtent));
    function wheelidled() {
      g3.wheel = null;
      g3.end();
    }
  }
  function mousedowned(event2, ...args) {
    if (touchending || !filter3.apply(this, arguments))
      return;
    var currentTarget = event2.currentTarget, g3 = gesture(this, args, true).event(event2), v4 = select_default2(event2.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p2 = pointer_default(event2, currentTarget), x0 = event2.clientX, y0 = event2.clientY;
    nodrag_default(event2.view);
    nopropagation3(event2);
    g3.mouse = [p2, this.__zoom.invert(p2)];
    interrupt_default(this);
    g3.start();
    function mousemoved(event3) {
      noevent_default3(event3);
      if (!g3.moved) {
        var dx = event3.clientX - x0, dy = event3.clientY - y0;
        g3.moved = dx * dx + dy * dy > clickDistance2;
      }
      g3.event(event3).zoom("mouse", constrain(translate(g3.that.__zoom, g3.mouse[0] = pointer_default(event3, currentTarget), g3.mouse[1]), g3.extent, translateExtent));
    }
    function mouseupped(event3) {
      v4.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event3.view, g3.moved);
      noevent_default3(event3);
      g3.event(event3).end();
    }
  }
  function dblclicked(event2, ...args) {
    if (!filter3.apply(this, arguments))
      return;
    var t02 = this.__zoom, p0 = pointer_default(event2.changedTouches ? event2.changedTouches[0] : event2, this), p1 = t02.invert(p0), k1 = t02.k * (event2.shiftKey ? 0.5 : 2), t12 = constrain(translate(scale(t02, k1), p0, p1), extent2.apply(this, args), translateExtent);
    noevent_default3(event2);
    if (duration > 0)
      select_default2(this).transition().duration(duration).call(schedule, t12, p0, event2);
    else
      select_default2(this).call(zoom.transform, t12, p0, event2);
  }
  function touchstarted(event2, ...args) {
    if (!filter3.apply(this, arguments))
      return;
    var touches = event2.touches, n3 = touches.length, g3 = gesture(this, args, event2.changedTouches.length === n3).event(event2), started, i4, t2, p2;
    nopropagation3(event2);
    for (i4 = 0; i4 < n3; ++i4) {
      t2 = touches[i4], p2 = pointer_default(t2, this);
      p2 = [p2, this.__zoom.invert(p2), t2.identifier];
      if (!g3.touch0)
        g3.touch0 = p2, started = true, g3.taps = 1 + !!touchstarting;
      else if (!g3.touch1 && g3.touch0[2] !== p2[2])
        g3.touch1 = p2, g3.taps = 0;
    }
    if (touchstarting)
      touchstarting = clearTimeout(touchstarting);
    if (started) {
      if (g3.taps < 2)
        touchfirst = p2[0], touchstarting = setTimeout(function() {
          touchstarting = null;
        }, touchDelay);
      interrupt_default(this);
      g3.start();
    }
  }
  function touchmoved(event2, ...args) {
    if (!this.__zooming)
      return;
    var g3 = gesture(this, args).event(event2), touches = event2.changedTouches, n3 = touches.length, i4, t2, p2, l3;
    noevent_default3(event2);
    for (i4 = 0; i4 < n3; ++i4) {
      t2 = touches[i4], p2 = pointer_default(t2, this);
      if (g3.touch0 && g3.touch0[2] === t2.identifier)
        g3.touch0[0] = p2;
      else if (g3.touch1 && g3.touch1[2] === t2.identifier)
        g3.touch1[0] = p2;
    }
    t2 = g3.that.__zoom;
    if (g3.touch1) {
      var p0 = g3.touch0[0], l0 = g3.touch0[1], p1 = g3.touch1[0], l1 = g3.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t2 = scale(t2, Math.sqrt(dp / dl));
      p2 = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l3 = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g3.touch0)
      p2 = g3.touch0[0], l3 = g3.touch0[1];
    else
      return;
    g3.zoom("touch", constrain(translate(t2, p2, l3), g3.extent, translateExtent));
  }
  function touchended(event2, ...args) {
    if (!this.__zooming)
      return;
    var g3 = gesture(this, args).event(event2), touches = event2.changedTouches, n3 = touches.length, i4, t2;
    nopropagation3(event2);
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, touchDelay);
    for (i4 = 0; i4 < n3; ++i4) {
      t2 = touches[i4];
      if (g3.touch0 && g3.touch0[2] === t2.identifier)
        delete g3.touch0;
      else if (g3.touch1 && g3.touch1[2] === t2.identifier)
        delete g3.touch1;
    }
    if (g3.touch1 && !g3.touch0)
      g3.touch0 = g3.touch1, delete g3.touch1;
    if (g3.touch0)
      g3.touch0[1] = this.__zoom.invert(g3.touch0[0]);
    else {
      g3.end();
      if (g3.taps === 2) {
        t2 = pointer_default(t2, this);
        if (Math.hypot(touchfirst[0] - t2[0], touchfirst[1] - t2[1]) < tapDistance) {
          var p2 = select_default2(this).on("dblclick.zoom");
          if (p2)
            p2.apply(this, arguments);
        }
      }
    }
  }
  zoom.wheelDelta = function(_4) {
    return arguments.length ? (wheelDelta = typeof _4 === "function" ? _4 : constant_default6(+_4), zoom) : wheelDelta;
  };
  zoom.filter = function(_4) {
    return arguments.length ? (filter3 = typeof _4 === "function" ? _4 : constant_default6(!!_4), zoom) : filter3;
  };
  zoom.touchable = function(_4) {
    return arguments.length ? (touchable = typeof _4 === "function" ? _4 : constant_default6(!!_4), zoom) : touchable;
  };
  zoom.extent = function(_4) {
    return arguments.length ? (extent2 = typeof _4 === "function" ? _4 : constant_default6([[+_4[0][0], +_4[0][1]], [+_4[1][0], +_4[1][1]]]), zoom) : extent2;
  };
  zoom.scaleExtent = function(_4) {
    return arguments.length ? (scaleExtent[0] = +_4[0], scaleExtent[1] = +_4[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };
  zoom.translateExtent = function(_4) {
    return arguments.length ? (translateExtent[0][0] = +_4[0][0], translateExtent[1][0] = +_4[1][0], translateExtent[0][1] = +_4[0][1], translateExtent[1][1] = +_4[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };
  zoom.constrain = function(_4) {
    return arguments.length ? (constrain = _4, zoom) : constrain;
  };
  zoom.duration = function(_4) {
    return arguments.length ? (duration = +_4, zoom) : duration;
  };
  zoom.interpolate = function(_4) {
    return arguments.length ? (interpolate = _4, zoom) : interpolate;
  };
  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };
  zoom.clickDistance = function(_4) {
    return arguments.length ? (clickDistance2 = (_4 = +_4) * _4, zoom) : Math.sqrt(clickDistance2);
  };
  zoom.tapDistance = function(_4) {
    return arguments.length ? (tapDistance = +_4, zoom) : tapDistance;
  };
  return zoom;
}
var init_zoom2 = __esm({
  "../../node_modules/d3-zoom/src/zoom.js"() {
    init_src18();
    init_src19();
    init_src5();
    init_src15();
    init_src22();
    init_constant8();
    init_event3();
    init_transform2();
    init_noevent3();
  }
});

// ../../node_modules/d3-zoom/src/index.js
var src_exports12 = {};
__export(src_exports12, {
  ZoomTransform: () => Transform,
  zoom: () => zoom_default2,
  zoomIdentity: () => identity5,
  zoomTransform: () => transform
});
var init_src24 = __esm({
  "../../node_modules/d3-zoom/src/index.js"() {
    init_zoom2();
    init_transform2();
  }
});

// ../../node_modules/d3fc/build/d3fc.js
var require_d3fc = __commonJS({
  "../../node_modules/d3fc/build/d3fc.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports, (init_src2(), __toCommonJS(src_exports)), (init_src10(), __toCommonJS(src_exports3)), (init_src8(), __toCommonJS(src_exports2)), (init_src11(), __toCommonJS(src_exports4)), (init_src13(), __toCommonJS(src_exports5)), (init_src14(), __toCommonJS(src_exports6)), (init_src15(), __toCommonJS(src_exports7)), (init_src16(), __toCommonJS(src_exports8)), (init_src17(), __toCommonJS(src_exports9)), (init_src18(), __toCommonJS(src_exports10)), (init_src23(), __toCommonJS(src_exports11)), (init_src24(), __toCommonJS(src_exports12))) : typeof define === "function" && define.amd ? define(["exports", "d3-array", "d3-scale", "d3-time", "d3-random", "d3-fetch", "d3-path", "d3-selection", "d3-shape", "d3-scale-chromatic", "d3-dispatch", "d3-brush", "d3-zoom"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.fc = {}, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3));
    })(exports, function(exports2, d3Array, d3Scale, d3Time, d3Random, d3Fetch, d3Path, d3Selection, d3Shape, d3ScaleChromatic, d3Dispatch, d3Brush, d3Zoom) {
      "use strict";
      var createReboundMethod = function(target, source, name) {
        var method = source[name];
        if (typeof method !== "function") {
          throw new Error("Attempt to rebind ".concat(name, " which isn't a function on the source object"));
        }
        return function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var value = method.apply(source, args);
          return value === source ? target : value;
        };
      };
      var rebind = function(target, source) {
        for (var _len = arguments.length, names = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          names[_key - 2] = arguments[_key];
        }
        for (var _i = 0, _names = names; _i < _names.length; _i++) {
          var name = _names[_i];
          target[name] = createReboundMethod(target, source, name);
        }
        return target;
      };
      var createTransform = function createTransform2(transforms) {
        return function(name) {
          return transforms.reduce(function(name2, fn2) {
            return name2 && fn2(name2);
          }, name);
        };
      };
      var rebindAll6 = function(target, source) {
        for (var _len = arguments.length, transforms = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          transforms[_key - 2] = arguments[_key];
        }
        var transform2 = createTransform(transforms);
        for (var _i = 0, _Object$keys = Object.keys(source); _i < _Object$keys.length; _i++) {
          var name = _Object$keys[_i];
          var result = transform2(name);
          if (result) {
            target[result] = createReboundMethod(target, source, name);
          }
        }
        return target;
      };
      var regexify = function(strsOrRegexes) {
        return strsOrRegexes.map(function(strOrRegex) {
          return typeof strOrRegex === "string" ? new RegExp("^".concat(strOrRegex, "$")) : strOrRegex;
        });
      };
      var exclude2 = function() {
        for (var _len = arguments.length, exclusions = new Array(_len), _key = 0; _key < _len; _key++) {
          exclusions[_key] = arguments[_key];
        }
        exclusions = regexify(exclusions);
        return function(name) {
          return exclusions.every(function(exclusion) {
            return !exclusion.test(name);
          }) && name;
        };
      };
      var include = function() {
        for (var _len = arguments.length, inclusions = new Array(_len), _key = 0; _key < _len; _key++) {
          inclusions[_key] = arguments[_key];
        }
        inclusions = regexify(inclusions);
        return function(name) {
          return inclusions.some(function(inclusion) {
            return inclusion.test(name);
          }) && name;
        };
      };
      var includeMap = function(mappings) {
        return function(name) {
          return mappings[name];
        };
      };
      var capitalizeFirstLetter = function capitalizeFirstLetter2(str) {
        return str[0].toUpperCase() + str.slice(1);
      };
      var prefix2 = function(prefix3) {
        return function(name) {
          return prefix3 + capitalizeFirstLetter(name);
        };
      };
      function identity8(d2) {
        return d2;
      }
      function noop3(d2) {
      }
      function functor(v4) {
        return typeof v4 === "function" ? v4 : function() {
          return v4;
        };
      }
      function convertNaN(value) {
        return typeof value === "number" && isNaN(value) ? void 0 : value;
      }
      function _slidingWindow() {
        var period = function period2() {
          return 10;
        };
        var accumulator = noop3;
        var value = identity8;
        var defined2 = function defined3(d2) {
          return d2 != null;
        };
        var slidingWindow = function slidingWindow2(data) {
          var size = period.apply(this, arguments);
          var windowData = data.slice(0, size).map(value);
          return data.map(function(d2, i4) {
            if (i4 >= size) {
              windowData.shift();
              windowData.push(value(d2, i4));
            }
            if (i4 < size - 1 || windowData.some(function(d3) {
              return !defined2(d3);
            })) {
              return accumulator(void 0, i4);
            }
            return accumulator(windowData, i4);
          });
        };
        slidingWindow.period = function() {
          if (!arguments.length) {
            return period;
          }
          period = functor(arguments.length <= 0 ? void 0 : arguments[0]);
          return slidingWindow;
        };
        slidingWindow.accumulator = function() {
          if (!arguments.length) {
            return accumulator;
          }
          accumulator = arguments.length <= 0 ? void 0 : arguments[0];
          return slidingWindow;
        };
        slidingWindow.defined = function() {
          if (!arguments.length) {
            return defined2;
          }
          defined2 = arguments.length <= 0 ? void 0 : arguments[0];
          return slidingWindow;
        };
        slidingWindow.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          return slidingWindow;
        };
        return slidingWindow;
      }
      function bollingerBands() {
        var multiplier = 2;
        var slidingWindow = _slidingWindow().accumulator(function(values) {
          var stdDev = values && d3Array.deviation(values);
          var average = values && d3Array.mean(values);
          return {
            average,
            upper: convertNaN(average + multiplier * stdDev),
            lower: convertNaN(average - multiplier * stdDev)
          };
        });
        var bollingerBands2 = function bollingerBands3(data) {
          return slidingWindow(data);
        };
        bollingerBands2.multiplier = function() {
          if (!arguments.length) {
            return multiplier;
          }
          multiplier = arguments.length <= 0 ? void 0 : arguments[0];
          return bollingerBands2;
        };
        rebind(bollingerBands2, slidingWindow, "period", "value");
        return bollingerBands2;
      }
      function exponentialMovingAverage() {
        var value = identity8;
        var period = function period2() {
          return 9;
        };
        var initialMovingAverageAccumulator = function initialMovingAverageAccumulator2(period2) {
          var values = [];
          return function(value2) {
            var movingAverage2;
            if (values.length < period2) {
              if (value2 != null) {
                values.push(value2);
              } else {
                values = [];
              }
            }
            if (values.length >= period2) {
              movingAverage2 = d3Array.mean(values);
            }
            return movingAverage2;
          };
        };
        var exponentialMovingAverage2 = function exponentialMovingAverage3(data) {
          var size = period.apply(this, arguments);
          var alpha = 2 / (size + 1);
          var initialAccumulator = initialMovingAverageAccumulator(size);
          var ema;
          return data.map(function(d2, i4) {
            var v4 = value(d2, i4);
            if (ema === void 0) {
              ema = initialAccumulator(v4);
            } else {
              ema = v4 * alpha + (1 - alpha) * ema;
            }
            return convertNaN(ema);
          });
        };
        exponentialMovingAverage2.period = function() {
          if (!arguments.length) {
            return period;
          }
          period = functor(arguments.length <= 0 ? void 0 : arguments[0]);
          return exponentialMovingAverage2;
        };
        exponentialMovingAverage2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          return exponentialMovingAverage2;
        };
        return exponentialMovingAverage2;
      }
      function macd() {
        var value = identity8;
        var fastEMA = exponentialMovingAverage().period(12);
        var slowEMA = exponentialMovingAverage().period(26);
        var signalEMA = exponentialMovingAverage().period(9);
        var macd2 = function macd3(data) {
          fastEMA.value(value);
          slowEMA.value(value);
          var diff = d3Array.zip(fastEMA(data), slowEMA(data)).map(function(d2) {
            return d2[0] !== void 0 && d2[1] !== void 0 ? d2[0] - d2[1] : void 0;
          });
          var averageDiff = signalEMA(diff);
          return d3Array.zip(diff, averageDiff).map(function(d2) {
            return {
              macd: d2[0],
              signal: d2[1],
              divergence: d2[0] !== void 0 && d2[1] !== void 0 ? d2[0] - d2[1] : void 0
            };
          });
        };
        macd2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          return macd2;
        };
        rebindAll6(macd2, fastEMA, includeMap({
          "period": "fastPeriod"
        }));
        rebindAll6(macd2, slowEMA, includeMap({
          "period": "slowPeriod"
        }));
        rebindAll6(macd2, signalEMA, includeMap({
          "period": "signalPeriod"
        }));
        return macd2;
      }
      function _typeof2(obj) {
        "@babel/helpers - typeof";
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof2 = function(obj2) {
            return typeof obj2;
          };
        } else {
          _typeof2 = function(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          };
        }
        return _typeof2(obj);
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i4 = 0; i4 < props.length; i4++) {
          var descriptor = props[i4];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass)
          _setPrototypeOf(subClass, superClass);
      }
      function _getPrototypeOf(o2) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
          return o3.__proto__ || Object.getPrototypeOf(o3);
        };
        return _getPrototypeOf(o2);
      }
      function _setPrototypeOf(o2, p2) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
          o3.__proto__ = p3;
          return o3;
        };
        return _setPrototypeOf(o2, p2);
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function() {
          }));
          return true;
        } catch (e3) {
          return false;
        }
      }
      function _construct(Parent, args, Class) {
        if (_isNativeReflectConstruct()) {
          _construct = Reflect.construct;
        } else {
          _construct = function _construct2(Parent2, args2, Class2) {
            var a5 = [null];
            a5.push.apply(a5, args2);
            var Constructor = Function.bind.apply(Parent2, a5);
            var instance = new Constructor();
            if (Class2)
              _setPrototypeOf(instance, Class2.prototype);
            return instance;
          };
        }
        return _construct.apply(null, arguments);
      }
      function _isNativeFunction(fn2) {
        return Function.toString.call(fn2).indexOf("[native code]") !== -1;
      }
      function _wrapNativeSuper(Class) {
        var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
        _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
          if (Class2 === null || !_isNativeFunction(Class2))
            return Class2;
          if (typeof Class2 !== "function") {
            throw new TypeError("Super expression must either be null or a function");
          }
          if (typeof _cache !== "undefined") {
            if (_cache.has(Class2))
              return _cache.get(Class2);
            _cache.set(Class2, Wrapper);
          }
          function Wrapper() {
            return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
          }
          Wrapper.prototype = Object.create(Class2.prototype, {
            constructor: {
              value: Wrapper,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          return _setPrototypeOf(Wrapper, Class2);
        };
        return _wrapNativeSuper(Class);
      }
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (typeof call === "object" || typeof call === "function")) {
          return call;
        }
        return _assertThisInitialized(self2);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _slicedToArray(arr, i4) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i4) || _unsupportedIterableToArray(arr, i4) || _nonIterableRest();
      }
      function _toArray(arr) {
        return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
      }
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
          return Array.from(iter);
      }
      function _iterableToArrayLimit(arr, i4) {
        if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
          return;
        var _arr = [];
        var _n2 = true;
        var _d = false;
        var _e4 = void 0;
        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n2 = (_s = _i.next()).done); _n2 = true) {
            _arr.push(_s.value);
            if (i4 && _arr.length === i4)
              break;
          }
        } catch (err2) {
          _d = true;
          _e4 = err2;
        } finally {
          try {
            if (!_n2 && _i["return"] != null)
              _i["return"]();
          } finally {
            if (_d)
              throw _e4;
          }
        }
        return _arr;
      }
      function _unsupportedIterableToArray(o2, minLen) {
        if (!o2)
          return;
        if (typeof o2 === "string")
          return _arrayLikeToArray(o2, minLen);
        var n3 = Object.prototype.toString.call(o2).slice(8, -1);
        if (n3 === "Object" && o2.constructor)
          n3 = o2.constructor.name;
        if (n3 === "Map" || n3 === "Set")
          return Array.from(o2);
        if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
          return _arrayLikeToArray(o2, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++)
          arr2[i4] = arr[i4];
        return arr2;
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _createForOfIteratorHelper(o2, allowArrayLike) {
        var it2;
        if (typeof Symbol === "undefined" || o2[Symbol.iterator] == null) {
          if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
            if (it2)
              o2 = it2;
            var i4 = 0;
            var F4 = function() {
            };
            return {
              s: F4,
              n: function() {
                if (i4 >= o2.length)
                  return {
                    done: true
                  };
                return {
                  done: false,
                  value: o2[i4++]
                };
              },
              e: function(e3) {
                throw e3;
              },
              f: F4
            };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err2;
        return {
          s: function() {
            it2 = o2[Symbol.iterator]();
          },
          n: function() {
            var step = it2.next();
            normalCompletion = step.done;
            return step;
          },
          e: function(e3) {
            didErr = true;
            err2 = e3;
          },
          f: function() {
            try {
              if (!normalCompletion && it2.return != null)
                it2.return();
            } finally {
              if (didErr)
                throw err2;
            }
          }
        };
      }
      function relativeStrengthIndex() {
        var slidingWindow = _slidingWindow().period(14);
        var wildersSmoothing = function wildersSmoothing2(values, prevAvg) {
          return prevAvg + (values[values.length - 1] - prevAvg) / values.length;
        };
        var downChange = function downChange2(_ref) {
          var _ref2 = _slicedToArray(_ref, 2), prevClose = _ref2[0], close = _ref2[1];
          return prevClose < close ? 0 : prevClose - close;
        };
        var upChange = function upChange2(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), prevClose = _ref4[0], close = _ref4[1];
          return prevClose > close ? 0 : close - prevClose;
        };
        var updateAverage = function updateAverage2(changes, prevAverage) {
          return prevAverage !== void 0 ? wildersSmoothing(changes, prevAverage) : d3Array.mean(changes);
        };
        var makeAccumulator = function makeAccumulator2() {
          var prevClose;
          var downChangesAvg;
          var upChangesAvg;
          return function(closes) {
            if (!closes) {
              if (prevClose !== void 0) {
                prevClose = NaN;
              }
              return void 0;
            }
            if (prevClose === void 0) {
              prevClose = closes[0];
              return void 0;
            }
            var closePairs = d3Array.pairs([prevClose].concat(_toConsumableArray(closes)));
            downChangesAvg = updateAverage(closePairs.map(downChange), downChangesAvg);
            upChangesAvg = updateAverage(closePairs.map(upChange), upChangesAvg);
            var rs = !isNaN(prevClose) ? upChangesAvg / downChangesAvg : NaN;
            return convertNaN(100 - 100 / (1 + rs));
          };
        };
        var rsi = function rsi2(data) {
          var rsiAccumulator = makeAccumulator();
          slidingWindow.accumulator(rsiAccumulator);
          return slidingWindow(data);
        };
        rebind(rsi, slidingWindow, "period", "value");
        return rsi;
      }
      function movingAverage() {
        var slidingWindow = _slidingWindow().accumulator(function(values) {
          return values && d3Array.mean(values);
        });
        var movingAverage2 = function movingAverage3(data) {
          return slidingWindow(data);
        };
        rebind(movingAverage2, slidingWindow, "period", "value");
        return movingAverage2;
      }
      function stochasticOscillator() {
        var closeValue = function closeValue2(d2, i4) {
          return d2.close;
        };
        var highValue = function highValue2(d2, i4) {
          return d2.high;
        };
        var lowValue = function lowValue2(d2, i4) {
          return d2.low;
        };
        var kWindow = _slidingWindow().period(5).defined(function(d2) {
          return closeValue(d2) != null && highValue(d2) != null && lowValue(d2) != null;
        }).accumulator(function(values) {
          var maxHigh = values && d3Array.max(values, highValue);
          var minLow = values && d3Array.min(values, lowValue);
          var kValue = values && 100 * (closeValue(values[values.length - 1]) - minLow) / (maxHigh - minLow);
          return convertNaN(kValue);
        });
        var dWindow = movingAverage().period(3);
        var stochastic = function stochastic2(data) {
          var kValues = kWindow(data);
          var dValues = dWindow(kValues);
          return kValues.map(function(k4, i4) {
            return {
              k: k4,
              d: dValues[i4]
            };
          });
        };
        stochastic.closeValue = function() {
          if (!arguments.length) {
            return closeValue;
          }
          closeValue = arguments.length <= 0 ? void 0 : arguments[0];
          return stochastic;
        };
        stochastic.highValue = function() {
          if (!arguments.length) {
            return highValue;
          }
          highValue = arguments.length <= 0 ? void 0 : arguments[0];
          return stochastic;
        };
        stochastic.lowValue = function() {
          if (!arguments.length) {
            return lowValue;
          }
          lowValue = arguments.length <= 0 ? void 0 : arguments[0];
          return stochastic;
        };
        rebindAll6(stochastic, kWindow, includeMap({
          "period": "kPeriod"
        }));
        rebindAll6(stochastic, dWindow, includeMap({
          "period": "dPeriod"
        }));
        return stochastic;
      }
      function forceIndex() {
        var volumeValue = function volumeValue2(d2, i4) {
          return d2.volume;
        };
        var closeValue = function closeValue2(d2, i4) {
          return d2.close;
        };
        var emaComputer = exponentialMovingAverage().period(13);
        var slidingWindow = _slidingWindow().period(2).defined(function(d2) {
          return closeValue(d2) != null && volumeValue(d2) != null;
        }).accumulator(function(values) {
          return values && convertNaN((closeValue(values[1]) - closeValue(values[0])) * volumeValue(values[1]));
        });
        var force = function force2(data) {
          var forceIndex2 = slidingWindow(data);
          return emaComputer(forceIndex2);
        };
        force.volumeValue = function() {
          if (!arguments.length) {
            return volumeValue;
          }
          volumeValue = arguments.length <= 0 ? void 0 : arguments[0];
          return force;
        };
        force.closeValue = function() {
          if (!arguments.length) {
            return closeValue;
          }
          closeValue = arguments.length <= 0 ? void 0 : arguments[0];
          return force;
        };
        rebind(force, emaComputer, "period");
        return force;
      }
      function envelope() {
        var factor = 0.1;
        var value = identity8;
        var envelope2 = function envelope3(data) {
          return data.map(function(d2) {
            var lower3 = convertNaN(value(d2) * (1 - factor));
            var upper = convertNaN(value(d2) * (1 + factor));
            return {
              lower: lower3,
              upper
            };
          });
        };
        envelope2.factor = function() {
          if (!arguments.length) {
            return factor;
          }
          factor = arguments.length <= 0 ? void 0 : arguments[0];
          return envelope2;
        };
        envelope2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          return envelope2;
        };
        return envelope2;
      }
      function elderRay() {
        var closeValue = function closeValue2(d2, i4) {
          return d2.close;
        };
        var highValue = function highValue2(d2, i4) {
          return d2.high;
        };
        var lowValue = function lowValue2(d2, i4) {
          return d2.low;
        };
        var emaComputer = exponentialMovingAverage().period(13);
        var elderRay2 = function elderRay3(data) {
          emaComputer.value(closeValue);
          return d3Array.zip(data, emaComputer(data)).map(function(d2) {
            var bullPower = convertNaN(highValue(d2[0]) - d2[1]);
            var bearPower = convertNaN(lowValue(d2[0]) - d2[1]);
            return {
              bullPower,
              bearPower
            };
          });
        };
        elderRay2.closeValue = function() {
          if (!arguments.length) {
            return closeValue;
          }
          closeValue = arguments.length <= 0 ? void 0 : arguments[0];
          return elderRay2;
        };
        elderRay2.highValue = function() {
          if (!arguments.length) {
            return highValue;
          }
          highValue = arguments.length <= 0 ? void 0 : arguments[0];
          return elderRay2;
        };
        elderRay2.lowValue = function() {
          if (!arguments.length) {
            return lowValue;
          }
          lowValue = arguments.length <= 0 ? void 0 : arguments[0];
          return elderRay2;
        };
        rebind(elderRay2, emaComputer, "period");
        return elderRay2;
      }
      function identity$1() {
        var identity9 = {};
        identity9.distance = function(start2, end) {
          return end - start2;
        };
        identity9.offset = function(start2, offset) {
          return start2 instanceof Date ? new Date(start2.getTime() + offset) : start2 + offset;
        };
        identity9.clampUp = function(d2) {
          return d2;
        };
        identity9.clampDown = function(d2) {
          return d2;
        };
        identity9.copy = function() {
          return identity9;
        };
        return identity9;
      }
      function tickFilter(ticks5, discontinuityProvider) {
        var discontinuousTicks = ticks5.map(discontinuityProvider.clampUp);
        if (discontinuousTicks.length !== new Set(discontinuousTicks.map(function(d2) {
          return d2 === null || d2 === void 0 ? void 0 : d2.valueOf();
        })).size) {
          console.warn("There are multiple ticks that fall within a discontinuity, which has led to them being rendered on top of each other. Consider using scale.ticks to explicitly specify the ticks for the scale.");
        }
        return discontinuousTicks;
      }
      function discontinuous(adaptedScale) {
        var _this = this;
        if (!arguments.length) {
          adaptedScale = d3Scale.scaleIdentity();
        }
        var discontinuityProvider = identity$1();
        var scale = function scale2(value) {
          var domain = adaptedScale.domain();
          var range4 = adaptedScale.range();
          var totalDomainDistance = discontinuityProvider.distance(domain[0], domain[1]);
          var distanceToX = discontinuityProvider.distance(domain[0], value);
          var ratioToX = distanceToX / totalDomainDistance;
          var scaledByRange = ratioToX * (range4[1] - range4[0]) + range4[0];
          return scaledByRange;
        };
        scale.invert = function(x4) {
          var domain = adaptedScale.domain();
          var range4 = adaptedScale.range();
          var ratioToX = (x4 - range4[0]) / (range4[1] - range4[0]);
          var totalDomainDistance = discontinuityProvider.distance(domain[0], domain[1]);
          var distanceToX = ratioToX * totalDomainDistance;
          return discontinuityProvider.offset(domain[0], distanceToX);
        };
        scale.domain = function() {
          if (!arguments.length) {
            return adaptedScale.domain();
          }
          var newDomain = arguments.length <= 0 ? void 0 : arguments[0];
          var domainLower = discontinuityProvider.clampUp(newDomain[0]);
          var domainUpper = discontinuityProvider.clampDown(newDomain[1]);
          adaptedScale.domain([domainLower, domainUpper]);
          return scale;
        };
        scale.nice = function() {
          adaptedScale.nice();
          var domain = adaptedScale.domain();
          var domainLower = discontinuityProvider.clampUp(domain[0]);
          var domainUpper = discontinuityProvider.clampDown(domain[1]);
          adaptedScale.domain([domainLower, domainUpper]);
          return scale;
        };
        scale.ticks = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var ticks5 = adaptedScale.ticks.apply(_this, args);
          return tickFilter(ticks5, discontinuityProvider);
        };
        scale.copy = function() {
          return discontinuous(adaptedScale.copy()).discontinuityProvider(discontinuityProvider.copy());
        };
        scale.discontinuityProvider = function() {
          if (!arguments.length) {
            return discontinuityProvider;
          }
          discontinuityProvider = arguments.length <= 0 ? void 0 : arguments[0];
          return scale;
        };
        rebindAll6(scale, adaptedScale, include("range", "rangeRound", "interpolate", "clamp", "tickFormat"));
        return scale;
      }
      var base = function base2(dayAccessor, intervalDay, intervalSaturday, intervalMonday) {
        var day2 = {
          sunday: 0,
          monday: 1,
          saturday: 6
        };
        var millisPerDay2 = 24 * 3600 * 1e3;
        var millisPerWorkWeek = millisPerDay2 * 5;
        var millisPerWeek = millisPerDay2 * 7;
        var skipWeekends2 = {};
        var isWeekend = function isWeekend2(date2) {
          return dayAccessor(date2) === 0 || dayAccessor(date2) === 6;
        };
        skipWeekends2.clampDown = function(date2) {
          if (date2 && isWeekend(date2)) {
            var newDate2 = intervalDay.ceil(date2);
            if (dayAccessor(newDate2) === day2.sunday) {
              return intervalDay.offset(newDate2, -1);
            } else if (dayAccessor(newDate2) === day2.monday) {
              return intervalDay.offset(newDate2, -2);
            } else {
              return newDate2;
            }
          } else {
            return date2;
          }
        };
        skipWeekends2.clampUp = function(date2) {
          if (date2 && isWeekend(date2)) {
            var newDate2 = intervalDay.floor(date2);
            if (dayAccessor(newDate2) === day2.saturday) {
              return intervalDay.offset(newDate2, 2);
            } else if (dayAccessor(newDate2) === day2.sunday) {
              return intervalDay.offset(newDate2, 1);
            } else {
              return newDate2;
            }
          } else {
            return date2;
          }
        };
        skipWeekends2.distance = function(startDate, endDate) {
          startDate = skipWeekends2.clampUp(startDate);
          endDate = skipWeekends2.clampDown(endDate);
          var offsetStart = intervalSaturday.ceil(startDate);
          if (endDate < offsetStart) {
            return endDate.getTime() - startDate.getTime();
          }
          var msAdded = offsetStart.getTime() - startDate.getTime();
          var offsetEnd = intervalSaturday.ceil(endDate);
          var msRemoved = offsetEnd.getTime() - endDate.getTime();
          var weeks = Math.round((offsetEnd.getTime() - offsetStart.getTime()) / millisPerWeek);
          return weeks * millisPerWorkWeek + msAdded - msRemoved;
        };
        skipWeekends2.offset = function(startDate, ms) {
          var date2 = isWeekend(startDate) ? skipWeekends2.clampUp(startDate) : startDate;
          if (ms === 0) {
            return date2;
          }
          var isNegativeOffset = ms < 0;
          var isPositiveOffset = ms > 0;
          var remainingms = ms;
          var weekBoundary = isNegativeOffset ? intervalMonday.floor(date2) : intervalSaturday.ceil(date2);
          remainingms -= weekBoundary.getTime() - date2.getTime();
          if (isNegativeOffset && remainingms > 0 || isPositiveOffset && remainingms < 0) {
            return new Date(date2.getTime() + ms);
          }
          date2 = isNegativeOffset ? weekBoundary : intervalDay.offset(weekBoundary, 2);
          var completeWeeks = Math.floor(remainingms / millisPerWorkWeek);
          date2 = intervalDay.offset(date2, completeWeeks * 7);
          remainingms -= completeWeeks * millisPerWorkWeek;
          date2 = new Date(date2.getTime() + remainingms);
          return date2;
        };
        skipWeekends2.copy = function() {
          return skipWeekends2;
        };
        return skipWeekends2;
      };
      var skipWeekends = function() {
        return base(function(date2) {
          return date2.getDay();
        }, d3Time.timeDay, d3Time.timeSaturday, d3Time.timeMonday);
      };
      var skipUtcWeekends = function() {
        return base(function(date2) {
          return date2.getUTCDay();
        }, d3Time.utcDay, d3Time.utcSaturday, d3Time.utcMonday);
      };
      var provider = function provider2() {
        for (var _len = arguments.length, ranges = new Array(_len), _key = 0; _key < _len; _key++) {
          ranges[_key] = arguments[_key];
        }
        var inRange = function inRange2(number5, range4) {
          return number5 > range4[0] && number5 < range4[1];
        };
        var surroundsRange = function surroundsRange2(inner, outer) {
          return inner[0] >= outer[0] && inner[1] <= outer[1];
        };
        var identity9 = {};
        identity9.distance = function(start2, end) {
          start2 = identity9.clampUp(start2);
          end = identity9.clampDown(end);
          var surroundedRanges = ranges.filter(function(r2) {
            return surroundsRange(r2, [start2, end]);
          });
          var rangeSizes = surroundedRanges.map(function(r2) {
            return r2[1] - r2[0];
          });
          return end - start2 - rangeSizes.reduce(function(total, current) {
            return total + current;
          }, 0);
        };
        var add = function add2(value, offset) {
          return value instanceof Date ? new Date(value.getTime() + offset) : value + offset;
        };
        identity9.offset = function(location, offset) {
          if (offset > 0) {
            var _ret = function() {
              var currentLocation = identity9.clampUp(location);
              var offsetRemaining = offset;
              while (offsetRemaining > 0) {
                var futureRanges = ranges.filter(function(r2) {
                  return r2[0] > currentLocation;
                }).sort(function(a5, b3) {
                  return a5[0] - b3[0];
                });
                if (futureRanges.length) {
                  var nextRange = futureRanges[0];
                  var delta = nextRange[0] - currentLocation;
                  if (delta > offsetRemaining) {
                    currentLocation = add(currentLocation, offsetRemaining);
                    offsetRemaining = 0;
                  } else {
                    currentLocation = nextRange[1];
                    offsetRemaining -= delta;
                  }
                } else {
                  currentLocation = add(currentLocation, offsetRemaining);
                  offsetRemaining = 0;
                }
              }
              return {
                v: currentLocation
              };
            }();
            if (_typeof2(_ret) === "object")
              return _ret.v;
          } else {
            var _ret2 = function() {
              var currentLocation = identity9.clampDown(location);
              var offsetRemaining = offset;
              while (offsetRemaining < 0) {
                var futureRanges = ranges.filter(function(r2) {
                  return r2[1] < currentLocation;
                }).sort(function(a5, b3) {
                  return b3[0] - a5[0];
                });
                if (futureRanges.length) {
                  var nextRange = futureRanges[0];
                  var delta = nextRange[1] - currentLocation;
                  if (delta < offsetRemaining) {
                    currentLocation = add(currentLocation, offsetRemaining);
                    offsetRemaining = 0;
                  } else {
                    currentLocation = nextRange[0];
                    offsetRemaining -= delta;
                  }
                } else {
                  currentLocation = add(currentLocation, offsetRemaining);
                  offsetRemaining = 0;
                }
              }
              return {
                v: currentLocation
              };
            }();
            if (_typeof2(_ret2) === "object")
              return _ret2.v;
          }
        };
        identity9.clampUp = function(d2) {
          return ranges.reduce(function(value, range4) {
            return inRange(value, range4) ? range4[1] : value;
          }, d2);
        };
        identity9.clampDown = function(d2) {
          return ranges.reduce(function(value, range4) {
            return inRange(value, range4) ? range4[0] : value;
          }, d2);
        };
        identity9.copy = function() {
          return identity9;
        };
        return identity9;
      };
      var millisPerDay = 24 * 3600 * 1e3;
      var dayBoundary = "00:00:00.000";
      var SOD = "SOD";
      var EOD = "EOD";
      function standardiseTimeString(timeString) {
        if (arguments.length !== 1 || typeof timeString !== "string") {
          throw "Expected single argument of type string";
        }
        var isPositiveIntegerUpTo = function isPositiveIntegerUpTo2(toCheck, upperBound) {
          if (!Number.isInteger(toCheck))
            return false;
          return toCheck >= 0 && toCheck <= upperBound;
        };
        var result = [0, 0, 0, 0];
        var time_components = timeString.split(":");
        if (time_components.length < 2 || time_components.length > 3) {
          throw "Expected an argument wiht 2 or 3 colon delimited parts.";
        }
        result[0] = isPositiveIntegerUpTo(parseInt(time_components[0], 10), 23) ? parseInt(time_components[0], 10) : function() {
          throw "'Hours' component must be an int between 0 and 23, but was '".concat(time_components[0], "'");
        }();
        result[1] = isPositiveIntegerUpTo(parseInt(time_components[1], 10), 59) ? parseInt(time_components[1], 10) : function() {
          throw "'Minutes' component must be an int between 0 and 59, but was '".concat(time_components[1], "'");
        }();
        if (time_components.length === 3) {
          var ms_components = time_components[2].split(".").map(function(x4) {
            return parseInt(x4, 10);
          });
          result[2] = isPositiveIntegerUpTo(ms_components[0], 59) ? ms_components[0] : function() {
            throw "'Seconds' component must be an int between 0 and 59, but was '".concat(ms_components[0], "'");
          }();
          if (ms_components.length === 2) {
            result[3] = isPositiveIntegerUpTo(ms_components[1], 999) ? ms_components[1] : function() {
              throw "'Miliseconds' component must be an int between 0 and 999, but was '".concat(ms_components[1], "'");
            }();
          }
        }
        return "".concat(result[0].toString(10).padStart(2, "0"), ":").concat(result[1].toString(10).padStart(2, "0"), ":").concat(result[2].toString(10).padStart(2, "0"), ".").concat(result[3].toString(10).padStart(3, "0"));
      }
      function nonTradingTimeRange(timeRangeTuple, dateTimeUtility2) {
        if (arguments.length != 2 || !Array.isArray(timeRangeTuple) || timeRangeTuple.length !== 2 || typeof timeRangeTuple[0] !== "string" || typeof timeRangeTuple[1] !== "string") {
          throw "Expected argument is a single string[] of length 2.";
        }
        if (timeRangeTuple[0] === SOD) {
          timeRangeTuple[0] = dayBoundary;
        }
        if (timeRangeTuple[1] === EOD) {
          timeRangeTuple[1] = dayBoundary;
        }
        var startTime = standardiseTimeString(timeRangeTuple[0]);
        var endTime = standardiseTimeString(timeRangeTuple[1]);
        if (endTime !== dayBoundary && startTime > endTime) {
          throw "Time range start time '".concat(startTime, "' must be before end time '").concat(endTime, "' or both must equal ").concat(dayBoundary);
        }
        var lenghtInMs = dateTimeUtility2.setTime(new Date(endTime === dayBoundary ? millisPerDay : 0), endTime) - dateTimeUtility2.setTime(new Date(0), startTime);
        var instance = {
          startTime,
          endTime,
          lenghtInMs
        };
        instance.isInRange = function(date2) {
          var time3 = dateTimeUtility2.getTimeString(date2);
          if (instance.startTime <= time3 && (instance.endTime === dayBoundary || instance.endTime > time3)) {
            return true;
          }
          return false;
        };
        return instance;
      }
      var tradingDay = function tradingDay2(rawDiscontinuityTimeRanges, dateTimeUtility2) {
        var nonTradingTimeRanges = rawDiscontinuityTimeRanges.map(function(rawRange) {
          return nonTradingTimeRange(rawRange, dateTimeUtility2);
        }).sort(function(a5, b3) {
          return a5.startTime < b3.startTime ? -1 : a5.startTime > b3.startTime ? 1 : 0;
        });
        var totalTradingTimeInMiliseconds = millisPerDay - nonTradingTimeRanges.reduce(function(total, range4) {
          return total + range4.lenghtInMs;
        }, 0);
        var totalTradingMillisecondsBetween = function totalTradingMillisecondsBetween2(intervalStart, intervalEnd) {
          if (intervalStart.getTime() === intervalEnd.getTime()) {
            return 0;
          }
          if (dateTimeUtility2.dayInterval(intervalStart).getTime() !== dateTimeUtility2.dayInterval(intervalEnd).getTime() && dateTimeUtility2.getStartOfNextDay(intervalStart).getTime() !== intervalEnd.getTime()) {
            throw "tradingDay.totalTradingMillisecondsBetween arguments must be on the same day or intervalEnd must be the start of the next day instead: intervalStart: '".concat(intervalStart, "'; intervalEnd: '").concat(intervalEnd, "'");
          }
          var total = 0;
          var relevantDiscontinuityRanges = nonTradingTimeRanges.filter(function(range4) {
            return range4.endTime === dayBoundary || dateTimeUtility2.setTime(intervalStart, range4.endTime) >= intervalStart;
          });
          var _iterator = _createForOfIteratorHelper(relevantDiscontinuityRanges), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var nonTradingRange = _step.value;
              var nonTradingStart = dateTimeUtility2.setTime(intervalStart, nonTradingRange.startTime);
              var nonTradingEnd = nonTradingRange.endTime === dayBoundary ? dateTimeUtility2.getStartOfNextDay(intervalStart) : dateTimeUtility2.setTime(intervalStart, nonTradingRange.endTime);
              if (intervalStart < nonTradingStart && intervalEnd < nonTradingStart) {
                return total + dateTimeUtility2.msInterval.count(intervalStart, intervalEnd);
              }
              if (intervalStart < nonTradingStart) {
                total += dateTimeUtility2.msInterval.count(intervalStart, nonTradingStart);
              }
              if (intervalEnd < nonTradingEnd) {
                return total;
              }
              intervalStart = nonTradingEnd;
            }
          } catch (err2) {
            _iterator.e(err2);
          } finally {
            _iterator.f();
          }
          return total + dateTimeUtility2.msInterval.count(intervalStart, intervalEnd);
        };
        var offset = function offset2(date2, ms) {
          if (ms === 0) {
            return [date2, ms];
          }
          var offsetDate = dateTimeUtility2.msInterval.offset(date2, ms);
          var nonTradingRanges = ms > 0 ? nonTradingTimeRanges.filter(function(range4) {
            return dateTimeUtility2.setTime(date2, range4.startTime) >= date2;
          }) : nonTradingTimeRanges.filter(function(range4) {
            return dateTimeUtility2.setTime(date2, range4.startTime) < date2;
          }).reverse();
          if (nonTradingRanges.length === 0) {
            return [dateTimeUtility2.msInterval.offset(date2, ms), 0];
          }
          if (ms > 0) {
            var _iterator2 = _createForOfIteratorHelper(nonTradingRanges), _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                var nonTradingRange = _step2.value;
                var rangeStart = dateTimeUtility2.setTime(date2, nonTradingRange.startTime);
                if (rangeStart <= offsetDate) {
                  ms -= dateTimeUtility2.msInterval.count(date2, rangeStart);
                  date2 = nonTradingRange.endTime === dayBoundary ? dateTimeUtility2.getStartOfNextDay(date2) : dateTimeUtility2.setTime(date2, nonTradingRange.endTime);
                  offsetDate = dateTimeUtility2.msInterval.offset(date2, ms);
                }
              }
            } catch (err2) {
              _iterator2.e(err2);
            } finally {
              _iterator2.f();
            }
            ms -= dateTimeUtility2.msInterval.count(date2, offsetDate);
          } else {
            var _iterator3 = _createForOfIteratorHelper(nonTradingRanges), _step3;
            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                var _nonTradingRange = _step3.value;
                var endTime = _nonTradingRange.endTime === dayBoundary ? dateTimeUtility2.getStartOfNextDay(date2) : dateTimeUtility2.setTime(date2, _nonTradingRange.endTime);
                if (offsetDate < endTime) {
                  ms += dateTimeUtility2.msInterval.count(endTime, date2) + 1;
                  date2 = dateTimeUtility2.msInterval.offset(dateTimeUtility2.setTime(date2, _nonTradingRange.startTime), -1);
                  offsetDate = dateTimeUtility2.msInterval.offset(date2, ms);
                }
              }
            } catch (err2) {
              _iterator3.e(err2);
            } finally {
              _iterator3.f();
            }
            ms += dateTimeUtility2.msInterval.count(offsetDate, date2);
          }
          if (ms !== 0) {
            throw "tradingDay.offset was called with an offset that spans more than a day";
          }
          return [offsetDate, ms];
        };
        return {
          totalTradingTimeInMiliseconds,
          nonTradingTimeRanges,
          totalTradingMillisecondsBetween,
          offset
        };
      };
      var dateTimeUtility = function dateTimeUtility2(setTimeForDate, getDay, getTimeComponentArray, dayInterval, msInterval) {
        var utility = {};
        utility.getTimeComponentArrayFromString = function(timeString) {
          return [timeString.slice(0, 2), timeString.slice(3, 5), timeString.slice(6, 8), timeString.slice(9, 12)];
        };
        utility.getTimeString = function(date2) {
          var _getTimeComponentArra = getTimeComponentArray(date2).map(function(x4) {
            return x4.toString(10).padStart(2, "0");
          }), _getTimeComponentArra2 = _slicedToArray(_getTimeComponentArra, 4), hh = _getTimeComponentArra2[0], mm = _getTimeComponentArra2[1], ss = _getTimeComponentArra2[2], ms = _getTimeComponentArra2[3];
          return "".concat(hh, ":").concat(mm, ":").concat(ss, ".").concat(ms.padStart(3, "0"));
        };
        utility.setTime = function(date2, timeString) {
          var offsetInmilliSeconds = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
          var _utility$getTimeCompo = utility.getTimeComponentArrayFromString(timeString), _utility$getTimeCompo2 = _slicedToArray(_utility$getTimeCompo, 4), hh = _utility$getTimeCompo2[0], mm = _utility$getTimeCompo2[1], ss = _utility$getTimeCompo2[2], ms = _utility$getTimeCompo2[3];
          return msInterval.offset(setTimeForDate(date2, hh, mm, ss, ms), offsetInmilliSeconds);
        };
        utility.getStartOfNextDay = function(date2) {
          return dayInterval.offset(dayInterval.floor(date2), 1);
        };
        utility.getEndOfPreviousDay = function(date2) {
          return msInterval.offset(dayInterval.floor(date2), -1);
        };
        utility.dayInterval = dayInterval;
        utility.msInterval = msInterval;
        utility.getDay = getDay;
        return utility;
      };
      var localDateTimeUtility = dateTimeUtility(function(date2, hh, mm, ss, ms) {
        return new Date(date2.getFullYear(), date2.getMonth(), date2.getDate(), hh, mm, ss, ms);
      }, function(date2) {
        return date2.getDay();
      }, function(date2) {
        return [date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds()];
      }, d3Time.timeDay, d3Time.timeMillisecond);
      var base$1 = function base2(nonTradingPattern, dateTimeUtility2) {
        var getDayPatternOrDefault = function getDayPatternOrDefault2(day2) {
          return nonTradingPattern[day2] === void 0 ? [] : nonTradingPattern[day2];
        };
        var tradingDays = [tradingDay(getDayPatternOrDefault("Sunday"), dateTimeUtility2), tradingDay(getDayPatternOrDefault("Monday"), dateTimeUtility2), tradingDay(getDayPatternOrDefault("Tuesday"), dateTimeUtility2), tradingDay(getDayPatternOrDefault("Wednesday"), dateTimeUtility2), tradingDay(getDayPatternOrDefault("Thursday"), dateTimeUtility2), tradingDay(getDayPatternOrDefault("Friday"), dateTimeUtility2), tradingDay(getDayPatternOrDefault("Saturday"), dateTimeUtility2)];
        var totalTradingWeekMilliseconds = tradingDays.reduce(function(total, tradingDay2) {
          return total + tradingDay2.totalTradingTimeInMiliseconds;
        }, 0);
        if (totalTradingWeekMilliseconds === 0) {
          throw "Trading pattern must yield at least 1 ms of trading time";
        }
        var instance = {
          tradingDays,
          totalTradingWeekMilliseconds
        };
        instance.clampUp = function(date2) {
          var tradingDay2 = tradingDays[dateTimeUtility2.getDay(date2)];
          var _iterator = _createForOfIteratorHelper(tradingDay2.nonTradingTimeRanges), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var range4 = _step.value;
              if (range4.isInRange(date2)) {
                return range4.endTime === dayBoundary ? instance.clampUp(dateTimeUtility2.getStartOfNextDay(date2)) : dateTimeUtility2.setTime(date2, range4.endTime);
              }
            }
          } catch (err2) {
            _iterator.e(err2);
          } finally {
            _iterator.f();
          }
          return date2;
        };
        instance.clampDown = function(date2) {
          var tradingDay2 = tradingDays[dateTimeUtility2.getDay(date2)];
          var _iterator2 = _createForOfIteratorHelper(tradingDay2.nonTradingTimeRanges), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var range4 = _step2.value;
              if (range4.isInRange(date2)) {
                return range4.startTime === dayBoundary ? instance.clampDown(dateTimeUtility2.getEndOfPreviousDay(date2)) : dateTimeUtility2.setTime(date2, range4.startTime, -1);
              }
            }
          } catch (err2) {
            _iterator2.e(err2);
          } finally {
            _iterator2.f();
          }
          return date2;
        };
        instance.distance = function(startDate, endDate) {
          if (startDate.getTime() === endDate.getTime()) {
            return 0;
          }
          var _ref = startDate <= endDate ? [startDate, endDate, 1] : [endDate, startDate, -1], _ref2 = _slicedToArray(_ref, 3), start2 = _ref2[0], end = _ref2[1], factor = _ref2[2];
          if (dateTimeUtility2.dayInterval(start2).getTime() === dateTimeUtility2.dayInterval(end).getTime()) {
            return instance.tradingDays[dateTimeUtility2.getDay(start2)].totalTradingMillisecondsBetween(start2, end);
          }
          var total = instance.tradingDays[dateTimeUtility2.getDay(start2)].totalTradingMillisecondsBetween(start2, dateTimeUtility2.dayInterval.offset(dateTimeUtility2.dayInterval(start2), 1)) + instance.tradingDays[dateTimeUtility2.getDay(end)].totalTradingMillisecondsBetween(dateTimeUtility2.dayInterval(end), end);
          if (dateTimeUtility2.dayInterval.count(start2, end) === 1) {
            return total;
          }
          start2 = dateTimeUtility2.dayInterval.offset(dateTimeUtility2.dayInterval(start2), 1);
          end = dateTimeUtility2.dayInterval(end);
          return factor * dateTimeUtility2.dayInterval.range(start2, end).reduce(function(runningTotal, currentDay, currentIndex, arr) {
            var nextDay = currentIndex < arr.length - 1 ? arr[currentIndex + 1] : dateTimeUtility2.dayInterval.offset(currentDay, 1);
            var isDstBoundary = nextDay - currentDay !== millisPerDay;
            var tradingDay2 = instance.tradingDays[dateTimeUtility2.getDay(currentDay)];
            return runningTotal += isDstBoundary ? tradingDay2.totalTradingMillisecondsBetween(currentDay, nextDay) : tradingDay2.totalTradingTimeInMiliseconds;
          }, total);
        };
        instance.offset = function(date2, ms) {
          date2 = ms >= 0 ? instance.clampUp(date2) : instance.clampDown(date2);
          var isDstBoundary = function isDstBoundary2(d2) {
            return dateTimeUtility2.dayInterval.offset(d2) - dateTimeUtility2.dayInterval(d2) !== millisPerDay;
          };
          var moveToDayBoundary = function moveToDayBoundary2(tradingDay3, date3, ms2) {
            if (ms2 < 0) {
              var dateFloor = dateTimeUtility2.dayInterval(date3);
              var distanceToStartOfDay = tradingDay3.totalTradingMillisecondsBetween(dateFloor, date3);
              return Math.abs(ms2) <= distanceToStartOfDay ? tradingDay3.offset(date3, ms2) : [instance.clampDown(dateTimeUtility2.msInterval.offset(dateFloor, -1)), ms2 + distanceToStartOfDay + 1];
            } else {
              var nextDate = dateTimeUtility2.getStartOfNextDay(date3);
              var distanceToDayBoundary = tradingDay3.totalTradingMillisecondsBetween(date3, nextDate);
              return ms2 < distanceToDayBoundary ? tradingDay3.offset(date3, ms2) : [instance.clampUp(nextDate), ms2 - distanceToDayBoundary];
            }
          };
          if (ms === 0)
            return date2;
          var moveDateDelegate = ms < 0 ? function(date3, remainingMs, tradingDayMs) {
            return [instance.clampDown(dateTimeUtility2.dayInterval.offset(date3, -1)), remainingMs + tradingDayMs];
          } : function(date3, remainingMs, tradingDayMs) {
            return [instance.clampUp(dateTimeUtility2.dayInterval.offset(date3)), remainingMs - tradingDayMs];
          };
          var tradingDay2 = instance.tradingDays[dateTimeUtility2.getDay(date2)];
          var _moveToDayBoundary = moveToDayBoundary(tradingDay2, date2, ms);
          var _moveToDayBoundary2 = _slicedToArray(_moveToDayBoundary, 2);
          date2 = _moveToDayBoundary2[0];
          ms = _moveToDayBoundary2[1];
          while (ms !== 0) {
            tradingDay2 = instance.tradingDays[dateTimeUtility2.getDay(date2)];
            if (isDstBoundary(date2)) {
              var _moveToDayBoundary3 = moveToDayBoundary(tradingDay2, date2, ms);
              var _moveToDayBoundary4 = _slicedToArray(_moveToDayBoundary3, 2);
              date2 = _moveToDayBoundary4[0];
              ms = _moveToDayBoundary4[1];
            } else {
              var _ref3 = Math.abs(ms) >= tradingDay2.totalTradingTimeInMiliseconds ? moveDateDelegate(date2, ms, tradingDay2.totalTradingTimeInMiliseconds) : moveToDayBoundary(tradingDay2, date2, ms);
              var _ref4 = _slicedToArray(_ref3, 2);
              date2 = _ref4[0];
              ms = _ref4[1];
            }
          }
          return date2;
        };
        instance.copy = function() {
          return instance;
        };
        return instance;
      };
      var skipWeeklyPattern = function(nonTradingHoursPattern) {
        return base$1(nonTradingHoursPattern, localDateTimeUtility);
      };
      var utcDateTimeUtility = dateTimeUtility(function(date2, hh, mm, ss, ms) {
        return new Date(Date.UTC(date2.getUTCFullYear(), date2.getUTCMonth(), date2.getUTCDate(), hh, mm, ss, ms));
      }, function(date2) {
        return date2.getUTCDay();
      }, function(date2) {
        return [date2.getUTCHours(), date2.getUTCMinutes(), date2.getUTCSeconds(), date2.getUTCMilliseconds()];
      }, d3Time.utcDay, d3Time.utcMillisecond);
      var skipUtcWeeklyPattern = function(nonTradingUtcHoursPattern) {
        return base$1(nonTradingUtcHoursPattern, utcDateTimeUtility);
      };
      function linearExtent() {
        var accessors = [function(d2) {
          return d2;
        }];
        var pad3 = [0, 0];
        var padUnit = "percent";
        var symmetricalAbout = null;
        var include2 = [];
        var instance = function instance2(data) {
          var values = new Array(data.length);
          var _iterator = _createForOfIteratorHelper(accessors), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var accessor = _step.value;
              for (var i4 = 0; i4 < data.length; i4++) {
                var value = accessor(data[i4], i4);
                if (Array.isArray(value)) {
                  values.push.apply(values, _toConsumableArray(value));
                } else {
                  values.push(value);
                }
              }
            }
          } catch (err2) {
            _iterator.e(err2);
          } finally {
            _iterator.f();
          }
          var extent2 = [d3Array.min(values), d3Array.max(values)];
          extent2[0] = extent2[0] == null ? d3Array.min(include2) : d3Array.min([extent2[0]].concat(_toConsumableArray(include2)));
          extent2[1] = extent2[1] == null ? d3Array.max(include2) : d3Array.max([extent2[1]].concat(_toConsumableArray(include2)));
          if (symmetricalAbout != null) {
            var halfRange = Math.max(Math.abs(extent2[1] - symmetricalAbout), Math.abs(extent2[0] - symmetricalAbout));
            extent2[0] = symmetricalAbout - halfRange;
            extent2[1] = symmetricalAbout + halfRange;
          }
          switch (padUnit) {
            case "domain": {
              extent2[0] -= pad3[0];
              extent2[1] += pad3[1];
              break;
            }
            case "percent": {
              var delta = extent2[1] - extent2[0];
              extent2[0] -= pad3[0] * delta;
              extent2[1] += pad3[1] * delta;
              break;
            }
            default:
              throw new Error("Unknown padUnit: ".concat(padUnit));
          }
          return extent2;
        };
        instance.accessors = function() {
          if (!arguments.length) {
            return accessors;
          }
          accessors = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.pad = function() {
          if (!arguments.length) {
            return pad3;
          }
          pad3 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.padUnit = function() {
          if (!arguments.length) {
            return padUnit;
          }
          padUnit = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.include = function() {
          if (!arguments.length) {
            return include2;
          }
          include2 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.symmetricalAbout = function() {
          if (!arguments.length) {
            return symmetricalAbout;
          }
          symmetricalAbout = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        return instance;
      }
      function time2() {
        var accessors = [];
        var pad3 = [0, 0];
        var padUnit = "percent";
        var symmetricalAbout = null;
        var include2 = [];
        var extent2 = linearExtent();
        var valueOf = function valueOf2(date2) {
          return date2 != null ? date2.valueOf() : null;
        };
        var instance = function instance2(data) {
          var adaptedAccessors = accessors.map(function(accessor) {
            return function() {
              var value = accessor.apply(void 0, arguments);
              return Array.isArray(value) ? value.map(valueOf) : valueOf(value);
            };
          });
          extent2.accessors(adaptedAccessors).pad(pad3).padUnit(padUnit).symmetricalAbout(symmetricalAbout != null ? symmetricalAbout.valueOf() : null).include(include2.map(function(date2) {
            return date2.valueOf();
          }));
          return extent2(data).map(function(value) {
            return new Date(value);
          });
        };
        instance.accessors = function() {
          if (!arguments.length) {
            return accessors;
          }
          accessors = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.pad = function() {
          if (!arguments.length) {
            return pad3;
          }
          pad3 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.padUnit = function() {
          if (!arguments.length) {
            return padUnit;
          }
          padUnit = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.include = function() {
          if (!arguments.length) {
            return include2;
          }
          include2 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.symmetricalAbout = function() {
          if (!arguments.length) {
            return symmetricalAbout;
          }
          symmetricalAbout = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        return instance;
      }
      function geometricBrownianMotion() {
        var period = 1;
        var steps = 20;
        var mu = 0.1;
        var sigma = 0.1;
        var random = d3Random.randomNormal();
        var geometricBrownianMotion2 = function geometricBrownianMotion3() {
          var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
          var timeStep = period / steps;
          var pathData = [];
          for (var i4 = 0; i4 < steps + 1; i4++) {
            pathData.push(value);
            var increment = random() * Math.sqrt(timeStep) * sigma + (mu - sigma * sigma / 2) * timeStep;
            value = value * Math.exp(increment);
          }
          return pathData;
        };
        geometricBrownianMotion2.period = function() {
          if (!arguments.length) {
            return period;
          }
          period = arguments.length <= 0 ? void 0 : arguments[0];
          return geometricBrownianMotion2;
        };
        geometricBrownianMotion2.steps = function() {
          if (!arguments.length) {
            return steps;
          }
          steps = arguments.length <= 0 ? void 0 : arguments[0];
          return geometricBrownianMotion2;
        };
        geometricBrownianMotion2.mu = function() {
          if (!arguments.length) {
            return mu;
          }
          mu = arguments.length <= 0 ? void 0 : arguments[0];
          return geometricBrownianMotion2;
        };
        geometricBrownianMotion2.sigma = function() {
          if (!arguments.length) {
            return sigma;
          }
          sigma = arguments.length <= 0 ? void 0 : arguments[0];
          return geometricBrownianMotion2;
        };
        geometricBrownianMotion2.random = function() {
          if (!arguments.length) {
            return random;
          }
          random = arguments.length <= 0 ? void 0 : arguments[0];
          return geometricBrownianMotion2;
        };
        return geometricBrownianMotion2;
      }
      function functor$1(v4) {
        return typeof v4 === "function" ? v4 : function() {
          return v4;
        };
      }
      function financial() {
        var startDate = new Date();
        var startPrice = 100;
        var interval2 = d3Time.timeDay;
        var intervalStep = 1;
        var unitInterval = d3Time.timeYear;
        var unitIntervalStep = 1;
        var filter3 = null;
        var volume = function volume2() {
          var normal = d3Random.randomNormal(1, 0.1);
          return Math.ceil(normal() * 1e3);
        };
        var gbm = geometricBrownianMotion();
        var getOffsetPeriod = function getOffsetPeriod2(date2) {
          var unitMilliseconds = unitInterval.offset(date2, unitIntervalStep) - date2;
          return (interval2.offset(date2, intervalStep) - date2) / unitMilliseconds;
        };
        var calculateOHLC = function calculateOHLC2(start2, price) {
          var period = getOffsetPeriod(start2);
          var prices = gbm.period(period)(price);
          var ohlc2 = {
            date: start2,
            open: prices[0],
            high: Math.max.apply(Math, prices),
            low: Math.min.apply(Math, prices),
            close: prices[gbm.steps()]
          };
          ohlc2.volume = volume(ohlc2);
          return ohlc2;
        };
        var getNextDatum = function getNextDatum2(ohlc2) {
          var date2, price, filtered;
          do {
            date2 = ohlc2 ? interval2.offset(ohlc2.date, intervalStep) : new Date(startDate.getTime());
            price = ohlc2 ? ohlc2.close : startPrice;
            ohlc2 = calculateOHLC(date2, price);
            filtered = filter3 && !filter3(ohlc2);
          } while (filtered);
          return ohlc2;
        };
        var makeStream = function makeStream2() {
          var latest;
          var stream = {};
          stream.next = function() {
            var ohlc2 = getNextDatum(latest);
            latest = ohlc2;
            return ohlc2;
          };
          stream.take = function(numPoints) {
            return stream.until(function(d2, i4) {
              return !numPoints || numPoints < 0 || i4 === numPoints;
            });
          };
          stream.until = function(comparison) {
            var data = [];
            var index2 = 0;
            var ohlc2 = getNextDatum(latest);
            var compared = comparison && !comparison(ohlc2, index2);
            while (compared) {
              data.push(ohlc2);
              latest = ohlc2;
              ohlc2 = getNextDatum(latest);
              index2 += 1;
              compared = comparison && !comparison(ohlc2, index2);
            }
            return data;
          };
          return stream;
        };
        var financial2 = function financial3(numPoints) {
          return makeStream().take(numPoints);
        };
        financial2.stream = makeStream;
        if (typeof Symbol !== "function" || _typeof2(Symbol.iterator) !== "symbol") {
          throw new Error("d3fc-random-data depends on Symbol. Make sure that you load a polyfill in older browsers. See README.");
        }
        financial2[Symbol.iterator] = function() {
          var stream = makeStream();
          return {
            next: function next() {
              return {
                value: stream.next(),
                done: false
              };
            }
          };
        };
        financial2.startDate = function() {
          if (!arguments.length) {
            return startDate;
          }
          startDate = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.startPrice = function() {
          if (!arguments.length) {
            return startPrice;
          }
          startPrice = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.interval = function() {
          if (!arguments.length) {
            return interval2;
          }
          interval2 = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.intervalStep = function() {
          if (!arguments.length) {
            return intervalStep;
          }
          intervalStep = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.unitInterval = function() {
          if (!arguments.length) {
            return unitInterval;
          }
          unitInterval = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.unitIntervalStep = function() {
          if (!arguments.length) {
            return unitIntervalStep;
          }
          unitIntervalStep = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.filter = function() {
          if (!arguments.length) {
            return filter3;
          }
          filter3 = arguments.length <= 0 ? void 0 : arguments[0];
          return financial2;
        };
        financial2.volume = function() {
          if (!arguments.length) {
            return volume;
          }
          volume = functor$1(arguments.length <= 0 ? void 0 : arguments[0]);
          return financial2;
        };
        rebindAll6(financial2, gbm);
        return financial2;
      }
      function skipWeekends$1(datum2) {
        var day2 = datum2.date.getDay();
        return !(day2 === 0 || day2 === 6);
      }
      function gdax() {
        var product = "BTC-USD";
        var start2 = null;
        var end = null;
        var granularity = null;
        var gdax2 = function gdax3() {
          var params = [];
          if (start2 != null) {
            params.push("start=" + start2.toISOString());
          }
          if (end != null) {
            params.push("end=" + end.toISOString());
          }
          if (granularity != null) {
            params.push("granularity=" + granularity);
          }
          var url = "https://api.gdax.com/products/" + product + "/candles?" + params.join("&");
          return d3Fetch.json(url).then(function(data) {
            return data.map(function(d2) {
              return {
                date: new Date(d2[0] * 1e3),
                open: d2[3],
                high: d2[2],
                low: d2[1],
                close: d2[4],
                volume: d2[5]
              };
            });
          });
        };
        gdax2.product = function(x4) {
          if (!arguments.length) {
            return product;
          }
          product = x4;
          return gdax2;
        };
        gdax2.start = function(x4) {
          if (!arguments.length) {
            return start2;
          }
          start2 = x4;
          return gdax2;
        };
        gdax2.end = function(x4) {
          if (!arguments.length) {
            return end;
          }
          end = x4;
          return gdax2;
        };
        gdax2.granularity = function(x4) {
          if (!arguments.length) {
            return granularity;
          }
          granularity = x4;
          return gdax2;
        };
        return gdax2;
      }
      function bucket() {
        var bucketSize = 10;
        var bucket2 = function bucket3(data) {
          return bucketSize <= 1 ? data.map(function(d2) {
            return [d2];
          }) : d3Array.range(0, Math.ceil(data.length / bucketSize)).map(function(i4) {
            return data.slice(i4 * bucketSize, (i4 + 1) * bucketSize);
          });
        };
        bucket2.bucketSize = function(x4) {
          if (!arguments.length) {
            return bucketSize;
          }
          bucketSize = x4;
          return bucket2;
        };
        return bucket2;
      }
      function largestTriangleOneBucket() {
        var dataBucketer = bucket();
        var x4 = function x5(d2) {
          return d2;
        };
        var y3 = function y4(d2) {
          return d2;
        };
        var largestTriangleOneBucket2 = function largestTriangleOneBucket3(data) {
          if (dataBucketer.bucketSize() >= data.length) {
            return data;
          }
          var pointAreas = calculateAreaOfPoints(data);
          var pointAreaBuckets = dataBucketer(pointAreas);
          var buckets = dataBucketer(data.slice(1, data.length - 1));
          var subsampledData = buckets.map(function(thisBucket, i4) {
            var pointAreaBucket = pointAreaBuckets[i4];
            var maxArea = d3Array.max(pointAreaBucket);
            var currentMaxIndex = pointAreaBucket.indexOf(maxArea);
            return thisBucket[currentMaxIndex];
          });
          return [].concat([data[0]], subsampledData, [data[data.length - 1]]);
        };
        function calculateAreaOfPoints(data) {
          var xyData = data.map(function(point8) {
            return [x4(point8), y3(point8)];
          });
          var pointAreas = d3Array.range(1, xyData.length - 1).map(function(i4) {
            var lastPoint = xyData[i4 - 1];
            var thisPoint = xyData[i4];
            var nextPoint = xyData[i4 + 1];
            return 0.5 * Math.abs((lastPoint[0] - nextPoint[0]) * (thisPoint[1] - lastPoint[1]) - (lastPoint[0] - thisPoint[0]) * (nextPoint[1] - lastPoint[1]));
          });
          return pointAreas;
        }
        rebind(largestTriangleOneBucket2, dataBucketer, "bucketSize");
        largestTriangleOneBucket2.x = function(d2) {
          if (!arguments.length) {
            return x4;
          }
          x4 = d2;
          return largestTriangleOneBucket2;
        };
        largestTriangleOneBucket2.y = function(d2) {
          if (!arguments.length) {
            return y3;
          }
          y3 = d2;
          return largestTriangleOneBucket2;
        };
        return largestTriangleOneBucket2;
      }
      function largestTriangleThreeBucket() {
        var x4 = function x5(d2) {
          return d2;
        };
        var y3 = function y4(d2) {
          return d2;
        };
        var dataBucketer = bucket();
        var largestTriangleThreeBucket2 = function largestTriangleThreeBucket3(data) {
          if (dataBucketer.bucketSize() >= data.length) {
            return data;
          }
          var buckets = dataBucketer(data.slice(1, data.length - 1));
          var firstBucket = data[0];
          var lastBucket = data[data.length - 1];
          var allBuckets = [].concat([firstBucket], buckets, [lastBucket]);
          var lastSelectedX = x4(firstBucket);
          var lastSelectedY = y3(firstBucket);
          var subsampledData = buckets.map(function(thisBucket, i4) {
            var nextAvgX = d3Array.mean(allBuckets[i4 + 1], x4);
            var nextAvgY = d3Array.mean(allBuckets[i4 + 1], y3);
            var xyData = thisBucket.map(function(item) {
              return [x4(item), y3(item)];
            });
            var areas = xyData.map(function(item) {
              return 0.5 * Math.abs((lastSelectedX - nextAvgX) * (item[1] - lastSelectedY) - (lastSelectedX - item[0]) * (nextAvgY - lastSelectedY));
            });
            var highestIndex = areas.indexOf(d3Array.max(areas));
            var highestXY = xyData[highestIndex];
            lastSelectedX = highestXY[0];
            lastSelectedY = highestXY[1];
            return thisBucket[highestIndex];
          });
          return [].concat([data[0]], subsampledData, [data[data.length - 1]]);
        };
        rebind(largestTriangleThreeBucket2, dataBucketer, "bucketSize");
        largestTriangleThreeBucket2.x = function(d2) {
          if (!arguments.length) {
            return x4;
          }
          x4 = d2;
          return largestTriangleThreeBucket2;
        };
        largestTriangleThreeBucket2.y = function(d2) {
          if (!arguments.length) {
            return y3;
          }
          y3 = d2;
          return largestTriangleThreeBucket2;
        };
        return largestTriangleThreeBucket2;
      }
      function modeMedian() {
        var dataBucketer = bucket();
        var value = function value2(d2) {
          return d2;
        };
        var modeMedian2 = function modeMedian3(data) {
          if (dataBucketer.bucketSize() > data.length) {
            return data;
          }
          var minMax = d3Array.extent(data, value);
          var buckets = dataBucketer(data.slice(1, data.length - 1));
          var subsampledData = buckets.map(function(thisBucket, i4) {
            var frequencies = {};
            var mostFrequent;
            var mostFrequentIndex;
            var singleMostFrequent = true;
            var values = thisBucket.map(value);
            var globalMinMax = values.filter(function(value2) {
              return value2 === minMax[0] || value2 === minMax[1];
            }).map(function(value2) {
              return values.indexOf(value2);
            })[0];
            if (globalMinMax !== void 0) {
              return thisBucket[globalMinMax];
            }
            values.forEach(function(item, i5) {
              if (frequencies[item] === void 0) {
                frequencies[item] = 0;
              }
              frequencies[item]++;
              if (frequencies[item] > frequencies[mostFrequent] || mostFrequent === void 0) {
                mostFrequent = item;
                mostFrequentIndex = i5;
                singleMostFrequent = true;
              } else if (frequencies[item] === frequencies[mostFrequent]) {
                singleMostFrequent = false;
              }
            });
            if (singleMostFrequent) {
              return thisBucket[mostFrequentIndex];
            } else {
              return thisBucket[Math.floor(thisBucket.length / 2)];
            }
          });
          return [].concat([data[0]], subsampledData, [data[data.length - 1]]);
        };
        rebind(modeMedian2, dataBucketer, "bucketSize");
        modeMedian2.value = function(x4) {
          if (!arguments.length) {
            return value;
          }
          value = x4;
          return modeMedian2;
        };
        return modeMedian2;
      }
      var functor$2 = function(v4) {
        return typeof v4 === "function" ? v4 : function() {
          return v4;
        };
      };
      var shapeOhlc = function() {
        var context = null;
        var x4 = function x5(d2) {
          return d2.date;
        };
        var open = function open2(d2) {
          return d2.open;
        };
        var high = function high2(d2) {
          return d2.high;
        };
        var low = function low2(d2) {
          return d2.low;
        };
        var close = function close2(d2) {
          return d2.close;
        };
        var orient = "vertical";
        var width = functor$2(3);
        var ohlc2 = function ohlc3(data) {
          var drawingContext = context || d3Path.path();
          data.forEach(function(d2, i4) {
            var xValue = x4(d2, i4);
            var yOpen = open(d2, i4);
            var yHigh = high(d2, i4);
            var yLow = low(d2, i4);
            var yClose = close(d2, i4);
            var halfWidth = width(d2, i4) / 2;
            if (orient === "vertical") {
              drawingContext.moveTo(xValue, yLow);
              drawingContext.lineTo(xValue, yHigh);
              drawingContext.moveTo(xValue, yOpen);
              drawingContext.lineTo(xValue - halfWidth, yOpen);
              drawingContext.moveTo(xValue, yClose);
              drawingContext.lineTo(xValue + halfWidth, yClose);
            } else {
              drawingContext.moveTo(yLow, xValue);
              drawingContext.lineTo(yHigh, xValue);
              drawingContext.moveTo(yOpen, xValue);
              drawingContext.lineTo(yOpen, xValue + halfWidth);
              drawingContext.moveTo(yClose, xValue);
              drawingContext.lineTo(yClose, xValue - halfWidth);
            }
          });
          return context ? null : drawingContext.toString();
        };
        ohlc2.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return ohlc2;
        };
        ohlc2.x = function() {
          if (!arguments.length) {
            return x4;
          }
          x4 = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return ohlc2;
        };
        ohlc2.open = function() {
          if (!arguments.length) {
            return open;
          }
          open = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return ohlc2;
        };
        ohlc2.high = function() {
          if (!arguments.length) {
            return high;
          }
          high = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return ohlc2;
        };
        ohlc2.low = function() {
          if (!arguments.length) {
            return low;
          }
          low = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return ohlc2;
        };
        ohlc2.close = function() {
          if (!arguments.length) {
            return close;
          }
          close = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return ohlc2;
        };
        ohlc2.width = function() {
          if (!arguments.length) {
            return width;
          }
          width = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return ohlc2;
        };
        ohlc2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return ohlc2;
        };
        return ohlc2;
      };
      var shapeBar = function() {
        var context = null;
        var x4 = function x5(d2) {
          return d2.x;
        };
        var y3 = function y4(d2) {
          return d2.y;
        };
        var horizontalAlign = "center";
        var verticalAlign = "center";
        var height = function height2(d2) {
          return d2.height;
        };
        var width = functor$2(3);
        var bar2 = function bar3(data, index2) {
          var drawingContext = context || d3Path.path();
          data.forEach(function(d2, i4) {
            var xValue = x4.call(this, d2, index2 || i4);
            var yValue = y3.call(this, d2, index2 || i4);
            var barHeight = height.call(this, d2, index2 || i4);
            var barWidth = width.call(this, d2, index2 || i4);
            var horizontalOffset;
            switch (horizontalAlign) {
              case "left":
                horizontalOffset = barWidth;
                break;
              case "right":
                horizontalOffset = 0;
                break;
              case "center":
                horizontalOffset = barWidth / 2;
                break;
              default:
                throw new Error("Invalid horizontal alignment " + horizontalAlign);
            }
            var verticalOffset;
            switch (verticalAlign) {
              case "bottom":
                verticalOffset = -barHeight;
                break;
              case "top":
                verticalOffset = 0;
                break;
              case "center":
                verticalOffset = barHeight / 2;
                break;
              default:
                throw new Error("Invalid vertical alignment " + verticalAlign);
            }
            drawingContext.rect(xValue - horizontalOffset, yValue - verticalOffset, barWidth, barHeight);
          }, this);
          return context ? null : drawingContext.toString();
        };
        bar2.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return bar2;
        };
        bar2.x = function() {
          if (!arguments.length) {
            return x4;
          }
          x4 = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return bar2;
        };
        bar2.y = function() {
          if (!arguments.length) {
            return y3;
          }
          y3 = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return bar2;
        };
        bar2.width = function() {
          if (!arguments.length) {
            return width;
          }
          width = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return bar2;
        };
        bar2.horizontalAlign = function() {
          if (!arguments.length) {
            return horizontalAlign;
          }
          horizontalAlign = arguments.length <= 0 ? void 0 : arguments[0];
          return bar2;
        };
        bar2.height = function() {
          if (!arguments.length) {
            return height;
          }
          height = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return bar2;
        };
        bar2.verticalAlign = function() {
          if (!arguments.length) {
            return verticalAlign;
          }
          verticalAlign = arguments.length <= 0 ? void 0 : arguments[0];
          return bar2;
        };
        return bar2;
      };
      var shapeCandlestick = function() {
        var context = null;
        var x4 = function x5(d2) {
          return d2.date;
        };
        var open = function open2(d2) {
          return d2.open;
        };
        var high = function high2(d2) {
          return d2.high;
        };
        var low = function low2(d2) {
          return d2.low;
        };
        var close = function close2(d2) {
          return d2.close;
        };
        var width = functor$2(3);
        var candlestick2 = function candlestick3(data) {
          var drawingContext = context || d3Path.path();
          data.forEach(function(d2, i4) {
            var xValue = x4(d2, i4);
            var yOpen = open(d2, i4);
            var yHigh = high(d2, i4);
            var yLow = low(d2, i4);
            var yClose = close(d2, i4);
            var barWidth = width(d2, i4);
            var halfBarWidth = barWidth / 2;
            drawingContext.rect(xValue - halfBarWidth, yOpen, barWidth, yClose - yOpen);
            drawingContext.moveTo(xValue, Math.min(yClose, yOpen));
            drawingContext.lineTo(xValue, yHigh);
            drawingContext.moveTo(xValue, Math.max(yClose, yOpen));
            drawingContext.lineTo(xValue, yLow);
          });
          return context ? null : drawingContext.toString();
        };
        candlestick2.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return candlestick2;
        };
        candlestick2.x = function() {
          if (!arguments.length) {
            return x4;
          }
          x4 = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return candlestick2;
        };
        candlestick2.open = function() {
          if (!arguments.length) {
            return open;
          }
          open = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return candlestick2;
        };
        candlestick2.high = function() {
          if (!arguments.length) {
            return high;
          }
          high = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return candlestick2;
        };
        candlestick2.low = function() {
          if (!arguments.length) {
            return low;
          }
          low = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return candlestick2;
        };
        candlestick2.close = function() {
          if (!arguments.length) {
            return close;
          }
          close = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return candlestick2;
        };
        candlestick2.width = function() {
          if (!arguments.length) {
            return width;
          }
          width = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return candlestick2;
        };
        return candlestick2;
      };
      var shapeBoxPlot = function() {
        var context = null;
        var value = function value2(d2) {
          return d2.value;
        };
        var median2 = function median3(d2) {
          return d2.median;
        };
        var upperQuartile = function upperQuartile2(d2) {
          return d2.upperQuartile;
        };
        var lowerQuartile = function lowerQuartile2(d2) {
          return d2.lowerQuartile;
        };
        var high = function high2(d2) {
          return d2.high;
        };
        var low = function low2(d2) {
          return d2.low;
        };
        var orient = "vertical";
        var width = functor$2(5);
        var cap = functor$2(0.5);
        var boxPlot2 = function boxPlot3(data) {
          var drawingContext = context || d3Path.path();
          data.forEach(function(d2, i4) {
            var _value = value(d2, i4);
            var _width = width(d2, i4);
            var halfWidth = _width / 2;
            var capWidth = _width * cap(d2, i4);
            var halfCapWidth = capWidth / 2;
            var _high = high(d2, i4);
            var _upperQuartile = upperQuartile(d2, i4);
            var _median = median2(d2, i4);
            var _lowerQuartile = lowerQuartile(d2, i4);
            var _low = low(d2, i4);
            var upperQuartileToLowerQuartile = _lowerQuartile - _upperQuartile;
            if (orient === "vertical") {
              drawingContext.moveTo(_value - halfCapWidth, _high);
              drawingContext.lineTo(_value + halfCapWidth, _high);
              drawingContext.moveTo(_value, _high);
              drawingContext.lineTo(_value, _upperQuartile);
              drawingContext.rect(_value - halfWidth, _upperQuartile, _width, upperQuartileToLowerQuartile);
              drawingContext.moveTo(_value - halfWidth, _median);
              drawingContext.lineTo(_value + halfWidth, _median);
              drawingContext.moveTo(_value, _lowerQuartile);
              drawingContext.lineTo(_value, _low);
              drawingContext.moveTo(_value - halfCapWidth, _low);
              drawingContext.lineTo(_value + halfCapWidth, _low);
            } else {
              drawingContext.moveTo(_low, _value - halfCapWidth);
              drawingContext.lineTo(_low, _value + halfCapWidth);
              drawingContext.moveTo(_low, _value);
              drawingContext.lineTo(_lowerQuartile, _value);
              drawingContext.rect(_lowerQuartile, _value - halfWidth, -upperQuartileToLowerQuartile, _width);
              drawingContext.moveTo(_median, _value - halfWidth);
              drawingContext.lineTo(_median, _value + halfWidth);
              drawingContext.moveTo(_upperQuartile, _value);
              drawingContext.lineTo(_high, _value);
              drawingContext.moveTo(_high, _value - halfCapWidth);
              drawingContext.lineTo(_high, _value + halfCapWidth);
            }
          });
          return context ? null : drawingContext.toString();
        };
        boxPlot2.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return boxPlot2;
        };
        boxPlot2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.median = function() {
          if (!arguments.length) {
            return median2;
          }
          median2 = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.upperQuartile = function() {
          if (!arguments.length) {
            return upperQuartile;
          }
          upperQuartile = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.lowerQuartile = function() {
          if (!arguments.length) {
            return lowerQuartile;
          }
          lowerQuartile = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.high = function() {
          if (!arguments.length) {
            return high;
          }
          high = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.low = function() {
          if (!arguments.length) {
            return low;
          }
          low = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.width = function() {
          if (!arguments.length) {
            return width;
          }
          width = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return boxPlot2;
        };
        boxPlot2.cap = function() {
          if (!arguments.length) {
            return cap;
          }
          cap = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        return boxPlot2;
      };
      var shapeErrorBar = function() {
        var context = null;
        var value = function value2(d2) {
          return d2.x;
        };
        var high = function high2(d2) {
          return d2.high;
        };
        var low = function low2(d2) {
          return d2.low;
        };
        var orient = "vertical";
        var width = functor$2(5);
        var errorBar2 = function errorBar3(data) {
          var drawingContext = context || d3Path.path();
          data.forEach(function(d2, i4) {
            var _value = value(d2, i4);
            var _width = width(d2, i4);
            var halfWidth = _width / 2;
            var _high = high(d2, i4);
            var _low = low(d2, i4);
            if (orient === "vertical") {
              drawingContext.moveTo(_value - halfWidth, _high);
              drawingContext.lineTo(_value + halfWidth, _high);
              drawingContext.moveTo(_value, _high);
              drawingContext.lineTo(_value, _low);
              drawingContext.moveTo(_value - halfWidth, _low);
              drawingContext.lineTo(_value + halfWidth, _low);
            } else {
              drawingContext.moveTo(_low, _value - halfWidth);
              drawingContext.lineTo(_low, _value + halfWidth);
              drawingContext.moveTo(_low, _value);
              drawingContext.lineTo(_high, _value);
              drawingContext.moveTo(_high, _value - halfWidth);
              drawingContext.lineTo(_high, _value + halfWidth);
            }
          });
          return context ? null : drawingContext.toString();
        };
        errorBar2.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return errorBar2;
        };
        errorBar2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return errorBar2;
        };
        errorBar2.high = function() {
          if (!arguments.length) {
            return high;
          }
          high = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return errorBar2;
        };
        errorBar2.low = function() {
          if (!arguments.length) {
            return low;
          }
          low = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return errorBar2;
        };
        errorBar2.width = function() {
          if (!arguments.length) {
            return width;
          }
          width = functor$2(arguments.length <= 0 ? void 0 : arguments[0]);
          return errorBar2;
        };
        errorBar2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return errorBar2;
        };
        return errorBar2;
      };
      var functor$3 = function(d2) {
        return typeof d2 === "function" ? d2 : function() {
          return d2;
        };
      };
      var effectivelyZero = 1e-6;
      var isTransition = function isTransition2(selectionOrTransition) {
        return selectionOrTransition.selection() !== selectionOrTransition;
      };
      var dataJoin3 = function(element2, className) {
        element2 = element2 || "g";
        var key2 = function key3(_4, i4) {
          return i4;
        };
        var explicitTransition = null;
        var dataJoin4 = function dataJoin5(container, data) {
          data = data || function(d2) {
            return d2;
          };
          var selection3 = container.selection();
          var implicitTransition = isTransition(container) ? container : null;
          var selected = selection3.selectChildren(className == null ? element2 : "".concat(element2, ".").concat(className));
          var update = selected.data(data, key2);
          var enter = update.enter().append(element2).attr("class", className);
          var exit = update.exit();
          update = update.merge(enter);
          var transition2 = implicitTransition || explicitTransition;
          if (transition2) {
            update = update.transition(transition2).style("opacity", 1);
            enter.style("opacity", effectivelyZero);
            exit = exit.transition(transition2).style("opacity", effectivelyZero);
          }
          exit.remove();
          update.enter = function() {
            return enter;
          };
          update.exit = function() {
            return exit;
          };
          return update;
        };
        dataJoin4.element = function() {
          if (!arguments.length) {
            return element2;
          }
          element2 = arguments.length <= 0 ? void 0 : arguments[0];
          return dataJoin4;
        };
        dataJoin4.className = function() {
          if (!arguments.length) {
            return className;
          }
          className = arguments.length <= 0 ? void 0 : arguments[0];
          return dataJoin4;
        };
        dataJoin4.key = function() {
          if (!arguments.length) {
            return key2;
          }
          key2 = arguments.length <= 0 ? void 0 : arguments[0];
          return dataJoin4;
        };
        dataJoin4.transition = function() {
          if (!arguments.length) {
            return explicitTransition;
          }
          explicitTransition = arguments.length <= 0 ? void 0 : arguments[0];
          return dataJoin4;
        };
        return dataJoin4;
      };
      var label = function(layoutStrategy) {
        var decorate = function decorate2() {
        };
        var size = function size2() {
          return [0, 0];
        };
        var position = function position2(d2, i4) {
          return [d2.x, d2.y];
        };
        var strategy = layoutStrategy || function(x4) {
          return x4;
        };
        var component = function component2() {
        };
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var dataJoin$1 = dataJoin3("g", "label");
        var label2 = function label3(selection3) {
          selection3.each(function(data, index2, group3) {
            var g3 = dataJoin$1(d3Selection.select(group3[index2]), data).call(component);
            var nodes = g3.nodes();
            var childRects = nodes.map(function(node, i4) {
              var d2 = d3Selection.select(node).datum();
              var pos = position(d2, i4, nodes);
              var childPos = [xScale(pos[0]), yScale(pos[1])];
              var childSize = size(d2, i4, nodes);
              return {
                hidden: false,
                x: childPos[0],
                y: childPos[1],
                width: childSize[0],
                height: childSize[1]
              };
            });
            var layout = strategy(childRects);
            g3.attr("style", function(_4, i4) {
              return "display:" + (layout[i4].hidden ? "none" : "inherit");
            }).attr("transform", function(_4, i4) {
              return "translate(" + layout[i4].x + ", " + layout[i4].y + ")";
            }).attr("layout-width", function(_4, i4) {
              return layout[i4].width;
            }).attr("layout-height", function(_4, i4) {
              return layout[i4].height;
            }).attr("anchor-x", function(d2, i4, g4) {
              return childRects[i4].x - layout[i4].x;
            }).attr("anchor-y", function(d2, i4, g4) {
              return childRects[i4].y - layout[i4].y;
            });
            g3.call(component);
            decorate(g3, data, index2);
          });
        };
        rebindAll6(label2, dataJoin$1, include("key"));
        rebindAll6(label2, strategy);
        label2.size = function() {
          if (!arguments.length) {
            return size;
          }
          size = functor$3(arguments.length <= 0 ? void 0 : arguments[0]);
          return label2;
        };
        label2.position = function() {
          if (!arguments.length) {
            return position;
          }
          position = functor$3(arguments.length <= 0 ? void 0 : arguments[0]);
          return label2;
        };
        label2.component = function() {
          if (!arguments.length) {
            return component;
          }
          component = arguments.length <= 0 ? void 0 : arguments[0];
          return label2;
        };
        label2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return label2;
        };
        label2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return label2;
        };
        label2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return label2;
        };
        return label2;
      };
      var textLabel = function(layoutStrategy) {
        var padding = 2;
        var value = function value2(x4) {
          return x4;
        };
        var textJoin = dataJoin3("text");
        var rectJoin = dataJoin3("rect");
        var pointJoin = dataJoin3("circle");
        var textLabel2 = function textLabel3(selection3) {
          selection3.each(function(data, index2, group3) {
            var node = group3[index2];
            var nodeSelection = d3Selection.select(node);
            var width = Number(node.getAttribute("layout-width"));
            var height = Number(node.getAttribute("layout-height"));
            var rect = rectJoin(nodeSelection, [data]);
            rect.attr("width", width).attr("height", height);
            var anchorX = Number(node.getAttribute("anchor-x"));
            var anchorY = Number(node.getAttribute("anchor-y"));
            var circle2 = pointJoin(nodeSelection, [data]);
            circle2.attr("r", 2).attr("cx", anchorX).attr("cy", anchorY);
            var text = textJoin(nodeSelection, [data]);
            text.enter().attr("dy", "0.9em").attr("transform", "translate(".concat(padding, ", ").concat(padding, ")"));
            text.text(value);
          });
        };
        textLabel2.padding = function() {
          if (!arguments.length) {
            return padding;
          }
          padding = arguments.length <= 0 ? void 0 : arguments[0];
          return textLabel2;
        };
        textLabel2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = functor$3(arguments.length <= 0 ? void 0 : arguments[0]);
          return textLabel2;
        };
        return textLabel2;
      };
      var isIntersecting = function isIntersecting2(a5, b3) {
        return !(a5.x >= b3.x + b3.width || a5.x + a5.width <= b3.x || a5.y >= b3.y + b3.height || a5.y + a5.height <= b3.y);
      };
      var intersect2 = function(a5, b3) {
        if (isIntersecting(a5, b3)) {
          var left = Math.max(a5.x, b3.x);
          var right = Math.min(a5.x + a5.width, b3.x + b3.width);
          var top = Math.max(a5.y, b3.y);
          var bottom = Math.min(a5.y + a5.height, b3.y + b3.height);
          return (right - left) * (bottom - top);
        } else {
          return 0;
        }
      };
      var collisionArea = function collisionArea2(rectangles, index2) {
        return d3Array.sum(rectangles.map(function(d2, i4) {
          return index2 === i4 ? 0 : intersect2(rectangles[index2], d2);
        }));
      };
      var getPlacement = function getPlacement2(x4, y3, width, height, location) {
        return {
          x: x4,
          y: y3,
          width,
          height,
          location
        };
      };
      var placements = function(label2) {
        var x4 = label2.x;
        var y3 = label2.y;
        var width = label2.width;
        var height = label2.height;
        return [getPlacement(x4, y3, width, height, "bottom-right"), getPlacement(x4 - width, y3, width, height, "bottom-left"), getPlacement(x4 - width, y3 - height, width, height, "top-left"), getPlacement(x4, y3 - height, width, height, "top-right"), getPlacement(x4, y3 - height / 2, width, height, "middle-right"), getPlacement(x4 - width / 2, y3, width, height, "bottom-center"), getPlacement(x4 - width, y3 - height / 2, width, height, "middle-left"), getPlacement(x4 - width / 2, y3 - height, width, height, "top-center")];
      };
      var substitute = function substitute2(array6, index2, substitution) {
        return [].concat(_toConsumableArray(array6.slice(0, index2)), [substitution], _toConsumableArray(array6.slice(index2 + 1)));
      };
      var lessThan = function lessThan2(a5, b3) {
        return a5 < b3;
      };
      var layoutComponent = function layoutComponent2() {
        var score = null;
        var winningScore = lessThan;
        var locationScore = function locationScore2() {
          return 0;
        };
        var rectangles;
        var evaluatePlacement = function evaluatePlacement2(placement, index2) {
          return score - locationScore(rectangles[index2], index2, rectangles) + locationScore(placement, index2, substitute(rectangles, index2, placement));
        };
        var layout = function layout2(placement, index2) {
          if (!score) {
            score = d3Array.sum(rectangles.map(function(r2, i4) {
              return locationScore(r2, i4, rectangles);
            }));
          }
          var newScore = evaluatePlacement(placement, index2);
          if (winningScore(newScore, score)) {
            return layoutComponent2().locationScore(locationScore).winningScore(winningScore).score(newScore).rectangles(substitute(rectangles, index2, placement));
          } else {
            return layout2;
          }
        };
        layout.rectangles = function() {
          if (!arguments.length) {
            return rectangles;
          }
          rectangles = arguments.length <= 0 ? void 0 : arguments[0];
          return layout;
        };
        layout.score = function() {
          if (!arguments.length) {
            return score;
          }
          score = arguments.length <= 0 ? void 0 : arguments[0];
          return layout;
        };
        layout.winningScore = function() {
          if (!arguments.length) {
            return winningScore;
          }
          winningScore = arguments.length <= 0 ? void 0 : arguments[0];
          return layout;
        };
        layout.locationScore = function() {
          if (!arguments.length) {
            return locationScore;
          }
          locationScore = arguments.length <= 0 ? void 0 : arguments[0];
          return layout;
        };
        return layout;
      };
      var greedy = function() {
        var bounds;
        var containerPenalty = function containerPenalty2(rectangle) {
          return bounds ? rectangle.width * rectangle.height - intersect2(rectangle, bounds) : 0;
        };
        var penaltyForRectangle = function penaltyForRectangle2(rectangle, index2, rectangles) {
          return collisionArea(rectangles, index2) + containerPenalty(rectangle);
        };
        var strategy = function strategy2(data) {
          var rectangles = layoutComponent().locationScore(penaltyForRectangle).rectangles(data);
          data.forEach(function(rectangle, index2) {
            placements(rectangle).forEach(function(placement, placementIndex) {
              rectangles = rectangles(placement, index2);
            });
          });
          return rectangles.rectangles();
        };
        strategy.bounds = function() {
          if (!arguments.length) {
            return bounds;
          }
          bounds = arguments.length <= 0 ? void 0 : arguments[0];
          return strategy;
        };
        return strategy;
      };
      var randomItem = function randomItem2(array6) {
        return array6[randomIndex(array6)];
      };
      var randomIndex = function randomIndex2(array6) {
        return Math.floor(Math.random() * array6.length);
      };
      var annealing = function() {
        var temperature = 1e3;
        var cooling = 1;
        var bounds;
        var orientationPenalty = function orientationPenalty2(rectangle) {
          switch (rectangle.location) {
            case "bottom-right":
              return 0;
            case "middle-right":
            case "bottom-center":
              return rectangle.width * rectangle.height / 8;
          }
          return rectangle.width * rectangle.height / 4;
        };
        var containerPenalty = function containerPenalty2(rectangle) {
          return bounds ? rectangle.width * rectangle.height - intersect2(rectangle, bounds) : 0;
        };
        var penaltyForRectangle = function penaltyForRectangle2(rectangle, index2, rectangles) {
          return collisionArea(rectangles, index2) + containerPenalty(rectangle) + orientationPenalty(rectangle);
        };
        var strategy = function strategy2(data) {
          var currentTemperature = temperature;
          var winningScore = function winningScore2(newScore, oldScore) {
            return Math.exp((oldScore - newScore) / currentTemperature) > Math.random();
          };
          var rectangles = layoutComponent().locationScore(penaltyForRectangle).winningScore(winningScore).rectangles(data);
          while (currentTemperature > 0) {
            var index2 = randomIndex(data);
            var randomNewPlacement = randomItem(placements(data[index2]));
            rectangles = rectangles(randomNewPlacement, index2);
            currentTemperature -= cooling;
          }
          return rectangles.rectangles();
        };
        strategy.temperature = function() {
          if (!arguments.length) {
            return temperature;
          }
          temperature = arguments.length <= 0 ? void 0 : arguments[0];
          return strategy;
        };
        strategy.cooling = function() {
          if (!arguments.length) {
            return cooling;
          }
          cooling = arguments.length <= 0 ? void 0 : arguments[0];
          return strategy;
        };
        strategy.bounds = function() {
          if (!arguments.length) {
            return bounds;
          }
          bounds = arguments.length <= 0 ? void 0 : arguments[0];
          return strategy;
        };
        return strategy;
      };
      var scanForObject = function scanForObject2(array6, comparator) {
        return array6[d3Array.scan(array6, comparator)];
      };
      var removeOverlaps = function(adaptedStrategy) {
        adaptedStrategy = adaptedStrategy || function(x4) {
          return x4;
        };
        var removeOverlaps2 = function removeOverlaps3(layout) {
          layout = adaptedStrategy(layout);
          var _loop = function _loop2() {
            var visible = layout.filter(function(d2) {
              return !d2.hidden;
            });
            var collisions = visible.map(function(d2, i4) {
              return [d2, collisionArea(visible, i4)];
            });
            var maximumCollision = scanForObject(collisions, function(a5, b3) {
              return b3[1] - a5[1];
            });
            if (maximumCollision[1] > 0) {
              maximumCollision[0].hidden = true;
            } else {
              return "break";
            }
          };
          while (true) {
            var _ret = _loop();
            if (_ret === "break")
              break;
          }
          return layout;
        };
        rebindAll6(removeOverlaps2, adaptedStrategy);
        return removeOverlaps2;
      };
      var boundingBox = function() {
        var bounds = [0, 0];
        var strategy = function strategy2(data) {
          return data.map(function(d2, i4) {
            var tx = d2.x;
            var ty = d2.y;
            if (tx + d2.width > bounds[0]) {
              tx -= d2.width;
            }
            if (ty + d2.height > bounds[1]) {
              ty -= d2.height;
            }
            return {
              height: d2.height,
              width: d2.width,
              x: tx,
              y: ty
            };
          });
        };
        strategy.bounds = function() {
          if (!arguments.length) {
            return bounds;
          }
          bounds = arguments.length <= 0 ? void 0 : arguments[0];
          return strategy;
        };
        return strategy;
      };
      var functor$4 = function(d2) {
        return typeof d2 === "function" ? d2 : function() {
          return d2;
        };
      };
      function defined() {
        var outerArguments = arguments;
        return function(d2, i4) {
          for (var c6 = 0, j4 = outerArguments.length; c6 < j4; c6++) {
            if (outerArguments[c6](d2, i4) == null) {
              return false;
            }
          }
          return true;
        };
      }
      var alignOffset = function(align, width) {
        switch (align) {
          case "left":
            return width / 2;
          case "right":
            return -width / 2;
          default:
            return 0;
        }
      };
      var createBase = function(initialValues) {
        var env = Object.assign({}, initialValues);
        var base2 = function base3() {
        };
        Object.keys(env).forEach(function(key2) {
          base2[key2] = function() {
            if (!arguments.length) {
              return env[key2];
            }
            env[key2] = arguments.length <= 0 ? void 0 : arguments[0];
            return base2;
          };
        });
        return base2;
      };
      var xyBase = function() {
        var baseValue = function baseValue2() {
          return 0;
        };
        var crossValue = function crossValue2(d2) {
          return d2.x;
        };
        var mainValue = function mainValue2(d2) {
          return d2.y;
        };
        var align = "center";
        var bandwidth = function bandwidth2() {
          return 5;
        };
        var orient = "vertical";
        var base2 = createBase({
          decorate: function decorate() {
          },
          defined: function defined$1(d2, i4) {
            return defined(baseValue, crossValue, mainValue)(d2, i4);
          },
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity()
        });
        base2.values = function(d2, i4) {
          var width = bandwidth(d2, i4);
          var offset = alignOffset(align, width);
          var xScale = base2.xScale();
          var yScale = base2.yScale();
          if (orient === "vertical") {
            var y3 = yScale(mainValue(d2, i4), i4);
            var y0 = yScale(baseValue(d2, i4), i4);
            var x4 = xScale(crossValue(d2, i4), i4) + offset;
            return {
              d: d2,
              x: x4,
              y: y3,
              y0,
              width,
              height: y3 - y0,
              origin: [x4, y3],
              baseOrigin: [x4, y0],
              transposedX: x4,
              transposedY: y3
            };
          } else {
            var _y = xScale(mainValue(d2, i4), i4);
            var _y2 = xScale(baseValue(d2, i4), i4);
            var _x = yScale(crossValue(d2, i4), i4) + offset;
            return {
              d: d2,
              x: _x,
              y: _y,
              y0: _y2,
              width,
              height: _y - _y2,
              origin: [_y, _x],
              baseOrigin: [_y2, _x],
              transposedX: _y,
              transposedY: _x
            };
          }
        };
        base2.xValues = function() {
          return orient === "vertical" ? [crossValue] : [baseValue, mainValue];
        };
        base2.yValues = function() {
          return orient !== "vertical" ? [crossValue] : [baseValue, mainValue];
        };
        base2.baseValue = function() {
          if (!arguments.length) {
            return baseValue;
          }
          baseValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.crossValue = function() {
          if (!arguments.length) {
            return crossValue;
          }
          crossValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.mainValue = function() {
          if (!arguments.length) {
            return mainValue;
          }
          mainValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.bandwidth = function() {
          if (!arguments.length) {
            return bandwidth;
          }
          bandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.align = function() {
          if (!arguments.length) {
            return align;
          }
          align = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        return base2;
      };
      var red = "#c60";
      var green = "#6c0";
      var black = "#000";
      var gray = "#ddd";
      var darkGray = "#999";
      var colors = {
        red,
        green,
        black,
        gray,
        darkGray
      };
      var seriesSvgLine2 = function() {
        var base2 = xyBase();
        var lineData = d3Shape.line().x(function(d2, i4) {
          return base2.values(d2, i4).transposedX;
        }).y(function(d2, i4) {
          return base2.values(d2, i4).transposedY;
        });
        var join = dataJoin3("path", "line");
        var line2 = function line3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          lineData.defined(base2.defined());
          selection3.each(function(data, index2, group3) {
            var path2 = join(d3Selection.select(group3[index2]), [data]);
            path2.enter().attr("fill", "none").attr("stroke", colors.black);
            path2.attr("d", lineData);
            base2.decorate()(path2, data, index2);
          });
        };
        rebindAll6(line2, base2, exclude2("baseValue", "bandwidth", "align"));
        rebind(line2, join, "key");
        rebind(line2, lineData, "curve");
        return line2;
      };
      var seriesCanvasLine2 = function() {
        var base2 = xyBase();
        var lineData = d3Shape.line().x(function(d2, i4) {
          return base2.values(d2, i4).transposedX;
        }).y(function(d2, i4) {
          return base2.values(d2, i4).transposedY;
        });
        var line2 = function line3(data) {
          var context = lineData.context();
          context.beginPath();
          context.strokeStyle = colors.black;
          context.fillStyle = "transparent";
          base2.decorate()(context, data);
          lineData.defined(base2.defined())(data);
          context.fill();
          context.stroke();
          context.closePath();
        };
        rebindAll6(line2, base2, exclude2("baseValue", "bandwidth", "align"));
        rebind(line2, lineData, "curve", "context");
        return line2;
      };
      var baseScale = function() {
        var domain = [0, 1];
        var range4 = [-1, 1];
        var base2 = function base3() {
        };
        base2.domain = function() {
          if (!arguments.length) {
            return domain;
          }
          domain = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.range = function() {
          if (!arguments.length) {
            return range4;
          }
          range4 = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        return base2;
      };
      var bufferBuilder = function() {
        var attributes = {};
        var uniforms = {};
        var elementIndices2 = null;
        var bufferBuilder2 = function bufferBuilder3(programBuilder2, program) {
          var gl = programBuilder2.context();
          Object.keys(attributes).forEach(function(name) {
            var attribute = attributes[name];
            if (typeof attribute !== "function") {
              throw new Error("Expected an attribute for ".concat(name, ", found ").concat(attribute));
            }
            var location = gl.getAttribLocation(program, name);
            attribute.location(location)(programBuilder2);
          });
          Object.keys(uniforms).forEach(function(name) {
            var uniform2 = uniforms[name];
            if (typeof uniform2 !== "function") {
              throw new Error("Expected a uniform for ".concat(name, ", found ").concat(uniform2));
            }
            var location = gl.getUniformLocation(program, name);
            uniform2.location(location)(programBuilder2);
          });
          if (elementIndices2 !== null) {
            elementIndices2(programBuilder2);
          }
        };
        bufferBuilder2.flush = function() {
          Object.values(attributes).forEach(function(attribute) {
            return attribute.clear();
          });
          Object.values(uniforms).forEach(function(uniform2) {
            return uniform2.clear();
          });
          if (elementIndices2 !== null)
            elementIndices2.clear();
        };
        bufferBuilder2.attribute = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (args.length === 1) {
            return attributes[args[0]];
          }
          attributes[args[0]] = args[1];
          return bufferBuilder2;
        };
        bufferBuilder2.uniform = function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          if (args.length === 1) {
            return uniforms[args[0]];
          }
          uniforms[args[0]] = args[1];
          return bufferBuilder2;
        };
        bufferBuilder2.elementIndices = function() {
          if (!arguments.length) {
            return elementIndices2;
          }
          elementIndices2 = arguments.length <= 0 ? void 0 : arguments[0];
          return bufferBuilder2;
        };
        return bufferBuilder2;
      };
      var uniform = function(initialData) {
        var location = -1;
        var data = initialData;
        var dirty = true;
        var build = function build2(programBuilder2) {
          if (!dirty) {
            return;
          }
          var gl = programBuilder2.context();
          if (Array.isArray(data)) {
            switch (data.length) {
              case 1:
                gl.uniform1fv(location, data);
                break;
              case 2:
                gl.uniform2fv(location, data);
                break;
              case 3:
                gl.uniform3fv(location, data);
                break;
              case 4:
                gl.uniform4fv(location, data);
                break;
              default:
                throw new Error("Uniform supports up to 4 elements. ".concat(data.length, " provided."));
            }
          } else {
            gl.uniform1f(location, data);
          }
          dirty = false;
        };
        build.clear = function() {
          dirty = true;
        };
        build.location = function() {
          if (!arguments.length) {
            return location;
          }
          if (location !== (arguments.length <= 0 ? void 0 : arguments[0])) {
            location = arguments.length <= 0 ? void 0 : arguments[0];
            dirty = true;
          }
          return build;
        };
        build.data = function() {
          if (!arguments.length) {
            return data;
          }
          data = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return build;
        };
        return build;
      };
      var drawModes = {
        POINTS: 0,
        LINES: 1,
        LINE_LOOP: 2,
        LINE_STRIP: 3,
        TRIANGLES: 4,
        TRIANGLE_STRIP: 5,
        TRIANGLE_FAN: 6
      };
      var programBuilder = function() {
        var context = null;
        var program = null;
        var vertexShader = null;
        var fragmentShader = null;
        var programVertexShader = null;
        var programFragmentShader = null;
        var mode2 = drawModes.TRIANGLES;
        var subInstanceCount = 0;
        var buffers = bufferBuilder();
        var debug = false;
        var extInstancedArrays = null;
        var dirty = true;
        var pixelRatio = 1;
        var build = function build2(count3) {
          if (context == null) {
            return;
          }
          var vertexShaderSource = vertexShader();
          var fragmentShaderSource = fragmentShader();
          if (newProgram(program, vertexShaderSource, fragmentShaderSource)) {
            program = createProgram(vertexShaderSource, fragmentShaderSource);
            programVertexShader = vertexShaderSource;
            programFragmentShader = fragmentShaderSource;
            dirty = false;
          }
          context.useProgram(program);
          buffers.uniform("uScreen", uniform([context.canvas.width / pixelRatio, context.canvas.height / pixelRatio]));
          buffers(build2, program);
          if (subInstanceCount === 0) {
            if (buffers.elementIndices() == null) {
              context.drawArrays(mode2, 0, count3);
            } else {
              context.drawElements(mode2, count3, context.UNSIGNED_SHORT, 0);
            }
          } else {
            if (buffers.elementIndices() == null) {
              extInstancedArrays.drawArraysInstancedANGLE(mode2, 0, subInstanceCount, count3);
            } else {
              var elementIndicesLength = buffers.elementIndices().data().length;
              if (subInstanceCount !== elementIndicesLength) {
                throw new Error("Expected elementIndices length ".concat(elementIndicesLength) + " to match subInstanceCount ".concat(subInstanceCount, "."));
              }
              extInstancedArrays.drawElementsInstancedANGLE(mode2, subInstanceCount, context.UNSIGNED_SHORT, 0, count3);
            }
          }
        };
        build.extInstancedArrays = function() {
          return extInstancedArrays;
        };
        build.context = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (!args.length) {
            return context;
          }
          if (args[0] == null || args[0] !== context) {
            buffers.flush();
            dirty = true;
          }
          if (args[0] != null && args[0] !== context) {
            extInstancedArrays = args[0].getExtension("ANGLE_instanced_arrays");
          }
          context = args[0];
          return build;
        };
        build.buffers = function() {
          if (!arguments.length) {
            return buffers;
          }
          buffers = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        build.vertexShader = function() {
          if (!arguments.length) {
            return vertexShader;
          }
          vertexShader = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        build.fragmentShader = function() {
          if (!arguments.length) {
            return fragmentShader;
          }
          fragmentShader = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        build.mode = function() {
          if (!arguments.length) {
            return mode2;
          }
          mode2 = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        build.subInstanceCount = function() {
          if (!arguments.length) {
            return subInstanceCount;
          }
          subInstanceCount = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        build.debug = function() {
          if (!arguments.length) {
            return debug;
          }
          debug = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        build.pixelRatio = function() {
          if (!arguments.length) {
            return pixelRatio;
          }
          pixelRatio = arguments.length <= 0 ? void 0 : arguments[0];
          return build;
        };
        return build;
        function newProgram(program2, vertexShader2, fragmentShader2) {
          if (!program2 || dirty) {
            return true;
          }
          return vertexShader2 !== programVertexShader || fragmentShader2 !== programFragmentShader;
        }
        function createProgram(vertexShaderSource, fragmentShaderSource) {
          var vertexShader2 = loadShader(vertexShaderSource, context.VERTEX_SHADER);
          var fragmentShader2 = loadShader(fragmentShaderSource, context.FRAGMENT_SHADER);
          var program2 = context.createProgram();
          context.attachShader(program2, vertexShader2);
          context.attachShader(program2, fragmentShader2);
          context.linkProgram(program2);
          if (debug && !context.getProgramParameter(program2, context.LINK_STATUS)) {
            var message = context.getProgramInfoLog(program2);
            context.deleteProgram(program2);
            throw new Error("Failed to link program : ".concat(message, "\n            Vertex Shader : ").concat(vertexShaderSource, "\n            Fragment Shader : ").concat(fragmentShaderSource));
          }
          return program2;
        }
        function loadShader(source, type2) {
          var shader = context.createShader(type2);
          context.shaderSource(shader, source);
          context.compileShader(shader);
          if (debug && !context.getShaderParameter(shader, context.COMPILE_STATUS)) {
            var message = context.getShaderInfoLog(shader);
            context.deleteShader(shader);
            throw new Error("Failed to compile shader : ".concat(message, "\n            Shader : ").concat(source));
          }
          return shader;
        }
      };
      var shaderBuilder = function(base2) {
        var shaderHeaders = [];
        var shaderBodies = [];
        var build = function build2() {
          return base2(shaderHeaders.join("\n"), shaderBodies.join("\n"));
        };
        function append(array6, element2) {
          array6.push(element2);
        }
        function insert(array6, element2, before) {
          var beforeIndex = array6.indexOf(before);
          array6.splice(beforeIndex >= 0 ? beforeIndex : array6.length, 0, element2);
        }
        function appendIfNotExists(array6, element2) {
          var elementIndex = array6.indexOf(element2);
          if (elementIndex === -1) {
            array6.push(element2);
          }
        }
        build.appendHeader = function(header) {
          append(shaderHeaders, header);
          return build;
        };
        build.insertHeader = function(header, before) {
          insert(shaderHeaders, header, before);
          return build;
        };
        build.appendHeaderIfNotExists = function(header) {
          appendIfNotExists(shaderHeaders, header);
          return build;
        };
        build.appendBody = function(body) {
          append(shaderBodies, body);
          return build;
        };
        build.insertBody = function(body, before) {
          insert(shaderBodies, body, before);
          return build;
        };
        build.appendBodyIfNotExists = function(body) {
          appendIfNotExists(shaderBodies, body);
          return build;
        };
        return build;
      };
      var vertexShaderBase = function vertexShaderBase2(header, body) {
        return "\nprecision mediump float;\nfloat inf = 1.0 / 0.0;\n".concat(header, "\nvoid main() {\n    ").concat(body, "\n}");
      };
      var fragmentShaderBase = function fragmentShaderBase2(header, body) {
        return "\nprecision mediump float;\n".concat(header, "\nvoid main() {\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    ").concat(body, "\n}");
      };
      var fillColor = {
        header: "attribute vec4 aFillColor;\n             varying vec4 vFillColor;",
        body: "vFillColor = aFillColor;"
      };
      var strokeColor = {
        header: "attribute vec4 aStrokeColor;\n             varying vec4 vStrokeColor;",
        body: "vStrokeColor = aStrokeColor;"
      };
      var circle = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = 2.0 * sqrt(aSize / 3.14159);\n        gl_PointSize = vSize + uStrokeWidth + 1.0;\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var star = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = 4.0 * sqrt(aSize / 3.14159);\n        gl_PointSize = vSize + uStrokeWidth + 1.0;\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var wye = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = 3.0 * sqrt(aSize / 3.14159);\n        gl_PointSize = vSize + uStrokeWidth + 1.0;\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var square2 = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = sqrt(aSize);\n        gl_PointSize = vSize + uStrokeWidth + 1.0;\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var diamond = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = sqrt(aSize);\n        gl_PointSize = 2.0 * (vSize + uStrokeWidth + 1.0);\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var triangle = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = sqrt((16.0 * aSize) / (3.0 * sqrt(3.0)));\n        gl_PointSize = vSize + uStrokeWidth + 1.0;\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var cross2 = {
        header: "\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aSize;\n        attribute float aDefined;\n\n        uniform float uStrokeWidth;\n\n        varying float vSize;\n        varying float vStrokeWidthRatio;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vSize = 3.0 * sqrt(aSize / 5.0);\n        vStrokeWidthRatio = uStrokeWidth / (vSize + uStrokeWidth + 1.0);\n        gl_PointSize = vSize + uStrokeWidth + 1.0;\n        gl_Position = vec4(aCrossValue, aMainValue, 0, 1);"
      };
      var candlestick = {
        header: "\n        attribute float aCrossValue;\n        attribute float aBandwidth;\n        attribute float aHighValue;\n        attribute float aOpenValue;\n        attribute float aCloseValue;\n        attribute float aLowValue;\n        attribute vec3 aCorner;\n        attribute float aDefined;\n\n        uniform vec2 uScreen;\n        uniform float uStrokeWidth;\n\n        varying float vColorIndicator;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vColorIndicator = sign(aCloseValue - aOpenValue);\n\n        float isPositiveY = (sign(aCorner.y) + 1.0) / 2.0;\n        float isNotPositiveY = 1.0 - isPositiveY;\n        float isExtremeY = abs(aCorner.y) - 1.0;\n        float isNotExtremeY = 1.0 - isExtremeY;\n        float yValue =\n         (isPositiveY * isExtremeY * aLowValue) +\n         (isPositiveY * isNotExtremeY * aCloseValue) +\n         (isNotPositiveY * isNotExtremeY * aOpenValue) +\n         (isNotPositiveY * isExtremeY * aHighValue);\n\n        float lineWidthXDirection = (isNotExtremeY * aCorner.x) + (isExtremeY * aCorner.z);\n        float lineWidthYDirection = isNotExtremeY * sign(aCloseValue - aOpenValue) * aCorner.y;\n\n        float bandwidthModifier = aBandwidth * aCorner.x / 2.0;\n\n        float xModifier = (uStrokeWidth * lineWidthXDirection / 2.0) + bandwidthModifier;\n        float yModifier = uStrokeWidth * lineWidthYDirection / 2.0;\n\n        gl_Position = vec4(aCrossValue, yValue, 0, 1);"
      };
      var ohlc = {
        header: "\n        attribute float aCrossValue;\n        attribute float aBandwidth;\n        attribute float aHighValue;\n        attribute float aOpenValue;\n        attribute float aCloseValue;\n        attribute float aLowValue;\n        attribute vec3 aCorner;\n        attribute float aDefined;\n\n        uniform vec2 uScreen;\n        uniform float uStrokeWidth;\n\n        varying float vColorIndicator;\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        vColorIndicator = sign(aCloseValue - aOpenValue);\n\n        float isPositiveY = (sign(aCorner.y) + 1.0) / 2.0;\n        float isNotPositiveY = 1.0 - isPositiveY;\n        float isExtremeY = abs(aCorner.y) - 1.0;\n        float isNotExtremeY = 1.0 - isExtremeY;\n        float yValue =\n            (isPositiveY * isExtremeY * aLowValue) +\n            (isPositiveY * isNotExtremeY * aCloseValue) +\n            (isNotPositiveY * isNotExtremeY * aOpenValue) +\n            (isNotPositiveY * isExtremeY * aHighValue);\n\n        float lineWidthXDirection = isExtremeY * aCorner.z;\n        float lineWidthYDirection = isNotExtremeY * aCorner.z;\n\n        float bandwidthModifier = isNotExtremeY * aCorner.x * aBandwidth / 2.0;\n\n        float xModifier = (uStrokeWidth * lineWidthXDirection / 2.0) + bandwidthModifier;\n        float yModifier = uStrokeWidth * lineWidthYDirection / 2.0;\n\n        gl_Position = vec4(aCrossValue, yValue, 0, 1);"
      };
      var bar = {
        header: "\n        attribute float aCrossValue;\n        attribute float aBandwidth;\n        attribute float aMainValue;\n        attribute float aBaseValue;\n        attribute vec2 aCorner;\n        attribute float aDefined;\n\n        uniform vec2 uScreen;\n        uniform float uStrokeWidth;\n\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        float isBaseline = (1.0 - aCorner.y) / 2.0;\n        float yValue = (isBaseline * aBaseValue) + ((1.0 - isBaseline) * aMainValue);\n\n        float xModifier = aCorner.x * (aBandwidth) / 2.0;\n\n        gl_Position = vec4(aCrossValue, yValue, 0, 1);"
      };
      var errorBar = {
        header: "\n        attribute vec3 aCorner;\n        attribute float aCrossValue;\n        attribute float aBandwidth;\n        attribute float aHighValue;\n        attribute float aLowValue;\n        attribute float aDefined;\n\n        uniform vec2 uScreen;\n        uniform float uStrokeWidth;\n\n        varying float vDefined;",
        body: "\n        vDefined = aDefined;\n        float isLow = (aCorner.y + 1.0) / 2.0;\n        float yValue = isLow * aLowValue + (1.0 - isLow) * aHighValue;\n\n        float isEdgeCorner = abs(aCorner.x);\n        float lineWidthXDirection = (1.0 - isEdgeCorner) * aCorner.z;\n        float lineWidthYDirection = isEdgeCorner * aCorner.z;\n\n        gl_Position = vec4(aCrossValue, yValue, 0, 1);\n\n        float xModifier = (uStrokeWidth * lineWidthXDirection) + (aBandwidth * aCorner.x / 2.0);\n        float yModifier = (uStrokeWidth * lineWidthYDirection);"
      };
      var area = {
        header: "\n        attribute vec3 aCorner;\n        attribute float aCrossValue;\n        attribute float aMainValue;\n        attribute float aCrossNextValue;\n        attribute float aMainNextValue;\n        attribute float aBaseValue;\n        attribute float aBaseNextValue;\n        attribute float aDefined;\n        attribute float aDefinedNext;\n\n        varying float vDefined;\n\n        float when_lt(float a, float b) {\n            return max(sign(b - a), 0.0);\n        }\n\n        float and(float a, float b) {\n            return a * b;\n        }",
        body: "\n        vDefined = aDefined * aDefinedNext;\n        gl_Position = vec4(0, 0, 0, 1);\n\n        float hasIntercepted = when_lt((aMainNextValue - aBaseNextValue) * (aMainValue - aBaseValue), 0.0);\n        float useIntercept = and(aCorner.z, hasIntercepted);\n\n        float yGradient = (aMainNextValue - aMainValue) / (aCrossNextValue - aCrossValue);\n        float yConstant = aMainNextValue - (yGradient * aCrossNextValue);\n\n        float y0Gradient = (aBaseNextValue - aBaseValue) / (aCrossNextValue - aCrossValue);\n        float y0Constant = aBaseNextValue - (y0Gradient * aCrossNextValue);\n\n        float denominator = (yGradient - y0Gradient) + step(abs(yGradient - y0Gradient), 0.0);\n        float interceptXValue = (y0Constant - yConstant) / denominator;\n        float interceptYValue = (yGradient * interceptXValue) + yConstant;\n\n        gl_Position = vec4(interceptXValue * useIntercept, interceptYValue * useIntercept, 0, 1);\n\n        gl_Position.x += (1.0 - useIntercept) * ((aCorner.x * aCrossNextValue) + ((1.0 - aCorner.x) * aCrossValue));\n        gl_Position.y += (1.0 - useIntercept) * (1.0 - aCorner.y) * ((aCorner.x * aMainNextValue) + ((1.0 - aCorner.x) * aMainValue));\n        gl_Position.y += (1.0 - useIntercept) * aCorner.y * ((aCorner.x * aBaseNextValue) + ((1.0 - aCorner.x) * aBaseValue));"
      };
      var boxPlot = {
        header: "\n        attribute vec4 aCorner;\n        attribute float aCrossValue;\n        attribute float aBandwidth;\n        attribute float aCapWidth;\n        attribute float aHighValue;\n        attribute float aUpperQuartileValue;\n        attribute float aMedianValue;\n        attribute float aLowerQuartileValue;\n        attribute float aLowValue;\n        attribute float aDefined;\n\n        uniform vec2 uScreen;\n        uniform float uStrokeWidth;\n\n        varying float vDefined;\n    ",
        body: "\n        vDefined = aDefined;\n        float isExtremeY = sign(abs(aCorner.y) - 2.0) + 1.0;\n        float isNotExtremeY = 1.0 - isExtremeY;\n\n        float isNonZeroY = abs(sign(aCorner.y));\n        float isZeroY = 1.0 - isNonZeroY;\n\n        float isQuartileY = isNotExtremeY * isNonZeroY;\n\n        float isPositiveY = (sign(aCorner.y + 0.5) + 1.0) / 2.0;\n        float isNegativeY = 1.0 - isPositiveY;\n\n        float yValue =\n          (isExtremeY * isNegativeY) * aHighValue +\n          (isQuartileY * isNegativeY) * aUpperQuartileValue +\n          isZeroY * aMedianValue +\n          (isQuartileY * isPositiveY) * aLowerQuartileValue +\n          (isExtremeY * isPositiveY) * aLowValue;\n\n        gl_Position = vec4(aCrossValue, yValue, 0, 1);\n\n        float isHorizontal = aCorner.w;\n        float isVertical = 1.0 - isHorizontal;\n\n        float xDisplacement = aCorner.x * (isExtremeY * aCapWidth + isNotExtremeY * aBandwidth) / 2.0;\n\n        float xModifier = (isVertical * uStrokeWidth * aCorner.z / 2.0) + xDisplacement;\n        float yModifier = isHorizontal * uStrokeWidth * aCorner.z / 2.0;"
      };
      var circle$1 = {
        header: "\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        float distance = length(2.0 * gl_PointCoord - 1.0);\n        float canStroke = smoothstep(vSize - 2.0, vSize, distance * vSize);\n        if (distance > 1.0 || vDefined < 0.5) {\n            discard;\n            return;\n        }"
      };
      var star$1 = {
        header: "\n        varying float vSize;\n        varying float vDefined;\n\n        // anterior, exterior angles\n        float an = 0.628319;\n        vec2 acs = vec2(0.809017, 0.587786); // (cos, sin)\n        float en = 0.952000;\n        vec2 ecs = vec2(0.580055, 0.814577);\n    ",
        body: "\n        float canFill = 1.0;\n\n        vec2 p = 2.0 * gl_PointCoord - 1.0;\n        p.y *= -1.0;\n\n        // sector\n        float bn = mod(atan(p.x, p.y), 2.0 * an) - an;\n        p = length(p) * vec2(cos(bn), abs(sin(bn)));\n\n        p -= acs;\n        p += ecs * clamp(-dot(p, ecs), 0.0, acs.y / ecs.y);\n        float d = length(p) * sign(p.x);\n\n        float distance = 1.0 + d;\n        float canStroke = smoothstep(vSize - 2.0, vSize, distance * vSize);\n        if (distance > 1.0 || vDefined < 0.5) {\n            discard;\n            return;\n        }"
      };
      var wye$1 = {
        header: "\n        varying float vSize;\n        varying float vDefined;\n    ",
        body: "\n        float canFill = 1.0;\n\n        vec2 p = 2.0 * gl_PointCoord - 1.0;\n        p.y *= -1.0;\n\n        // sector\n        float an = 3.141593 / 3.0;\n        float bn = mod(atan(p.x, p.y), 2.0 * an) - an;\n        p = length(p) * vec2(cos(bn), abs(sin(bn)));\n\n        // box\n        vec2 d = abs(p) - vec2(0.9, 0.35);\n        float sdf = length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n\n        float distance = 1.0 + sdf;\n        float canStroke = smoothstep(vSize - 2.0, vSize, distance * vSize);\n        if (distance > 1.0 || vDefined < 0.5) {\n            discard;\n            return;\n        }"
      };
      var square$1 = {
        header: "\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        if (vDefined < 0.5) {\n            discard;\n        }\n        vec2 pointCoordTransform = 2.0 * gl_PointCoord - 1.0;\n        float distance = max(abs(pointCoordTransform.x), abs(pointCoordTransform.y));\n        float canStroke = smoothstep(vSize - 2.0, vSize, distance * vSize);"
      };
      var diamond$1 = {
        header: "\n        varying float vSize;\n        varying float vDefined;\n        float a = 0.6;\n        float b = 1.0;\n    ",
        body: "\n        if (vDefined < 0.5) {\n            discard;\n        }\n\n        vec2 pointCoordTransform = 2.0 * gl_PointCoord - 1.0;\n\n        float x = abs(pointCoordTransform.x);\n        float y = abs(pointCoordTransform.y);\n\n        float X = (a * b * x) / (a * y + b * x);\n        float Y = (a * b * y) / (a * y + b * x);\n\n        float distance = length(vec2(x, y)) / length(vec2(X, Y));\n\n        if (distance > 1.0) {\n            discard;\n        }\n    "
      };
      var triangle$1 = {
        header: "\n        varying float vSize;\n        varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        vec2 pointCoordTransform = 2.0 * gl_PointCoord - 1.0;\n        float topEdgesDistance = abs(pointCoordTransform.x) - ((pointCoordTransform.y - 0.6) / sqrt(3.0));\n        float bottomEdgeDistance = pointCoordTransform.y + 0.5;\n        float distance = max(topEdgesDistance, bottomEdgeDistance);\n        float canStroke = smoothstep(vSize - 2.0, vSize, distance * vSize);\n        if (distance > 1.0 || vDefined < 0.5) {\n            discard;\n        }"
      };
      var cross$1 = {
        header: "\n        varying float vSize;\n        varying float vStrokeWidthRatio;\n        varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        vec2 pointCoordTransform = 2.0 * gl_PointCoord - 1.0;\n        float innerCornerDistance = min(abs(pointCoordTransform.x), abs(pointCoordTransform.y)) + 0.66 - vStrokeWidthRatio;\n        float outerEdgeDistance = max(abs(pointCoordTransform.x), abs(pointCoordTransform.y));\n        float distance = max(innerCornerDistance, outerEdgeDistance);\n        float canStroke = smoothstep(vSize - 2.0, vSize, distance * vSize);\n        if (distance > 1.0 || vDefined < 0.5) {\n            discard;\n        }"
      };
      var candlestick$1 = {
        header: "\n        varying float vColorIndicator;\n        varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        float canStroke = 0.0;\n        if (vDefined < 0.5) {\n            discard;\n        }\n        gl_FragColor = vec4(0.4, 0.8, 0, 1);\n        if (vColorIndicator < 0.0) {\n            gl_FragColor = vec4(0.8, 0.4, 0, 1);\n        }"
      };
      var ohlc$1 = {
        header: "\n        varying float vColorIndicator;\n        varying float vDefined;",
        body: "\n        float canFill = 0.0;\n        float canStroke = 1.0;\n        if (vDefined < 0.5) {\n            discard;\n        }\n        gl_FragColor = vec4(0.4, 0.8, 0, 1);\n        if (vColorIndicator < 0.0) {\n            gl_FragColor = vec4(0.8, 0.4, 0, 1);\n        }"
      };
      var area$1 = {
        header: "\n        varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        float canStroke = 0.0;\n        if (vDefined < 0.5) {\n            discard;\n        }\n        gl_FragColor = vec4(0.86, 0.86, 0.86, 1);"
      };
      var boxPlot$1 = {
        header: "\n        varying float vDefined;\n    ",
        body: "\n        float canFill = 0.0;\n        float canStroke = 1.0;\n\n        if (vDefined < 0.5) {\n            discard;\n        }"
      };
      var errorBar$1 = {
        header: "varying float vDefined;",
        body: "\n        float canFill = 0.0;\n        float canStroke = 1.0;\n        if (vDefined < 0.5) {\n            discard;\n        }"
      };
      var bar$1 = {
        header: "varying float vDefined;",
        body: "\n        float canFill = 1.0;\n        float canStroke = 0.0;\n\n        gl_FragColor = vec4(0.60, 0.60, 0.60, 1.0);\n\n        if (vDefined < 0.5) {\n            discard;\n        }"
      };
      var fillColor$1 = {
        header: "varying vec4 vFillColor;",
        body: "gl_FragColor = (canFill * vFillColor) + ((1.0 - canFill) * gl_FragColor);"
      };
      var strokeColor$1 = {
        header: "varying vec4 vStrokeColor;",
        body: "gl_FragColor = (canStroke * vStrokeColor) + ((1.0 - canStroke) * gl_FragColor);"
      };
      var areaShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(area.header).appendBody(area.body);
        fragmentShader.appendHeader(area$1.header).appendBody(area$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var types = {
        BYTE: 5120,
        UNSIGNED_BYTE: 5121,
        SHORT: 5122,
        UNSIGNED_SHORT: 5123,
        FLOAT: 5126
      };
      function length3(type2) {
        switch (type2) {
          case types.BYTE:
          case types.UNSIGNED_BYTE:
            return 1;
          case types.SHORT:
          case types.UNSIGNED_SHORT:
            return 2;
          case types.FLOAT:
            return 4;
          default:
            throw new Error("Unknown type ".concat(type2));
        }
      }
      function getArrayViewConstructor(type2) {
        switch (type2) {
          case types.BYTE:
            return Int8Array;
          case types.UNSIGNED_BYTE:
            return Uint8Array;
          case types.SHORT:
            return Int16Array;
          case types.UNSIGNED_SHORT:
            return Uint16Array;
          case types.FLOAT:
            return Float32Array;
          default:
            throw new Error("Unknown type ".concat(type2));
        }
      }
      var baseAttributeBuilder = function() {
        var location = -1;
        var buffer = null;
        var size = 1;
        var type2 = types.FLOAT;
        var normalized = false;
        var stride = 0;
        var offset = 0;
        var divisor = null;
        var baseAttribute = function baseAttribute2(programBuilder2) {
          var gl = programBuilder2.context();
          if (buffer == null) {
            buffer = gl.createBuffer();
          }
          gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
          gl.vertexAttribPointer(location, size, type2, normalized, stride, offset);
          gl.enableVertexAttribArray(location);
          var extInstancedArrays = programBuilder2.extInstancedArrays();
          extInstancedArrays.vertexAttribDivisorANGLE(location, divisor != null ? divisor : programBuilder2.subInstanceCount() > 0 ? 1 : 0);
        };
        baseAttribute.location = function() {
          if (!arguments.length) {
            return location;
          }
          location = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.buffer = function() {
          if (!arguments.length) {
            return buffer;
          }
          buffer = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.size = function() {
          if (!arguments.length) {
            return size;
          }
          size = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.type = function() {
          if (!arguments.length) {
            return type2;
          }
          type2 = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.normalized = function() {
          if (!arguments.length) {
            return normalized;
          }
          normalized = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.stride = function() {
          if (!arguments.length) {
            return stride;
          }
          stride = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.offset = function() {
          if (!arguments.length) {
            return offset;
          }
          offset = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        baseAttribute.divisor = function() {
          if (!arguments.length) {
            return divisor;
          }
          divisor = arguments.length <= 0 ? void 0 : arguments[0];
          return baseAttribute;
        };
        return baseAttribute;
      };
      var defaultArrayViewFactory = function() {
        var type2 = types.FLOAT;
        var cachedArray = new Float32Array(0);
        var factory = function factory2(requiredLength) {
          var ArrayType = getArrayViewConstructor(type2);
          if (cachedArray.length > requiredLength) {
            cachedArray = new ArrayType(cachedArray.buffer, 0, requiredLength);
          } else if (cachedArray.length !== requiredLength) {
            cachedArray = new ArrayType(requiredLength);
          }
          return cachedArray;
        };
        factory.type = function() {
          if (!arguments.length) {
            return type2;
          }
          if (type2 !== (arguments.length <= 0 ? void 0 : arguments[0])) {
            type2 = arguments.length <= 0 ? void 0 : arguments[0];
            var ArrayType = getArrayViewConstructor(type2);
            cachedArray = new ArrayType(0);
          }
          return factory;
        };
        return factory;
      };
      var attributeProjector = function() {
        var dirty = true;
        var size = 1;
        var type2 = types.FLOAT;
        var arrayViewFactory = defaultArrayViewFactory();
        var value = function value2(d2, i4) {
          return d2;
        };
        var data = null;
        var projector = function projector2() {
          var length4 = data.length;
          var projectedData = arrayViewFactory.type(type2)(length4 * size);
          if (size > 1) {
            for (var i4 = 0; i4 < length4; i4++) {
              var componentValues = value(data[i4], i4);
              if (componentValues.length !== size) {
                throw new Error("Expected components array of size ".concat(size, ", recieved array with length ").concat(componentValues.length, "."));
              }
              for (var component = 0; component < size; component++) {
                projectedData[i4 * size + component] = componentValues[component];
              }
            }
          } else {
            for (var _i = 0; _i < length4; _i++) {
              var componentValue = value(data[_i], _i);
              if (Array.isArray(componentValue)) {
                throw new Error("Expected a single component value, recieved array with length ".concat(componentValue.length, "."));
              }
              projectedData[_i] = componentValue;
            }
          }
          dirty = false;
          return projectedData;
        };
        projector.dirty = function() {
          return dirty;
        };
        projector.clear = function() {
          dirty = true;
        };
        projector.size = function() {
          if (!arguments.length) {
            return size;
          }
          size = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return projector;
        };
        projector.type = function() {
          if (!arguments.length) {
            return type2;
          }
          type2 = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return projector;
        };
        projector.arrayViewFactory = function() {
          if (!arguments.length) {
            return arrayViewFactory;
          }
          arrayViewFactory = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return projector;
        };
        projector.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return projector;
        };
        projector.data = function() {
          if (!arguments.length) {
            return data;
          }
          data = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return projector;
        };
        return projector;
      };
      var webglAttribute = function() {
        var base2 = baseAttributeBuilder();
        var projector = attributeProjector();
        var attribute = function attribute2(programBuilder2) {
          base2.size(attribute2.size()).type(attribute2.type());
          base2(programBuilder2);
          if (!projector.dirty()) {
            return;
          }
          var projectedData = projector();
          var gl = programBuilder2.context();
          gl.bindBuffer(gl.ARRAY_BUFFER, base2.buffer());
          gl.bufferData(gl.ARRAY_BUFFER, projectedData, gl.DYNAMIC_DRAW);
        };
        attribute.clear = function() {
          base2.buffer(null);
          projector.clear();
        };
        rebind(attribute, base2, "normalized", "location", "divisor");
        rebind(attribute, projector, "data", "value", "size", "type");
        return attribute;
      };
      var rebindCurry = function(target, targetName, source, sourceName) {
        for (var _len = arguments.length, curriedArgs = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
          curriedArgs[_key - 4] = arguments[_key];
        }
        target[targetName] = function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          var result = source[sourceName].apply(source, curriedArgs.concat(args));
          if (result === source) {
            return target;
          }
          return result;
        };
      };
      var webglSeriesArea = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(6);
        var xScale = baseScale();
        var yScale = baseScale();
        var decorate = function decorate2() {
        };
        var cornerAttribute = webglAttribute().divisor(0).size(3).type(types.UNSIGNED_BYTE).data([[0, 0, 0], [0, 1, 0], [1, 1, 1], [0, 0, 1], [1, 0, 0], [1, 1, 0]]);
        program.buffers().attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var shaderBuilder2 = areaShader();
          program.vertexShader(shaderBuilder2.vertex()).fragmentShader(shaderBuilder2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          decorate(program);
          program(numElements - 1);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "crossNextValueAttribute", program.buffers(), "attribute", "aCrossNextValue");
        rebindCurry(draw2, "mainValueAttribute", program.buffers(), "attribute", "aMainValue");
        rebindCurry(draw2, "mainNextValueAttribute", program.buffers(), "attribute", "aMainNextValue");
        rebindCurry(draw2, "baseValueAttribute", program.buffers(), "attribute", "aBaseValue");
        rebindCurry(draw2, "baseNextValueAttribute", program.buffers(), "attribute", "aBaseNextValue");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        rebindCurry(draw2, "definedNextAttribute", program.buffers(), "attribute", "aDefinedNext");
        return draw2;
      };
      var circlePointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(circle.header).appendBody(circle.body);
        fragmentShader.appendHeader(circle$1.header).appendBody(circle$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSeriesPoint = function() {
        var program = programBuilder().mode(drawModes.POINTS);
        var xScale = baseScale();
        var yScale = baseScale();
        var type2 = circlePointShader();
        var decorate = function decorate2() {
        };
        var draw2 = function draw3(numElements) {
          program.vertexShader(type2.vertex()).fragmentShader(type2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          decorate(program);
          program(numElements);
        };
        draw2.type = function() {
          if (!arguments.length) {
            return type2;
          }
          type2 = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "mainValueAttribute", program.buffers(), "attribute", "aMainValue");
        rebindCurry(draw2, "sizeAttribute", program.buffers(), "attribute", "aSize");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        return draw2;
      };
      var lineWidthShader = function() {
        var width = 1;
        var lineWidth = function lineWidth2(program) {
          program.buffers().uniform("uStrokeWidth", uniform(width));
        };
        lineWidth.lineWidth = function() {
          if (!arguments.length) {
            return width;
          }
          width = arguments.length <= 0 ? void 0 : arguments[0];
          return lineWidth;
        };
        return lineWidth;
      };
      var elementIndices = function(initialData) {
        var buffer = null;
        var data = initialData;
        var dirty = true;
        var base2 = function base3(programBuilder2) {
          var gl = programBuilder2.context();
          if (buffer == null) {
            buffer = gl.createBuffer();
          }
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
          if (!dirty) {
            return;
          }
          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.STATIC_DRAW);
          dirty = false;
        };
        base2.clear = function() {
          buffer = null;
          dirty = true;
        };
        base2.data = function() {
          if (!arguments.length) {
            return data;
          }
          dirty = true;
          data = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        return base2;
      };
      var webglSeriesLine = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(6);
        var xScale = baseScale();
        var yScale = baseScale();
        var decorate = function decorate2() {
        };
        var lineWidth = lineWidthShader();
        var cornerAttribute = webglAttribute().divisor(0).size(4).type(types.BYTE).data([[-1, 1, 1, 0], [1, 1, 0, 1], [1, -1, 0, 1], [-1, -1, 1, 0]]);
        program.buffers().elementIndices(elementIndices([0, 1, 2, 2, 3, 0])).attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var vertexShader = shaderBuilder(vertexShaderBase);
          var fragmentShader = shaderBuilder(fragmentShaderBase);
          program.vertexShader(vertexShader).fragmentShader(fragmentShader);
          vertexShader.appendHeader("\n            attribute vec4 aCorner;\n            attribute float aCrossValue;\n            attribute float aCrossNextValue;\n            attribute float aMainValue;\n            attribute float aMainNextValue;\n            attribute float aDefined;\n            attribute float aDefinedNext;\n\n            uniform float uStrokeWidth;\n            uniform vec2 uScreen;\n\n            varying float vLength;\n            varying vec2 vPosition;\n        ");
          vertexShader.appendBody("\n            vec4 value = vec4(aCrossValue, aMainValue, 0.0, 1.0);\n            vec4 nextValue = vec4(aCrossNextValue, aMainNextValue, 0.0, 1.0);\n        ");
          xScale(program, "value", 0);
          xScale(program, "nextValue", 0);
          yScale(program, "value", 1);
          yScale(program, "nextValue", 1);
          vertexShader.appendBody("\n            vec2 position = aCorner[2] * value.xy + aCorner[3] * nextValue.xy;\n\n            vec2 direction = normalize((nextValue.xy - value.xy) * uScreen);\n            vec2 normal = vec2(direction.y, -direction.x);\n            vec2 padding = ((uStrokeWidth / 2.0) / (uScreen / 2.0));\n            \n            padding *= aDefined * aDefinedNext;\n            position += (aCorner[0] * direction + aCorner[1] * normal) * padding;\n\n            gl_Position = vec4(position.x, position.y, 0.0, 1.0);\n\n            vLength = length((nextValue.xy - value.xy) * (uScreen / 2.0));\n            vPosition = aCorner.xy * (uStrokeWidth / 2.0);\n            vPosition.x += aCorner[3] * vLength;\n        ");
          fragmentShader.appendHeader("\n            uniform float uStrokeWidth;\n            varying float vLength;\n            varying vec2 vPosition;\n\n            float canFill = 0.0;\n            float canStroke = 1.0;\n        ");
          fragmentShader.appendBody("\n            vec2 position = vPosition;\n            position.x -= clamp(position.x, 0.0, vLength);\n            float sdf = length(position) - uStrokeWidth / 2.0;\n            if (sdf > 0.5) {\n                discard;\n            }\n        ");
          lineWidth(program);
          decorate(program);
          program(numElements - 1);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebind(draw2, lineWidth, "lineWidth");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "crossNextValueAttribute", program.buffers(), "attribute", "aCrossNextValue");
        rebindCurry(draw2, "mainValueAttribute", program.buffers(), "attribute", "aMainValue");
        rebindCurry(draw2, "mainNextValueAttribute", program.buffers(), "attribute", "aMainNextValue");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        rebindCurry(draw2, "definedNextAttribute", program.buffers(), "attribute", "aDefinedNext");
        return draw2;
      };
      var ohlcShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(ohlc.header).appendBody(ohlc.body);
        fragmentShader.appendHeader(ohlc$1.header).appendBody(ohlc$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSeriesOhlc = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(18);
        var xScale = baseScale();
        var yScale = baseScale();
        var lineWidth = lineWidthShader();
        var decorate = function decorate2() {
        };
        var cornerAttribute = webglAttribute().divisor(0).size(3).type(types.BYTE).data([
          [0, -2, -1],
          [0, -2, 1],
          [0, 2, 1],
          [0, 2, -1],
          [-1, -1, -1],
          [-1, -1, 1],
          [0, -1, 1],
          [0, -1, -1],
          [1, 1, 1],
          [0, 1, 1],
          [0, 1, -1],
          [1, 1, -1]
        ]);
        program.buffers().elementIndices(elementIndices([
          0,
          1,
          2,
          0,
          3,
          2,
          4,
          5,
          6,
          4,
          7,
          6,
          8,
          9,
          10,
          10,
          11,
          8
        ])).attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var shaderBuilder2 = ohlcShader();
          program.vertexShader(shaderBuilder2.vertex()).fragmentShader(shaderBuilder2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          lineWidth(program);
          program.vertexShader().appendBody("\n          gl_Position.x += xModifier / uScreen.x * 2.0;\n          gl_Position.y += yModifier / uScreen.y * 2.0;\n        ");
          decorate(program);
          program(numElements);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebind(draw2, lineWidth, "lineWidth");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "openValueAttribute", program.buffers(), "attribute", "aOpenValue");
        rebindCurry(draw2, "highValueAttribute", program.buffers(), "attribute", "aHighValue");
        rebindCurry(draw2, "lowValueAttribute", program.buffers(), "attribute", "aLowValue");
        rebindCurry(draw2, "closeValueAttribute", program.buffers(), "attribute", "aCloseValue");
        rebindCurry(draw2, "bandwidthAttribute", program.buffers(), "attribute", "aBandwidth");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        return draw2;
      };
      var barShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(bar.header).appendBody(bar.body);
        fragmentShader.appendHeader(bar$1.header).appendBody(bar$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSeriesBar = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(6);
        var xScale = baseScale();
        var yScale = baseScale();
        var decorate = function decorate2() {
        };
        var cornerAttribute = webglAttribute().divisor(0).size(2).type(types.BYTE).data([[-1, -1], [1, 1], [-1, 1], [1, -1]]);
        program.buffers().elementIndices(elementIndices([0, 1, 2, 0, 1, 3])).attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var shaderBuilder2 = barShader();
          program.vertexShader(shaderBuilder2.vertex()).fragmentShader(shaderBuilder2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          program.vertexShader().appendBody("\n            gl_Position.x += xModifier / uScreen.x * 2.0;\n        ");
          decorate(program);
          program(numElements);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "mainValueAttribute", program.buffers(), "attribute", "aMainValue");
        rebindCurry(draw2, "baseValueAttribute", program.buffers(), "attribute", "aBaseValue");
        rebindCurry(draw2, "bandwidthAttribute", program.buffers(), "attribute", "aBandwidth");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        return draw2;
      };
      var errorBarShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(errorBar.header).appendBody(errorBar.body);
        fragmentShader.appendHeader(errorBar$1.header).appendBody(errorBar$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSeriesErrorBar = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(18);
        var xScale = baseScale();
        var yScale = baseScale();
        var decorate = function decorate2() {
        };
        var lineWidth = lineWidthShader();
        var cornerAttribute = webglAttribute().divisor(0).size(3).type(types.BYTE).data([
          [0, 1, 1],
          [0, 1, -1],
          [0, -1, -1],
          [0, -1, 1],
          [1, -1, 1],
          [1, -1, -1],
          [-1, -1, -1],
          [-1, -1, 1],
          [-1, 1, -1],
          [-1, 1, 1],
          [1, 1, 1],
          [1, 1, -1]
        ]);
        program.buffers().elementIndices(elementIndices([
          0,
          1,
          2,
          0,
          3,
          2,
          4,
          5,
          6,
          4,
          7,
          6,
          8,
          9,
          10,
          8,
          11,
          10
        ])).attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var shaderBuilder2 = errorBarShader();
          program.vertexShader(shaderBuilder2.vertex()).fragmentShader(shaderBuilder2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          lineWidth(program);
          program.vertexShader().appendBody("\n                gl_Position.x += xModifier / uScreen.x * 2.0;\n                gl_Position.y += yModifier / uScreen.y * 2.0;\n            ");
          decorate(program);
          program(numElements);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebind(draw2, lineWidth, "lineWidth");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "highValueAttribute", program.buffers(), "attribute", "aHighValue");
        rebindCurry(draw2, "lowValueAttribute", program.buffers(), "attribute", "aLowValue");
        rebindCurry(draw2, "bandwidthAttribute", program.buffers(), "attribute", "aBandwidth");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        return draw2;
      };
      var candlestickShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(candlestick.header).appendBody(candlestick.body);
        fragmentShader.appendHeader(candlestick$1.header).appendBody(candlestick$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSeriesCandlestick = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(12);
        var xScale = baseScale();
        var yScale = baseScale();
        var lineWidth = lineWidthShader();
        var decorate = function decorate2() {
        };
        var cornerAttribute = webglAttribute().divisor(0).size(3).type(types.BYTE).data([
          [0, 2, 1],
          [0, 2, -1],
          [0, -2, -1],
          [0, -2, 1],
          [1, -1, 0],
          [-1, -1, 0],
          [-1, 1, 0],
          [1, 1, 0]
        ]);
        program.buffers().elementIndices(elementIndices([
          0,
          1,
          2,
          0,
          3,
          2,
          4,
          5,
          6,
          4,
          7,
          6
        ])).attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var shaderBuilder2 = candlestickShader();
          program.vertexShader(shaderBuilder2.vertex()).fragmentShader(shaderBuilder2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          lineWidth(program);
          program.vertexShader().appendBody("\n          gl_Position.x += xModifier / uScreen.x * 2.0;\n          gl_Position.y += yModifier / uScreen.y * 2.0;\n        ");
          decorate(program);
          program(numElements);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebind(draw2, lineWidth, "lineWidth");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "openValueAttribute", program.buffers(), "attribute", "aOpenValue");
        rebindCurry(draw2, "highValueAttribute", program.buffers(), "attribute", "aHighValue");
        rebindCurry(draw2, "lowValueAttribute", program.buffers(), "attribute", "aLowValue");
        rebindCurry(draw2, "closeValueAttribute", program.buffers(), "attribute", "aCloseValue");
        rebindCurry(draw2, "bandwidthAttribute", program.buffers(), "attribute", "aBandwidth");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        return draw2;
      };
      var boxPlotShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(boxPlot.header).appendBody(boxPlot.body);
        fragmentShader.appendHeader(boxPlot$1.header).appendBody(boxPlot$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSeriesBoxPlot = function() {
        var program = programBuilder().mode(drawModes.TRIANGLES).subInstanceCount(54);
        var xScale = baseScale();
        var yScale = baseScale();
        var decorate = function decorate2() {
        };
        var lineWidth = lineWidthShader();
        var cornerAttribute = webglAttribute().divisor(0).size(4).type(types.BYTE).data([
          [-1, -2, -1, 1],
          [1, -2, -1, 1],
          [1, -2, 1, 1],
          [-1, -2, 1, 1],
          [0, -2, -1, 0],
          [0, -2, 1, 0],
          [0, -1, 1, 0],
          [0, -1, -1, 0],
          [-1, -1, -1, 1],
          [1, -1, -1, 1],
          [1, -1, 1, 1],
          [-1, -1, 1, 1],
          [-1, 0, -1, 1],
          [1, 0, -1, 1],
          [1, 0, 1, 1],
          [-1, 0, 1, 1],
          [-1, 1, -1, 1],
          [1, 1, -1, 1],
          [1, 1, 1, 1],
          [-1, 1, 1, 1],
          [-1, -1, -1, 0],
          [-1, -1, 1, 0],
          [-1, 1, 1, 0],
          [-1, 1, -1, 0],
          [1, -1, -1, 0],
          [1, -1, 1, 0],
          [1, 1, 1, 0],
          [1, 1, -1, 0],
          [0, 2, -1, 0],
          [0, 2, 1, 0],
          [0, 1, 1, 0],
          [0, 1, -1, 0],
          [-1, 2, -1, 1],
          [1, 2, -1, 1],
          [1, 2, 1, 1],
          [-1, 2, 1, 1]
        ]);
        program.buffers().elementIndices(elementIndices([
          0,
          1,
          2,
          0,
          2,
          3,
          4,
          5,
          6,
          4,
          6,
          7,
          8,
          9,
          10,
          8,
          10,
          11,
          12,
          13,
          14,
          12,
          14,
          15,
          16,
          17,
          18,
          16,
          18,
          19,
          20,
          21,
          22,
          20,
          22,
          23,
          24,
          25,
          26,
          24,
          26,
          27,
          28,
          29,
          30,
          28,
          30,
          31,
          32,
          33,
          34,
          32,
          34,
          35
        ])).attribute("aCorner", cornerAttribute);
        var draw2 = function draw3(numElements) {
          var shaderBuilder2 = boxPlotShader();
          program.vertexShader(shaderBuilder2.vertex()).fragmentShader(shaderBuilder2.fragment());
          xScale(program, "gl_Position", 0);
          yScale(program, "gl_Position", 1);
          lineWidth(program);
          program.vertexShader().appendBody("\n            gl_Position.x += xModifier / uScreen.x * 2.0;\n            gl_Position.y += yModifier / uScreen.y * 2.0;\n        ");
          decorate(program);
          program(numElements);
        };
        draw2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        draw2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return draw2;
        };
        rebind(draw2, program, "context", "pixelRatio");
        rebind(draw2, lineWidth, "lineWidth");
        rebindCurry(draw2, "crossValueAttribute", program.buffers(), "attribute", "aCrossValue");
        rebindCurry(draw2, "highValueAttribute", program.buffers(), "attribute", "aHighValue");
        rebindCurry(draw2, "upperQuartileValueAttribute", program.buffers(), "attribute", "aUpperQuartileValue");
        rebindCurry(draw2, "medianValueAttribute", program.buffers(), "attribute", "aMedianValue");
        rebindCurry(draw2, "lowerQuartileValueAttribute", program.buffers(), "attribute", "aLowerQuartileValue");
        rebindCurry(draw2, "lowValueAttribute", program.buffers(), "attribute", "aLowValue");
        rebindCurry(draw2, "bandwidthAttribute", program.buffers(), "attribute", "aBandwidth");
        rebindCurry(draw2, "capAttribute", program.buffers(), "attribute", "aCapWidth");
        rebindCurry(draw2, "definedAttribute", program.buffers(), "attribute", "aDefined");
        return draw2;
      };
      var webglAdjacentAttribute = function() {
        var minOffset = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
        var maxOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        if (minOffset > 0 || maxOffset < 0) {
          throw new Error("Offset values (".concat(minOffset, " & ").concat(maxOffset, ") must straddle 0 "));
        }
        var base2 = baseAttributeBuilder();
        var projector = attributeProjector();
        var adjacentAttribute = function adjacentAttribute2(programBuilder2) {
          var elementSize = adjacentAttribute2.size() * length3(adjacentAttribute2.type());
          var bufferOffset = Math.abs(minOffset) * elementSize;
          base2.offset(bufferOffset).size(adjacentAttribute2.size()).type(adjacentAttribute2.type());
          base2(programBuilder2);
          if (!projector.dirty()) {
            return;
          }
          var projectedData = projector();
          var bufferPadding = maxOffset * elementSize;
          var bufferLength = bufferOffset + projectedData.length * length3(adjacentAttribute2.type()) + bufferPadding;
          var gl = programBuilder2.context();
          gl.bindBuffer(gl.ARRAY_BUFFER, base2.buffer());
          gl.bufferData(gl.ARRAY_BUFFER, bufferLength, gl.DYNAMIC_DRAW);
          gl.bufferSubData(gl.ARRAY_BUFFER, bufferOffset, projectedData);
        };
        adjacentAttribute.offset = function(offset) {
          if (minOffset > offset || offset > maxOffset) {
            throw new Error("Requested offset ".concat(offset, " exceeds bounds (").concat(minOffset, " & ").concat(maxOffset, ") "));
          }
          var offsetAttribute = function offsetAttribute2(programBuilder2) {
            base2.offset((offset - minOffset) * adjacentAttribute.size() * length3(adjacentAttribute.type()));
            base2(programBuilder2);
          };
          rebind(offsetAttribute, adjacentAttribute, "clear", "location");
          return offsetAttribute;
        };
        adjacentAttribute.clear = function() {
          base2.buffer(null);
          projector.clear();
        };
        rebind(adjacentAttribute, base2, "normalized", "location", "divisor");
        rebind(adjacentAttribute, projector, "data", "value", "size", "type");
        return adjacentAttribute;
      };
      var linear5 = function() {
        var base2 = baseScale();
        var prefix3 = function prefix4(component) {
          return "linear".concat(component);
        };
        var scale = function scale2(programBuilder2, identifier, component) {
          programBuilder2.vertexShader().appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Offset;")).appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Scale;")).appendBody("".concat(identifier, " = ").concat(identifier, " + ").concat(prefix3(component), "Offset;")).appendBody("".concat(identifier, " = ").concat(identifier, " * ").concat(prefix3(component), "Scale;"));
          var domainSize = base2.domain()[1] - base2.domain()[0];
          var rangeSize = base2.range()[1] - base2.range()[0];
          var translate = base2.range()[0] * (domainSize / rangeSize) - base2.domain()[0];
          var scaleFactor = rangeSize / domainSize;
          var offset = [0, 0, 0, 0];
          var scale3 = [1, 1, 1, 1];
          offset[component] = translate;
          scale3[component] = scaleFactor;
          programBuilder2.buffers().uniform("".concat(prefix3(component), "Offset"), uniform(offset)).uniform("".concat(prefix3(component), "Scale"), uniform(scale3));
        };
        rebindAll6(scale, base2);
        return scale;
      };
      var log3 = function() {
        var glBase = baseScale();
        var base2 = 10;
        function log4(v4, base3) {
          return Math.log10(v4) / Math.log10(base3);
        }
        var prefix3 = function prefix4(component) {
          return "log".concat(component);
        };
        var scale = function scale2(programBuilder2, identifier, component) {
          var logPart = "".concat(prefix3(component), "Offset + (").concat(prefix3(component), "Scale * clamp(log(").concat(identifier, ") / log(").concat(prefix3(component), "Base), -inf, inf))");
          programBuilder2.vertexShader().appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Offset;")).appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Scale;")).appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Include;")).appendHeaderIfNotExists("uniform float ".concat(prefix3(component), "Base;")).appendBody("".concat(identifier, " = (").concat(prefix3(component), "Include * (").concat(logPart, ")) + ((1.0 - ").concat(prefix3(component), "Include) * ").concat(identifier, ");"));
          var domainSize = log4(glBase.domain()[1], base2) - log4(glBase.domain()[0], base2);
          var rangeSize = glBase.range()[1] - glBase.range()[0];
          var scaleFactor = rangeSize / domainSize;
          var translate = glBase.range()[0] - scaleFactor * log4(glBase.domain()[0], base2);
          var offset = [0, 0, 0, 0];
          var scale3 = [0, 0, 0, 0];
          var include2 = [0, 0, 0, 0];
          offset[component] = translate;
          scale3[component] = scaleFactor;
          include2[component] = 1;
          programBuilder2.buffers().uniform("".concat(prefix3(component), "Offset"), uniform(offset)).uniform("".concat(prefix3(component), "Scale"), uniform(scale3)).uniform("".concat(prefix3(component), "Include"), uniform(include2)).uniform("".concat(prefix3(component), "Base"), uniform(base2));
        };
        scale.base = function() {
          if (!arguments.length) {
            return base2;
          }
          base2 = arguments.length <= 0 ? void 0 : arguments[0];
          return scale;
        };
        rebindAll6(scale, glBase);
        return scale;
      };
      var pow3 = function() {
        var base2 = baseScale();
        var exponent = 1;
        function pow4(b3, e3) {
          return Math.sign(b3) * Math.pow(Math.abs(b3), e3);
        }
        var prefix3 = function prefix4(component) {
          return "pow".concat(component);
        };
        var scale = function scale2(programBuilder2, identifier, component) {
          var powPart = "".concat(prefix3(component), "Offset + (").concat(prefix3(component), "Scale * sign(").concat(identifier, ") * pow(abs(").concat(identifier, "), vec4(").concat(prefix3(component), "Exp)))");
          programBuilder2.vertexShader().appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Offset;")).appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Scale;")).appendHeaderIfNotExists("uniform vec4 ".concat(prefix3(component), "Include;")).appendHeaderIfNotExists("uniform float ".concat(prefix3(component), "Exp;")).appendBody("".concat(identifier, " = (").concat(prefix3(component), "Include * (").concat(powPart, ")) + ((1.0 - ").concat(prefix3(component), "Include) * ").concat(identifier, ");"));
          var domainSize = pow4(base2.domain()[1], exponent) - pow4(base2.domain()[0], exponent);
          var rangeSize = base2.range()[1] - base2.range()[0];
          var scaleFactor = rangeSize / domainSize;
          var translate = base2.range()[0] - scaleFactor * pow4(base2.domain()[0], exponent);
          var offset = [0, 0, 0, 0];
          var scale3 = [0, 0, 0, 0];
          var include2 = [0, 0, 0, 0];
          offset[component] = translate;
          scale3[component] = scaleFactor;
          include2[component] = 1;
          programBuilder2.buffers().uniform("".concat(prefix3(component), "Offset"), uniform(offset)).uniform("".concat(prefix3(component), "Scale"), uniform(scale3)).uniform("".concat(prefix3(component), "Include"), uniform(include2)).uniform("".concat(prefix3(component), "Exp"), uniform(exponent));
        };
        scale.exponent = function() {
          if (!arguments.length) {
            return exponent;
          }
          exponent = arguments.length <= 0 ? void 0 : arguments[0];
          return scale;
        };
        rebindAll6(scale, base2);
        return scale;
      };
      var scaleLinearCopy = d3Scale.scaleLinear().copy.toString();
      var scaleLogCopy = d3Scale.scaleLog().copy.toString();
      var scalePowCopy = d3Scale.scalePow().copy.toString();
      var scaleTimeCopy = d3Scale.scaleTime().copy.toString();
      var identity$2 = d3Scale.scaleIdentity();
      var epoch = Date.now();
      var reepoch = function reepoch2(d2) {
        return d2 - epoch;
      };
      var webglScaleMapper = function(scale) {
        switch (scale.copy.toString()) {
          case scaleLinearCopy: {
            return {
              scale: identity$2,
              webglScale: linear5().domain(scale.domain())
            };
          }
          case scaleTimeCopy: {
            return {
              scale: reepoch,
              webglScale: linear5().domain(scale.domain().map(reepoch))
            };
          }
          case scaleLogCopy: {
            return {
              scale: identity$2,
              webglScale: log3().domain(scale.domain()).base(scale.base())
            };
          }
          case scalePowCopy: {
            return {
              scale: identity$2,
              webglScale: pow3().domain(scale.domain()).exponent(scale.exponent())
            };
          }
          default: {
            return {
              scale: scale.copy(),
              webglScale: linear5().domain(scale.range())
            };
          }
        }
      };
      var squarePointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(square2.header).appendBody(square2.body);
        fragmentShader.appendHeader(square$1.header).appendBody(square$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var trianglePointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(triangle.header).appendBody(triangle.body);
        fragmentShader.appendHeader(triangle$1.header).appendBody(triangle$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var crossPointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(cross2.header).appendBody(cross2.body);
        fragmentShader.appendHeader(cross$1.header).appendBody(cross$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var diamondPointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(diamond.header).appendBody(diamond.body);
        fragmentShader.appendHeader(diamond$1.header).appendBody(diamond$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var starPointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(star.header).appendBody(star.body);
        fragmentShader.appendHeader(star$1.header).appendBody(star$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var wyePointShader = function() {
        var vertexShader = shaderBuilder(vertexShaderBase);
        var fragmentShader = shaderBuilder(fragmentShaderBase);
        vertexShader.appendHeader(wye.header).appendBody(wye.body);
        fragmentShader.appendHeader(wye$1.header).appendBody(wye$1.body);
        return {
          vertex: function vertex() {
            return vertexShader;
          },
          fragment: function fragment() {
            return fragmentShader;
          }
        };
      };
      var webglSymbolMapper = function(symbol3) {
        switch (symbol3) {
          case d3Shape.symbolCircle:
            return circlePointShader();
          case d3Shape.symbolSquare:
            return squarePointShader();
          case d3Shape.symbolTriangle:
            return trianglePointShader();
          case d3Shape.symbolCross:
            return crossPointShader();
          case d3Shape.symbolDiamond:
            return diamondPointShader();
          case d3Shape.symbolStar:
            return starPointShader();
          case d3Shape.symbolWye:
            return wyePointShader();
          default:
            throw new Error("Unrecognised symbol: ".concat(symbol3));
        }
      };
      var constantAttribute = function(initialValue) {
        var base2 = baseAttributeBuilder().divisor(1);
        var value = initialValue;
        var dirty = true;
        var constantAttribute2 = function constantAttribute3(programBuilder2) {
          base2(programBuilder2);
          if (!dirty) {
            return;
          }
          if (!Array.isArray(value)) {
            throw new Error("Expected an array, received: ".concat(value));
          }
          if (value.length !== base2.size()) {
            throw new Error("Expected array of length: ".concat(base2.size(), ", recieved array of length: ").concat(value.length));
          }
          var gl = programBuilder2.context();
          gl["vertexAttrib".concat(value.length, "fv")](base2.location(), value);
          gl.disableVertexAttribArray(base2.location());
          dirty = false;
        };
        constantAttribute2.clear = function() {
          dirty = true;
        };
        constantAttribute2.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          dirty = true;
          return constantAttribute2;
        };
        rebind(constantAttribute2, base2, "normalized", "size", "location");
        return constantAttribute2;
      };
      var fillColor$2 = function() {
        var initialValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [0, 0, 0, 1];
        var projectedAttribute = webglAttribute().size(4);
        var value = initialValue;
        var dirty = true;
        var fillColor$22 = function fillColor$23(programBuilder2) {
          programBuilder2.vertexShader().appendHeaderIfNotExists(fillColor.header).appendBodyIfNotExists(fillColor.body);
          programBuilder2.fragmentShader().appendHeaderIfNotExists(fillColor$1.header).appendBodyIfNotExists(fillColor$1.body);
          if (Array.isArray(value)) {
            programBuilder2.buffers().attribute("aFillColor", constantAttribute(value).size(4));
          } else if (typeof value === "function") {
            if (!dirty) {
              return;
            }
            projectedAttribute.value(value);
            programBuilder2.buffers().attribute("aFillColor", projectedAttribute);
          } else {
            throw new Error("Expected value to be an array or function, received ".concat(value));
          }
          dirty = false;
        };
        fillColor$22.value = function() {
          if (!arguments.length) {
            return value;
          }
          if (value !== (arguments.length <= 0 ? void 0 : arguments[0])) {
            value = arguments.length <= 0 ? void 0 : arguments[0];
            dirty = true;
          }
          return fillColor$22;
        };
        rebind(fillColor$22, projectedAttribute, "data");
        return fillColor$22;
      };
      var strokeColor$2 = function() {
        var initialValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [0, 0, 0, 1];
        var projectedAttribute = webglAttribute().size(4);
        var value = initialValue;
        var dirty = true;
        var strokeColor$22 = function strokeColor$23(programBuilder2) {
          programBuilder2.vertexShader().appendHeaderIfNotExists(strokeColor.header).appendBodyIfNotExists(strokeColor.body);
          programBuilder2.fragmentShader().appendHeaderIfNotExists(strokeColor$1.header).appendBodyIfNotExists(strokeColor$1.body);
          if (Array.isArray(value)) {
            programBuilder2.buffers().attribute("aStrokeColor", constantAttribute(value).size(4));
          } else if (typeof value === "function") {
            if (!dirty) {
              return;
            }
            projectedAttribute.value(value);
            programBuilder2.buffers().attribute("aStrokeColor", projectedAttribute);
          } else {
            throw new Error("Expected value to be an array or function, received ".concat(value));
          }
          dirty = false;
        };
        strokeColor$22.value = function() {
          if (!arguments.length) {
            return value;
          }
          if (value !== (arguments.length <= 0 ? void 0 : arguments[0])) {
            value = arguments.length <= 0 ? void 0 : arguments[0];
            dirty = true;
          }
          return strokeColor$22;
        };
        rebind(strokeColor$22, projectedAttribute, "data");
        return strokeColor$22;
      };
      var line = function() {
        var base2 = xyBase();
        var crossValueAttribute = webglAdjacentAttribute(0, 1);
        var crossNextValueAttribute = crossValueAttribute.offset(1);
        var mainValueAttribute = webglAdjacentAttribute(0, 1);
        var mainNextValueAttribute = mainValueAttribute.offset(1);
        var definedAttribute = webglAdjacentAttribute(0, 1).type(types.UNSIGNED_BYTE);
        var definedNextAttribute = definedAttribute.offset(1);
        var draw2 = webglSeriesLine().crossValueAttribute(crossValueAttribute).crossNextValueAttribute(crossNextValueAttribute).mainValueAttribute(mainValueAttribute).mainNextValueAttribute(mainNextValueAttribute).definedAttribute(definedAttribute).definedNextAttribute(definedNextAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var line2 = function line3(data) {
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            definedAttribute.value(function(d2, i4) {
              return base2.defined()(d2, i4);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            if (base2.orient() === "vertical") {
              crossValueAttribute.value(function(d2, i4) {
                return xScale.scale(base2.crossValue()(d2, i4));
              }).data(data);
            } else {
              crossValueAttribute.value(function(d2, i4) {
                return xScale.scale(base2.mainValue()(d2, i4));
              }).data(data);
            }
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            if (base2.orient() === "vertical") {
              mainValueAttribute.value(function(d2, i4) {
                return yScale.scale(base2.mainValue()(d2, i4));
              }).data(data);
            } else {
              mainValueAttribute.value(function(d2, i4) {
                return yScale.scale(base2.crossValue()(d2, i4));
              }).data(data);
            }
          }
          draw2.xScale(xScale.webglScale).yScale(yScale.webglScale).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          draw2(data.length);
        };
        line2.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return line2;
        };
        line2.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return line2;
        };
        rebindAll6(line2, base2, exclude2("baseValue", "bandwidth", "align"));
        rebind(line2, draw2, "context", "lineWidth", "pixelRatio");
        return line2;
      };
      var seriesSvgPoint3 = function() {
        var symbol3 = d3Shape.symbol();
        var base2 = xyBase();
        var join = dataJoin3("g", "point");
        var containerTransform = function containerTransform2(origin) {
          return "translate(" + origin[0] + ", " + origin[1] + ")";
        };
        var point8 = function point9(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          selection3.each(function(data, index2, group3) {
            var filteredData = data.filter(base2.defined());
            var g3 = join(d3Selection.select(group3[index2]), filteredData);
            g3.enter().attr("transform", function(d2, i4) {
              return containerTransform(base2.values(d2, i4).origin);
            }).attr("fill", colors.gray).attr("stroke", colors.black).append("path");
            g3.attr("transform", function(d2, i4) {
              return containerTransform(base2.values(d2, i4).origin);
            }).select("path").attr("d", symbol3);
            base2.decorate()(g3, data, index2);
          });
        };
        rebindAll6(point8, base2, exclude2("baseValue", "bandwidth", "align"));
        rebind(point8, join, "key");
        rebind(point8, symbol3, "type", "size");
        return point8;
      };
      var seriesCanvasPoint = function() {
        var symbol3 = d3Shape.symbol();
        var base2 = xyBase();
        var point8 = function point9(data) {
          var filteredData = data.filter(base2.defined());
          var context = symbol3.context();
          filteredData.forEach(function(d2, i4) {
            context.save();
            var values = base2.values(d2, i4);
            context.translate(values.origin[0], values.origin[1]);
            context.beginPath();
            context.strokeStyle = colors.black;
            context.fillStyle = colors.gray;
            base2.decorate()(context, d2, i4);
            symbol3(d2, i4);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        rebindAll6(point8, base2, exclude2("baseValue", "bandwidth", "align"));
        rebind(point8, symbol3, "size", "type", "context");
        return point8;
      };
      var point7 = function() {
        var base2 = xyBase();
        var size = functor$4(64);
        var type2 = d3Shape.symbolCircle;
        var crossValueAttribute = webglAttribute();
        var mainValueAttribute = webglAttribute();
        var sizeAttribute = webglAttribute().type(types.UNSIGNED_SHORT);
        var definedAttribute = webglAttribute().type(types.UNSIGNED_BYTE);
        var draw2 = webglSeriesPoint().crossValueAttribute(crossValueAttribute).mainValueAttribute(mainValueAttribute).sizeAttribute(sizeAttribute).definedAttribute(definedAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var point8 = function point9(data) {
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            sizeAttribute.value(function(d2, i4) {
              return size(d2, i4);
            }).data(data);
            definedAttribute.value(function(d2, i4) {
              return base2.defined()(d2, i4);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            if (base2.orient() === "vertical") {
              crossValueAttribute.value(function(d2, i4) {
                return xScale.scale(base2.crossValue()(d2, i4));
              }).data(data);
            } else {
              crossValueAttribute.value(function(d2, i4) {
                return xScale.scale(base2.mainValue()(d2, i4));
              }).data(data);
            }
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            if (base2.orient() === "vertical") {
              mainValueAttribute.value(function(d2, i4) {
                return yScale.scale(base2.mainValue()(d2, i4));
              }).data(data);
            } else {
              mainValueAttribute.value(function(d2, i4) {
                return yScale.scale(base2.crossValue()(d2, i4));
              }).data(data);
            }
          }
          draw2.xScale(xScale.webglScale).yScale(yScale.webglScale).type(webglSymbolMapper(type2)).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          draw2(data.length);
        };
        point8.size = function() {
          if (!arguments.length) {
            return size;
          }
          size = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return point8;
        };
        point8.type = function() {
          if (!arguments.length) {
            return type2;
          }
          type2 = arguments.length <= 0 ? void 0 : arguments[0];
          return point8;
        };
        point8.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return point8;
        };
        point8.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return point8;
        };
        rebindAll6(point8, base2, exclude2("baseValue", "bandwidth", "align"));
        rebind(point8, draw2, "context", "pixelRatio");
        return point8;
      };
      var bar$2 = function() {
        var pathGenerator = shapeBar().x(0).y(0);
        var base2 = xyBase();
        var join = dataJoin3("g", "bar");
        var valueAxisDimension = function valueAxisDimension2(generator) {
          return base2.orient() === "vertical" ? generator.height : generator.width;
        };
        var crossAxisDimension = function crossAxisDimension2(generator) {
          return base2.orient() === "vertical" ? generator.width : generator.height;
        };
        var translation = function translation2(origin) {
          return "translate(" + origin[0] + ", " + origin[1] + ")";
        };
        var bar2 = function bar3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          selection3.each(function(data, index2, group3) {
            var orient = base2.orient();
            if (orient !== "vertical" && orient !== "horizontal") {
              throw new Error("The bar series does not support an orientation of " + orient);
            }
            var filteredData = data.filter(base2.defined());
            var projectedData = filteredData.map(base2.values);
            pathGenerator.width(0).height(0);
            if (base2.orient() === "vertical") {
              pathGenerator.verticalAlign("top");
              pathGenerator.horizontalAlign("center");
            } else {
              pathGenerator.horizontalAlign("right");
              pathGenerator.verticalAlign("center");
            }
            var g3 = join(d3Selection.select(group3[index2]), filteredData);
            g3.enter().attr("transform", function(_4, i4) {
              return translation(projectedData[i4].baseOrigin);
            }).attr("class", "bar " + base2.orient()).attr("fill", colors.darkGray).append("path").attr("d", function(d2, i4) {
              crossAxisDimension(pathGenerator)(projectedData[i4].width);
              return pathGenerator([d2]);
            });
            g3.attr("transform", function(_4, i4) {
              return translation(projectedData[i4].origin);
            }).select("path").attr("d", function(d2, i4) {
              crossAxisDimension(pathGenerator)(projectedData[i4].width);
              valueAxisDimension(pathGenerator)(-projectedData[i4].height);
              return pathGenerator([d2]);
            });
            base2.decorate()(g3, filteredData, index2);
          });
        };
        rebindAll6(bar2, base2);
        rebind(bar2, join, "key");
        return bar2;
      };
      var bar$3 = function() {
        var base2 = xyBase();
        var pathGenerator = shapeBar().x(0).y(0);
        var valueAxisDimension = function valueAxisDimension2(generator) {
          return base2.orient() === "vertical" ? generator.height : generator.width;
        };
        var crossAxisDimension = function crossAxisDimension2(generator) {
          return base2.orient() === "vertical" ? generator.width : generator.height;
        };
        var bar2 = function bar3(data) {
          var context = pathGenerator.context();
          var filteredData = data.filter(base2.defined());
          var projectedData = filteredData.map(base2.values);
          if (base2.orient() === "vertical") {
            pathGenerator.verticalAlign("top");
            pathGenerator.horizontalAlign("center");
          } else {
            pathGenerator.horizontalAlign("right");
            pathGenerator.verticalAlign("center");
          }
          projectedData.forEach(function(datum2, i4) {
            context.save();
            context.beginPath();
            context.translate(datum2.origin[0], datum2.origin[1]);
            context.fillStyle = colors.darkGray;
            context.strokeStyle = "transparent";
            base2.decorate()(context, datum2.d, i4);
            valueAxisDimension(pathGenerator)(-datum2.height);
            crossAxisDimension(pathGenerator)(datum2.width);
            pathGenerator([datum2]);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        rebindAll6(bar2, base2);
        rebind(bar2, pathGenerator, "context");
        return bar2;
      };
      var bar$4 = function() {
        var base2 = xyBase();
        var crossValueAttribute = webglAttribute();
        var mainValueAttribute = webglAttribute();
        var baseValueAttribute = webglAttribute();
        var bandwidthAttribute = webglAttribute().type(types.UNSIGNED_SHORT);
        var definedAttribute = webglAttribute().type(types.UNSIGNED_BYTE);
        var draw2 = webglSeriesBar().crossValueAttribute(crossValueAttribute).mainValueAttribute(mainValueAttribute).baseValueAttribute(baseValueAttribute).bandwidthAttribute(bandwidthAttribute).definedAttribute(definedAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var bar2 = function bar3(data) {
          if (base2.orient() !== "vertical") {
            throw new Error("Unsupported orientation ".concat(base2.orient()));
          }
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            bandwidthAttribute.value(function(d2, i4) {
              return base2.bandwidth()(d2, i4);
            }).data(data);
            definedAttribute.value(function(d2, i4) {
              return base2.defined()(d2, i4);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            crossValueAttribute.value(function(d2, i4) {
              return xScale.scale(base2.crossValue()(d2, i4));
            }).data(data);
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            baseValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.baseValue()(d2, i4));
            }).data(data);
            mainValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.mainValue()(d2, i4));
            }).data(data);
          }
          draw2.xScale(xScale.webglScale).yScale(yScale.webglScale).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          draw2(data.length);
        };
        bar2.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return bar2;
        };
        bar2.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return bar2;
        };
        rebindAll6(bar2, base2, exclude2("align"));
        rebind(bar2, draw2, "context", "pixelRatio");
        return bar2;
      };
      var errorBarBase = function() {
        var highValue = function highValue2(d2) {
          return d2.high;
        };
        var lowValue = function lowValue2(d2) {
          return d2.low;
        };
        var crossValue = function crossValue2(d2) {
          return d2.cross;
        };
        var orient = "vertical";
        var align = "center";
        var bandwidth = function bandwidth2() {
          return 5;
        };
        var base2 = createBase({
          decorate: function decorate() {
          },
          defined: function defined$1(d2, i4) {
            return defined(lowValue, highValue, crossValue)(d2, i4);
          },
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity()
        });
        base2.values = function(d2, i4) {
          var width = bandwidth(d2, i4);
          var offset = alignOffset(align, width);
          var xScale = base2.xScale();
          var yScale = base2.yScale();
          if (orient === "vertical") {
            var y3 = yScale(highValue(d2, i4));
            return {
              origin: [xScale(crossValue(d2, i4)) + offset, y3],
              high: 0,
              low: yScale(lowValue(d2, i4)) - y3,
              width
            };
          } else {
            var x4 = xScale(lowValue(d2, i4));
            return {
              origin: [x4, yScale(crossValue(d2, i4)) + offset],
              high: xScale(highValue(d2, i4)) - x4,
              low: 0,
              width
            };
          }
        };
        base2.xValues = function() {
          return orient === "vertical" ? [crossValue] : [highValue, lowValue];
        };
        base2.yValues = function() {
          return orient !== "vertical" ? [crossValue] : [highValue, lowValue];
        };
        base2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.lowValue = function() {
          if (!arguments.length) {
            return lowValue;
          }
          lowValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.highValue = function() {
          if (!arguments.length) {
            return highValue;
          }
          highValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.crossValue = function() {
          if (!arguments.length) {
            return crossValue;
          }
          crossValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.bandwidth = function() {
          if (!arguments.length) {
            return bandwidth;
          }
          bandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.align = function() {
          if (!arguments.length) {
            return align;
          }
          align = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        return base2;
      };
      var errorBar$2 = function() {
        var base2 = errorBarBase();
        var join = dataJoin3("g", "error-bar");
        var pathGenerator = shapeErrorBar().value(0);
        var propagateTransition = function propagateTransition2(maybeTransition) {
          return function(selection3) {
            return isTransition(maybeTransition) ? selection3.transition(maybeTransition) : selection3;
          };
        };
        var containerTranslation = function containerTranslation2(values) {
          return "translate(" + values.origin[0] + ", " + values.origin[1] + ")";
        };
        var errorBar2 = function errorBar3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          var transitionPropagator = propagateTransition(selection3);
          selection3.each(function(data, index2, group3) {
            var filteredData = data.filter(base2.defined());
            var projectedData = filteredData.map(base2.values);
            var g3 = join(d3Selection.select(group3[index2]), filteredData);
            g3.enter().attr("stroke", colors.black).attr("fill", colors.gray).attr("transform", function(d2, i4) {
              return containerTranslation(base2.values(d2, i4)) + " scale(1e-6, 1)";
            }).append("path");
            pathGenerator.orient(base2.orient());
            g3.each(function(d2, i4, g4) {
              var values = projectedData[i4];
              pathGenerator.high(values.high).low(values.low).width(values.width);
              transitionPropagator(d3Selection.select(g4[i4])).attr("transform", containerTranslation(values) + " scale(1)").select("path").attr("d", pathGenerator([d2]));
            });
            base2.decorate()(g3, data, index2);
          });
        };
        rebindAll6(errorBar2, base2);
        rebind(errorBar2, join, "key");
        return errorBar2;
      };
      var errorBar$3 = function() {
        var base2 = errorBarBase();
        var pathGenerator = shapeErrorBar().value(0);
        var errorBar2 = function errorBar3(data) {
          var filteredData = data.filter(base2.defined());
          var context = pathGenerator.context();
          pathGenerator.orient(base2.orient());
          filteredData.forEach(function(d2, i4) {
            context.save();
            var values = base2.values(d2, i4);
            context.translate(values.origin[0], values.origin[1]);
            context.beginPath();
            context.strokeStyle = colors.black;
            context.fillStyle = colors.gray;
            base2.decorate()(context, d2, i4);
            pathGenerator.high(values.high).width(values.width).low(values.low)([d2]);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        rebindAll6(errorBar2, base2);
        rebind(errorBar2, pathGenerator, "context");
        return errorBar2;
      };
      var errorBar$4 = function() {
        var base2 = errorBarBase();
        var crossValueAttribute = webglAttribute();
        var highValueAttribute = webglAttribute();
        var lowValueAttribute = webglAttribute();
        var bandwidthAttribute = webglAttribute().type(types.UNSIGNED_SHORT);
        var definedAttribute = webglAttribute().type(types.UNSIGNED_BYTE);
        var draw2 = webglSeriesErrorBar().crossValueAttribute(crossValueAttribute).highValueAttribute(highValueAttribute).lowValueAttribute(lowValueAttribute).bandwidthAttribute(bandwidthAttribute).definedAttribute(definedAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var errorBar2 = function errorBar3(data) {
          if (base2.orient() !== "vertical") {
            throw new Error("Unsupported orientation ".concat(base2.orient()));
          }
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            bandwidthAttribute.value(function(d2, i4) {
              return base2.bandwidth()(d2, i4);
            }).data(data);
            definedAttribute.value(function(d2, i4) {
              return base2.defined()(d2, i4);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            crossValueAttribute.value(function(d2, i4) {
              return xScale.scale(base2.crossValue()(d2, i4));
            }).data(data);
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            highValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.highValue()(d2, i4));
            }).data(data);
            lowValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.lowValue()(d2, i4));
            }).data(data);
          }
          draw2.xScale(xScale.webglScale).yScale(yScale.webglScale).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          draw2(data.length);
        };
        errorBar2.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return errorBar2;
        };
        errorBar2.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return errorBar2;
        };
        rebindAll6(errorBar2, base2, exclude2("align"));
        rebind(errorBar2, draw2, "context", "lineWidth", "pixelRatio");
        return errorBar2;
      };
      var area$2 = function() {
        var base2 = xyBase();
        var areaData = d3Shape.area();
        var join = dataJoin3("path", "area");
        var area2 = function area3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          areaData.defined(base2.defined());
          selection3.each(function(data, index2, group3) {
            var projectedData = data.map(base2.values);
            areaData.x(function(_4, i4) {
              return projectedData[i4].transposedX;
            }).y(function(_4, i4) {
              return projectedData[i4].transposedY;
            });
            var valueComponent = base2.orient() === "vertical" ? "y" : "x";
            areaData[valueComponent + "0"](function(_4, i4) {
              return projectedData[i4].y0;
            });
            areaData[valueComponent + "1"](function(_4, i4) {
              return projectedData[i4].y;
            });
            var path2 = join(d3Selection.select(group3[index2]), [data]);
            path2.enter().attr("fill", colors.gray);
            path2.attr("d", areaData);
            base2.decorate()(path2, data, index2);
          });
        };
        rebindAll6(area2, base2, exclude2("bandwidth", "align"));
        rebind(area2, join, "key");
        rebind(area2, areaData, "curve");
        return area2;
      };
      var area$3 = function() {
        var base2 = xyBase();
        var areaData = d3Shape.area();
        var area2 = function area3(data) {
          var context = areaData.context();
          areaData.defined(base2.defined());
          var projectedData = data.map(base2.values);
          areaData.x(function(_4, i4) {
            return projectedData[i4].transposedX;
          }).y(function(_4, i4) {
            return projectedData[i4].transposedY;
          });
          var valueComponent = base2.orient() === "vertical" ? "y" : "x";
          areaData[valueComponent + "0"](function(_4, i4) {
            return projectedData[i4].y0;
          });
          areaData[valueComponent + "1"](function(_4, i4) {
            return projectedData[i4].y;
          });
          context.beginPath();
          context.fillStyle = colors.gray;
          context.strokeStyle = "transparent";
          base2.decorate()(context, data);
          areaData(data);
          context.fill();
          context.stroke();
          context.closePath();
        };
        rebindAll6(area2, base2, exclude2("bandwidth", "align"));
        rebind(area2, areaData, "curve", "context");
        return area2;
      };
      var area$4 = function() {
        var base2 = xyBase();
        var crossValueAttribute = webglAdjacentAttribute(0, 1);
        var crossNextValueAttribute = crossValueAttribute.offset(1);
        var mainValueAttribute = webglAdjacentAttribute(0, 1);
        var mainNextValueAttribute = mainValueAttribute.offset(1);
        var baseValueAttribute = webglAdjacentAttribute(0, 1);
        var baseNextValueAttribute = baseValueAttribute.offset(1);
        var definedAttribute = webglAdjacentAttribute(0, 1).type(types.UNSIGNED_BYTE);
        var definedNextAttribute = definedAttribute.offset(1);
        var draw2 = webglSeriesArea().crossValueAttribute(crossValueAttribute).crossNextValueAttribute(crossNextValueAttribute).mainValueAttribute(mainValueAttribute).mainNextValueAttribute(mainNextValueAttribute).baseValueAttribute(baseValueAttribute).baseNextValueAttribute(baseNextValueAttribute).definedAttribute(definedAttribute).definedNextAttribute(definedNextAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var area2 = function area3(data) {
          if (base2.orient() !== "vertical") {
            throw new Error("Unsupported orientation ".concat(base2.orient()));
          }
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            definedAttribute.value(function(d2, i4) {
              return base2.defined()(d2, i4);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            crossValueAttribute.value(function(d2, i4) {
              return xScale.scale(base2.crossValue()(d2, i4));
            }).data(data);
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            baseValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.baseValue()(d2, i4));
            }).data(data);
            mainValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.mainValue()(d2, i4));
            }).data(data);
          }
          draw2.xScale(xScale.webglScale).yScale(yScale.webglScale).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          draw2(data.length);
        };
        area2.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return area2;
        };
        area2.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return area2;
        };
        rebindAll6(area2, base2, exclude2("bandwidth", "align"));
        rebind(area2, draw2, "context", "pixelRatio");
        return area2;
      };
      var ohlcBase = function() {
        var base2;
        var crossValue = function crossValue2(d2) {
          return d2.date;
        };
        var openValue = function openValue2(d2) {
          return d2.open;
        };
        var highValue = function highValue2(d2) {
          return d2.high;
        };
        var lowValue = function lowValue2(d2) {
          return d2.low;
        };
        var closeValue = function closeValue2(d2) {
          return d2.close;
        };
        var bandwidth = function bandwidth2() {
          return 5;
        };
        var align = "center";
        var crossValueScaled = function crossValueScaled2(d2, i4) {
          return base2.xScale()(crossValue(d2, i4));
        };
        base2 = createBase({
          decorate: function decorate() {
          },
          defined: function defined$1(d2, i4) {
            return defined(crossValue, openValue, lowValue, highValue, closeValue)(d2, i4);
          },
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity()
        });
        base2.values = function(d2, i4) {
          var closeRaw = closeValue(d2, i4);
          var openRaw = openValue(d2, i4);
          var width = bandwidth(d2, i4);
          var offset = alignOffset(align, width);
          var direction = "";
          if (closeRaw > openRaw) {
            direction = "up";
          } else if (closeRaw < openRaw) {
            direction = "down";
          }
          return {
            cross: crossValueScaled(d2, i4) + offset,
            open: base2.yScale()(openRaw),
            high: base2.yScale()(highValue(d2, i4)),
            low: base2.yScale()(lowValue(d2, i4)),
            close: base2.yScale()(closeRaw),
            width,
            direction
          };
        };
        base2.xValues = function() {
          return [crossValue];
        };
        base2.yValues = function() {
          return [openValue, highValue, lowValue, closeValue];
        };
        base2.crossValue = function() {
          if (!arguments.length) {
            return crossValue;
          }
          crossValue = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.openValue = function() {
          if (!arguments.length) {
            return openValue;
          }
          openValue = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.highValue = function() {
          if (!arguments.length) {
            return highValue;
          }
          highValue = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.lowValue = function() {
          if (!arguments.length) {
            return lowValue;
          }
          lowValue = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.yValue = base2.closeValue = function() {
          if (!arguments.length) {
            return closeValue;
          }
          closeValue = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.bandwidth = function() {
          if (!arguments.length) {
            return bandwidth;
          }
          bandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.align = function() {
          if (!arguments.length) {
            return align;
          }
          align = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        return base2;
      };
      var ohlcBase$1 = function(pathGenerator, seriesName) {
        var base2 = ohlcBase();
        var join = dataJoin3("g", seriesName);
        var containerTranslation = function containerTranslation2(values) {
          return "translate(" + values.cross + ", " + values.high + ")";
        };
        var propagateTransition = function propagateTransition2(maybeTransition) {
          return function(selection3) {
            return isTransition(maybeTransition) ? selection3.transition(maybeTransition) : selection3;
          };
        };
        var candlestick2 = function candlestick3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          var transitionPropagator = propagateTransition(selection3);
          selection3.each(function(data, index2, group3) {
            var filteredData = data.filter(base2.defined());
            var g3 = join(d3Selection.select(group3[index2]), filteredData);
            g3.enter().attr("transform", function(d2, i4) {
              return containerTranslation(base2.values(d2, i4)) + " scale(1e-6, 1)";
            }).append("path");
            g3.each(function(d2, i4, g4) {
              var values = base2.values(d2, i4);
              var color4 = values.direction === "up" ? colors.green : colors.red;
              var singleCandlestick = transitionPropagator(d3Selection.select(g4[i4])).attr("class", seriesName + " " + values.direction).attr("stroke", color4).attr("fill", color4).attr("transform", function() {
                return containerTranslation(values) + " scale(1)";
              });
              pathGenerator.x(0).width(values.width).open(function() {
                return values.open - values.high;
              }).high(0).low(function() {
                return values.low - values.high;
              }).close(function() {
                return values.close - values.high;
              });
              singleCandlestick.select("path").attr("d", pathGenerator([d2]));
            });
            base2.decorate()(g3, data, index2);
          });
        };
        rebind(candlestick2, join, "key");
        rebindAll6(candlestick2, base2);
        return candlestick2;
      };
      var candlestick$2 = function() {
        return ohlcBase$1(shapeCandlestick(), "candlestick");
      };
      var ohlcBase$2 = function(pathGenerator) {
        var base2 = ohlcBase();
        var candlestick2 = function candlestick3(data) {
          var filteredData = data.filter(base2.defined());
          var context = pathGenerator.context();
          filteredData.forEach(function(d2, i4) {
            context.save();
            var values = base2.values(d2, i4);
            context.translate(values.cross, values.high);
            context.beginPath();
            pathGenerator.x(0).open(function() {
              return values.open - values.high;
            }).width(values.width).high(0).low(function() {
              return values.low - values.high;
            }).close(function() {
              return values.close - values.high;
            })([d2]);
            var color4 = values.direction === "up" ? colors.green : colors.red;
            context.strokeStyle = color4;
            context.fillStyle = color4;
            base2.decorate()(context, d2, i4);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        rebind(candlestick2, pathGenerator, "context");
        rebindAll6(candlestick2, base2);
        return candlestick2;
      };
      var candlestick$3 = function() {
        return ohlcBase$2(shapeCandlestick());
      };
      var ohlcBase$3 = function(pathGenerator) {
        var base2 = ohlcBase();
        var crossValueAttribute = webglAttribute();
        var openValueAttribute = webglAttribute();
        var highValueAttribute = webglAttribute();
        var lowValueAttribute = webglAttribute();
        var closeValueAttribute = webglAttribute();
        var bandwidthAttribute = webglAttribute().type(types.UNSIGNED_SHORT);
        var definedAttribute = webglAttribute().type(types.UNSIGNED_BYTE);
        pathGenerator.crossValueAttribute(crossValueAttribute).openValueAttribute(openValueAttribute).highValueAttribute(highValueAttribute).lowValueAttribute(lowValueAttribute).closeValueAttribute(closeValueAttribute).bandwidthAttribute(bandwidthAttribute).definedAttribute(definedAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var candlestick2 = function candlestick3(data) {
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            bandwidthAttribute.value(function(d2, i4) {
              return base2.bandwidth()(d2, i4);
            }).data(data);
            definedAttribute.value(function(d2, i4) {
              return base2.defined()(d2, i4);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            crossValueAttribute.value(function(d2, i4) {
              return xScale.scale(base2.crossValue()(d2, i4));
            }).data(data);
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            openValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.openValue()(d2, i4));
            }).data(data);
            highValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.highValue()(d2, i4));
            }).data(data);
            lowValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.lowValue()(d2, i4));
            }).data(data);
            closeValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.closeValue()(d2, i4));
            }).data(data);
          }
          pathGenerator.xScale(xScale.webglScale).yScale(yScale.webglScale).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          pathGenerator(data.length);
        };
        candlestick2.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return candlestick2;
        };
        candlestick2.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return candlestick2;
        };
        rebindAll6(candlestick2, base2, exclude2("align"));
        rebind(candlestick2, pathGenerator, "context", "lineWidth", "pixelRatio");
        return candlestick2;
      };
      var candlestick$4 = function() {
        return ohlcBase$3(webglSeriesCandlestick());
      };
      var boxPlotBase = function() {
        var upperQuartileValue = function upperQuartileValue2(d2) {
          return d2.upperQuartile;
        };
        var lowerQuartileValue = function lowerQuartileValue2(d2) {
          return d2.lowerQuartile;
        };
        var highValue = function highValue2(d2) {
          return d2.high;
        };
        var lowValue = function lowValue2(d2) {
          return d2.low;
        };
        var crossValue = function crossValue2(d2) {
          return d2.value;
        };
        var medianValue = function medianValue2(d2) {
          return d2.median;
        };
        var orient = "vertical";
        var align = "center";
        var bandwidth = function bandwidth2() {
          return 5;
        };
        var base2 = createBase({
          decorate: function decorate() {
          },
          defined: function defined$1(d2, i4) {
            return defined(lowValue, highValue, lowerQuartileValue, upperQuartileValue, crossValue, medianValue)(d2, i4);
          },
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity()
        });
        base2.values = function(d2, i4) {
          var width = bandwidth(d2, i4);
          var offset = alignOffset(align, width);
          var xScale = base2.xScale();
          var yScale = base2.yScale();
          if (orient === "vertical") {
            var y3 = yScale(highValue(d2, i4));
            return {
              origin: [xScale(crossValue(d2, i4)) + offset, y3],
              high: 0,
              upperQuartile: yScale(upperQuartileValue(d2, i4)) - y3,
              median: yScale(medianValue(d2, i4)) - y3,
              lowerQuartile: yScale(lowerQuartileValue(d2, i4)) - y3,
              low: yScale(lowValue(d2, i4)) - y3,
              width
            };
          } else {
            var x4 = xScale(lowValue(d2, i4));
            return {
              origin: [x4, yScale(crossValue(d2, i4)) + offset],
              high: xScale(highValue(d2, i4)) - x4,
              upperQuartile: xScale(upperQuartileValue(d2, i4)) - x4,
              median: xScale(medianValue(d2, i4)) - x4,
              lowerQuartile: xScale(lowerQuartileValue(d2, i4)) - x4,
              low: 0,
              width
            };
          }
        };
        base2.xValues = function() {
          return orient === "vertical" ? [crossValue] : [upperQuartileValue, lowerQuartileValue, highValue, lowValue, medianValue];
        };
        base2.yValues = function() {
          return orient !== "vertical" ? [crossValue] : [upperQuartileValue, lowerQuartileValue, highValue, lowValue, medianValue];
        };
        base2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.lowerQuartileValue = function() {
          if (!arguments.length) {
            return lowerQuartileValue;
          }
          lowerQuartileValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.upperQuartileValue = function() {
          if (!arguments.length) {
            return upperQuartileValue;
          }
          upperQuartileValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.lowValue = function() {
          if (!arguments.length) {
            return lowValue;
          }
          lowValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.highValue = function() {
          if (!arguments.length) {
            return highValue;
          }
          highValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.crossValue = function() {
          if (!arguments.length) {
            return crossValue;
          }
          crossValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.medianValue = function() {
          if (!arguments.length) {
            return medianValue;
          }
          medianValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.bandwidth = function() {
          if (!arguments.length) {
            return bandwidth;
          }
          bandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return base2;
        };
        base2.align = function() {
          if (!arguments.length) {
            return align;
          }
          align = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        return base2;
      };
      var boxPlot$2 = function() {
        var base2 = boxPlotBase();
        var join = dataJoin3("g", "box-plot");
        var pathGenerator = shapeBoxPlot().value(0);
        var propagateTransition = function propagateTransition2(maybeTransition) {
          return function(selection3) {
            return isTransition(maybeTransition) ? selection3.transition(maybeTransition) : selection3;
          };
        };
        var containerTranslation = function containerTranslation2(values) {
          return "translate(" + values.origin[0] + ", " + values.origin[1] + ")";
        };
        var boxPlot2 = function boxPlot3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          var transitionPropagator = propagateTransition(selection3);
          selection3.each(function(data, index2, group3) {
            var filteredData = data.filter(base2.defined());
            var g3 = join(d3Selection.select(group3[index2]), filteredData);
            g3.enter().attr("stroke", colors.black).attr("fill", colors.gray).attr("transform", function(d2, i4) {
              return containerTranslation(base2.values(d2, i4)) + " scale(1e-6, 1)";
            }).append("path");
            pathGenerator.orient(base2.orient());
            g3.each(function(d2, i4, g4) {
              var values = base2.values(d2, i4);
              pathGenerator.median(values.median).upperQuartile(values.upperQuartile).lowerQuartile(values.lowerQuartile).width(values.width).high(values.high).low(values.low);
              transitionPropagator(d3Selection.select(g4[i4])).attr("transform", containerTranslation(values)).select("path").attr("d", pathGenerator([d2]));
            });
            base2.decorate()(g3, data, index2);
          });
        };
        rebindAll6(boxPlot2, base2);
        rebind(boxPlot2, join, "key");
        rebind(boxPlot2, pathGenerator, "cap");
        return boxPlot2;
      };
      var boxPlot$3 = function() {
        var base2 = boxPlotBase();
        var pathGenerator = shapeBoxPlot().value(0);
        var boxPlot2 = function boxPlot3(data) {
          var filteredData = data.filter(base2.defined());
          var context = pathGenerator.context();
          pathGenerator.orient(base2.orient());
          filteredData.forEach(function(d2, i4) {
            context.save();
            var values = base2.values(d2, i4);
            context.translate(values.origin[0], values.origin[1]);
            context.beginPath();
            context.fillStyle = colors.gray;
            context.strokeStyle = colors.black;
            base2.decorate()(context, d2, i4);
            pathGenerator.median(values.median).upperQuartile(values.upperQuartile).lowerQuartile(values.lowerQuartile).high(values.high).width(values.width).low(values.low)([d2]);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        rebindAll6(boxPlot2, base2);
        rebind(boxPlot2, pathGenerator, "cap", "context");
        return boxPlot2;
      };
      var boxPlot$4 = function() {
        var base2 = boxPlotBase();
        var crossValueAttribute = webglAttribute();
        var highValueAttribute = webglAttribute();
        var upperQuartileValueAttribute = webglAttribute();
        var medianValueAttribute = webglAttribute();
        var lowerQuartileValueAttribute = webglAttribute();
        var lowValueAttribute = webglAttribute();
        var bandwidthAttribute = webglAttribute().type(types.UNSIGNED_SHORT);
        var capAttribute = webglAttribute().type(types.UNSIGNED_SHORT);
        var definedAttribute = webglAttribute().type(types.UNSIGNED_BYTE);
        var draw2 = webglSeriesBoxPlot().crossValueAttribute(crossValueAttribute).highValueAttribute(highValueAttribute).upperQuartileValueAttribute(upperQuartileValueAttribute).medianValueAttribute(medianValueAttribute).lowerQuartileValueAttribute(lowerQuartileValueAttribute).lowValueAttribute(lowValueAttribute).bandwidthAttribute(bandwidthAttribute).capAttribute(capAttribute).definedAttribute(definedAttribute);
        var equals = function equals2(previousData2, data) {
          return false;
        };
        var scaleMapper = webglScaleMapper;
        var previousData = [];
        var previousXScale = null;
        var previousYScale = null;
        var cap = functor$4(20);
        var boxPlot2 = function boxPlot3(data) {
          if (base2.orient() !== "vertical") {
            throw new Error("Unsupported orientation ".concat(base2.orient()));
          }
          var xScale = scaleMapper(base2.xScale());
          var yScale = scaleMapper(base2.yScale());
          var dataChanged = !equals(previousData, data);
          if (dataChanged) {
            previousData = data;
            bandwidthAttribute.value(function(d2, i4) {
              return base2.bandwidth()(d2, i4);
            }).data(data);
            capAttribute.value(function(d2, i4) {
              return cap(d2, i4);
            }).data(data);
            definedAttribute.value(function(d2, i4) {
              return base2.defined()(d2, i4);
            }).data(data);
          }
          if (dataChanged || xScale.scale !== previousXScale) {
            previousXScale = xScale.scale;
            crossValueAttribute.value(function(d2, i4) {
              return xScale.scale(base2.crossValue()(d2, i4));
            }).data(data);
          }
          if (dataChanged || yScale.scale !== previousYScale) {
            previousYScale = yScale.scale;
            highValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.highValue()(d2, i4));
            }).data(data);
            upperQuartileValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.upperQuartileValue()(d2, i4));
            }).data(data);
            medianValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.medianValue()(d2, i4));
            }).data(data);
            lowerQuartileValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.lowerQuartileValue()(d2, i4));
            }).data(data);
            lowValueAttribute.value(function(d2, i4) {
              return yScale.scale(base2.lowValue()(d2, i4));
            }).data(data);
          }
          draw2.xScale(xScale.webglScale).yScale(yScale.webglScale).decorate(function(program) {
            return base2.decorate()(program, data, 0);
          });
          draw2(data.length);
        };
        boxPlot2.cap = function() {
          if (!arguments.length) {
            return cap;
          }
          cap = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return boxPlot2;
        };
        boxPlot2.equals = function() {
          if (!arguments.length) {
            return equals;
          }
          equals = arguments.length <= 0 ? void 0 : arguments[0];
          return boxPlot2;
        };
        boxPlot2.scaleMapper = function() {
          if (!arguments.length) {
            return scaleMapper;
          }
          scaleMapper = arguments.length <= 0 ? void 0 : arguments[0];
          return boxPlot2;
        };
        rebindAll6(boxPlot2, base2, exclude2("align"));
        rebind(boxPlot2, draw2, "context", "lineWidth", "pixelRatio");
        return boxPlot2;
      };
      var ohlc$2 = function() {
        return ohlcBase$1(shapeOhlc(), "ohlc");
      };
      var ohlc$3 = function() {
        return ohlcBase$2(shapeOhlc());
      };
      var ohlc$4 = function() {
        return ohlcBase$3(webglSeriesOhlc());
      };
      var multiBase = function() {
        var series = [];
        var mapping = function mapping2(d2) {
          return d2;
        };
        var key2 = function key3(_4, i4) {
          return i4;
        };
        var multi = createBase({
          decorate: function decorate() {
          },
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity()
        });
        multi.xValues = function() {
          return series.map(function(s3) {
            return s3.xValues();
          }).reduce(function(a5, b3) {
            return a5.concat(b3);
          });
        };
        multi.yValues = function() {
          return series.map(function(s3) {
            return s3.yValues();
          }).reduce(function(a5, b3) {
            return a5.concat(b3);
          });
        };
        multi.mapping = function() {
          if (!arguments.length) {
            return mapping;
          }
          mapping = arguments.length <= 0 ? void 0 : arguments[0];
          return multi;
        };
        multi.key = function() {
          if (!arguments.length) {
            return key2;
          }
          key2 = arguments.length <= 0 ? void 0 : arguments[0];
          return multi;
        };
        multi.series = function() {
          if (!arguments.length) {
            return series;
          }
          series = arguments.length <= 0 ? void 0 : arguments[0];
          return multi;
        };
        return multi;
      };
      var seriesSvgMulti6 = function() {
        var base2 = multiBase();
        var innerJoin = dataJoin3("g");
        var join = dataJoin3("g", "multi");
        var multi = function multi2(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
            innerJoin.transition(selection3);
          }
          var mapping = base2.mapping();
          var series = base2.series();
          var xScale = base2.xScale();
          var yScale = base2.yScale();
          selection3.each(function(data, index2, group3) {
            var container = join(d3Selection.select(group3[index2]), series);
            container.each(function(dataSeries, seriesIndex, seriesGroup) {
              dataSeries.xScale(xScale).yScale(yScale);
              var seriesData = mapping(data, seriesIndex, series);
              var innerContainer = innerJoin(d3Selection.select(seriesGroup[seriesIndex]), [seriesData]);
              innerContainer.call(dataSeries);
            });
            container.selection().order();
            base2.decorate()(container, data, index2);
          });
        };
        rebindAll6(multi, base2);
        rebind(multi, join, "key");
        return multi;
      };
      var seriesCanvasMulti5 = function() {
        var context = null;
        var base2 = multiBase();
        var multi = function multi2(data) {
          var mapping = base2.mapping();
          var series = base2.series();
          var xScale = base2.xScale();
          var yScale = base2.yScale();
          series.forEach(function(dataSeries, index2) {
            var seriesData = mapping(data, index2, series);
            dataSeries.context(context).xScale(xScale).yScale(yScale);
            var adaptedDecorate;
            if (dataSeries.decorate) {
              adaptedDecorate = dataSeries.decorate();
              dataSeries.decorate(function(c6, d2, i4) {
                base2.decorate()(c6, data, index2);
                adaptedDecorate(c6, d2, i4);
              });
            } else {
              base2.decorate()(context, data, index2);
            }
            dataSeries(seriesData);
            if (adaptedDecorate) {
              dataSeries.decorate(adaptedDecorate);
            }
          });
        };
        multi.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return multi;
        };
        rebindAll6(multi, base2);
        return multi;
      };
      var multiSeries = function() {
        var context = null;
        var pixelRatio = 1;
        var base2 = multiBase();
        var multi = function multi2(data) {
          var mapping = base2.mapping();
          var series = base2.series();
          var xScale = base2.xScale();
          var yScale = base2.yScale();
          series.forEach(function(dataSeries, index2) {
            var seriesData = mapping(data, index2, series);
            dataSeries.context(context).pixelRatio(pixelRatio).xScale(xScale).yScale(yScale);
            var adaptedDecorate;
            if (dataSeries.decorate) {
              adaptedDecorate = dataSeries.decorate();
              dataSeries.decorate(function(c6, d2, i4) {
                base2.decorate()(c6, data, index2);
                adaptedDecorate(c6, d2, i4);
              });
            } else {
              base2.decorate()(context, data, index2);
            }
            dataSeries(seriesData);
            if (adaptedDecorate) {
              dataSeries.decorate(adaptedDecorate);
            }
          });
        };
        multi.context = function() {
          if (!arguments.length) {
            return context;
          }
          context = arguments.length <= 0 ? void 0 : arguments[0];
          return multi;
        };
        multi.pixelRatio = function() {
          if (!arguments.length) {
            return pixelRatio;
          }
          pixelRatio = arguments.length <= 0 ? void 0 : arguments[0];
          return multi;
        };
        rebindAll6(multi, base2);
        return multi;
      };
      var groupedBase = function(series) {
        var bandwidth = function bandwidth2() {
          return 50;
        };
        var align = "center";
        var offsetScale = d3Scale.scaleBand();
        var grouped2 = createBase({
          decorate: function decorate() {
          },
          xScale: d3Scale.scaleLinear(),
          yScale: d3Scale.scaleLinear()
        });
        grouped2.offsetScaleForDatum = function(data, d2, i4) {
          var width = bandwidth(d2, i4);
          var offset = alignOffset(align, width);
          var halfWidth = width / 2;
          return offsetScale.domain(d3Array.range(0, data.length)).range([-halfWidth + offset, halfWidth + offset]);
        };
        grouped2.bandwidth = function() {
          if (!arguments.length) {
            return bandwidth;
          }
          bandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return grouped2;
        };
        grouped2.align = function() {
          if (!arguments.length) {
            return align;
          }
          align = arguments.length <= 0 ? void 0 : arguments[0];
          return grouped2;
        };
        rebindAll6(grouped2, offsetScale, includeMap({
          "paddingInner": "paddingOuter"
        }));
        return grouped2;
      };
      var grouped = function(series) {
        var base2 = groupedBase();
        var join = dataJoin3("g", "grouped");
        var grouped2 = function grouped3(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          selection3.each(function(data, index2, group3) {
            var g3 = join(d3Selection.select(group3[index2]), data);
            g3.enter().append("g");
            g3.select("g").each(function(_4, index3, group4) {
              var container = d3Selection.select(group4[index3]);
              var isVertical = series.orient() !== "horizontal";
              var compositeScale = function compositeScale2(d2, i4) {
                var offset = base2.offsetScaleForDatum(data, d2, i4);
                var baseScale2 = isVertical ? base2.xScale() : base2.yScale();
                return baseScale2(d2) + offset(index3) + offset.bandwidth() / 2;
              };
              if (isVertical) {
                series.xScale(compositeScale);
                series.yScale(base2.yScale());
              } else {
                series.yScale(compositeScale);
                series.xScale(base2.xScale());
              }
              if (series.bandwidth) {
                series.bandwidth(function(d2, i4) {
                  return base2.offsetScaleForDatum(data, d2, i4).bandwidth();
                });
              }
              series.decorate(function(s3, d2) {
                return base2.decorate()(s3, d2, index3);
              });
              container.call(series);
            });
          });
        };
        rebindAll6(grouped2, series, exclude2("decorate", "xScale", "yScale"));
        rebindAll6(grouped2, base2, exclude2("offsetScaleForDatum"));
        return grouped2;
      };
      function grouped$1(series) {
        var base2 = groupedBase();
        var grouped2 = function grouped3(data) {
          data.forEach(function(seriesData, index2) {
            var isVertical = series.orient() !== "horizontal";
            var compositeScale = function compositeScale2(d2, i4) {
              var offset = base2.offsetScaleForDatum(data, d2, i4);
              var baseScale2 = isVertical ? base2.xScale() : base2.yScale();
              return baseScale2(d2) + offset(index2) + offset.bandwidth() / 2;
            };
            if (isVertical) {
              series.xScale(compositeScale);
              series.yScale(base2.yScale());
            } else {
              series.yScale(compositeScale);
              series.xScale(base2.xScale());
            }
            if (series.bandwidth) {
              series.bandwidth(function(d2, i4) {
                return base2.offsetScaleForDatum(data, d2, i4).bandwidth();
              });
            }
            series.decorate(function(c6, d2) {
              return base2.decorate()(c6, d2, index2);
            });
            series(seriesData);
          });
        };
        rebindAll6(grouped2, series, exclude2("decorate", "xScale", "yScale"));
        rebindAll6(grouped2, base2, exclude2("offsetScaleForDatum"));
        return grouped2;
      }
      var repeat = function() {
        var orient = "vertical";
        var series = seriesSvgLine2();
        var multi = seriesSvgMulti6();
        var repeat2 = function repeat3(selection3) {
          return selection3.each(function(data, index2, group3) {
            if (orient === "vertical") {
              multi.series(data[0].map(function(_4) {
                return series;
              })).mapping(function(data2, index3) {
                return data2.map(function(d2) {
                  return d2[index3];
                });
              });
            } else {
              multi.series(data.map(function(_4) {
                return series;
              })).mapping(function(data2, index3) {
                return data2[index3];
              });
            }
            d3Selection.select(group3[index2]).call(multi);
          });
        };
        repeat2.series = function() {
          if (!arguments.length) {
            return series;
          }
          series = arguments.length <= 0 ? void 0 : arguments[0];
          return repeat2;
        };
        repeat2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return repeat2;
        };
        rebindAll6(repeat2, multi, exclude2("series", "mapping"));
        return repeat2;
      };
      var repeat$1 = function() {
        var orient = "vertical";
        var series = seriesCanvasLine2();
        var multi = seriesCanvasMulti5();
        var repeat2 = function repeat3(data) {
          if (orient === "vertical") {
            multi.series(data[0].map(function(_4) {
              return series;
            })).mapping(function(data2, index2) {
              return data2.map(function(d2) {
                return d2[index2];
              });
            });
          } else {
            multi.series(data.map(function(_4) {
              return series;
            })).mapping(function(data2, index2) {
              return data2[index2];
            });
          }
          multi(data);
        };
        repeat2.series = function() {
          if (!arguments.length) {
            return series;
          }
          series = arguments.length <= 0 ? void 0 : arguments[0];
          return repeat2;
        };
        repeat2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return repeat2;
        };
        rebindAll6(repeat2, multi, exclude2("series", "mapping"));
        return repeat2;
      };
      var repeat$2 = function() {
        var orient = "vertical";
        var series = function series2() {
          return line();
        };
        var multi = multiSeries();
        var seriesCache = [];
        var repeat2 = function repeat3(data) {
          if (orient === "vertical") {
            var previousSeriesCache = seriesCache;
            seriesCache = data[0].map(function(d2, i4) {
              return i4 < previousSeriesCache.length ? previousSeriesCache[i4] : series();
            });
            multi.series(seriesCache).mapping(function(data2, index2) {
              return data2.map(function(d2) {
                return d2[index2];
              });
            });
          } else {
            var _previousSeriesCache = seriesCache;
            seriesCache = data.map(function(d2, i4) {
              return i4 < _previousSeriesCache.length ? _previousSeriesCache[i4] : series();
            });
            multi.series(seriesCache).mapping(function(data2, index2) {
              return data2[index2];
            });
          }
          multi(data);
        };
        repeat2.series = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (!args.length) {
            return series;
          }
          if (typeof args[0].xScale === "function" && typeof args[0].yScale === "function") {
            series = function series2() {
              return args[0];
            };
          } else {
            series = args[0];
          }
          seriesCache = [];
          return repeat2;
        };
        repeat2.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          seriesCache = [];
          return repeat2;
        };
        rebindAll6(repeat2, multi, exclude2("series", "mapping"));
        return repeat2;
      };
      var sortUnique = function sortUnique2(arr) {
        return arr.sort(d3Array.ascending).filter(function(value, index2, self2) {
          return self2.indexOf(value, index2 + 1) === -1;
        });
      };
      var autoBandwidth4 = function(adaptee) {
        var widthFraction = 0.75;
        var computeBandwidth = function computeBandwidth2(screenValues) {
          if (screenValues.length <= 1) {
            return 10;
          }
          screenValues = sortUnique(screenValues);
          var neighbourDistances = d3Array.pairs(screenValues).map(function(tuple) {
            return Math.abs(tuple[0] - tuple[1]);
          });
          var minDistance = d3Array.min(neighbourDistances);
          return widthFraction * minDistance;
        };
        var determineBandwith = function determineBandwith2(crossScale, data, accessor) {
          if (crossScale.bandwidth) {
            return crossScale.bandwidth();
          } else {
            var _ref;
            var flattenedData = Array.isArray(data) ? (_ref = []).concat.apply(_ref, _toConsumableArray(data)) : data;
            var crossValuePoints = flattenedData.filter(adaptee.defined()).map(accessor()).map(crossScale);
            var width = computeBandwidth(crossValuePoints);
            return width;
          }
        };
        var autoBandwidth5 = function autoBandwidth6(arg) {
          var computeWidth = function computeWidth2(data) {
            if (adaptee.xBandwidth && adaptee.yBandwidth) {
              adaptee.xBandwidth(determineBandwith(adaptee.xScale(), data, adaptee.xValue));
              adaptee.yBandwidth(determineBandwith(adaptee.yScale(), data, adaptee.yValue));
            } else {
              var crossScale = adaptee.orient && adaptee.orient() === "horizontal" ? adaptee.yScale() : adaptee.xScale();
              adaptee.bandwidth(determineBandwith(crossScale, data, adaptee.crossValue));
            }
          };
          if (arg instanceof d3Selection.selection) {
            arg.each(function(data, index2, group3) {
              computeWidth(data);
              adaptee(d3Selection.select(group3[index2]));
            });
          } else {
            computeWidth(arg);
            adaptee(arg);
          }
        };
        rebindAll6(autoBandwidth5, adaptee);
        autoBandwidth5.widthFraction = function() {
          if (!arguments.length) {
            return widthFraction;
          }
          widthFraction = arguments.length <= 0 ? void 0 : arguments[0];
          return autoBandwidth5;
        };
        return autoBandwidth5;
      };
      var heatmapBase = function() {
        var xValue = function xValue2(d2) {
          return d2.x;
        };
        var yValue = function yValue2(d2) {
          return d2.y;
        };
        var colorValue = function colorValue2(d2) {
          return d2.color;
        };
        var yBandwidth = function yBandwidth2() {
          return 5;
        };
        var xBandwidth = function xBandwidth2() {
          return 5;
        };
        var colorInterpolate = d3ScaleChromatic.interpolateViridis;
        var heatmap2 = createBase({
          decorate: function decorate() {
          },
          defined: function defined$1(d2, i4) {
            return defined(xValue, yValue, colorValue)(d2, i4);
          },
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity()
        });
        heatmap2.pathGenerator = shapeBar().x(0).y(0);
        heatmap2.colorScale = function(data) {
          var colorValues = data.map(colorValue);
          return d3Scale.scaleLinear().domain([d3Array.min(colorValues), d3Array.max(colorValues)]);
        };
        heatmap2.values = function(d2, i4) {
          return {
            x: heatmap2.xScale()(xValue(d2, i4)),
            y: heatmap2.yScale()(yValue(d2, i4)),
            colorValue: colorValue(d2, i4),
            width: xBandwidth(d2, i4),
            height: yBandwidth(d2, i4)
          };
        };
        heatmap2.xValues = function() {
          return [xValue];
        };
        heatmap2.yValues = function() {
          return [yValue];
        };
        heatmap2.xValue = function() {
          if (!arguments.length) {
            return xValue;
          }
          xValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return heatmap2;
        };
        heatmap2.yValue = function() {
          if (!arguments.length) {
            return yValue;
          }
          yValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return heatmap2;
        };
        heatmap2.colorValue = function() {
          if (!arguments.length) {
            return colorValue;
          }
          colorValue = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return heatmap2;
        };
        heatmap2.colorInterpolate = function() {
          if (!arguments.length) {
            return colorInterpolate;
          }
          colorInterpolate = arguments.length <= 0 ? void 0 : arguments[0];
          return heatmap2;
        };
        heatmap2.xBandwidth = function() {
          if (!arguments.length) {
            return xBandwidth;
          }
          xBandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return heatmap2;
        };
        heatmap2.yBandwidth = function() {
          if (!arguments.length) {
            return yBandwidth;
          }
          yBandwidth = functor$4(arguments.length <= 0 ? void 0 : arguments[0]);
          return heatmap2;
        };
        rebindAll6(heatmap2, heatmap2.pathGenerator, includeMap({
          "horizontalAlign": "xAlign",
          "verticalAlign": "yAlign"
        }));
        return heatmap2;
      };
      var heatmap = function() {
        var base2 = heatmapBase();
        var join = dataJoin3("g", "box");
        var containerTransform = function containerTransform2(values) {
          return "translate(" + values.x + ", " + values.y + ")";
        };
        var heatmap2 = function heatmap3(selection3) {
          selection3.each(function(data, index2, group3) {
            var filteredData = data.filter(base2.defined());
            var colorValue = base2.colorValue();
            var colorInterpolate = base2.colorInterpolate();
            var colorScale = base2.colorScale(filteredData);
            var g3 = join(d3Selection.select(group3[index2]), filteredData);
            g3.enter().append("path").attr("stroke", "transparent");
            g3.attr("transform", function(d2, i4) {
              return containerTransform(base2.values(d2, i4));
            }).select("path").attr("d", function(d2, i4) {
              return base2.pathGenerator.width(base2.values(d2, i4).width).height(base2.values(d2, i4).height)([d2]);
            }).attr("fill", function(d2, i4) {
              return colorInterpolate(colorScale(colorValue(d2, i4)));
            });
            base2.decorate()(g3, data, index2);
          });
        };
        rebindAll6(heatmap2, base2);
        return heatmap2;
      };
      var heatmap$1 = function() {
        var base2 = heatmapBase();
        var heatmap2 = function heatmap3(data) {
          var filteredData = data.filter(base2.defined());
          var colorInterpolate = base2.colorInterpolate();
          var colorScale = base2.colorScale(filteredData);
          var context = base2.pathGenerator.context();
          filteredData.forEach(function(d2, i4) {
            context.save();
            context.beginPath();
            var values = base2.values(d2, i4);
            context.translate(values.x, values.y);
            context.fillStyle = colorInterpolate(colorScale(values.colorValue));
            context.strokeStyle = "transparent";
            base2.decorate()(context, d2, i4);
            base2.pathGenerator.height(values.height).width(values.width)([d2]);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        rebind(heatmap2, base2.pathGenerator, "context");
        rebindAll6(heatmap2, base2);
        return heatmap2;
      };
      var constant2 = function(value) {
        return typeof value === "function" ? value : function() {
          return value;
        };
      };
      var band3 = function() {
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var orient = "horizontal";
        var fromValue = function fromValue2(d2) {
          return d2.from;
        };
        var toValue = function toValue2(d2) {
          return d2.to;
        };
        var decorate = function decorate2() {
        };
        var join = dataJoin3("g", "annotation-band");
        var pathGenerator = shapeBar().horizontalAlign("center").verticalAlign("center").x(0).y(0);
        var instance = function instance2(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          if (orient !== "horizontal" && orient !== "vertical") {
            throw new Error("Invalid orientation");
          }
          var horizontal = orient === "horizontal";
          var translation = horizontal ? function(a5, b3) {
            return "translate(".concat(a5, ", ").concat(b3, ")");
          } : function(a5, b3) {
            return "translate(".concat(b3, ", ").concat(a5, ")");
          };
          var crossScale = horizontal ? xScale : yScale;
          var valueScale = horizontal ? yScale : xScale;
          var crossScaleRange = crossScale.range();
          var crossScaleSize = crossScaleRange[1] - crossScaleRange[0];
          var valueAxisDimension = horizontal ? "height" : "width";
          var crossAxisDimension = horizontal ? "width" : "height";
          var containerTransform = function containerTransform2() {
            return translation((crossScaleRange[1] + crossScaleRange[0]) / 2, (valueScale(toValue.apply(void 0, arguments)) + valueScale(fromValue.apply(void 0, arguments))) / 2);
          };
          pathGenerator[crossAxisDimension](crossScaleSize);
          pathGenerator[valueAxisDimension](function() {
            return valueScale(toValue.apply(void 0, arguments)) - valueScale(fromValue.apply(void 0, arguments));
          });
          selection3.each(function(data, index2, nodes) {
            var g3 = join(d3Selection.select(nodes[index2]), data);
            g3.enter().attr("transform", containerTransform).append("path").classed("band", true);
            g3.attr("class", "annotation-band ".concat(orient)).attr("transform", containerTransform).select("path").attr("d", function(d2, i4) {
              return pathGenerator([d2], i4);
            });
            decorate(g3, data, index2);
          });
        };
        instance.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.fromValue = function() {
          if (!arguments.length) {
            return fromValue;
          }
          fromValue = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        instance.toValue = function() {
          if (!arguments.length) {
            return toValue;
          }
          toValue = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        return instance;
      };
      var band$1 = function() {
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var orient = "horizontal";
        var fromValue = function fromValue2(d2) {
          return d2.from;
        };
        var toValue = function toValue2(d2) {
          return d2.to;
        };
        var decorate = function decorate2() {
        };
        var pathGenerator = shapeBar().horizontalAlign("right").verticalAlign("top");
        var instance = function instance2(data) {
          if (orient !== "horizontal" && orient !== "vertical") {
            throw new Error("Invalid orientation");
          }
          var context = pathGenerator.context();
          var horizontal = orient === "horizontal";
          var crossScale = horizontal ? xScale : yScale;
          var valueScale = horizontal ? yScale : xScale;
          var crossScaleRange = crossScale.range();
          var crossScaleSize = crossScaleRange[1] - crossScaleRange[0];
          var valueAxisStart = horizontal ? "x" : "y";
          var crossAxisStart = horizontal ? "y" : "x";
          var valueAxisDimension = horizontal ? "height" : "width";
          var crossAxisDimension = horizontal ? "width" : "height";
          data.forEach(function(d2, i4) {
            context.save();
            context.beginPath();
            context.strokeStyle = "transparent";
            pathGenerator[crossAxisStart](valueScale(fromValue(d2)));
            pathGenerator[valueAxisStart](crossScaleRange[0]);
            pathGenerator[crossAxisDimension](crossScaleSize);
            pathGenerator[valueAxisDimension](valueScale(toValue(d2)) - valueScale(fromValue(d2)));
            decorate(context, d2, i4);
            pathGenerator.context(context)([d2], i4);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        instance.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.fromValue = function() {
          if (!arguments.length) {
            return fromValue;
          }
          fromValue = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        instance.toValue = function() {
          if (!arguments.length) {
            return toValue;
          }
          toValue = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        rebind(instance, pathGenerator, "context");
        return instance;
      };
      var annotationLine = function() {
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var value = function value2(d2) {
          return d2;
        };
        var label2 = value;
        var decorate = function decorate2() {
        };
        var orient = "horizontal";
        var join = dataJoin3("g", "annotation-line");
        var instance = function instance2(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          if (orient !== "horizontal" && orient !== "vertical") {
            throw new Error("Invalid orientation");
          }
          var horizontal = orient === "horizontal";
          var translation = horizontal ? function(a5, b3) {
            return "translate(".concat(a5, ", ").concat(b3, ")");
          } : function(a5, b3) {
            return "translate(".concat(b3, ", ").concat(a5, ")");
          };
          var lineProperty = horizontal ? "x2" : "y2";
          var crossScale = horizontal ? xScale : yScale;
          var valueScale = horizontal ? yScale : xScale;
          var handleOne = horizontal ? "left-handle" : "bottom-handle";
          var handleTwo = horizontal ? "right-handle" : "top-handle";
          var textOffsetX = horizontal ? "9" : "0";
          var textOffsetY = horizontal ? "0" : "9";
          var textOffsetDeltaY = horizontal ? "0.32em" : "0.71em";
          var textAnchor = horizontal ? "start" : "middle";
          var scaleRange = crossScale.range();
          var containerTransform = function containerTransform2() {
            return translation(scaleRange[0], valueScale(value.apply(void 0, arguments)));
          };
          var scaleWidth = scaleRange[1] - scaleRange[0];
          selection3.each(function(data, selectionIndex, nodes) {
            var g3 = join(d3Selection.select(nodes[selectionIndex]), data);
            var enter = g3.enter().attr("transform", containerTransform).style("stroke", "#bbb");
            enter.append("line").attr(lineProperty, scaleWidth);
            enter.append("g").classed(handleOne, true).style("stroke", "none");
            enter.append("g").classed(handleTwo, true).style("stroke", "none").attr("transform", translation(scaleWidth, 0)).append("text").attr("text-anchor", textAnchor).attr("x", textOffsetX).attr("y", textOffsetY).attr("dy", textOffsetDeltaY);
            g3.attr("class", "annotation-line ".concat(orient));
            g3.attr("transform", containerTransform);
            g3.select("line").attr(lineProperty, scaleWidth);
            g3.select("g." + handleTwo).attr("transform", translation(scaleWidth, 0));
            g3.select("text").text(label2);
            decorate(g3, data, selectionIndex);
          });
        };
        instance.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        instance.label = function() {
          if (!arguments.length) {
            return label2;
          }
          label2 = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        instance.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        return instance;
      };
      function crosshair() {
        var x4 = function x5(d2) {
          return d2.x;
        };
        var y3 = function y4(d2) {
          return d2.y;
        };
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var decorate = function decorate2() {
        };
        var join = dataJoin3("g", "annotation-crosshair");
        var point8 = seriesSvgPoint3();
        var horizontalLine = annotationLine();
        var verticalLine = annotationLine().orient("vertical");
        var xIdentity = d3Scale.scaleIdentity();
        var yIdentity = d3Scale.scaleIdentity();
        var multi = seriesSvgMulti6().series([horizontalLine, verticalLine, point8]).xScale(xIdentity).yScale(yIdentity).mapping(function(data) {
          return [data];
        });
        var instance = function instance2(selection3) {
          if (isTransition(selection3)) {
            join.transition(selection3);
          }
          selection3.each(function(data, index2, nodes) {
            var g3 = join(d3Selection.select(nodes[index2]), data);
            g3.enter().style("pointer-events", "none");
            xIdentity.range(xScale.range());
            yIdentity.range(yScale.range());
            point8.crossValue(x4).mainValue(y3);
            horizontalLine.value(y3);
            verticalLine.value(x4);
            g3.call(multi);
            decorate(g3, data, index2);
          });
        };
        instance.x = function() {
          if (!arguments.length) {
            return x4;
          }
          x4 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.y = function() {
          if (!arguments.length) {
            return y3;
          }
          y3 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        var lineIncludes = include("label");
        rebindAll6(instance, horizontalLine, lineIncludes, prefix2("y"));
        rebindAll6(instance, verticalLine, lineIncludes, prefix2("x"));
        return instance;
      }
      var annotationLine$1 = function() {
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var value = function value2(d2) {
          return d2;
        };
        var label2 = value;
        var decorate = function decorate2() {
        };
        var orient = "horizontal";
        var lineData = d3Shape.line();
        var instance = function instance2(data) {
          if (orient !== "horizontal" && orient !== "vertical") {
            throw new Error("Invalid orientation");
          }
          var horizontal = orient === "horizontal";
          var context = lineData.context();
          var crossScale = horizontal ? xScale : yScale;
          var valueScale = horizontal ? yScale : xScale;
          var crossDomain = crossScale.domain();
          var textOffsetX = horizontal ? 9 : 0;
          var textOffsetY = horizontal ? 0 : 9;
          var textAlign = horizontal ? "left" : "center";
          var textBaseline = horizontal ? "middle" : "hanging";
          data.forEach(function(d2, i4) {
            context.save();
            context.beginPath();
            context.strokeStyle = "#bbb";
            context.fillStyle = "#000";
            context.textAlign = textAlign;
            context.textBaseline = textBaseline;
            decorate(context, d2, i4);
            lineData.context(context)(crossDomain.map(function(extent2) {
              var point8 = [crossScale(extent2), valueScale(value(d2))];
              return horizontal ? point8 : point8.reverse();
            }));
            var x4 = horizontal ? crossScale(crossDomain[1]) : valueScale(value(d2));
            var y3 = horizontal ? valueScale(value(d2)) : crossScale(crossDomain[1]);
            context.fillText(label2(d2), x4 + textOffsetX, y3 + textOffsetY);
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        instance.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        instance.label = function() {
          if (!arguments.length) {
            return label2;
          }
          label2 = constant2(arguments.length <= 0 ? void 0 : arguments[0]);
          return instance;
        };
        instance.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        rebind(instance, lineData, "context");
        return instance;
      };
      var crosshair$1 = function() {
        var x4 = function x5(d2) {
          return d2.x;
        };
        var y3 = function y4(d2) {
          return d2.y;
        };
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var point8 = seriesCanvasPoint();
        var horizontalLine = annotationLine$1();
        var verticalLine = annotationLine$1().orient("vertical");
        var xIdentity = d3Scale.scaleIdentity();
        var yIdentity = d3Scale.scaleIdentity();
        var multi = seriesCanvasMulti5().series([horizontalLine, verticalLine, point8]).xScale(xIdentity).yScale(yIdentity).mapping(function(data) {
          return [data];
        });
        var instance = function instance2(data) {
          data.forEach(function(d2) {
            xIdentity.range(xScale.range());
            yIdentity.range(yScale.range());
            point8.crossValue(x4).mainValue(y3);
            horizontalLine.value(y3);
            verticalLine.value(x4);
            multi(d2);
          });
        };
        instance.x = function() {
          if (!arguments.length) {
            return x4;
          }
          x4 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.y = function() {
          if (!arguments.length) {
            return y3;
          }
          y3 = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        var lineIncludes = include("label", "decorate");
        rebindAll6(instance, horizontalLine, lineIncludes, prefix2("y"));
        rebindAll6(instance, verticalLine, lineIncludes, prefix2("x"));
        rebind(instance, point8, "decorate");
        rebind(instance, multi, "context");
        return instance;
      };
      var ticks4 = function() {
        var scale = d3Scale.scaleIdentity();
        var tickArguments = [10];
        var tickValues = null;
        var ticks5 = function ticks6() {
          var _scale;
          return tickValues != null ? tickValues : scale.ticks ? (_scale = scale).ticks.apply(_scale, _toConsumableArray(tickArguments)) : scale.domain();
        };
        ticks5.scale = function() {
          if (!arguments.length) {
            return scale;
          }
          scale = arguments.length <= 0 ? void 0 : arguments[0];
          return ticks5;
        };
        ticks5.ticks = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          tickArguments = args;
          return ticks5;
        };
        ticks5.tickArguments = function() {
          if (!arguments.length) {
            return tickArguments;
          }
          tickArguments = arguments.length <= 0 ? void 0 : arguments[0];
          return ticks5;
        };
        ticks5.tickValues = function() {
          if (!arguments.length) {
            return tickValues;
          }
          tickValues = arguments.length <= 0 ? void 0 : arguments[0];
          return ticks5;
        };
        return ticks5;
      };
      var identity$3 = function identity9(d2) {
        return d2;
      };
      var gridline = function() {
        var xDecorate = function xDecorate2() {
        };
        var yDecorate = function yDecorate2() {
        };
        var xTicks = ticks4();
        var yTicks = ticks4();
        var xJoin = dataJoin3("line", "gridline-y").key(identity$3);
        var yJoin = dataJoin3("line", "gridline-x").key(identity$3);
        var instance = function instance2(selection3) {
          if (isTransition(selection3)) {
            xJoin.transition(selection3);
            yJoin.transition(selection3);
          }
          selection3.each(function(data, index2, nodes) {
            var element2 = nodes[index2];
            var container = d3Selection.select(nodes[index2]);
            var xScale = xTicks.scale();
            var yScale = yTicks.scale();
            var xScaleOld = element2.__x_scale__ || xScale;
            element2.__x_scale__ = xScale.copy();
            var xData = xTicks();
            var xLines = xJoin(container, xData);
            xLines.enter().attr("x1", xScaleOld).attr("x2", xScaleOld).attr("y1", yScale.range()[0]).attr("y2", yScale.range()[1]).attr("stroke", "#bbb");
            xLines.attr("x1", xScale).attr("x2", xScale).attr("y1", yScale.range()[0]).attr("y2", yScale.range()[1]);
            xLines.exit().attr("x1", xScale).attr("x2", xScale);
            xDecorate(xLines, xData, index2);
            var yScaleOld = element2.__y_scale__ || yScale;
            element2.__y_scale__ = yScale.copy();
            var yData = yTicks();
            var yLines = yJoin(container, yData);
            yLines.enter().attr("y1", yScaleOld).attr("y2", yScaleOld).attr("x1", xScale.range()[0]).attr("x2", xScale.range()[1]).attr("stroke", "#bbb");
            yLines.attr("y1", yScale).attr("y2", yScale).attr("x1", xScale.range()[0]).attr("x2", xScale.range()[1]);
            yLines.exit().attr("y1", yScale).attr("y2", yScale);
            yDecorate(yLines, yData, index2);
          });
        };
        instance.yDecorate = function() {
          if (!arguments.length) {
            return yDecorate;
          }
          yDecorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.xDecorate = function() {
          if (!arguments.length) {
            return xDecorate;
          }
          xDecorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        rebindAll6(instance, xJoin, includeMap({
          "key": "xKey"
        }));
        rebindAll6(instance, yJoin, includeMap({
          "key": "yKey"
        }));
        rebindAll6(instance, xTicks, prefix2("x"));
        rebindAll6(instance, yTicks, prefix2("y"));
        return instance;
      };
      var gridline$1 = function() {
        var xDecorate = function xDecorate2() {
        };
        var yDecorate = function yDecorate2() {
        };
        var xTicks = ticks4();
        var yTicks = ticks4();
        var lineData = d3Shape.line();
        var instance = function instance2() {
          var context = lineData.context();
          var xScale = xTicks.scale();
          var yScale = yTicks.scale();
          xTicks().forEach(function(xTick, i4) {
            context.save();
            context.beginPath();
            context.strokeStyle = "#bbb";
            context.fillStyle = "transparent";
            xDecorate(context, xTick, i4);
            lineData.context(context)(yScale.domain().map(function(d2) {
              return [xScale(xTick), yScale(d2)];
            }));
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
          yTicks().forEach(function(yTick, i4) {
            context.save();
            context.beginPath();
            context.strokeStyle = "#bbb";
            context.fillStyle = "transparent";
            yDecorate(context, yTick, i4);
            lineData.context(context)(xScale.domain().map(function(d2) {
              return [xScale(d2), yScale(yTick)];
            }));
            context.fill();
            context.stroke();
            context.closePath();
            context.restore();
          });
        };
        instance.yDecorate = function() {
          if (!arguments.length) {
            return yDecorate;
          }
          yDecorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        instance.xDecorate = function() {
          if (!arguments.length) {
            return xDecorate;
          }
          xDecorate = arguments.length <= 0 ? void 0 : arguments[0];
          return instance;
        };
        rebindAll6(instance, xTicks, prefix2("x"));
        rebindAll6(instance, yTicks, prefix2("y"));
        rebind(instance, lineData, "context");
        return instance;
      };
      var identity$4 = function identity9(d2) {
        return d2;
      };
      var tryApply = function tryApply2(scale, fn2, args, defaultVal) {
        return scale[fn2] ? scale[fn2].apply(scale, args) : defaultVal;
      };
      var ticksArrayForAxis = function ticksArrayForAxis2(axis2) {
        var _axis$tickValues;
        return (_axis$tickValues = axis2.tickValues()) !== null && _axis$tickValues !== void 0 ? _axis$tickValues : tryApply(axis2.scale(), "ticks", axis2.tickArguments(), axis2.scale().domain());
      };
      var tickFormatterForAxis = function tickFormatterForAxis2(axis2) {
        var _axis$tickFormat;
        return (_axis$tickFormat = axis2.tickFormat()) !== null && _axis$tickFormat !== void 0 ? _axis$tickFormat : tryApply(axis2.scale(), "tickFormat", axis2.tickArguments(), identity$4);
      };
      var identity$5 = function identity9(d2) {
        return d2;
      };
      var axisBase = function axisBase2(orient, scale) {
        var custom9 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var tickArguments = [10];
        var tickValues = null;
        var decorate = function decorate2() {
        };
        var tickFormat2 = null;
        var tickSizeOuter = 6;
        var tickSizeInner = 6;
        var tickPadding = 3;
        var svgDomainLine = d3Shape.line();
        var dataJoin$1 = dataJoin3("g", "tick").key(identity$5);
        var domainPathDataJoin = dataJoin3("path", "domain");
        var defaultLabelOffset = function defaultLabelOffset2() {
          return {
            offset: [0, tickSizeInner + tickPadding]
          };
        };
        var defaultTickPath = function defaultTickPath2() {
          return {
            path: [[0, 0], [0, tickSizeInner]]
          };
        };
        var labelOffset = custom9.labelOffset || defaultLabelOffset;
        var tickPath = custom9.tickPath || defaultTickPath;
        var containerTranslate = function containerTranslate2(scale2, trans) {
          var offset = 0;
          if (scale2.bandwidth) {
            offset = scale2.bandwidth() / 2;
            if (scale2.round()) {
              offset = Math.round(offset);
            }
          }
          return function(d2) {
            return trans(scale2(d2) + offset, 0);
          };
        };
        var translate = function translate2(x4, y3) {
          return isVertical() ? "translate(".concat(y3, ", ").concat(x4, ")") : "translate(".concat(x4, ", ").concat(y3, ")");
        };
        var pathTranspose = function pathTranspose2(arr) {
          return isVertical() ? arr.map(function(d2) {
            return [d2[1], d2[0]];
          }) : arr;
        };
        var isVertical = function isVertical2() {
          return orient === "left" || orient === "right";
        };
        var axis2 = function axis3(selection3) {
          if (isTransition(selection3)) {
            dataJoin$1.transition(selection3);
            domainPathDataJoin.transition(selection3);
          }
          selection3.each(function(data, index2, group3) {
            var element2 = group3[index2];
            var container = d3Selection.select(element2);
            if (!element2.__scale__) {
              container.attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === "right" ? "start" : orient === "left" ? "end" : "middle");
            }
            var scaleOld = element2.__scale__ || scale;
            element2.__scale__ = scale.copy();
            var ticksArray = ticksArrayForAxis(axis3);
            var tickFormatter = tickFormatterForAxis(axis3);
            var sign2 = orient === "bottom" || orient === "right" ? 1 : -1;
            var withSign = function withSign2(_ref) {
              var _ref2 = _slicedToArray(_ref, 2), x4 = _ref2[0], y3 = _ref2[1];
              return [x4, sign2 * y3];
            };
            var range4 = scale.range();
            var domainPathData = pathTranspose([[range4[0], sign2 * tickSizeOuter], [range4[0], 0], [range4[1], 0], [range4[1], sign2 * tickSizeOuter]]);
            var domainLine = domainPathDataJoin(container, [data]);
            domainLine.enter().attr("stroke", "#000");
            domainLine.attr("d", svgDomainLine(domainPathData));
            var g3 = dataJoin$1(container, ticksArray);
            var labelOffsets = ticksArray.map(function(d2, i4) {
              return labelOffset(d2, i4, ticksArray);
            });
            var tickPaths = ticksArray.map(function(d2, i4) {
              return tickPath(d2, i4, ticksArray);
            });
            g3.enter().attr("transform", containerTranslate(scaleOld, translate)).append("path").attr("stroke", "#000");
            g3.enter().append("text").attr("transform", function(d2, i4) {
              return translate.apply(void 0, _toConsumableArray(withSign(labelOffsets[i4].offset)));
            }).attr("fill", "#000");
            g3.exit().attr("transform", containerTranslate(scale, translate));
            g3.select("path").attr("visibility", function(d2, i4) {
              return tickPaths[i4].hidden && "hidden";
            }).attr("d", function(d2, i4) {
              return svgDomainLine(pathTranspose(tickPaths[i4].path.map(withSign)));
            });
            g3.select("text").attr("visibility", function(d2, i4) {
              return labelOffsets[i4].hidden && "hidden";
            }).attr("transform", function(d2, i4) {
              return translate.apply(void 0, _toConsumableArray(withSign(labelOffsets[i4].offset)));
            }).attr("dy", function() {
              var offset = "0em";
              if (isVertical()) {
                offset = "0.32em";
              } else if (orient === "bottom") {
                offset = "0.71em";
              }
              return offset;
            }).text(tickFormatter);
            g3.attr("transform", containerTranslate(scale, translate));
            decorate(g3, data, index2);
          });
        };
        axis2.tickFormat = function() {
          if (!arguments.length) {
            return tickFormat2;
          }
          tickFormat2 = arguments.length <= 0 ? void 0 : arguments[0];
          return axis2;
        };
        axis2.tickSize = function() {
          if (!arguments.length) {
            return tickSizeInner;
          }
          tickSizeInner = tickSizeOuter = Number(arguments.length <= 0 ? void 0 : arguments[0]);
          return axis2;
        };
        axis2.tickSizeInner = function() {
          if (!arguments.length) {
            return tickSizeInner;
          }
          tickSizeInner = Number(arguments.length <= 0 ? void 0 : arguments[0]);
          return axis2;
        };
        axis2.tickSizeOuter = function() {
          if (!arguments.length) {
            return tickSizeOuter;
          }
          tickSizeOuter = Number(arguments.length <= 0 ? void 0 : arguments[0]);
          return axis2;
        };
        axis2.tickPadding = function() {
          if (!arguments.length) {
            return tickPadding;
          }
          tickPadding = arguments.length <= 0 ? void 0 : arguments[0];
          return axis2;
        };
        axis2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return axis2;
        };
        axis2.scale = function() {
          if (!arguments.length) {
            return scale;
          }
          scale = arguments.length <= 0 ? void 0 : arguments[0];
          return axis2;
        };
        axis2.ticks = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          tickArguments = [].concat(args);
          return axis2;
        };
        axis2.tickArguments = function() {
          if (!arguments.length) {
            return tickArguments !== null ? tickArguments.slice() : null;
          }
          tickArguments = (arguments.length <= 0 ? void 0 : arguments[0]) == null ? [] : _toConsumableArray(arguments.length <= 0 ? void 0 : arguments[0]);
          return axis2;
        };
        axis2.tickValues = function() {
          if (!arguments.length) {
            return tickValues !== null ? tickValues.slice() : null;
          }
          tickValues = (arguments.length <= 0 ? void 0 : arguments[0]) == null ? [] : _toConsumableArray(arguments.length <= 0 ? void 0 : arguments[0]);
          return axis2;
        };
        axis2.orient = function() {
          return orient;
        };
        return axis2;
      };
      var axis = function axis2(orient, scale) {
        var tickCenterLabel = false;
        var labelOffset = function labelOffset2(tick, index2, ticksArray) {
          var x4 = 0;
          var y3 = base2.tickSizeInner() + base2.tickPadding();
          var hidden = false;
          if (tickCenterLabel) {
            var thisPosition = scale(tick);
            var nextPosition = index2 < ticksArray.length - 1 ? scale(ticksArray[index2 + 1]) : scale.range()[1];
            x4 = (nextPosition - thisPosition) / 2;
            y3 = base2.tickPadding();
            hidden = index2 === ticksArray.length - 1 && thisPosition === nextPosition;
          }
          return {
            offset: [x4, y3],
            hidden
          };
        };
        var base2 = axisBase(orient, scale, {
          labelOffset
        });
        var axis3 = function axis4(selection3) {
          return base2(selection3);
        };
        axis3.tickCenterLabel = function() {
          if (!arguments.length) {
            return tickCenterLabel;
          }
          tickCenterLabel = arguments.length <= 0 ? void 0 : arguments[0];
          return axis3;
        };
        rebindAll6(axis3, base2);
        return axis3;
      };
      var axisTop3 = function axisTop4(scale) {
        return axis("top", scale);
      };
      var axisBottom3 = function axisBottom4(scale) {
        return axis("bottom", scale);
      };
      var axisLeft3 = function axisLeft4(scale) {
        return axis("left", scale);
      };
      var axisRight4 = function axisRight5(scale) {
        return axis("right", scale);
      };
      var axisOrdinal = function axisOrdinal2(orient, scale) {
        var tickOffset = null;
        var step = function step2(tick, index2, ticksArray) {
          if (scale.step) {
            return scale.step();
          }
          var thisPosition = scale(tick);
          if (index2 < ticksArray.length - 1) {
            return scale(ticksArray[index2 + 1]) / thisPosition;
          } else {
            return (scale.range()[1] - thisPosition) * 2;
          }
        };
        var tickPath = function tickPath2(tick, index2, ticksArray) {
          var x4 = 0;
          if (tickOffset) {
            x4 = tickOffset(tick, index2);
          } else {
            x4 = step(tick, index2, ticksArray) / 2;
          }
          return {
            path: [[x4, 0], [x4, base2.tickSizeInner()]],
            hidden: index2 === ticksArray.length - 1
          };
        };
        var labelOffset = function labelOffset2() {
          return {
            offset: [0, base2.tickPadding()]
          };
        };
        var base2 = axisBase(orient, scale, {
          labelOffset,
          tickPath
        });
        var axis2 = function axis3(selection3) {
          base2(selection3);
        };
        axis2.tickOffset = function() {
          if (!arguments.length) {
            return tickOffset;
          }
          tickOffset = arguments.length <= 0 ? void 0 : arguments[0];
          return axis2;
        };
        rebindAll6(axis2, base2);
        return axis2;
      };
      var axisOrdinalTop2 = function axisOrdinalTop3(scale) {
        return axisOrdinal("top", scale);
      };
      var axisOrdinalBottom2 = function axisOrdinalBottom3(scale) {
        return axisOrdinal("bottom", scale);
      };
      var axisOrdinalLeft2 = function axisOrdinalLeft3(scale) {
        return axisOrdinal("left", scale);
      };
      var axisOrdinalRight2 = function axisOrdinalRight3(scale) {
        return axisOrdinal("right", scale);
      };
      var measureLabels = function(axis2) {
        var measure2 = function measure3(selection3) {
          var ticks5 = ticksArrayForAxis(axis2);
          var tickFormatter = tickFormatterForAxis(axis2);
          var labels = ticks5.map(tickFormatter);
          var tester = selection3.append("text");
          var boundingBoxes = labels.map(function(l3) {
            return tester.text(l3).node().getBBox();
          });
          var maxHeight = Math.max.apply(Math, _toConsumableArray(boundingBoxes.map(function(b3) {
            return b3.height;
          })));
          var maxWidth = Math.max.apply(Math, _toConsumableArray(boundingBoxes.map(function(b3) {
            return b3.width;
          })));
          tester.remove();
          return {
            maxHeight,
            maxWidth,
            labelCount: labels.length
          };
        };
        return measure2;
      };
      var axisLabelRotate = function(adaptee) {
        var labelRotate = "auto";
        var decorate = function decorate2() {
        };
        var isVertical = function isVertical2() {
          return adaptee.orient() === "left" || adaptee.orient() === "right";
        };
        var sign2 = function sign3() {
          return adaptee.orient() === "top" || adaptee.orient() === "left" ? -1 : 1;
        };
        var labelAnchor = function labelAnchor2() {
          switch (adaptee.orient()) {
            case "top":
            case "right":
              return "start";
            default:
              return "end";
          }
        };
        var calculateRotation = function calculateRotation2(s3) {
          var _measureLabels = measureLabels(adaptee)(s3), maxHeight = _measureLabels.maxHeight, maxWidth = _measureLabels.maxWidth, labelCount = _measureLabels.labelCount;
          var measuredSize = labelCount * maxWidth;
          var rotate;
          if (labelRotate === "auto") {
            var range4 = adaptee.scale().range()[1];
            rotate = range4 < measuredSize ? 90 * Math.min(1, (measuredSize / range4 - 0.8) / 2) : 0;
          } else {
            rotate = labelRotate;
          }
          return {
            rotate: isVertical() ? Math.floor(sign2() * (90 - rotate)) : Math.floor(-rotate),
            maxHeight,
            maxWidth,
            anchor: rotate ? labelAnchor() : "middle"
          };
        };
        var decorateRotation = function decorateRotation2(sel) {
          var _calculateRotation = calculateRotation(sel), rotate = _calculateRotation.rotate, maxHeight = _calculateRotation.maxHeight, anchor = _calculateRotation.anchor;
          var text = sel.select("text");
          var existingTransform = text.attr("transform");
          var offset = sign2() * Math.floor(maxHeight / 2);
          var offsetTransform = isVertical() ? "translate(".concat(offset, ", 0)") : "translate(0, ".concat(offset, ")");
          text.style("text-anchor", anchor).attr("transform", "".concat(existingTransform, " ").concat(offsetTransform, " rotate(").concat(rotate, " 0 0)"));
        };
        var axisLabelRotate2 = function axisLabelRotate3(arg) {
          adaptee(arg);
        };
        adaptee.decorate(function(s3) {
          decorateRotation(s3);
          decorate(s3);
        });
        axisLabelRotate2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return axisLabelRotate2;
        };
        axisLabelRotate2.labelRotate = function() {
          if (!arguments.length) {
            return labelRotate;
          }
          labelRotate = arguments.length <= 0 ? void 0 : arguments[0];
          return axisLabelRotate2;
        };
        rebindAll6(axisLabelRotate2, adaptee, exclude2("decorate"));
        return axisLabelRotate2;
      };
      var axisLabelOffset = function(adaptee) {
        var labelOffsetDepth = "auto";
        var decorate = function decorate2() {
        };
        var isVertical = function isVertical2() {
          return adaptee.orient() === "left" || adaptee.orient() === "right";
        };
        var sign2 = function sign3() {
          return adaptee.orient() === "top" || adaptee.orient() === "left" ? -1 : 1;
        };
        var decorateOffset = function decorateOffset2(sel) {
          var _measureLabels = measureLabels(adaptee)(sel), maxHeight = _measureLabels.maxHeight, maxWidth = _measureLabels.maxWidth, labelCount = _measureLabels.labelCount;
          var range4 = adaptee.scale().range()[1];
          var offsetLevels = labelOffsetDepth === "auto" ? Math.floor((isVertical() ? maxHeight : maxWidth) * labelCount / range4) + 1 : labelOffsetDepth;
          var text = sel.select("text");
          var existingTransform = text.attr("transform");
          var transform2 = function transform3(i4) {
            return isVertical() ? "translate(".concat(i4 % offsetLevels * maxWidth * sign2(), ", 0)") : "translate(0, ".concat(i4 % offsetLevels * maxHeight * sign2(), ")");
          };
          text.attr("transform", function(_4, i4) {
            return "".concat(existingTransform, " ").concat(transform2(i4));
          });
        };
        var axisLabelOffset2 = function axisLabelOffset3(arg) {
          return adaptee(arg);
        };
        adaptee.decorate(function(s3) {
          decorateOffset(s3);
          decorate(s3);
        });
        axisLabelOffset2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return axisLabelOffset2;
        };
        axisLabelOffset2.labelOffsetDepth = function() {
          if (!arguments.length) {
            return labelOffsetDepth;
          }
          labelOffsetDepth = arguments.length <= 0 ? void 0 : arguments[0];
          return axisLabelOffset2;
        };
        rebindAll6(axisLabelOffset2, adaptee, exclude2("decorate"));
        return axisLabelOffset2;
      };
      var key = "__d3fc-elements__";
      var get4 = function get5(element2) {
        return element2[key] || {};
      };
      var set6 = function set7(element2, data) {
        return void (element2[key] = data);
      };
      var clear = function clear2(element2) {
        return delete element2[key];
      };
      var find2 = function find3(element2) {
        return element2.tagName === "D3FC-GROUP" ? [element2].concat(_toConsumableArray(element2.querySelectorAll("d3fc-canvas, d3fc-group, d3fc-svg"))) : [element2];
      };
      var measure = function measure2(element2) {
        var _data$get = get4(element2), previousWidth = _data$get.width, previousHeight = _data$get.height;
        var pixelRatio = element2.useDevicePixelRatio && window.devicePixelRatio != null ? window.devicePixelRatio : 1;
        var width = element2.clientWidth * pixelRatio;
        var height = element2.clientHeight * pixelRatio;
        var resized = width !== previousWidth || height !== previousHeight;
        var child = element2.children[0];
        set6(element2, {
          pixelRatio,
          width,
          height,
          resized,
          child
        });
      };
      if (typeof CustomEvent !== "function") {
        throw new Error("d3fc-element depends on CustomEvent. Make sure that you load a polyfill in older browsers. See README.");
      }
      var resize = function resize2(element2) {
        var detail = get4(element2);
        var event2 = new CustomEvent("measure", {
          detail
        });
        element2.dispatchEvent(event2);
      };
      var draw = function draw2(element2) {
        var detail = get4(element2);
        var event2 = new CustomEvent("draw", {
          detail
        });
        element2.dispatchEvent(event2);
      };
      var redraw = function(elements) {
        var allElements = elements.map(find2).reduce(function(a5, b3) {
          return a5.concat(b3);
        });
        allElements.forEach(measure);
        allElements.forEach(resize);
        allElements.forEach(draw);
      };
      var getQueue = function getQueue2(element2) {
        return get4(element2.ownerDocument).queue || [];
      };
      var setQueue = function setQueue2(element2, queue) {
        var _data$get = get4(element2.ownerDocument), requestId = _data$get.requestId;
        if (requestId == null) {
          requestId = requestAnimationFrame(function() {
            var queue2 = getQueue(element2);
            redraw(queue2);
            clearQueue(element2);
          });
        }
        set6(element2.ownerDocument, {
          queue,
          requestId
        });
      };
      var clearQueue = function clearQueue2(element2) {
        return clear(element2.ownerDocument);
      };
      var isDescendentOf = function isDescendentOf2(element2, ancestor) {
        var node = element2;
        do {
          if (node.parentNode === ancestor) {
            return true;
          }
        } while (node = node.parentNode);
        return false;
      };
      var _requestRedraw = function(element2) {
        var queue = getQueue(element2);
        var queueContainsElement = queue.indexOf(element2) > -1;
        if (queueContainsElement) {
          return;
        }
        var queueContainsAncestor = queue.some(function(queuedElement) {
          return isDescendentOf(element2, queuedElement);
        });
        if (queueContainsAncestor) {
          return;
        }
        var queueExcludingDescendents = queue.filter(function(queuedElement) {
          return !isDescendentOf(queuedElement, element2);
        });
        queueExcludingDescendents.push(element2);
        setQueue(element2, queueExcludingDescendents);
      };
      if (typeof HTMLElement !== "function") {
        throw new Error("d3fc-element depends on Custom Elements (v1). Make sure that you load a polyfill in older browsers. See README.");
      }
      var addMeasureListener = function addMeasureListener2(element2) {
        if (element2.__measureListener__ != null) {
          return;
        }
        element2.__measureListener__ = function(event2) {
          return element2.setMeasurements(event2.detail);
        };
        element2.addEventListener("measure", element2.__measureListener__);
      };
      var removeMeasureListener = function removeMeasureListener2(element2) {
        if (element2.__measureListener__ == null) {
          return;
        }
        element2.removeEventListener("measure", element2.__measureListener__);
        element2.__measureListener__ = null;
      };
      var element = function(createNode, applyMeasurements) {
        return /* @__PURE__ */ function(_HTMLElement) {
          _inherits(_class, _HTMLElement);
          var _super = _createSuper(_class);
          function _class() {
            _classCallCheck(this, _class);
            return _super.apply(this, arguments);
          }
          _createClass(_class, [{
            key: "attributeChangedCallback",
            value: function attributeChangedCallback(name) {
              switch (name) {
                case "use-device-pixel-ratio":
                  this.requestRedraw();
                  break;
              }
            }
          }, {
            key: "connectedCallback",
            value: function connectedCallback() {
              if (this.childNodes.length === 0) {
                this.appendChild(createNode());
              }
              addMeasureListener(this);
            }
          }, {
            key: "disconnectedCallback",
            value: function disconnectedCallback() {
              removeMeasureListener(this);
            }
          }, {
            key: "setMeasurements",
            value: function setMeasurements(_ref) {
              var width = _ref.width, height = _ref.height;
              var _this$childNodes = _toArray(this.childNodes), node = _this$childNodes[0], other = _this$childNodes.slice(1);
              if (other.length > 0) {
                throw new Error("A d3fc-svg/canvas element must only contain a single svg/canvas element.");
              }
              applyMeasurements(this, node, {
                width,
                height
              });
            }
          }, {
            key: "requestRedraw",
            value: function requestRedraw() {
              _requestRedraw(this);
            }
          }, {
            key: "useDevicePixelRatio",
            get: function get5() {
              return this.hasAttribute("use-device-pixel-ratio") && this.getAttribute("use-device-pixel-ratio") !== "false";
            },
            set: function set7(useDevicePixelRatio) {
              if (useDevicePixelRatio && !this.useDevicePixelRatio) {
                this.setAttribute("use-device-pixel-ratio", "");
              } else if (!useDevicePixelRatio && this.useDevicePixelRatio) {
                this.removeAttribute("use-device-pixel-ratio");
              }
              this.requestRedraw();
            }
          }], [{
            key: "observedAttributes",
            get: function get5() {
              return ["use-device-pixel-ratio"];
            }
          }]);
          return _class;
        }(/* @__PURE__ */ _wrapNativeSuper(HTMLElement));
      };
      var _default = /* @__PURE__ */ function(_element) {
        _inherits(_default2, _element);
        var _super = _createSuper(_default2);
        function _default2() {
          _classCallCheck(this, _default2);
          return _super.apply(this, arguments);
        }
        _createClass(_default2, [{
          key: "setWebglViewport",
          get: function get5() {
            return this.hasAttribute("set-webgl-viewport") && this.getAttribute("set-webgl-viewport") !== "false";
          },
          set: function set7(setWebglViewport) {
            if (setWebglViewport && !this.setWebglViewport) {
              this.setAttribute("set-webgl-viewport", "");
            } else if (!setWebglViewport && this.setWebglViewport) {
              this.removeAttribute("set-webgl-viewport");
            }
            this.requestRedraw();
          }
        }]);
        return _default2;
      }(element(function() {
        return document.createElement("canvas");
      }, function(element2, node, _ref) {
        var width = _ref.width, height = _ref.height;
        node.setAttribute("width", width);
        node.setAttribute("height", height);
        if (element2.setWebglViewport) {
          var context = node.getContext("webgl");
          context.viewport(0, 0, width, height);
        }
      }));
      var updateAutoResize = function updateAutoResize2(element2) {
        if (element2.autoResize) {
          addAutoResizeListener(element2);
        } else {
          removeAutoResizeListener(element2);
        }
      };
      var addAutoResizeListener = function addAutoResizeListener2(element2) {
        if (element2.__autoResizeListener__ != null) {
          return;
        }
        element2.__autoResizeListener__ = function() {
          return _requestRedraw(element2);
        };
        addEventListener("resize", element2.__autoResizeListener__);
      };
      var removeAutoResizeListener = function removeAutoResizeListener2(element2) {
        if (element2.__autoResizeListener__ == null) {
          return;
        }
        removeEventListener("resize", element2.__autoResizeListener__);
        element2.__autoResizeListener__ = null;
      };
      var _default$1 = /* @__PURE__ */ function(_HTMLElement) {
        _inherits(_default2, _HTMLElement);
        var _super = _createSuper(_default2);
        function _default2() {
          _classCallCheck(this, _default2);
          return _super.apply(this, arguments);
        }
        _createClass(_default2, [{
          key: "connectedCallback",
          value: function connectedCallback() {
            updateAutoResize(this);
          }
        }, {
          key: "disconnectedCallback",
          value: function disconnectedCallback() {
            removeAutoResizeListener(this);
          }
        }, {
          key: "requestRedraw",
          value: function requestRedraw() {
            _requestRedraw(this);
          }
        }, {
          key: "attributeChangedCallback",
          value: function attributeChangedCallback(name) {
            switch (name) {
              case "auto-resize":
                updateAutoResize(this);
                break;
            }
          }
        }, {
          key: "autoResize",
          get: function get5() {
            return this.hasAttribute("auto-resize") && this.getAttribute("auto-resize") !== "false";
          },
          set: function set7(autoResize) {
            if (autoResize && !this.autoResize) {
              this.setAttribute("auto-resize", "");
            } else if (!autoResize && this.autoResize) {
              this.removeAttribute("auto-resize");
            }
            updateAutoResize(this);
          }
        }], [{
          key: "observedAttributes",
          get: function get5() {
            return ["auto-resize"];
          }
        }]);
        return _default2;
      }(/* @__PURE__ */ _wrapNativeSuper(HTMLElement));
      var Svg = element(function() {
        return document.createElementNS("http://www.w3.org/2000/svg", "svg");
      }, function(element2, node, _ref) {
        var width = _ref.width, height = _ref.height;
        node.setAttribute("viewBox", "0 0 ".concat(width, " ").concat(height));
      });
      var css = "d3fc-canvas,d3fc-svg{position:relative;display:block}d3fc-canvas>canvas,d3fc-svg>svg{position:absolute;height:100%;width:100%}d3fc-svg>svg{overflow:visible}";
      var styleElement = document.createElement("style");
      styleElement.setAttribute("type", "text/css");
      document.querySelector("head").appendChild(styleElement);
      if (styleElement.styleSheet) {
        styleElement.styleSheet.cssText += css;
      } else {
        styleElement.textContent += css;
      }
      if ((typeof customElements === "undefined" ? "undefined" : _typeof2(customElements)) !== "object" || typeof customElements.define !== "function") {
        throw new Error("d3fc-element depends on Custom Elements (v1). Make sure that you load a polyfill in older browsers. See README.");
      }
      var alreadyRegistered = [];
      var registerElement = function registerElement2(name, element2) {
        if (customElements.get(name)) {
          alreadyRegistered.push(name);
        } else {
          customElements.define(name, element2);
        }
      };
      registerElement("d3fc-canvas", _default);
      registerElement("d3fc-group", _default$1);
      registerElement("d3fc-svg", Svg);
      if (alreadyRegistered.length > 0) {
        console.warn('The d3fc components "'.concat(alreadyRegistered.join(", "), '" is/are already registered on window. Be aware that this can create compatibility issues if different versions are used.'));
      }
      var pointer2 = function() {
        var pointEvent = d3Dispatch.dispatch("point");
        function mousemove(event2) {
          var point8 = d3Selection.pointer(event2);
          pointEvent.call("point", this, [{
            x: point8[0],
            y: point8[1]
          }]);
        }
        function mouseleave() {
          void pointEvent.call("point", this, []);
        }
        var instance = function instance2(selection3) {
          selection3.on("mouseenter.pointer", mousemove).on("mousemove.pointer", mousemove).on("mouseleave.pointer", mouseleave);
        };
        rebind(instance, pointEvent, "on");
        return instance;
      };
      var group2 = function() {
        var key2 = "";
        var orient = "vertical";
        var value = function value2(row, column) {
          return Number(row[column]);
        };
        var verticalgroup = function verticalgroup2(data) {
          return Object.keys(data[0]).filter(function(k4) {
            return k4 !== key2;
          }).map(function(k4) {
            var values = data.filter(function(row) {
              return row[k4];
            }).map(function(row) {
              var cell = [row[key2], value(row, k4)];
              cell.data = row;
              return cell;
            });
            values.key = k4;
            return values;
          });
        };
        var horizontalgroup = function horizontalgroup2(data) {
          return data.map(function(row) {
            var values = Object.keys(row).filter(function(d2) {
              return d2 !== key2;
            }).map(function(k4) {
              var cell = [k4, value(row, k4)];
              cell.data = row;
              return cell;
            });
            values.key = row[key2];
            return values;
          });
        };
        var group3 = function group4(data) {
          return orient === "vertical" ? verticalgroup(data) : horizontalgroup(data);
        };
        group3.key = function() {
          if (!arguments.length) {
            return key2;
          }
          key2 = arguments.length <= 0 ? void 0 : arguments[0];
          return group3;
        };
        group3.value = function() {
          if (!arguments.length) {
            return value;
          }
          value = arguments.length <= 0 ? void 0 : arguments[0];
          return group3;
        };
        group3.orient = function() {
          if (!arguments.length) {
            return orient;
          }
          orient = arguments.length <= 0 ? void 0 : arguments[0];
          return group3;
        };
        return group3;
      };
      var store = function() {
        var data = {};
        var store2 = function store3(target) {
          for (var _i = 0, _Object$keys = Object.keys(data); _i < _Object$keys.length; _i++) {
            var key2 = _Object$keys[_i];
            target[key2].apply(null, data[key2]);
          }
          return target;
        };
        for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
          names[_key] = arguments[_key];
        }
        var _loop = function _loop2() {
          var name = _names[_i2];
          store2[name] = function() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            if (!args.length) {
              return data[name];
            }
            data[name] = args;
            return store2;
          };
        };
        for (var _i2 = 0, _names = names; _i2 < _names.length; _i2++) {
          _loop();
        }
        return store2;
      };
      var css$1 = "d3fc-group.cartesian-chart{width:100%;height:100%;overflow:hidden;display:grid;display:-ms-grid;grid-template-columns:minmax(1em,max-content) auto 1fr auto minmax(1em,max-content);-ms-grid-columns:minmax(1em,max-content) auto 1fr auto minmax(1em,max-content);grid-template-rows:minmax(1em,max-content) auto 1fr auto minmax(1em,max-content);-ms-grid-rows:minmax(1em,max-content) auto 1fr auto minmax(1em,max-content);}\nd3fc-group.cartesian-chart>.top-label{align-self:center;-ms-grid-column-align:center;justify-self:center;-ms-grid-row-align:center;grid-column:3;-ms-grid-column:3;grid-row:1;-ms-grid-row:1;}\nd3fc-group.cartesian-chart>.top-axis{height:2em;grid-column:3;-ms-grid-column:3;grid-row:2;-ms-grid-row:2;}\nd3fc-group.cartesian-chart>.left-label{align-self:center;-ms-grid-column-align:center;justify-self:center;-ms-grid-row-align:center;grid-column:1;-ms-grid-column:1;grid-row:3;-ms-grid-row:3;}\nd3fc-group.cartesian-chart>.left-axis{width:3em;grid-column:2;-ms-grid-column:2;grid-row:3;-ms-grid-row:3;}\nd3fc-group.cartesian-chart>.plot-area{overflow:hidden;grid-column:3;-ms-grid-column:3;grid-row:3;-ms-grid-row:3;}\nd3fc-group.cartesian-chart>.right-axis{width:3em;grid-column:4;-ms-grid-column:4;grid-row:3;-ms-grid-row:3;}\nd3fc-group.cartesian-chart>.right-label{align-self:center;-ms-grid-column-align:center;justify-self:center;-ms-grid-row-align:center;grid-column:5;-ms-grid-column:5;grid-row:3;-ms-grid-row:3;}\nd3fc-group.cartesian-chart>.bottom-axis{height:2em;grid-column:3;-ms-grid-column:3;grid-row:4;-ms-grid-row:4;}\nd3fc-group.cartesian-chart>.bottom-label{align-self:center;-ms-grid-column-align:center;justify-self:center;-ms-grid-row-align:center;grid-column:3;-ms-grid-column:3;grid-row:5;-ms-grid-row:5;}\nd3fc-group.cartesian-chart>.y-label{display:flex;transform:rotate(-90deg);width:1em;white-space:nowrap;justify-content:center;}";
      var styleElement$1 = document.createElement("style");
      styleElement$1.setAttribute("type", "text/css");
      document.querySelector("head").appendChild(styleElement$1);
      if (styleElement$1.styleSheet) {
        styleElement$1.styleSheet.cssText += css$1;
      } else {
        styleElement$1.textContent += css$1;
      }
      var functor$5 = function functor2(v4) {
        return typeof v4 === "function" ? v4 : function() {
          return v4;
        };
      };
      var cartesianChart = function() {
        var _getArguments = getArguments.apply(void 0, arguments), xScale = _getArguments.xScale, yScale = _getArguments.yScale, xAxis = _getArguments.xAxis, yAxis = _getArguments.yAxis;
        var chartLabel = functor$5("");
        var xLabel = functor$5("");
        var yLabel = functor$5("");
        var xAxisHeight = functor$5(null);
        var yAxisWidth = functor$5(null);
        var yOrient = functor$5("right");
        var xOrient = functor$5("bottom");
        var webglPlotArea = null;
        var canvasPlotArea = null;
        var svgPlotArea = null;
        var isContextLost = false;
        var useDevicePixelRatio = true;
        var xAxisStore = store("tickFormat", "ticks", "tickArguments", "tickSize", "tickSizeInner", "tickSizeOuter", "tickValues", "tickPadding", "tickCenterLabel");
        var xDecorate = function xDecorate2() {
        };
        var yAxisStore = store("tickFormat", "ticks", "tickArguments", "tickSize", "tickSizeInner", "tickSizeOuter", "tickValues", "tickPadding", "tickCenterLabel");
        var yDecorate = function yDecorate2() {
        };
        var decorate = function decorate2() {
        };
        var containerDataJoin = dataJoin3("d3fc-group", "cartesian-chart");
        var webglDataJoin = dataJoin3("d3fc-canvas", "webgl-plot-area");
        var canvasDataJoin = dataJoin3("d3fc-canvas", "canvas-plot-area");
        var svgDataJoin = dataJoin3("d3fc-svg", "svg-plot-area");
        var xAxisDataJoin = dataJoin3("d3fc-svg", "x-axis").key(function(d2) {
          return d2;
        });
        var yAxisDataJoin = dataJoin3("d3fc-svg", "y-axis").key(function(d2) {
          return d2;
        });
        var chartLabelDataJoin = dataJoin3("div", "chart-label");
        var xLabelDataJoin = dataJoin3("div", "x-label").key(function(d2) {
          return d2;
        });
        var yLabelDataJoin = dataJoin3("div", "y-label").key(function(d2) {
          return d2;
        });
        var propagateTransition = function propagateTransition2(maybeTransition) {
          return function(selection3) {
            return isTransition(maybeTransition) ? selection3.transition(maybeTransition) : selection3;
          };
        };
        var cartesian2 = function cartesian3(selection3) {
          var transitionPropagator = propagateTransition(selection3);
          selection3.each(function(data, index2, group3) {
            var container = containerDataJoin(d3Selection.select(group3[index2]), [data]);
            container.enter().attr("auto-resize", "");
            chartLabelDataJoin(container, [xOrient(data)]).attr("class", function(d2) {
              return d2 === "top" ? "chart-label bottom-label" : "chart-label top-label";
            }).style("margin-bottom", function(d2) {
              return d2 === "top" ? 0 : "1em";
            }).style("margin-top", function(d2) {
              return d2 === "top" ? "1em" : 0;
            }).text(chartLabel(data));
            xLabelDataJoin(container, [xOrient(data)]).attr("class", function(d2) {
              return "x-label ".concat(d2, "-label");
            }).text(xLabel(data));
            yLabelDataJoin(container, [yOrient(data)]).attr("class", function(d2) {
              return "y-label ".concat(d2, "-label");
            }).text(yLabel(data));
            webglDataJoin(container, webglPlotArea ? [data] : []).attr("set-webgl-viewport", "").classed("plot-area", true).attr("use-device-pixel-ratio", useDevicePixelRatio).on("draw", function(event2, d2) {
              var _event$detail = event2.detail, child = _event$detail.child, pixelRatio = _event$detail.pixelRatio;
              webglPlotArea.context(isContextLost ? null : child.getContext("webgl")).pixelRatio(pixelRatio).xScale(xScale).yScale(yScale);
              webglPlotArea(d2);
            });
            container.select(".webgl-plot-area>canvas").on("webglcontextlost", function(event2) {
              console.warn("WebGLRenderingContext lost");
              event2.preventDefault();
              isContextLost = true;
              container.node().requestRedraw();
            }).on("webglcontextrestored", function() {
              console.info("WebGLRenderingContext restored");
              isContextLost = false;
              container.node().requestRedraw();
            });
            canvasDataJoin(container, canvasPlotArea ? [data] : []).classed("plot-area", true).attr("use-device-pixel-ratio", useDevicePixelRatio).on("draw", function(event2, d2) {
              var _event$detail2 = event2.detail, child = _event$detail2.child, pixelRatio = _event$detail2.pixelRatio;
              var context = child.getContext("2d");
              context.save();
              if (useDevicePixelRatio) {
                context.scale(pixelRatio, pixelRatio);
              }
              canvasPlotArea.context(context).xScale(xScale).yScale(yScale);
              canvasPlotArea(d2);
              context.restore();
            });
            svgDataJoin(container, svgPlotArea ? [data] : []).classed("plot-area", true).on("draw", function(event2, d2) {
              var child = event2.detail.child;
              svgPlotArea.xScale(xScale).yScale(yScale);
              transitionPropagator(d3Selection.select(child).datum(d2)).call(svgPlotArea);
            });
            xAxisDataJoin(container, [xOrient(data)]).attr("class", function(d2) {
              return "x-axis ".concat(d2, "-axis");
            }).style("height", xAxisHeight(data)).on("measure", function(event2, d2) {
              var _event$detail3 = event2.detail, width = _event$detail3.width, height = _event$detail3.height, child = _event$detail3.child;
              if (d2 === "top") {
                d3Selection.select(child).attr("viewBox", "0 ".concat(-height, " ").concat(width, " ").concat(height));
              }
              xScale.range([0, width]);
            }).on("draw", function(event2, d2) {
              var child = event2.detail.child;
              var xAxisComponent = d2 === "top" ? xAxis.top(xScale) : xAxis.bottom(xScale);
              xAxisComponent.decorate(xDecorate);
              transitionPropagator(d3Selection.select(child).datum(d2)).call(xAxisStore(xAxisComponent));
            });
            yAxisDataJoin(container, [yOrient(data)]).attr("class", function(d2) {
              return "y-axis ".concat(d2, "-axis");
            }).style("width", yAxisWidth(data)).on("measure", function(event2, d2) {
              var _event$detail4 = event2.detail, width = _event$detail4.width, height = _event$detail4.height, child = _event$detail4.child;
              if (d2 === "left") {
                d3Selection.select(child).attr("viewBox", "".concat(-width, " 0 ").concat(width, " ").concat(height));
              }
              yScale.range([height, 0]);
            }).on("draw", function(event2, d2) {
              var child = event2.detail.child;
              var yAxisComponent = d2 === "left" ? yAxis.left(yScale) : yAxis.right(yScale);
              yAxisComponent.decorate(yDecorate);
              transitionPropagator(d3Selection.select(child).datum(d2)).call(yAxisStore(yAxisComponent));
            });
            container.each(function(d2, i4, nodes) {
              return nodes[i4].requestRedraw();
            });
            decorate(container, data, index2);
          });
        };
        var scaleExclusions = exclude2(
          /range\w*/,
          /tickFormat/
        );
        rebindAll6(cartesian2, xScale, scaleExclusions, prefix2("x"));
        rebindAll6(cartesian2, yScale, scaleExclusions, prefix2("y"));
        rebindAll6(cartesian2, xAxisStore, prefix2("x"));
        rebindAll6(cartesian2, yAxisStore, prefix2("y"));
        cartesian2.xOrient = function() {
          if (!arguments.length) {
            return xOrient;
          }
          xOrient = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.yOrient = function() {
          if (!arguments.length) {
            return yOrient;
          }
          yOrient = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.xDecorate = function() {
          if (!arguments.length) {
            return xDecorate;
          }
          xDecorate = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        cartesian2.yDecorate = function() {
          if (!arguments.length) {
            return yDecorate;
          }
          yDecorate = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        cartesian2.chartLabel = function() {
          if (!arguments.length) {
            return chartLabel;
          }
          chartLabel = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.xLabel = function() {
          if (!arguments.length) {
            return xLabel;
          }
          xLabel = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.yLabel = function() {
          if (!arguments.length) {
            return yLabel;
          }
          yLabel = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.xAxisHeight = function() {
          if (!arguments.length) {
            return xAxisHeight;
          }
          xAxisHeight = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.yAxisWidth = function() {
          if (!arguments.length) {
            return yAxisWidth;
          }
          yAxisWidth = functor$5(arguments.length <= 0 ? void 0 : arguments[0]);
          return cartesian2;
        };
        cartesian2.webglPlotArea = function() {
          if (!arguments.length) {
            return webglPlotArea;
          }
          webglPlotArea = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        cartesian2.canvasPlotArea = function() {
          if (!arguments.length) {
            return canvasPlotArea;
          }
          canvasPlotArea = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        cartesian2.svgPlotArea = function() {
          if (!arguments.length) {
            return svgPlotArea;
          }
          svgPlotArea = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        cartesian2.decorate = function() {
          if (!arguments.length) {
            return decorate;
          }
          decorate = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        cartesian2.useDevicePixelRatio = function() {
          if (!arguments.length) {
            return useDevicePixelRatio;
          }
          useDevicePixelRatio = arguments.length <= 0 ? void 0 : arguments[0];
          return cartesian2;
        };
        return cartesian2;
      };
      var getArguments = function getArguments2() {
        var defaultSettings = {
          xScale: d3Scale.scaleIdentity(),
          yScale: d3Scale.scaleIdentity(),
          xAxis: {
            bottom: axisBottom3,
            top: axisTop3
          },
          yAxis: {
            right: axisRight4,
            left: axisLeft3
          }
        };
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (args.length === 1 && !args[0].domain && !args[0].range) {
          return Object.assign(defaultSettings, args[0]);
        }
        return Object.assign(defaultSettings, {
          xScale: args[0] || defaultSettings.xScale,
          yScale: args[1] || defaultSettings.yScale
        });
      };
      var functor$6 = function functor2(v4) {
        return typeof v4 === "function" ? v4 : function() {
          return v4;
        };
      };
      var cartesianBase = function(setPlotArea, defaultPlotArea) {
        return function() {
          var yLabel = functor$6("");
          var plotArea = defaultPlotArea;
          var decorate = function decorate2() {
          };
          var cartesian2 = cartesianChart.apply(void 0, arguments);
          var cartesianBase2 = function cartesianBase3(selection3) {
            setPlotArea(cartesian2, plotArea);
            cartesian2.decorate(function(container, data, index2) {
              container.enter().select(".x-label").style("height", "1em").style("line-height", "1em");
              var yOrientValue = cartesian2.yOrient()(data);
              container.enter().append("div").attr("class", "y-label-container").style("grid-column", yOrientValue === "left" ? 1 : 5).style("-ms-grid-column", yOrientValue === "left" ? 1 : 5).style("grid-row", 3).style("-ms-grid-row", 3).style("width", "1em").style("display", "flex").style("align-items", "center").style("justify-content", "center").style("white-space", "nowrap").append("div").attr("class", "y-label").style("transform", "rotate(-90deg)");
              container.select(".y-label-container>.y-label").text(yLabel);
              decorate(container, data, index2);
            });
            selection3.call(cartesian2);
          };
          rebindAll6(cartesianBase2, cartesian2, include(/^x/, /^y/, "chartLabel"));
          cartesianBase2.yLabel = function() {
            if (!arguments.length) {
              return yLabel;
            }
            yLabel = functor$6(arguments.length <= 0 ? void 0 : arguments[0]);
            return cartesianBase2;
          };
          cartesianBase2.plotArea = function() {
            if (!arguments.length) {
              return plotArea;
            }
            plotArea = arguments.length <= 0 ? void 0 : arguments[0];
            return cartesianBase2;
          };
          cartesianBase2.decorate = function() {
            if (!arguments.length) {
              return decorate;
            }
            decorate = arguments.length <= 0 ? void 0 : arguments[0];
            return cartesianBase2;
          };
          return cartesianBase2;
        };
      };
      var cartesian = cartesianBase(function(cartesian2, plotArea) {
        return cartesian2.svgPlotArea(plotArea);
      }, seriesSvgLine2);
      var cartesian$1 = cartesianBase(function(cartesian2, plotArea) {
        return cartesian2.canvasPlotArea(plotArea);
      }, seriesCanvasLine2);
      var brushForOrient = function brushForOrient2(orient) {
        switch (orient) {
          case "x":
            return d3Brush.brushX();
          case "y":
            return d3Brush.brushY();
          case "xy":
            return d3Brush.brush();
        }
      };
      var invertRange = function invertRange2(range4) {
        return [range4[1], range4[0]];
      };
      var brushBase = function brushBase2(orient) {
        var brush3 = brushForOrient(orient);
        var eventDispatch = d3Dispatch.dispatch("brush", "start", "end");
        var xScale = d3Scale.scaleIdentity();
        var yScale = d3Scale.scaleIdentity();
        var innerJoin = dataJoin3("g", "brush");
        var mapSelection = function mapSelection2(selection3, xMapping, yMapping) {
          switch (orient) {
            case "x":
              return selection3.map(xMapping);
            case "y":
              return selection3.map(yMapping);
            case "xy":
              return [[xMapping(selection3[0][0]), yMapping(selection3[0][1])], [xMapping(selection3[1][0]), yMapping(selection3[1][1])]];
          }
        };
        var percentToSelection = function percentToSelection2(percent) {
          return mapSelection(percent, d3Scale.scaleLinear().domain(xScale.range()).invert, d3Scale.scaleLinear().domain(invertRange(yScale.range())).invert);
        };
        var selectionToPercent = function selectionToPercent2(selection3) {
          return mapSelection(selection3, d3Scale.scaleLinear().domain(xScale.range()), d3Scale.scaleLinear().domain(invertRange(yScale.range())));
        };
        var updateXDomain = function updateXDomain2(selection3) {
          var f4 = d3Scale.scaleLinear().domain(xScale.domain());
          if (orient === "x") {
            return selection3.map(f4.invert);
          } else if (orient === "xy") {
            return [f4.invert(selection3[0][0]), f4.invert(selection3[1][0])];
          }
        };
        var updateYDomain = function updateYDomain2(selection3) {
          var g3 = d3Scale.scaleLinear().domain(invertRange(yScale.domain()));
          if (orient === "y") {
            return [selection3[1], selection3[0]].map(g3.invert);
          } else if (orient === "xy") {
            return [g3.invert(selection3[1][1]), g3.invert(selection3[0][1])];
          }
        };
        var transformEvent = function transformEvent2(event2) {
          if (event2.sourceEvent && event2.sourceEvent.type === "draw")
            return;
          if (event2.selection) {
            var mappedSelection = selectionToPercent(event2.selection);
            eventDispatch.call(event2.type, {}, {
              selection: mappedSelection,
              xDomain: updateXDomain(mappedSelection),
              yDomain: updateYDomain(mappedSelection)
            });
          } else {
            eventDispatch.call(event2.type, {}, {});
          }
        };
        var base2 = function base3(selection3) {
          selection3.each(function(data, index2, group3) {
            brush3.extent([[xScale.range()[0], yScale.range()[1]], [xScale.range()[1], yScale.range()[0]]]);
            brush3.on("end", function(event2) {
              return transformEvent(event2);
            }).on("brush", function(event2) {
              return transformEvent(event2);
            }).on("start", function(event2) {
              return transformEvent(event2);
            });
            var container = innerJoin(d3Selection.select(group3[index2]), [data]);
            container.call(brush3).call(brush3.move, data ? percentToSelection(data) : null);
          });
        };
        base2.xScale = function() {
          if (!arguments.length) {
            return xScale;
          }
          xScale = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        base2.yScale = function() {
          if (!arguments.length) {
            return yScale;
          }
          yScale = arguments.length <= 0 ? void 0 : arguments[0];
          return base2;
        };
        rebind(base2, eventDispatch, "on");
        rebind(base2, brush3, "filter", "handleSize");
        return base2;
      };
      var brushX2 = function brushX3() {
        return brushBase("x");
      };
      var brushY2 = function brushY3() {
        return brushBase("y");
      };
      var brush2 = function brush3() {
        return brushBase("xy");
      };
      var domainsEqual = function domainsEqual2(a5, b3) {
        if (a5 == null && b3 == null) {
          return true;
        }
        var aDomain = a5.domain();
        var bDomain = b3.domain();
        return aDomain.length === bDomain.length && aDomain.every(function(d2, i4) {
          var _bDomain$i;
          return (d2 === null || d2 === void 0 ? void 0 : d2.valueOf()) === ((_bDomain$i = bDomain[i4]) === null || _bDomain$i === void 0 ? void 0 : _bDomain$i.valueOf());
        });
      };
      var subtract = function subtract2(a5, b3) {
        return d3Zoom.zoomIdentity.scale(a5.k / b3.k).translate(a5.x - b3.x, a5.y - b3.y);
      };
      var symbol2 = Symbol("d3fc-domain-zoom");
      var zoom = function() {
        var dispatcher = d3Dispatch.dispatch("zoom");
        var zoomer = d3Zoom.zoom().on("zoom", function(_ref) {
          var transform2 = _ref.transform;
          var node = this;
          var updatedTransform = transform2;
          var _node$symbol = node[symbol2], originalXScale = _node$symbol.originalXScale, previousXScale = _node$symbol.previousXScale, xScale = _node$symbol.xScale, originalYScale = _node$symbol.originalYScale, previousYScale = _node$symbol.previousYScale, yScale = _node$symbol.yScale, previousTransform = _node$symbol.previousTransform;
          if (!domainsEqual(previousXScale, xScale) || !domainsEqual(previousYScale, yScale)) {
            originalXScale = xScale === null || xScale === void 0 ? void 0 : xScale.copy();
            originalYScale = yScale === null || yScale === void 0 ? void 0 : yScale.copy();
            updatedTransform = subtract(transform2, previousTransform);
          }
          if (xScale != null) {
            previousXScale = updatedTransform.rescaleX(originalXScale.range(xScale.range()));
            xScale.domain(previousXScale.domain());
          }
          if (yScale != null) {
            previousYScale = updatedTransform.rescaleY(originalYScale.range(yScale.range()));
            yScale.domain(previousYScale.domain());
          }
          previousTransform = updatedTransform;
          node[symbol2] = {
            originalXScale,
            previousXScale,
            xScale,
            originalYScale,
            previousYScale,
            yScale,
            previousTransform
          };
          if (updatedTransform !== transform2) {
            zoomer.transform(d3Selection.select(node), updatedTransform);
          }
          dispatcher.call("zoom");
        });
        var instance = function instance2(selection3) {
          var xScale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
          var yScale = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (xScale == null && yScale == null) {
            console.warn("Without an xScale and/or yScale specified, this component won't do anything. Perhaps you forgot to specify them e.g. selection.call(zoom, x, y)?");
          }
          selection3.each(function(d2, i4, nodes) {
            var existingContext = nodes[i4][symbol2];
            if (existingContext != null && existingContext.xScale === xScale && existingContext.yScale === yScale) {
              console.warn("This component should only be called on a selection once. Perhaps you're missing an .enter()?");
            }
            var xScaleCopy = xScale === null || xScale === void 0 ? void 0 : xScale.copy();
            var yScaleCopy = yScale === null || yScale === void 0 ? void 0 : yScale.copy();
            nodes[i4][symbol2] = {
              originalXScale: xScaleCopy,
              previousXScale: xScaleCopy,
              xScale,
              originalYScale: yScaleCopy,
              previousYScale: yScaleCopy,
              yScale,
              previousTransform: d3Zoom.zoomIdentity
            };
          }).call(zoomer);
        };
        rebind(instance, dispatcher, "on");
        rebind(instance, zoomer, "extent", "filter", "wheelDelta", "touchable", "clickDistance", "tapDistance", "duration", "interpolate");
        return instance;
      };
      exports2.annotationCanvasBand = band$1;
      exports2.annotationCanvasCrosshair = crosshair$1;
      exports2.annotationCanvasGridline = gridline$1;
      exports2.annotationCanvasLine = annotationLine$1;
      exports2.annotationSvgBand = band3;
      exports2.annotationSvgCrosshair = crosshair;
      exports2.annotationSvgGridline = gridline;
      exports2.annotationSvgLine = annotationLine;
      exports2.autoBandwidth = autoBandwidth4;
      exports2.axisBottom = axisBottom3;
      exports2.axisLabelOffset = axisLabelOffset;
      exports2.axisLabelRotate = axisLabelRotate;
      exports2.axisLeft = axisLeft3;
      exports2.axisOrdinalBottom = axisOrdinalBottom2;
      exports2.axisOrdinalLeft = axisOrdinalLeft2;
      exports2.axisOrdinalRight = axisOrdinalRight2;
      exports2.axisOrdinalTop = axisOrdinalTop2;
      exports2.axisRight = axisRight4;
      exports2.axisTop = axisTop3;
      exports2.brush = brush2;
      exports2.brushX = brushX2;
      exports2.brushY = brushY2;
      exports2.bucket = bucket;
      exports2.chartCanvasCartesian = cartesian$1;
      exports2.chartCartesian = cartesianChart;
      exports2.chartSvgCartesian = cartesian;
      exports2.dataJoin = dataJoin3;
      exports2.discontinuityIdentity = identity$1;
      exports2.discontinuityRange = provider;
      exports2.discontinuitySkipUtcWeekends = skipUtcWeekends;
      exports2.discontinuitySkipUtcWeeklyPattern = skipUtcWeeklyPattern;
      exports2.discontinuitySkipWeekends = skipWeekends;
      exports2.discontinuitySkipWeeklyPattern = skipWeeklyPattern;
      exports2.effectivelyZero = effectivelyZero;
      exports2.exclude = exclude2;
      exports2.extentDate = time2;
      exports2.extentLinear = linearExtent;
      exports2.extentTime = time2;
      exports2.feedGdax = gdax;
      exports2.group = group2;
      exports2.include = include;
      exports2.includeMap = includeMap;
      exports2.indicatorBollingerBands = bollingerBands;
      exports2.indicatorElderRay = elderRay;
      exports2.indicatorEnvelope = envelope;
      exports2.indicatorExponentialMovingAverage = exponentialMovingAverage;
      exports2.indicatorForceIndex = forceIndex;
      exports2.indicatorMacd = macd;
      exports2.indicatorMovingAverage = movingAverage;
      exports2.indicatorRelativeStrengthIndex = relativeStrengthIndex;
      exports2.indicatorStochasticOscillator = stochasticOscillator;
      exports2.isTransition = isTransition;
      exports2.largestTriangleOneBucket = largestTriangleOneBucket;
      exports2.largestTriangleThreeBucket = largestTriangleThreeBucket;
      exports2.layoutAnnealing = annealing;
      exports2.layoutBoundingBox = boundingBox;
      exports2.layoutGreedy = greedy;
      exports2.layoutLabel = label;
      exports2.layoutRemoveOverlaps = removeOverlaps;
      exports2.layoutTextLabel = textLabel;
      exports2.modeMedian = modeMedian;
      exports2.pointer = pointer2;
      exports2.prefix = prefix2;
      exports2.randomFinancial = financial;
      exports2.randomGeometricBrownianMotion = geometricBrownianMotion;
      exports2.randomSkipWeekends = skipWeekends$1;
      exports2.rebind = rebind;
      exports2.rebindAll = rebindAll6;
      exports2.scaleDiscontinuous = discontinuous;
      exports2.seriesCanvasArea = area$3;
      exports2.seriesCanvasBar = bar$3;
      exports2.seriesCanvasBoxPlot = boxPlot$3;
      exports2.seriesCanvasCandlestick = candlestick$3;
      exports2.seriesCanvasErrorBar = errorBar$3;
      exports2.seriesCanvasGrouped = grouped$1;
      exports2.seriesCanvasHeatmap = heatmap$1;
      exports2.seriesCanvasLine = seriesCanvasLine2;
      exports2.seriesCanvasMulti = seriesCanvasMulti5;
      exports2.seriesCanvasOhlc = ohlc$3;
      exports2.seriesCanvasPoint = seriesCanvasPoint;
      exports2.seriesCanvasRepeat = repeat$1;
      exports2.seriesSvgArea = area$2;
      exports2.seriesSvgBar = bar$2;
      exports2.seriesSvgBoxPlot = boxPlot$2;
      exports2.seriesSvgCandlestick = candlestick$2;
      exports2.seriesSvgErrorBar = errorBar$2;
      exports2.seriesSvgGrouped = grouped;
      exports2.seriesSvgHeatmap = heatmap;
      exports2.seriesSvgLine = seriesSvgLine2;
      exports2.seriesSvgMulti = seriesSvgMulti6;
      exports2.seriesSvgOhlc = ohlc$2;
      exports2.seriesSvgPoint = seriesSvgPoint3;
      exports2.seriesSvgRepeat = repeat;
      exports2.seriesWebglArea = area$4;
      exports2.seriesWebglBar = bar$4;
      exports2.seriesWebglBoxPlot = boxPlot$4;
      exports2.seriesWebglCandlestick = candlestick$4;
      exports2.seriesWebglErrorBar = errorBar$4;
      exports2.seriesWebglLine = line;
      exports2.seriesWebglMulti = multiSeries;
      exports2.seriesWebglOhlc = ohlc$4;
      exports2.seriesWebglPoint = point7;
      exports2.seriesWebglRepeat = repeat$2;
      exports2.shapeBar = shapeBar;
      exports2.shapeBoxPlot = shapeBoxPlot;
      exports2.shapeCandlestick = shapeCandlestick;
      exports2.shapeErrorBar = shapeErrorBar;
      exports2.shapeOhlc = shapeOhlc;
      exports2.webglAdjacentAttribute = webglAdjacentAttribute;
      exports2.webglAttribute = webglAttribute;
      exports2.webglBaseAttribute = baseAttributeBuilder;
      exports2.webglBufferBuilder = bufferBuilder;
      exports2.webglElementIndices = elementIndices;
      exports2.webglFillColor = fillColor$2;
      exports2.webglProgramBuilder = programBuilder;
      exports2.webglScaleLinear = linear5;
      exports2.webglScaleLog = log3;
      exports2.webglScaleMapper = webglScaleMapper;
      exports2.webglScalePow = pow3;
      exports2.webglSeriesArea = webglSeriesArea;
      exports2.webglSeriesBar = webglSeriesBar;
      exports2.webglSeriesBoxPlot = webglSeriesBoxPlot;
      exports2.webglSeriesCandlestick = webglSeriesCandlestick;
      exports2.webglSeriesErrorBar = webglSeriesErrorBar;
      exports2.webglSeriesLine = webglSeriesLine;
      exports2.webglSeriesOhlc = webglSeriesOhlc;
      exports2.webglSeriesPoint = webglSeriesPoint;
      exports2.webglShaderBuilder = shaderBuilder;
      exports2.webglStrokeColor = strokeColor$2;
      exports2.webglSymbolMapper = webglSymbolMapper;
      exports2.webglTypes = types;
      exports2.webglUniform = uniform;
      exports2.zoom = zoom;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// ../../node_modules/gradient-parser/build/node.js
var require_node = __commonJS({
  "../../node_modules/gradient-parser/build/node.js"(exports) {
    var GradientParser = GradientParser || {};
    GradientParser.stringify = function() {
      var visitor = {
        "visit_linear-gradient": function(node) {
          return visitor.visit_gradient(node);
        },
        "visit_repeating-linear-gradient": function(node) {
          return visitor.visit_gradient(node);
        },
        "visit_radial-gradient": function(node) {
          return visitor.visit_gradient(node);
        },
        "visit_repeating-radial-gradient": function(node) {
          return visitor.visit_gradient(node);
        },
        "visit_gradient": function(node) {
          var orientation = visitor.visit(node.orientation);
          if (orientation) {
            orientation += ", ";
          }
          return node.type + "(" + orientation + visitor.visit(node.colorStops) + ")";
        },
        "visit_shape": function(node) {
          var result = node.value, at2 = visitor.visit(node.at), style = visitor.visit(node.style);
          if (style) {
            result += " " + style;
          }
          if (at2) {
            result += " at " + at2;
          }
          return result;
        },
        "visit_default-radial": function(node) {
          var result = "", at2 = visitor.visit(node.at);
          if (at2) {
            result += at2;
          }
          return result;
        },
        "visit_extent-keyword": function(node) {
          var result = node.value, at2 = visitor.visit(node.at);
          if (at2) {
            result += " at " + at2;
          }
          return result;
        },
        "visit_position-keyword": function(node) {
          return node.value;
        },
        "visit_position": function(node) {
          return visitor.visit(node.value.x) + " " + visitor.visit(node.value.y);
        },
        "visit_%": function(node) {
          return node.value + "%";
        },
        "visit_em": function(node) {
          return node.value + "em";
        },
        "visit_px": function(node) {
          return node.value + "px";
        },
        "visit_literal": function(node) {
          return visitor.visit_color(node.value, node);
        },
        "visit_hex": function(node) {
          return visitor.visit_color("#" + node.value, node);
        },
        "visit_rgb": function(node) {
          return visitor.visit_color("rgb(" + node.value.join(", ") + ")", node);
        },
        "visit_rgba": function(node) {
          return visitor.visit_color("rgba(" + node.value.join(", ") + ")", node);
        },
        "visit_color": function(resultColor, node) {
          var result = resultColor, length3 = visitor.visit(node.length);
          if (length3) {
            result += " " + length3;
          }
          return result;
        },
        "visit_angular": function(node) {
          return node.value + "deg";
        },
        "visit_directional": function(node) {
          return "to " + node.value;
        },
        "visit_array": function(elements) {
          var result = "", size = elements.length;
          elements.forEach(function(element, i4) {
            result += visitor.visit(element);
            if (i4 < size - 1) {
              result += ", ";
            }
          });
          return result;
        },
        "visit": function(element) {
          if (!element) {
            return "";
          }
          var result = "";
          if (element instanceof Array) {
            return visitor.visit_array(element, result);
          } else if (element.type) {
            var nodeVisitor = visitor["visit_" + element.type];
            if (nodeVisitor) {
              return nodeVisitor(element);
            } else {
              throw Error("Missing visitor visit_" + element.type);
            }
          } else {
            throw Error("Invalid node.");
          }
        }
      };
      return function(root3) {
        return visitor.visit(root3);
      };
    }();
    var GradientParser = GradientParser || {};
    GradientParser.parse = function() {
      var tokens = {
        linearGradient: /^(\-(webkit|o|ms|moz)\-)?(linear\-gradient)/i,
        repeatingLinearGradient: /^(\-(webkit|o|ms|moz)\-)?(repeating\-linear\-gradient)/i,
        radialGradient: /^(\-(webkit|o|ms|moz)\-)?(radial\-gradient)/i,
        repeatingRadialGradient: /^(\-(webkit|o|ms|moz)\-)?(repeating\-radial\-gradient)/i,
        sideOrCorner: /^to (left (top|bottom)|right (top|bottom)|left|right|top|bottom)/i,
        extentKeywords: /^(closest\-side|closest\-corner|farthest\-side|farthest\-corner|contain|cover)/,
        positionKeywords: /^(left|center|right|top|bottom)/i,
        pixelValue: /^(-?(([0-9]*\.[0-9]+)|([0-9]+\.?)))px/,
        percentageValue: /^(-?(([0-9]*\.[0-9]+)|([0-9]+\.?)))\%/,
        emValue: /^(-?(([0-9]*\.[0-9]+)|([0-9]+\.?)))em/,
        angleValue: /^(-?(([0-9]*\.[0-9]+)|([0-9]+\.?)))deg/,
        startCall: /^\(/,
        endCall: /^\)/,
        comma: /^,/,
        hexColor: /^\#([0-9a-fA-F]+)/,
        literalColor: /^([a-zA-Z]+)/,
        rgbColor: /^rgb/i,
        rgbaColor: /^rgba/i,
        number: /^(([0-9]*\.[0-9]+)|([0-9]+\.?))/
      };
      var input = "";
      function error(msg) {
        var err2 = new Error(input + ": " + msg);
        err2.source = input;
        throw err2;
      }
      function getAST() {
        var ast = matchListDefinitions();
        if (input.length > 0) {
          error("Invalid input not EOF");
        }
        return ast;
      }
      function matchListDefinitions() {
        return matchListing(matchDefinition);
      }
      function matchDefinition() {
        return matchGradient(
          "linear-gradient",
          tokens.linearGradient,
          matchLinearOrientation
        ) || matchGradient(
          "repeating-linear-gradient",
          tokens.repeatingLinearGradient,
          matchLinearOrientation
        ) || matchGradient(
          "radial-gradient",
          tokens.radialGradient,
          matchListRadialOrientations
        ) || matchGradient(
          "repeating-radial-gradient",
          tokens.repeatingRadialGradient,
          matchListRadialOrientations
        );
      }
      function matchGradient(gradientType, pattern, orientationMatcher) {
        return matchCall(pattern, function(captures) {
          var orientation = orientationMatcher();
          if (orientation) {
            if (!scan2(tokens.comma)) {
              error("Missing comma before color stops");
            }
          }
          return {
            type: gradientType,
            orientation,
            colorStops: matchListing(matchColorStop)
          };
        });
      }
      function matchCall(pattern, callback) {
        var captures = scan2(pattern);
        if (captures) {
          if (!scan2(tokens.startCall)) {
            error("Missing (");
          }
          var result = callback(captures);
          if (!scan2(tokens.endCall)) {
            error("Missing )");
          }
          return result;
        }
      }
      function matchLinearOrientation() {
        return matchSideOrCorner() || matchAngle();
      }
      function matchSideOrCorner() {
        return match("directional", tokens.sideOrCorner, 1);
      }
      function matchAngle() {
        return match("angular", tokens.angleValue, 1);
      }
      function matchListRadialOrientations() {
        var radialOrientations, radialOrientation = matchRadialOrientation(), lookaheadCache;
        if (radialOrientation) {
          radialOrientations = [];
          radialOrientations.push(radialOrientation);
          lookaheadCache = input;
          if (scan2(tokens.comma)) {
            radialOrientation = matchRadialOrientation();
            if (radialOrientation) {
              radialOrientations.push(radialOrientation);
            } else {
              input = lookaheadCache;
            }
          }
        }
        return radialOrientations;
      }
      function matchRadialOrientation() {
        var radialType = matchCircle() || matchEllipse();
        if (radialType) {
          radialType.at = matchAtPosition();
        } else {
          var extent2 = matchExtentKeyword();
          if (extent2) {
            radialType = extent2;
            var positionAt = matchAtPosition();
            if (positionAt) {
              radialType.at = positionAt;
            }
          } else {
            var defaultPosition = matchPositioning();
            if (defaultPosition) {
              radialType = {
                type: "default-radial",
                at: defaultPosition
              };
            }
          }
        }
        return radialType;
      }
      function matchCircle() {
        var circle = match("shape", /^(circle)/i, 0);
        if (circle) {
          circle.style = matchLength() || matchExtentKeyword();
        }
        return circle;
      }
      function matchEllipse() {
        var ellipse = match("shape", /^(ellipse)/i, 0);
        if (ellipse) {
          ellipse.style = matchDistance() || matchExtentKeyword();
        }
        return ellipse;
      }
      function matchExtentKeyword() {
        return match("extent-keyword", tokens.extentKeywords, 1);
      }
      function matchAtPosition() {
        if (match("position", /^at/, 0)) {
          var positioning = matchPositioning();
          if (!positioning) {
            error("Missing positioning value");
          }
          return positioning;
        }
      }
      function matchPositioning() {
        var location = matchCoordinates();
        if (location.x || location.y) {
          return {
            type: "position",
            value: location
          };
        }
      }
      function matchCoordinates() {
        return {
          x: matchDistance(),
          y: matchDistance()
        };
      }
      function matchListing(matcher2) {
        var captures = matcher2(), result = [];
        if (captures) {
          result.push(captures);
          while (scan2(tokens.comma)) {
            captures = matcher2();
            if (captures) {
              result.push(captures);
            } else {
              error("One extra comma");
            }
          }
        }
        return result;
      }
      function matchColorStop() {
        var color4 = matchColor();
        if (!color4) {
          error("Expected color definition");
        }
        color4.length = matchDistance();
        return color4;
      }
      function matchColor() {
        return matchHexColor() || matchRGBAColor() || matchRGBColor() || matchLiteralColor();
      }
      function matchLiteralColor() {
        return match("literal", tokens.literalColor, 0);
      }
      function matchHexColor() {
        return match("hex", tokens.hexColor, 1);
      }
      function matchRGBColor() {
        return matchCall(tokens.rgbColor, function() {
          return {
            type: "rgb",
            value: matchListing(matchNumber)
          };
        });
      }
      function matchRGBAColor() {
        return matchCall(tokens.rgbaColor, function() {
          return {
            type: "rgba",
            value: matchListing(matchNumber)
          };
        });
      }
      function matchNumber() {
        return scan2(tokens.number)[1];
      }
      function matchDistance() {
        return match("%", tokens.percentageValue, 1) || matchPositionKeyword() || matchLength();
      }
      function matchPositionKeyword() {
        return match("position-keyword", tokens.positionKeywords, 1);
      }
      function matchLength() {
        return match("px", tokens.pixelValue, 1) || match("em", tokens.emValue, 1);
      }
      function match(type2, pattern, captureIndex) {
        var captures = scan2(pattern);
        if (captures) {
          return {
            type: type2,
            value: captures[captureIndex]
          };
        }
      }
      function scan2(regexp) {
        var captures, blankCaptures;
        blankCaptures = /^[\n\r\t\s]+/.exec(input);
        if (blankCaptures) {
          consume(blankCaptures[0].length);
        }
        captures = regexp.exec(input);
        if (captures) {
          consume(captures[0].length);
        }
        return captures;
      }
      function consume(size) {
        input = input.substr(size);
      }
      return function(code) {
        input = code.toString();
        return getAST();
      };
    }();
    exports.parse = GradientParser.parse;
    exports.stringify = GradientParser.stringify;
  }
});

// ../../node_modules/fflate/esm/browser.js
var u8 = Uint8Array;
var u16 = Uint16Array;
var u32 = Uint32Array;
var fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]);
var fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]);
var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
var freb = function(eb, start2) {
  var b3 = new u16(31);
  for (var i4 = 0; i4 < 31; ++i4) {
    b3[i4] = start2 += 1 << eb[i4 - 1];
  }
  var r2 = new u32(b3[30]);
  for (var i4 = 1; i4 < 30; ++i4) {
    for (var j4 = b3[i4]; j4 < b3[i4 + 1]; ++j4) {
      r2[j4] = j4 - b3[i4] << 5 | i4;
    }
  }
  return [b3, r2];
};
var _a = freb(fleb, 2);
var fl = _a[0];
var revfl = _a[1];
fl[28] = 258, revfl[258] = 28;
var _b = freb(fdeb, 0);
var fd = _b[0];
var revfd = _b[1];
var rev = new u16(32768);
for (i4 = 0; i4 < 32768; ++i4) {
  x4 = (i4 & 43690) >>> 1 | (i4 & 21845) << 1;
  x4 = (x4 & 52428) >>> 2 | (x4 & 13107) << 2;
  x4 = (x4 & 61680) >>> 4 | (x4 & 3855) << 4;
  rev[i4] = ((x4 & 65280) >>> 8 | (x4 & 255) << 8) >>> 1;
}
var x4;
var i4;
var hMap = function(cd, mb, r2) {
  var s3 = cd.length;
  var i4 = 0;
  var l3 = new u16(mb);
  for (; i4 < s3; ++i4) {
    if (cd[i4])
      ++l3[cd[i4] - 1];
  }
  var le4 = new u16(mb);
  for (i4 = 0; i4 < mb; ++i4) {
    le4[i4] = le4[i4 - 1] + l3[i4 - 1] << 1;
  }
  var co2;
  if (r2) {
    co2 = new u16(1 << mb);
    var rvb = 15 - mb;
    for (i4 = 0; i4 < s3; ++i4) {
      if (cd[i4]) {
        var sv = i4 << 4 | cd[i4];
        var r_1 = mb - cd[i4];
        var v4 = le4[cd[i4] - 1]++ << r_1;
        for (var m4 = v4 | (1 << r_1) - 1; v4 <= m4; ++v4) {
          co2[rev[v4] >>> rvb] = sv;
        }
      }
    }
  } else {
    co2 = new u16(s3);
    for (i4 = 0; i4 < s3; ++i4) {
      if (cd[i4]) {
        co2[i4] = rev[le4[cd[i4] - 1]++] >>> 15 - cd[i4];
      }
    }
  }
  return co2;
};
var flt = new u8(288);
for (i4 = 0; i4 < 144; ++i4)
  flt[i4] = 8;
var i4;
for (i4 = 144; i4 < 256; ++i4)
  flt[i4] = 9;
var i4;
for (i4 = 256; i4 < 280; ++i4)
  flt[i4] = 7;
var i4;
for (i4 = 280; i4 < 288; ++i4)
  flt[i4] = 8;
var i4;
var fdt = new u8(32);
for (i4 = 0; i4 < 32; ++i4)
  fdt[i4] = 5;
var i4;
var flrm = /* @__PURE__ */ hMap(flt, 9, 1);
var fdrm = /* @__PURE__ */ hMap(fdt, 5, 1);
var max = function(a5) {
  var m4 = a5[0];
  for (var i4 = 1; i4 < a5.length; ++i4) {
    if (a5[i4] > m4)
      m4 = a5[i4];
  }
  return m4;
};
var bits = function(d2, p2, m4) {
  var o2 = p2 / 8 | 0;
  return (d2[o2] | d2[o2 + 1] << 8) >> (p2 & 7) & m4;
};
var bits16 = function(d2, p2) {
  var o2 = p2 / 8 | 0;
  return (d2[o2] | d2[o2 + 1] << 8 | d2[o2 + 2] << 16) >> (p2 & 7);
};
var shft = function(p2) {
  return (p2 + 7) / 8 | 0;
};
var slc = function(v4, s3, e3) {
  if (s3 == null || s3 < 0)
    s3 = 0;
  if (e3 == null || e3 > v4.length)
    e3 = v4.length;
  var n3 = new (v4.BYTES_PER_ELEMENT == 2 ? u16 : v4.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e3 - s3);
  n3.set(v4.subarray(s3, e3));
  return n3;
};
var ec = [
  "unexpected EOF",
  "invalid block type",
  "invalid length/literal",
  "invalid distance",
  "stream finished",
  "no stream handler",
  ,
  "no callback",
  "invalid UTF-8 data",
  "extra field too long",
  "date not in range 1980-2099",
  "filename too long",
  "stream finishing",
  "invalid zip data"
];
var err = function(ind, msg, nt) {
  var e3 = new Error(msg || ec[ind]);
  e3.code = ind;
  if (Error.captureStackTrace)
    Error.captureStackTrace(e3, err);
  if (!nt)
    throw e3;
  return e3;
};
var inflt = function(dat, buf, st2) {
  var sl = dat.length;
  if (!sl || st2 && st2.f && !st2.l)
    return buf || new u8(0);
  var noBuf = !buf || st2;
  var noSt = !st2 || st2.i;
  if (!st2)
    st2 = {};
  if (!buf)
    buf = new u8(sl * 3);
  var cbuf = function(l4) {
    var bl = buf.length;
    if (l4 > bl) {
      var nbuf = new u8(Math.max(bl * 2, l4));
      nbuf.set(buf);
      buf = nbuf;
    }
  };
  var final = st2.f || 0, pos = st2.p || 0, bt2 = st2.b || 0, lm = st2.l, dm = st2.d, lbt = st2.m, dbt = st2.n;
  var tbts = sl * 8;
  do {
    if (!lm) {
      final = bits(dat, pos, 1);
      var type2 = bits(dat, pos + 1, 3);
      pos += 3;
      if (!type2) {
        var s3 = shft(pos) + 4, l3 = dat[s3 - 4] | dat[s3 - 3] << 8, t2 = s3 + l3;
        if (t2 > sl) {
          if (noSt)
            err(0);
          break;
        }
        if (noBuf)
          cbuf(bt2 + l3);
        buf.set(dat.subarray(s3, t2), bt2);
        st2.b = bt2 += l3, st2.p = pos = t2 * 8, st2.f = final;
        continue;
      } else if (type2 == 1)
        lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
      else if (type2 == 2) {
        var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
        var tl = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14;
        var ldt = new u8(tl);
        var clt = new u8(19);
        for (var i4 = 0; i4 < hcLen; ++i4) {
          clt[clim[i4]] = bits(dat, pos + i4 * 3, 7);
        }
        pos += hcLen * 3;
        var clb = max(clt), clbmsk = (1 << clb) - 1;
        var clm = hMap(clt, clb, 1);
        for (var i4 = 0; i4 < tl; ) {
          var r2 = clm[bits(dat, pos, clbmsk)];
          pos += r2 & 15;
          var s3 = r2 >>> 4;
          if (s3 < 16) {
            ldt[i4++] = s3;
          } else {
            var c6 = 0, n3 = 0;
            if (s3 == 16)
              n3 = 3 + bits(dat, pos, 3), pos += 2, c6 = ldt[i4 - 1];
            else if (s3 == 17)
              n3 = 3 + bits(dat, pos, 7), pos += 3;
            else if (s3 == 18)
              n3 = 11 + bits(dat, pos, 127), pos += 7;
            while (n3--)
              ldt[i4++] = c6;
          }
        }
        var lt2 = ldt.subarray(0, hLit), dt2 = ldt.subarray(hLit);
        lbt = max(lt2);
        dbt = max(dt2);
        lm = hMap(lt2, lbt, 1);
        dm = hMap(dt2, dbt, 1);
      } else
        err(1);
      if (pos > tbts) {
        if (noSt)
          err(0);
        break;
      }
    }
    if (noBuf)
      cbuf(bt2 + 131072);
    var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
    var lpos = pos;
    for (; ; lpos = pos) {
      var c6 = lm[bits16(dat, pos) & lms], sym = c6 >>> 4;
      pos += c6 & 15;
      if (pos > tbts) {
        if (noSt)
          err(0);
        break;
      }
      if (!c6)
        err(2);
      if (sym < 256)
        buf[bt2++] = sym;
      else if (sym == 256) {
        lpos = pos, lm = null;
        break;
      } else {
        var add = sym - 254;
        if (sym > 264) {
          var i4 = sym - 257, b3 = fleb[i4];
          add = bits(dat, pos, (1 << b3) - 1) + fl[i4];
          pos += b3;
        }
        var d2 = dm[bits16(dat, pos) & dms], dsym = d2 >>> 4;
        if (!d2)
          err(3);
        pos += d2 & 15;
        var dt2 = fd[dsym];
        if (dsym > 3) {
          var b3 = fdeb[dsym];
          dt2 += bits16(dat, pos) & (1 << b3) - 1, pos += b3;
        }
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
        if (noBuf)
          cbuf(bt2 + 131072);
        var end = bt2 + add;
        for (; bt2 < end; bt2 += 4) {
          buf[bt2] = buf[bt2 - dt2];
          buf[bt2 + 1] = buf[bt2 + 1 - dt2];
          buf[bt2 + 2] = buf[bt2 + 2 - dt2];
          buf[bt2 + 3] = buf[bt2 + 3 - dt2];
        }
        bt2 = end;
      }
    }
    st2.l = lm, st2.p = lpos, st2.b = bt2, st2.f = final;
    if (lm)
      final = 1, st2.m = lbt, st2.d = dm, st2.n = dbt;
  } while (!final);
  return bt2 == buf.length ? buf : slc(buf, 0, bt2);
};
var et = /* @__PURE__ */ new u8(0);
var gzs = function(d2) {
  if (d2[0] != 31 || d2[1] != 139 || d2[2] != 8)
    err(6, "invalid gzip data");
  var flg = d2[3];
  var st2 = 10;
  if (flg & 4)
    st2 += d2[10] | (d2[11] << 8) + 2;
  for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d2[st2++])
    ;
  return st2 + (flg & 2);
};
var Inflate = /* @__PURE__ */ function() {
  function Inflate2(cb) {
    this.s = {};
    this.p = new u8(0);
    this.ondata = cb;
  }
  Inflate2.prototype.e = function(c6) {
    if (!this.ondata)
      err(5);
    if (this.d)
      err(4);
    var l3 = this.p.length;
    var n3 = new u8(l3 + c6.length);
    n3.set(this.p), n3.set(c6, l3), this.p = n3;
  };
  Inflate2.prototype.c = function(final) {
    this.d = this.s.i = final || false;
    var bts = this.s.b;
    var dt2 = inflt(this.p, this.o, this.s);
    this.ondata(slc(dt2, bts, this.s.b), this.d);
    this.o = slc(dt2, this.s.b - 32768), this.s.b = this.o.length;
    this.p = slc(this.p, this.s.p / 8 | 0), this.s.p &= 7;
  };
  Inflate2.prototype.push = function(chunk, final) {
    this.e(chunk), this.c(final);
  };
  return Inflate2;
}();
var Gunzip = /* @__PURE__ */ function() {
  function Gunzip2(cb) {
    this.v = 1;
    Inflate.call(this, cb);
  }
  Gunzip2.prototype.push = function(chunk, final) {
    Inflate.prototype.e.call(this, chunk);
    if (this.v) {
      var s3 = this.p.length > 3 ? gzs(this.p) : 4;
      if (s3 >= this.p.length && !final)
        return;
      this.p = this.p.subarray(s3), this.v = 0;
    }
    if (final) {
      if (this.p.length < 8)
        err(6, "invalid gzip data");
      this.p = this.p.subarray(0, -8);
    }
    Inflate.prototype.c.call(this, final);
  };
  return Gunzip2;
}();
var Unzlib = /* @__PURE__ */ function() {
  function Unzlib2(cb) {
    this.v = 1;
    Inflate.call(this, cb);
  }
  Unzlib2.prototype.push = function(chunk, final) {
    Inflate.prototype.e.call(this, chunk);
    if (this.v) {
      if (this.p.length < 2 && !final)
        return;
      this.p = this.p.subarray(2), this.v = 0;
    }
    if (final) {
      if (this.p.length < 4)
        err(6, "invalid zlib data");
      this.p = this.p.subarray(0, -4);
    }
    Inflate.prototype.c.call(this, final);
  };
  return Unzlib2;
}();
var Decompress = /* @__PURE__ */ function() {
  function Decompress2(cb) {
    this.G = Gunzip;
    this.I = Inflate;
    this.Z = Unzlib;
    this.ondata = cb;
  }
  Decompress2.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    if (!this.s) {
      if (this.p && this.p.length) {
        var n3 = new u8(this.p.length + chunk.length);
        n3.set(this.p), n3.set(chunk, this.p.length);
      } else
        this.p = chunk;
      if (this.p.length > 2) {
        var _this_1 = this;
        var cb = function() {
          _this_1.ondata.apply(_this_1, arguments);
        };
        this.s = this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8 ? new this.G(cb) : (this.p[0] & 15) != 8 || this.p[0] >> 4 > 7 || (this.p[0] << 8 | this.p[1]) % 31 ? new this.I(cb) : new this.Z(cb);
        this.s.push(this.p, final);
        this.p = null;
      }
    } else
      this.s.push(chunk, final);
  };
  return Decompress2;
}();
var td = typeof TextDecoder != "undefined" && /* @__PURE__ */ new TextDecoder();
var tds = 0;
try {
  td.decode(et, { stream: true });
  tds = 1;
} catch (e3) {
}

// worker:../../src/js/perspective.worker.js
var perspective_worker_default = "./perspective.worker.js";

// worker-stub:../../src/js/perspective.worker.js
async function get_worker_code() {
  const url = new URL(perspective_worker_default, import.meta.url);
  const req = await fetch(url);
  const code = await req.text();
  return code;
}
function make_host(a5, b3) {
  function addEventListener2(type2, callback) {
    a5.push(callback);
  }
  function postMessage2(msg) {
    if (Object.keys(msg).length > 0) {
      for (const listener of b3) {
        listener({ data: msg });
      }
    }
  }
  return {
    addEventListener: addEventListener2,
    postMessage: postMessage2,
    location: { href: "" }
  };
}
function run_single_threaded(code) {
  let f4 = Function("const self = arguments[0];" + code);
  const workers = [];
  const mains = [];
  f4(make_host(workers, mains));
  return make_host(mains, workers);
}
var code_promise = get_worker_code();
var initialize = async function() {
  const code = await code_promise;
  if (window.location.protocol.startsWith("file") && !window.isElectron) {
    console.warn("file:// protocol does not support Web Workers");
    return run_single_threaded(code);
  }
  try {
    const blob = new Blob([code], { type: "application/javascript" });
    const url = URL.createObjectURL(blob);
    return new Worker(url, { type: "module" });
  } catch (e3) {
    console.warn("Failed to instantiate worker, falling back to single-threaded runtime", e3);
    return run_single_threaded(code);
  }
};
var perspective_worker_default2 = initialize;

// wasm:/Users/texodus/work/perspective/packages/perspective/dist/pkg/esm/perspective.cpp.wasm
var perspective_cpp_default = "./perspective.cpp.wasm";

// wasm-stub:../../dist/pkg/esm/perspective.cpp.wasm
async function get_wasm() {
  return new URL(perspective_cpp_default, import.meta.url);
}
var perspective_cpp_default2 = get_wasm();

// ../../packages/perspective/dist/esm/perspective.js
var M = Object.defineProperty;
var z = (r2, e3) => {
  for (var t2 in e3)
    M(r2, t2, { get: e3[t2], enumerable: true });
};
var x = {};
z(x, { COLUMN_SEPARATOR_STRING: () => H, CONFIG_ALIASES: () => B, CONFIG_VALID_KEYS: () => U, DATA_TYPES: () => D, FILTER_OPERATORS: () => i, SORT_ORDERS: () => V, SORT_ORDER_IDS: () => J, TYPE_AGGREGATES: () => K, TYPE_FILTERS: () => X });
var D = { integer: "integer", float: "float", string: "string", boolean: "boolean", date: "date", datetime: "datetime", object: "object" };
var B = { row_pivot: "group_by", "row-pivot": "group_by", "row-pivots": "group_by", col_pivot: "split_by", col_pivots: "split_by", column_pivot: "split_by", "column-pivot": "split_by", "column-pivots": "split_by", filters: "filter", sorts: "sort" };
var U = ["viewport", "group_by", "split_by", "aggregates", "columns", "filter", "sort", "computed_columns", "expressions", "group_by_depth", "split_by_depth", "filter_op"];
var G = ["any", "avg", "abs sum", "count", "distinct count", "dominant", "first by index", "last by index", "last minus first", "last", "high", "join", "low", "high minus low", "max", "mean", "median", "min", "pct sum parent", "pct sum grand total", "stddev", "sum", "sum abs", "sum not null", "unique", "var"];
var v = ["any", "count", "distinct count", "distinct leaf", "dominant", "first by index", "join", "last by index", "last", "unique"];
var W = ["any", "count", "distinct count", "distinct leaf", "dominant", "first by index", "last by index", "last", "unique"];
var V = ["none", "asc", "desc", "col asc", "col desc", "asc abs", "desc abs", "col asc abs", "col desc abs"];
var J = [2, 0, 1, 0, 1, 3, 4, 3, 4];
var K = { string: v, float: G, integer: G, boolean: W, datetime: v, date: v };
var i = { lessThan: "<", greaterThan: ">", equals: "==", lessThanOrEquals: "<=", greaterThanOrEquals: ">=", doesNotEqual: "!=", isNull: "is null", isNotNull: "is not null", isIn: "in", isNotIn: "not in", contains: "contains", bitwiseAnd: "&", bitwiseOr: "|", and: "and", or: "or", beginsWith: "begins with", endsWith: "ends with" };
var Y = [i.bitwiseAnd, i.bitwiseOr, i.equals, i.doesNotEqual, i.or, i.and, i.isNull, i.isNotNull];
var L = [i.lessThan, i.greaterThan, i.equals, i.lessThanOrEquals, i.greaterThanOrEquals, i.doesNotEqual, i.isNull, i.isNotNull];
var $ = [i.equals, i.contains, i.doesNotEqual, i.isIn, i.isNotIn, i.beginsWith, i.endsWith, i.isNull, i.isNotNull];
var C = [i.lessThan, i.greaterThan, i.equals, i.lessThanOrEquals, i.greaterThanOrEquals, i.doesNotEqual, i.isNull, i.isNotNull];
var H = "|";
var X = { string: $, float: L, integer: L, boolean: Y, datetime: C, date: C };
var O = { types: { float: { filter_operator: "==", aggregate: "sum", format: { style: "decimal", minimumFractionDigits: 2, maximumFractionDigits: 2 } }, string: { filter_operator: "==", aggregate: "count" }, integer: { filter_operator: "==", aggregate: "sum", format: {} }, boolean: { filter_operator: "==", aggregate: "count" }, datetime: { filter_operator: "==", aggregate: "count", format: { dateStyle: "short", timeStyle: "medium" }, null_value: -1 }, date: { filter_operator: "==", aggregate: "count", format: { dateStyle: "short" }, null_value: -1 } } };
function N(r2) {
  return r2 && typeof r2 == "object" && !Array.isArray(r2);
}
function g(r2, ...e3) {
  if (!e3.length)
    return r2;
  let t2 = e3.shift();
  if (N(r2) && N(t2))
    for (let o2 in t2)
      N(t2[o2]) ? (r2[o2] || Object.assign(r2, { [o2]: {} }), g(r2[o2], t2[o2])) : Object.assign(r2, { [o2]: t2[o2] });
  return g(r2, ...e3);
}
function j(r2) {
  globalThis.__PERSPECTIVE_CONFIG__ && console.warn("Config already initialized!"), globalThis.__PERSPECTIVE_CONFIG__ = g(O, r2);
}
function b() {
  return globalThis.__PERSPECTIVE_CONFIG__ || (globalThis.__PERSPECTIVE_CONFIG__ = g(O, globalThis.__TEMPLATE_CONFIG__ || {})), globalThis.__PERSPECTIVE_CONFIG__;
}
var I = /* @__PURE__ */ new WeakMap();
var A = 0;
function h(r2, e3) {
  return function() {
    let t2, o2 = () => {
    }, s3 = Array.prototype.slice.call(arguments, 0, arguments.length);
    for (let p2 = s3.length - 1; p2 >= 0; p2--)
      typeof s3[p2] == "function" && (t2 = s3.splice(p2, 1)[0]);
    let l3 = I.get(t2);
    I.delete(t2);
    let d2 = { cmd: e3 || "view_method", name: this._name, method: r2, args: s3, subscribe: true, callback_id: l3 };
    this._worker.post(d2, t2, o2), this._worker.unsubscribe(e3, t2);
  };
}
function f(r2, e3) {
  return function() {
    let t2, o2 = () => {
    }, s3 = Array.prototype.slice.call(arguments, 0, arguments.length);
    for (let d2 = s3.length - 1; d2 >= 0; d2--)
      typeof s3[d2] == "function" && (t2 = s3.splice(d2, 1)[0]);
    A++, I.set(t2, A);
    let l3 = { cmd: e3 || "view_method", name: this._name, method: r2, args: s3, subscribe: true, callback_id: A };
    this._worker.post(l3, t2, o2, true);
  };
}
function n(r2, e3) {
  return function() {
    var t2 = Array.prototype.slice.call(arguments, 0, arguments.length);
    return new Promise(function(o2, s3) {
      var l3 = { cmd: e3 || "view_method", name: this._name, method: r2, args: t2, subscribe: false };
      this._worker.post(l3, o2, s3);
    }.bind(this));
  };
}
function a(r2, e3, t2) {
  return new Promise((o2, s3) => {
    this._worker = r2, this._name = Math.random() + "", this._worker.post({ cmd: "view", view_name: this._name, table_name: e3, config: t2 }, () => {
      o2(this);
    }, s3), this._worker._initialized === true && !this._worker._features?.wait_for_response && o2(this);
  });
}
function Z(r2, e3) {
  this._worker = r2, this._name = e3;
}
Z.prototype = a.prototype;
a.prototype.get_config = n("get_config");
a.prototype.get_min_max = n("get_min_max");
a.prototype.to_json = n("to_json");
a.prototype.to_arrow = n("to_arrow");
a.prototype.to_columns = n("to_columns");
a.prototype.to_csv = n("to_csv");
a.prototype.schema = n("schema");
a.prototype.expression_schema = n("expression_schema");
a.prototype.column_paths = n("column_paths");
a.prototype.num_columns = n("num_columns");
a.prototype.num_rows = n("num_rows");
a.prototype.dimensions = n("dimensions");
a.prototype.set_depth = n("set_depth");
a.prototype.get_row_expanded = n("get_row_expanded");
a.prototype.expand = n("expand");
a.prototype.collapse = n("collapse");
a.prototype.delete = n("delete");
a.prototype.col_to_js_typed_array = n("col_to_js_typed_array");
a.prototype.on_update = f("on_update", "view_method", true);
a.prototype.remove_update = h("remove_update", "view_method", true);
a.prototype.on_delete = f("on_delete", "view_method", true);
a.prototype.remove_delete = h("remove_delete", "view_method", true);
function w(r2) {
  let e3 = r2;
  do
    for (let t2 of Object.getOwnPropertyNames(e3)) {
      let o2 = r2[t2];
      t2 !== "constructor" && typeof o2 == "function" && (r2[t2] = o2.bind(r2));
    }
  while (e3 = e3 !== Object && Object.getPrototypeOf(e3));
}
String.prototype.includes || (String.prototype.includes = function(r2, e3) {
  return typeof e3 != "number" && (e3 = 0), e3 + r2.length > this.length ? false : this.indexOf(r2, e3) !== -1;
});
Array.prototype.includes || Object.defineProperty(Array.prototype, "includes", { value: function(r2, e3) {
  if (this == null)
    throw new TypeError('"this" is null or not defined');
  var t2 = Object(this), o2 = t2.length >>> 0;
  if (o2 === 0)
    return false;
  var s3 = e3 | 0, l3 = Math.max(s3 >= 0 ? s3 : o2 - Math.abs(s3), 0);
  function d2(p2, c6) {
    return p2 === c6 || typeof p2 == "number" && typeof c6 == "number" && isNaN(p2) && isNaN(c6);
  }
  for (; l3 < o2; ) {
    if (d2(t2[l3], r2))
      return true;
    l3++;
  }
  return false;
} });
function _(r2, e3, t2) {
  return new Promise((o2, s3) => {
    this._worker = r2, this._name = t2.name || Math.random() + "", w(this), e3.to_arrow ? (this._worker.post({ cmd: "table", name: this._name, args: [], options: t2 || {} }), e3.to_arrow().then((l3) => {
      this._worker.post({ cmd: "table", name: this._name, args: [l3], options: t2 || {} }, () => {
        e3.on_update((d2) => {
          this.update(d2.delta);
        }, { mode: "row" }), o2(this);
      }, s3);
    })) : this._worker.post({ cmd: "table", name: this._name, args: [e3], options: t2 || {} }, () => {
      o2(this);
    }, s3), this._worker._initialized === true && !this._worker._features?.wait_for_response && o2(this);
  });
}
_.prototype.type = "table";
function S(r2, e3) {
  this._worker = r2, this._name = e3;
}
S.prototype = _.prototype;
_.prototype.view = function(r2) {
  return new a(this._worker, this._name, r2);
};
_.prototype.query_columns = n("query_columns", "table_method");
_.prototype.get_index = n("get_index", "table_method");
_.prototype.get_limit = n("get_limit", "table_method");
_.prototype.make_port = n("make_port", "table_method");
_.prototype.remove_port = n("remove_port", "table_method");
_.prototype.schema = n("schema", "table_method");
_.prototype.validate_expressions = n("validate_expressions", "table_method");
_.prototype.is_valid_filter = n("is_valid_filter", "table_method");
_.prototype.size = n("size", "table_method");
_.prototype.num_rows = n("num_rows", "table_method");
_.prototype.num_columns = n("num_columns", "table_method");
_.prototype.columns = n("columns", "table_method");
_.prototype.clear = n("clear", "table_method");
_.prototype.replace = n("replace", "table_method");
_.prototype.delete = n("delete", "table_method");
_.prototype.on_delete = f("on_delete", "table_method", true);
_.prototype.remove = n("remove", "table_method");
_.prototype.remove_delete = h("remove_delete", "table_method", true);
_.prototype.update = function(r2, e3) {
  return new Promise((t2, o2) => {
    this._worker.post({ name: this._name, cmd: "table_method", method: "update", args: [r2, e3 || {}] }, t2, o2, false);
  });
};
_.prototype.execute = function(r2) {
  this._worker.post({ cmd: "table_execute", name: this._name, f: r2.toString() });
};
var u = class {
  constructor() {
    this._initialized = false, this._worker = { initialized: { value: false }, transferable: false, msg_id: 0, handlers: {}, messages: [] }, w(this);
  }
  unsubscribe(e3, t2) {
    for (let o2 of Object.keys(this._worker.handlers))
      this._worker.handlers[o2].resolve === t2 && delete this._worker.handlers[o2];
  }
  post(e3, t2, o2, s3 = false) {
    ++this._worker.msg_id, (t2 || o2) && (this._worker.handlers[this._worker.msg_id] = { resolve: t2, reject: o2, keep_alive: s3 }), e3.id = this._worker.msg_id, this._worker.initialized.value ? this.send(e3) : this._worker.messages.push(() => {
      this.send(e3), (e3.cmd === "table" || e3.cmd === "view") && !this._features?.wait_for_response && t2 && t2();
    });
  }
  async memory_usage() {
    return await new Promise((e3, t2) => {
      this.post({ cmd: "memory_usage" }, e3, t2);
    });
  }
  initialize_profile_thread() {
    this._worker.initialized.value ? this.send({ id: -1, cmd: "init_profile_thread" }) : this._worker.messages.push(() => this.send({ id: -1, cmd: "init_profile_thread" }));
  }
  send() {
    throw new Error("send() not implemented");
  }
  async open_table(e3) {
    return new S(this, e3);
  }
  _handle(e3) {
    if (!this._worker.initialized.value) {
      if (!this._initialized && typeof document < "u" && document && typeof window !== void 0 && window) {
        try {
          let o2 = document.createEvent("Event");
          o2.initEvent("perspective-ready", false, true), window.dispatchEvent(o2);
        } catch {
        }
        this._initialized = true;
      }
      let t2 = this._worker.messages;
      if (this._worker.initialized.value = true, this._worker.messages = [], e3.data?.data) {
        this._features = {};
        for (let o2 of e3.data.data)
          this._features[o2] = true;
      }
      if (t2)
        for (let o2 in t2)
          t2.hasOwnProperty(o2) && t2[o2]();
    }
    if (e3.data.id) {
      let t2 = this._worker.handlers[e3.data.id];
      t2 && (e3.data.error ? t2.reject(e3.data.error) : t2.resolve(e3.data.data), t2.keep_alive || delete this._worker.handlers[e3.data.id]);
    }
  }
  table(e3, t2) {
    return new _(this, e3, t2 || {});
  }
  terminate() {
    this._worker.terminate(), this._worker = void 0;
  }
};
var q = 3e4;
var k = class extends u {
  constructor(e3) {
    super(), this._ws = e3, this._ws.binaryType = "arraybuffer", this._full_binary, this._total_chunk_length = 0, this._pending_binary_length = 0, this._ws.onopen = () => {
      this.send({ id: -1, cmd: "init" });
    };
    let t2 = () => {
      this._ws.send("ping"), setTimeout(t2, q);
    };
    setTimeout(t2, q), this._ws.onmessage = (o2) => {
      if (o2.data !== "pong")
        if (this._pending_binary) {
          let s3 = o2.data;
          if (this._full_binary.set(new Uint8Array(s3), this._total_chunk_length), this._total_chunk_length += s3.byteLength, this._total_chunk_length === this._pending_binary_length)
            s3 = this._full_binary.buffer;
          else
            return;
          let l3 = { data: { id: this._pending_binary, data: s3 } };
          if (this._pending_port_id !== void 0) {
            let d2 = { port_id: this._pending_port_id, delta: s3 };
            l3.data.data = d2;
          }
          this._handle(l3), delete this._pending_binary, delete this._pending_binary_length, delete this._pending_port_id, this._total_chunk_length = 0, this._full_binary = null;
        } else
          o2 = JSON.parse(o2.data), o2.binary_length ? (this._pending_binary = o2.id, this._pending_binary_length = o2.binary_length, o2.data && o2.data.port_id !== void 0 && (this._pending_port_id = o2.data.port_id), this._full_binary = new Uint8Array(this._pending_binary_length)) : this._handle({ data: o2 });
    };
  }
  send(e3) {
    if (e3.args && e3.args.length > 0 && e3.args[0] instanceof ArrayBuffer && e3.args[0].byteLength !== void 0) {
      let t2 = e3;
      e3.binary_length = e3.args[0].byteLength, this._ws.send(JSON.stringify(t2)), this._ws.send(e3.args[0]);
      return;
    }
    this._ws.send(JSON.stringify(e3));
  }
  terminate() {
    return new Promise((e3) => {
      this._ws.onclose = e3, this._ws.close();
    });
  }
};
var re = 'Perspective has been compiled in "inline" mode.';
function F(r2) {
  return new Uint32Array(r2.slice(0, 4))[0] == 559903;
}
var R = function() {
  let r2;
  return function() {
    return r2 || (r2 = new class {
      async worker() {
        return await perspective_worker_default2();
      }
      async wasm() {
        let e3 = await perspective_cpp_default2, t2 = [], o2 = 0, s3 = new Decompress((p2) => {
          p2 && (o2 += p2.byteLength, t2.push(p2));
        });
        if (e3.buffer && e3.buffer instanceof ArrayBuffer)
          console.info(re), F(e3.buffer) ? s3.push(e3, true) : (o2 = e3.byteLength, t2 = [e3]);
        else if (e3 instanceof ArrayBuffer)
          o2 = e3.byteLength, t2 = [new Uint8Array(e3)];
        else {
          let c6 = (await fetch(e3)).body.getReader(), m4 = 0;
          for (; ; ) {
            let { value: y3, done: P3 } = await c6.read();
            if (P3)
              break;
            m4 === 0 && F(y3.buffer) || m4 === 1 ? (m4 = 1, s3.push(y3, P3)) : (m4 = 2, o2 += y3.byteLength, t2.push(y3));
          }
        }
        let l3 = 0, d2 = new Uint8Array(o2);
        for (let p2 of t2)
          d2.set(p2, l3), l3 += p2.byteLength;
        return this._wasm = d2.buffer, this._wasm;
      }
    }()), r2;
  };
}();
var E = class extends u {
  constructor(e3) {
    e3 && j(e3), super(), this.register();
  }
  async register() {
    let e3, t2 = { cmd: "init", config: b() };
    if (typeof WebAssembly > "u")
      throw new Error("WebAssembly not supported.");
    [e3, t2.buffer] = await Promise.all([R().worker(), R().wasm()]);
    for (var o2 in this._worker)
      e3[o2] = this._worker[o2];
    this._worker = e3, this._worker.addEventListener("message", this._handle.bind(this)), this._worker.postMessage(t2), this._detect_transferable();
  }
  send(e3) {
    this._worker.transferable && e3.args && e3.args[0] instanceof ArrayBuffer ? this._worker.postMessage(e3, [e3.args[0]]) : this._worker.postMessage(e3);
  }
  terminate() {
    this._worker.terminate(), this._worker = void 0;
  }
  _detect_transferable() {
    var e3 = new ArrayBuffer(1);
    this._worker.postMessage(e3, [e3]), this._worker.transferable = e3.byteLength === 0, this._worker.transferable ? console.debug("Transferable support detected") : console.warn("Transferable support not detected");
  }
};
var oe = function() {
  let r2, e3;
  return { getInstance: function(t2) {
    r2 === void 0 && (r2 = new E(t2));
    let o2 = JSON.stringify(t2);
    if (e3 && o2 !== e3)
      throw new Error("Configuration object for shared_worker() has changed - this is probably a bug in your application.");
    return e3 = o2, r2;
  } };
}();
function ne(r2) {
  return R().set(r2);
}
function ie(r2) {
  return new E(r2);
}
function se(r2 = window.location.origin.replace("http", "ws")) {
  return new k(new WebSocket(r2));
}
function ae(r2) {
  return oe.getInstance(r2);
}
var Ge = { override: ne, worker: ie, websocket: se, shared_worker: ae, ...Object.keys(x) };

// wasm:/Users/texodus/work/perspective/rust/perspective-viewer/dist/pkg/perspective_bg.wasm
var perspective_bg_default = "./perspective_bg.wasm";

// wasm-stub:../../dist/pkg/perspective_bg.wasm
async function get_wasm2() {
  return new URL(perspective_bg_default, import.meta.url);
}
var perspective_bg_default2 = get_wasm2();

// ../../rust/perspective-viewer/dist/esm/perspective-viewer.js
var ue = Object.defineProperty;
var be = (n3, e3) => {
  for (var t2 in e3)
    ue(n3, t2, { get: e3[t2], enumerable: true });
};
var R2 = class extends HTMLElement {
  constructor() {
    super();
  }
  get name() {
    return "Debug";
  }
  get select_mode() {
    return "select";
  }
  get min_config_columns() {
  }
  get config_column_names() {
  }
  get priority() {
    return 0;
  }
  async update(e3) {
    return this.draw(e3);
  }
  async draw(e3) {
    this.style.backgroundColor = "#fff";
    let t2 = await e3.to_csv(), r2 = "margin:0;overflow:scroll;position:absolute;width:100%;height:100%";
    this.innerHTML = `<pre style='${r2}'>${t2}</pre>`;
  }
  async clear() {
    this.innerHTML = "";
  }
  async resize() {
  }
  async restyle() {
  }
  async save() {
  }
  async restore() {
  }
  async delete() {
  }
};
document.createElement("perspective-viewer-plugin").constructor === HTMLElement && window.customElements.define("perspective-viewer-plugin", R2);
var x2 = {};
be(x2, { CopyDropDownMenuElement: () => A2, ExportDropDownMenuElement: () => T, ExpressionEditorElement: () => Y2, FilterDropDownElement: () => D2, FunctionDropDownElement: () => z2, PerspectiveDateColumnStyleElement: () => P, PerspectiveDatetimeColumnStyleElement: () => L2, PerspectiveDebugPluginElement: () => F2, PerspectiveNumberColumnStyleElement: () => O2, PerspectiveStringColumnStyleElement: () => E2, PerspectiveViewerElement: () => h2, default: () => J2, defineWebComponents: () => X2, getExprTKCommands: () => Le, initSync: () => Ee, registerPlugin: () => Pe });
var Z2 = window.ClipboardItem;
var ee = window.ResizeObserver;
function te(n3, e3, t2, r2) {
  let o2 = n3[t2], s3 = o2.prototype;
  class u3 extends HTMLElement {
    constructor() {
      super(), this._instance = new o2(this);
    }
  }
  let d2 = Object.getOwnPropertyNames(s3);
  for (let p2 of d2)
    "get" in Object.getOwnPropertyDescriptor(s3, p2) ? Object.defineProperty(u3.prototype, p2, { get: function() {
      return this._instance[p2];
    } }) : Object.defineProperty(u3.prototype, p2, { value: function(...v4) {
      return this._instance[p2].call(this._instance, ...v4);
    } });
  for (let p2 of r2)
    Object.defineProperty(u3, p2, { value: function(...v4) {
      return n3[p2].call(n3, ...v4);
    } });
  customElements.define(e3, u3);
}
var c;
var y = new Array(32).fill(void 0);
y.push(void 0, null, true, false);
function _2(n3) {
  return y[n3];
}
function g2(n3) {
  return n3 == null;
}
var I2 = new Float64Array();
function ne2() {
  return I2.byteLength === 0 && (I2 = new Float64Array(c.memory.buffer)), I2;
}
var M2 = new Int32Array();
function a2() {
  return M2.byteLength === 0 && (M2 = new Int32Array(c.memory.buffer)), M2;
}
var l = 0;
var C2 = new Uint8Array();
function V2() {
  return C2.byteLength === 0 && (C2 = new Uint8Array(c.memory.buffer)), C2;
}
var U2 = new TextEncoder("utf-8");
var fe = typeof U2.encodeInto == "function" ? function(n3, e3) {
  return U2.encodeInto(n3, e3);
} : function(n3, e3) {
  let t2 = U2.encode(n3);
  return e3.set(t2), { read: n3.length, written: t2.length };
};
function m(n3, e3, t2) {
  if (t2 === void 0) {
    let d2 = U2.encode(n3), p2 = e3(d2.length);
    return V2().subarray(p2, p2 + d2.length).set(d2), l = d2.length, p2;
  }
  let r2 = n3.length, o2 = e3(r2), s3 = V2(), u3 = 0;
  for (; u3 < r2; u3++) {
    let d2 = n3.charCodeAt(u3);
    if (d2 > 127)
      break;
    s3[o2 + u3] = d2;
  }
  if (u3 !== r2) {
    u3 !== 0 && (n3 = n3.slice(u3)), o2 = t2(o2, r2, r2 = u3 + n3.length * 3);
    let d2 = V2().subarray(o2 + u3, o2 + r2);
    u3 += fe(n3, d2).written;
  }
  return l = u3, o2;
}
var j2 = y.length;
function i2(n3) {
  j2 === y.length && y.push(y.length + 1);
  let e3 = j2;
  return j2 = y[e3], y[e3] = n3, e3;
}
var re2 = new TextDecoder("utf-8", { ignoreBOM: true, fatal: true });
re2.decode();
function w2(n3, e3) {
  return re2.decode(V2().subarray(n3, n3 + e3));
}
function ge(n3) {
  n3 < 36 || (y[n3] = j2, j2 = n3);
}
function f2(n3) {
  let e3 = _2(n3);
  return ge(n3), e3;
}
var $2 = new BigInt64Array();
function we() {
  return $2.byteLength === 0 && ($2 = new BigInt64Array(c.memory.buffer)), $2;
}
function N2(n3) {
  let e3 = typeof n3;
  if (e3 == "number" || e3 == "boolean" || n3 == null)
    return `${n3}`;
  if (e3 == "string")
    return `"${n3}"`;
  if (e3 == "symbol") {
    let o2 = n3.description;
    return o2 == null ? "Symbol" : `Symbol(${o2})`;
  }
  if (e3 == "function") {
    let o2 = n3.name;
    return typeof o2 == "string" && o2.length > 0 ? `Function(${o2})` : "Function";
  }
  if (Array.isArray(n3)) {
    let o2 = n3.length, s3 = "[";
    o2 > 0 && (s3 += N2(n3[0]));
    for (let u3 = 1; u3 < o2; u3++)
      s3 += ", " + N2(n3[u3]);
    return s3 += "]", s3;
  }
  let t2 = /\[object ([^\]]+)\]/.exec(toString.call(n3)), r2;
  if (t2.length > 1)
    r2 = t2[1];
  else
    return toString.call(n3);
  if (r2 == "Object")
    try {
      return "Object(" + JSON.stringify(n3) + ")";
    } catch {
      return "Object";
    }
  return n3 instanceof Error ? `${n3.name}: ${n3.message}
${n3.stack}` : r2;
}
function k2(n3, e3, t2, r2) {
  let o2 = { a: n3, b: e3, cnt: 1, dtor: t2 }, s3 = (...u3) => {
    o2.cnt++;
    let d2 = o2.a;
    o2.a = 0;
    try {
      return r2(d2, o2.b, ...u3);
    } finally {
      --o2.cnt === 0 ? c.__wbindgen_export_2.get(o2.dtor)(d2, o2.b) : o2.a = d2;
    }
  };
  return s3.original = o2, s3;
}
function de(n3, e3, t2) {
  c.__wbindgen_export_3(n3, e3, i2(t2));
}
function W2(n3, e3, t2, r2) {
  let o2 = { a: n3, b: e3, cnt: 1, dtor: t2 }, s3 = (...u3) => {
    o2.cnt++;
    try {
      return r2(o2.a, o2.b, ...u3);
    } finally {
      --o2.cnt === 0 && (c.__wbindgen_export_2.get(o2.dtor)(o2.a, o2.b), o2.a = 0);
    }
  };
  return s3.original = o2, s3;
}
function pe(n3, e3, t2) {
  c.__wbindgen_export_4(n3, e3, i2(t2));
}
function le(n3, e3, t2) {
  let r2 = c.__wbindgen_export_5(n3, e3, i2(t2));
  return f2(r2);
}
function me(n3, e3, t2) {
  c.__wbindgen_export_6(n3, e3, i2(t2));
}
function ye(n3, e3, t2) {
  c.__wbindgen_export_7(n3, e3, i2(t2));
}
function he(n3, e3) {
  try {
    let o2 = c.__wbindgen_add_to_stack_pointer(-16);
    c.__wbindgen_export_8(o2, n3, e3);
    var t2 = a2()[o2 / 4 + 0], r2 = a2()[o2 / 4 + 1];
    if (r2)
      throw f2(t2);
  } finally {
    c.__wbindgen_add_to_stack_pointer(16);
  }
}
function ve(n3, e3) {
  c.__wbindgen_export_9(n3, e3);
}
function xe(n3, e3, t2) {
  c.__wbindgen_export_10(n3, e3, i2(t2));
}
var B2 = 32;
function ke(n3) {
  if (B2 == 1)
    throw new Error("out of js stack");
  return y[--B2] = n3, B2;
}
function Ae(n3, e3, t2) {
  try {
    c.__wbindgen_export_11(n3, e3, ke(t2));
  } finally {
    y[B2++] = void 0;
  }
}
var H2 = new Uint32Array();
function _e() {
  return H2.byteLength === 0 && (H2 = new Uint32Array(c.memory.buffer)), H2;
}
function Te(n3, e3) {
  let t2 = e3(n3.length * 4), r2 = _e();
  for (let o2 = 0; o2 < n3.length; o2++)
    r2[t2 / 4 + o2] = i2(n3[o2]);
  return l = n3.length, t2;
}
function b2(n3, e3) {
  try {
    return n3.apply(this, e3);
  } catch (t2) {
    c.__wbindgen_export_13(i2(t2));
  }
}
function Pe(n3) {
  let e3 = m(n3, c.__wbindgen_export_0, c.__wbindgen_export_1), t2 = l;
  c.registerPlugin(e3, t2);
}
function oe2(n3, e3) {
  let r2 = _e().subarray(n3 / 4, n3 / 4 + e3), o2 = [];
  for (let s3 = 0; s3 < r2.length; s3++)
    o2.push(f2(r2[s3]));
  return o2;
}
function Le() {
  try {
    let s3 = c.__wbindgen_add_to_stack_pointer(-16);
    c.getExprTKCommands(s3);
    var n3 = a2()[s3 / 4 + 0], e3 = a2()[s3 / 4 + 1], t2 = a2()[s3 / 4 + 2], r2 = a2()[s3 / 4 + 3];
    if (r2)
      throw f2(t2);
    var o2 = oe2(n3, e3).slice();
    return c.__wbindgen_export_12(n3, e3 * 4), o2;
  } finally {
    c.__wbindgen_add_to_stack_pointer(16);
  }
}
function X2() {
  c.defineWebComponents();
}
function Fe(n3, e3, t2, r2) {
  c.__wbindgen_export_14(n3, e3, i2(t2), i2(r2));
}
var A2 = class {
  static __wrap(e3) {
    let t2 = Object.create(A2.prototype);
    return t2.ptr = e3, t2;
  }
  __destroy_into_raw() {
    let e3 = this.ptr;
    return this.ptr = 0, e3;
  }
  free() {
    let e3 = this.__destroy_into_raw();
    c.__wbg_copydropdownmenuelement_free(e3);
  }
  constructor(e3) {
    let t2 = c.copydropdownmenuelement_new(i2(e3));
    return A2.__wrap(t2);
  }
  open(e3) {
    c.copydropdownmenuelement_open(this.ptr, i2(e3));
  }
  hide() {
    try {
      let r2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.copydropdownmenuelement_hide(r2, this.ptr);
      var e3 = a2()[r2 / 4 + 0], t2 = a2()[r2 / 4 + 1];
      if (t2)
        throw f2(e3);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  unsafe_set_model(e3) {
    c.copydropdownmenuelement_unsafe_set_model(this.ptr, e3);
  }
  connected_callback() {
    c.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var T = class {
  static __wrap(e3) {
    let t2 = Object.create(T.prototype);
    return t2.ptr = e3, t2;
  }
  __destroy_into_raw() {
    let e3 = this.ptr;
    return this.ptr = 0, e3;
  }
  free() {
    let e3 = this.__destroy_into_raw();
    c.__wbg_exportdropdownmenuelement_free(e3);
  }
  constructor(e3) {
    let t2 = c.copydropdownmenuelement_new(i2(e3));
    return T.__wrap(t2);
  }
  open(e3) {
    c.exportdropdownmenuelement_open(this.ptr, i2(e3));
  }
  hide() {
    try {
      let r2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.copydropdownmenuelement_hide(r2, this.ptr);
      var e3 = a2()[r2 / 4 + 0], t2 = a2()[r2 / 4 + 1];
      if (t2)
        throw f2(e3);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  unsafe_set_model(e3) {
    c.exportdropdownmenuelement_unsafe_set_model(this.ptr, e3);
  }
  connected_callback() {
    c.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var Y2 = class {
  __destroy_into_raw() {
    let e3 = this.ptr;
    return this.ptr = 0, e3;
  }
  free() {
    let e3 = this.__destroy_into_raw();
    c.__wbg_expressioneditorelement_free(e3);
  }
};
var D2 = class {
  __destroy_into_raw() {
    let e3 = this.ptr;
    return this.ptr = 0, e3;
  }
  free() {
    let e3 = this.__destroy_into_raw();
    c.__wbg_filterdropdownelement_free(e3);
  }
};
var z2 = class {
  __destroy_into_raw() {
    let e3 = this.ptr;
    return this.ptr = 0, e3;
  }
  free() {
    let e3 = this.__destroy_into_raw();
    c.__wbg_functiondropdownelement_free(e3);
  }
};
var P = class {
  static __wrap(e3) {
    let t2 = Object.create(P.prototype);
    return t2.ptr = e3, t2;
  }
  __destroy_into_raw() {
    let e3 = this.ptr;
    return this.ptr = 0, e3;
  }
  free() {
    let e3 = this.__destroy_into_raw();
    c.__wbg_perspectivedatecolumnstyleelement_free(e3);
  }
  constructor(e3) {
    let t2 = c.perspectivedatecolumnstyleelement_new(i2(e3));
    return P.__wrap(t2);
  }
  reset(e3) {
    try {
      let o2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivedatecolumnstyleelement_reset(o2, this.ptr, i2(e3));
      var t2 = a2()[o2 / 4 + 0], r2 = a2()[o2 / 4 + 1];
      if (r2)
        throw f2(t2);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  open(e3, t2, r2) {
    try {
      let u3 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivedatecolumnstyleelement_open(u3, this.ptr, i2(e3), i2(t2), i2(r2));
      var o2 = a2()[u3 / 4 + 0], s3 = a2()[u3 / 4 + 1];
      if (s3)
        throw f2(o2);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  close() {
    try {
      let r2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivedatecolumnstyleelement_close(r2, this.ptr);
      var e3 = a2()[r2 / 4 + 0], t2 = a2()[r2 / 4 + 1];
      if (t2)
        throw f2(e3);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  destroy() {
    try {
      let r2 = this.__destroy_into_raw(), o2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivedatecolumnstyleelement_destroy(o2, r2);
      var e3 = a2()[o2 / 4 + 0], t2 = a2()[o2 / 4 + 1];
      if (t2)
        throw f2(e3);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  connected_callback() {
    c.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var L2 = class {
  static __wrap(e3) {
    let t2 = Object.create(L2.prototype);
    return t2.ptr = e3, t2;
  }
  __destroy_into_raw() {
    let e3 = this.ptr;
    return this.ptr = 0, e3;
  }
  free() {
    let e3 = this.__destroy_into_raw();
    c.__wbg_perspectivedatetimecolumnstyleelement_free(e3);
  }
  constructor(e3) {
    let t2 = c.perspectivedatecolumnstyleelement_new(i2(e3));
    return L2.__wrap(t2);
  }
  reset(e3) {
    try {
      let o2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivedatecolumnstyleelement_reset(o2, this.ptr, i2(e3));
      var t2 = a2()[o2 / 4 + 0], r2 = a2()[o2 / 4 + 1];
      if (r2)
        throw f2(t2);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  open(e3, t2, r2) {
    try {
      let u3 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivedatetimecolumnstyleelement_open(u3, this.ptr, i2(e3), i2(t2), i2(r2));
      var o2 = a2()[u3 / 4 + 0], s3 = a2()[u3 / 4 + 1];
      if (s3)
        throw f2(o2);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  close() {
    try {
      let r2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivedatecolumnstyleelement_close(r2, this.ptr);
      var e3 = a2()[r2 / 4 + 0], t2 = a2()[r2 / 4 + 1];
      if (t2)
        throw f2(e3);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  destroy() {
    try {
      let r2 = this.__destroy_into_raw(), o2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivedatecolumnstyleelement_destroy(o2, r2);
      var e3 = a2()[o2 / 4 + 0], t2 = a2()[o2 / 4 + 1];
      if (t2)
        throw f2(e3);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  connected_callback() {
    c.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var F2 = class {
  static __wrap(e3) {
    let t2 = Object.create(F2.prototype);
    return t2.ptr = e3, t2;
  }
  __destroy_into_raw() {
    let e3 = this.ptr;
    return this.ptr = 0, e3;
  }
  free() {
    let e3 = this.__destroy_into_raw();
    c.__wbg_perspectivedebugpluginelement_free(e3);
  }
  constructor(e3) {
    let t2 = c.perspectivedebugpluginelement_new(i2(e3));
    return F2.__wrap(t2);
  }
  get name() {
    try {
      let r2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivedebugpluginelement_name(r2, this.ptr);
      var e3 = a2()[r2 / 4 + 0], t2 = a2()[r2 / 4 + 1];
      return w2(e3, t2);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16), c.__wbindgen_export_12(e3, t2);
    }
  }
  get select_mode() {
    try {
      let r2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivedebugpluginelement_select_mode(r2, this.ptr);
      var e3 = a2()[r2 / 4 + 0], t2 = a2()[r2 / 4 + 1];
      return w2(e3, t2);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16), c.__wbindgen_export_12(e3, t2);
    }
  }
  get min_config_columns() {
    let e3 = c.perspectivedebugpluginelement_config_column_names(this.ptr);
    return f2(e3);
  }
  get config_column_names() {
    let e3 = c.perspectivedebugpluginelement_config_column_names(this.ptr);
    return f2(e3);
  }
  update(e3) {
    let t2 = c.perspectivedebugpluginelement_draw(this.ptr, i2(e3));
    return f2(t2);
  }
  draw(e3) {
    let t2 = c.perspectivedebugpluginelement_draw(this.ptr, i2(e3));
    return f2(t2);
  }
  clear() {
    let e3 = c.perspectivedebugpluginelement_clear(this.ptr);
    return f2(e3);
  }
  resize() {
    let e3 = c.perspectivedebugpluginelement_clear(this.ptr);
    return f2(e3);
  }
  restyle() {
    let e3 = c.perspectivedebugpluginelement_clear(this.ptr);
    return f2(e3);
  }
  save() {
    let e3 = c.perspectivedebugpluginelement_clear(this.ptr);
    return f2(e3);
  }
  restore() {
    let e3 = c.perspectivedebugpluginelement_clear(this.ptr);
    return f2(e3);
  }
  delete() {
    let e3 = c.perspectivedebugpluginelement_clear(this.ptr);
    return f2(e3);
  }
  connectedCallback() {
    c.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var O2 = class {
  static __wrap(e3) {
    let t2 = Object.create(O2.prototype);
    return t2.ptr = e3, t2;
  }
  __destroy_into_raw() {
    let e3 = this.ptr;
    return this.ptr = 0, e3;
  }
  free() {
    let e3 = this.__destroy_into_raw();
    c.__wbg_perspectivenumbercolumnstyleelement_free(e3);
  }
  constructor(e3) {
    let t2 = c.perspectivedatecolumnstyleelement_new(i2(e3));
    return O2.__wrap(t2);
  }
  reset(e3, t2) {
    try {
      let s3 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivenumbercolumnstyleelement_reset(s3, this.ptr, i2(e3), i2(t2));
      var r2 = a2()[s3 / 4 + 0], o2 = a2()[s3 / 4 + 1];
      if (o2)
        throw f2(r2);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  open(e3, t2, r2) {
    try {
      let u3 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivenumbercolumnstyleelement_open(u3, this.ptr, i2(e3), i2(t2), i2(r2));
      var o2 = a2()[u3 / 4 + 0], s3 = a2()[u3 / 4 + 1];
      if (s3)
        throw f2(o2);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  close() {
    try {
      let r2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivedatecolumnstyleelement_close(r2, this.ptr);
      var e3 = a2()[r2 / 4 + 0], t2 = a2()[r2 / 4 + 1];
      if (t2)
        throw f2(e3);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  destroy() {
    try {
      let r2 = this.__destroy_into_raw(), o2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivenumbercolumnstyleelement_destroy(o2, r2);
      var e3 = a2()[o2 / 4 + 0], t2 = a2()[o2 / 4 + 1];
      if (t2)
        throw f2(e3);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  connected_callback() {
    c.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var E2 = class {
  static __wrap(e3) {
    let t2 = Object.create(E2.prototype);
    return t2.ptr = e3, t2;
  }
  __destroy_into_raw() {
    let e3 = this.ptr;
    return this.ptr = 0, e3;
  }
  free() {
    let e3 = this.__destroy_into_raw();
    c.__wbg_perspectivestringcolumnstyleelement_free(e3);
  }
  constructor(e3) {
    let t2 = c.perspectivedatecolumnstyleelement_new(i2(e3));
    return E2.__wrap(t2);
  }
  reset(e3) {
    try {
      let o2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivestringcolumnstyleelement_reset(o2, this.ptr, i2(e3));
      var t2 = a2()[o2 / 4 + 0], r2 = a2()[o2 / 4 + 1];
      if (r2)
        throw f2(t2);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  open(e3, t2, r2) {
    try {
      let u3 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivestringcolumnstyleelement_open(u3, this.ptr, i2(e3), i2(t2), i2(r2));
      var o2 = a2()[u3 / 4 + 0], s3 = a2()[u3 / 4 + 1];
      if (s3)
        throw f2(o2);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  close() {
    try {
      let r2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivedatecolumnstyleelement_close(r2, this.ptr);
      var e3 = a2()[r2 / 4 + 0], t2 = a2()[r2 / 4 + 1];
      if (t2)
        throw f2(e3);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  destroy() {
    try {
      let r2 = this.__destroy_into_raw(), o2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectivestringcolumnstyleelement_destroy(o2, r2);
      var e3 = a2()[o2 / 4 + 0], t2 = a2()[o2 / 4 + 1];
      if (t2)
        throw f2(e3);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  connected_callback() {
    c.copydropdownmenuelement_connected_callback(this.ptr);
  }
};
var h2 = class {
  static __wrap(e3) {
    let t2 = Object.create(h2.prototype);
    return t2.ptr = e3, t2;
  }
  __destroy_into_raw() {
    let e3 = this.ptr;
    return this.ptr = 0, e3;
  }
  free() {
    let e3 = this.__destroy_into_raw();
    c.__wbg_perspectiveviewerelement_free(e3);
  }
  constructor(e3) {
    let t2 = c.perspectiveviewerelement_new(i2(e3));
    return h2.__wrap(t2);
  }
  connectedCallback() {
    c.copydropdownmenuelement_connected_callback(this.ptr);
  }
  load(e3) {
    let t2 = c.perspectiveviewerelement_load(this.ptr, i2(e3));
    return f2(t2);
  }
  delete() {
    let e3 = c.perspectiveviewerelement_delete(this.ptr);
    return f2(e3);
  }
  getView() {
    let e3 = c.perspectiveviewerelement_getView(this.ptr);
    return f2(e3);
  }
  getTable(e3) {
    let t2 = c.perspectiveviewerelement_getTable(this.ptr, g2(e3) ? 16777215 : e3 ? 1 : 0);
    return f2(t2);
  }
  flush() {
    let e3 = c.perspectiveviewerelement_flush(this.ptr);
    return f2(e3);
  }
  restore(e3) {
    let t2 = c.perspectiveviewerelement_restore(this.ptr, i2(e3));
    return f2(t2);
  }
  save(e3) {
    var t2 = g2(e3) ? 0 : m(e3, c.__wbindgen_export_0, c.__wbindgen_export_1), r2 = l;
    let o2 = c.perspectiveviewerelement_save(this.ptr, t2, r2);
    return f2(o2);
  }
  download(e3) {
    let t2 = c.perspectiveviewerelement_download(this.ptr, g2(e3) ? 16777215 : e3 ? 1 : 0);
    return f2(t2);
  }
  copy(e3) {
    let t2 = c.perspectiveviewerelement_copy(this.ptr, g2(e3) ? 16777215 : e3 ? 1 : 0);
    return f2(t2);
  }
  reset(e3) {
    let t2 = c.perspectiveviewerelement_reset(this.ptr, g2(e3) ? 16777215 : e3 ? 1 : 0);
    return f2(t2);
  }
  notifyResize(e3) {
    let t2 = c.perspectiveviewerelement_notifyResize(this.ptr, g2(e3) ? 16777215 : e3 ? 1 : 0);
    return f2(t2);
  }
  setAutoSize(e3) {
    c.perspectiveviewerelement_setAutoSize(this.ptr, e3);
  }
  getEditPort() {
    try {
      let o2 = c.__wbindgen_add_to_stack_pointer(-16);
      c.perspectiveviewerelement_getEditPort(o2, this.ptr);
      var e3 = ne2()[o2 / 8 + 0], t2 = a2()[o2 / 4 + 2], r2 = a2()[o2 / 4 + 3];
      if (r2)
        throw f2(t2);
      return e3;
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  restyleElement() {
    let e3 = c.perspectiveviewerelement_restyleElement(this.ptr);
    return f2(e3);
  }
  resetThemes(e3) {
    var t2 = g2(e3) ? 0 : Te(e3, c.__wbindgen_export_0), r2 = l;
    let o2 = c.perspectiveviewerelement_resetThemes(this.ptr, t2, r2);
    return f2(o2);
  }
  setThrottle(e3) {
    c.perspectiveviewerelement_setThrottle(this.ptr, !g2(e3), g2(e3) ? 0 : e3);
  }
  toggleConfig(e3) {
    let t2 = c.perspectiveviewerelement_toggleConfig(this.ptr, g2(e3) ? 16777215 : e3 ? 1 : 0);
    return f2(t2);
  }
  getAllPlugins() {
    let e3 = c.perspectiveviewerelement_getAllPlugins(this.ptr);
    return f2(e3);
  }
  getPlugin(e3) {
    try {
      let d2 = c.__wbindgen_add_to_stack_pointer(-16);
      var t2 = g2(e3) ? 0 : m(e3, c.__wbindgen_export_0, c.__wbindgen_export_1), r2 = l;
      c.perspectiveviewerelement_getPlugin(d2, this.ptr, t2, r2);
      var o2 = a2()[d2 / 4 + 0], s3 = a2()[d2 / 4 + 1], u3 = a2()[d2 / 4 + 2];
      if (u3)
        throw f2(s3);
      return f2(o2);
    } finally {
      c.__wbindgen_add_to_stack_pointer(16);
    }
  }
  unsafeGetModel() {
    return c.perspectiveviewerelement_unsafeGetModel(this.ptr);
  }
};
async function Oe(n3, e3) {
  if (typeof Response == "function" && n3 instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming == "function")
      try {
        return await WebAssembly.instantiateStreaming(n3, e3);
      } catch (r2) {
        if (n3.headers.get("Content-Type") != "application/wasm")
          console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", r2);
        else
          throw r2;
      }
    let t2 = await n3.arrayBuffer();
    return await WebAssembly.instantiate(t2, e3);
  } else {
    let t2 = await WebAssembly.instantiate(n3, e3);
    return t2 instanceof WebAssembly.Instance ? { instance: t2, module: n3 } : t2;
  }
}
function ce() {
  let n3 = {};
  return n3.wbg = {}, n3.wbg.__wbindgen_is_undefined = function(e3) {
    return _2(e3) === void 0;
  }, n3.wbg.__wbindgen_in = function(e3, t2) {
    return _2(e3) in _2(t2);
  }, n3.wbg.__wbindgen_number_get = function(e3, t2) {
    let r2 = _2(t2), o2 = typeof r2 == "number" ? r2 : void 0;
    ne2()[e3 / 8 + 1] = g2(o2) ? 0 : o2, a2()[e3 / 4 + 0] = !g2(o2);
  }, n3.wbg.__wbindgen_boolean_get = function(e3) {
    let t2 = _2(e3);
    return typeof t2 == "boolean" ? t2 ? 1 : 0 : 2;
  }, n3.wbg.__wbindgen_string_get = function(e3, t2) {
    let r2 = _2(t2), o2 = typeof r2 == "string" ? r2 : void 0;
    var s3 = g2(o2) ? 0 : m(o2, c.__wbindgen_export_0, c.__wbindgen_export_1), u3 = l;
    a2()[e3 / 4 + 1] = u3, a2()[e3 / 4 + 0] = s3;
  }, n3.wbg.__wbindgen_is_bigint = function(e3) {
    return typeof _2(e3) == "bigint";
  }, n3.wbg.__wbindgen_is_object = function(e3) {
    let t2 = _2(e3);
    return typeof t2 == "object" && t2 !== null;
  }, n3.wbg.__wbindgen_is_string = function(e3) {
    return typeof _2(e3) == "string";
  }, n3.wbg.__wbindgen_bigint_from_i64 = function(e3) {
    return i2(e3);
  }, n3.wbg.__wbindgen_bigint_from_u64 = function(e3) {
    let t2 = BigInt.asUintN(64, e3);
    return i2(t2);
  }, n3.wbg.__wbindgen_error_new = function(e3, t2) {
    let r2 = new Error(w2(e3, t2));
    return i2(r2);
  }, n3.wbg.__wbindgen_string_new = function(e3, t2) {
    let r2 = w2(e3, t2);
    return i2(r2);
  }, n3.wbg.__wbg_supportedValuesOf_f68357d2bb072420 = function(e3) {
    let t2 = Intl.supportedValuesOf(_2(e3));
    return i2(t2);
  }, n3.wbg.__wbg_static_accessor_PSP_ac3dd51f47d58848 = function() {
    return i2(x2);
  }, n3.wbg.__wbindgen_jsval_eq = function(e3, t2) {
    return _2(e3) === _2(t2);
  }, n3.wbg.__wbindgen_object_drop_ref = function(e3) {
    f2(e3);
  }, n3.wbg.__wbindgen_object_clone_ref = function(e3) {
    let t2 = _2(e3);
    return i2(t2);
  }, n3.wbg.__wbindgen_cb_drop = function(e3) {
    let t2 = f2(e3).original;
    return t2.cnt-- == 1 ? (t2.a = 0, true) : false;
  }, n3.wbg.__wbg_restore_b50471fddce1a285 = function(e3, t2) {
    _2(e3).restore(_2(t2));
  }, n3.wbg.__wbindgen_is_null = function(e3) {
    return _2(e3) === null;
  }, n3.wbg.__wbg_update_dda83c1462a77f02 = function() {
    return b2(function(e3, t2, r2, o2, s3, u3, d2) {
      let p2 = _2(e3).update(_2(t2), r2 === 0 ? void 0 : o2 >>> 0, s3 === 0 ? void 0 : u3 >>> 0, d2 !== 0);
      return i2(p2);
    }, arguments);
  }, n3.wbg.__wbg_draw_3d4c507969a7d3f5 = function() {
    return b2(function(e3, t2, r2, o2, s3, u3, d2) {
      let p2 = _2(e3).draw(_2(t2), r2 === 0 ? void 0 : o2 >>> 0, s3 === 0 ? void 0 : u3 >>> 0, d2 !== 0);
      return i2(p2);
    }, arguments);
  }, n3.wbg.__wbg_delete_3fa3c10502b1ff7f = function(e3) {
    _2(e3).delete();
  }, n3.wbg.__wbg_setrenderwarning_1dd231a3ec244e77 = function(e3, t2) {
    _2(e3).render_warning = t2 !== 0;
  }, n3.wbg.__wbg_columns_df101f541b7f234f = function() {
    return b2(function(e3) {
      let t2 = _2(e3).columns();
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_schema_0c4095ddab88dd4a = function() {
    return b2(function(e3) {
      let t2 = _2(e3).schema();
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_makeport_056afd9eb7a1486d = function() {
    return b2(function(e3) {
      let t2 = _2(e3).make_port();
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_numtablerows_c2e6530f0dd6c1f4 = function(e3) {
    return _2(e3).num_table_rows;
  }, n3.wbg.__wbg_numtablecolumns_cf318a2ea82895bd = function(e3) {
    return _2(e3).num_table_columns;
  }, n3.wbg.__wbg_numviewrows_989d466140b37d93 = function(e3) {
    return _2(e3).num_view_rows;
  }, n3.wbg.__wbg_numviewcolumns_8cd9aac2810d85b9 = function(e3) {
    return _2(e3).num_view_columns;
  }, n3.wbg.__wbg_tocolumns_3c399b334e5008f9 = function() {
    return b2(function(e3) {
      let t2 = _2(e3).to_columns();
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_new_75a26d19ae75c5cf = function(e3) {
    let t2 = new Z2(_2(e3));
    return i2(t2);
  }, n3.wbg.__wbg_onupdate_2a8509b5fa5a97eb = function(e3, t2) {
    _2(e3).on_update(_2(t2));
  }, n3.wbg.__wbg_removeupdate_e12dea3c90bc52d6 = function(e3, t2) {
    _2(e3).remove_update(_2(t2));
  }, n3.wbg.__wbg_errors_4a6d5579dcd25553 = function(e3) {
    let t2 = _2(e3).errors;
    return i2(t2);
  }, n3.wbg.__wbg_expressionschema_eaa9a6dca544d7ef = function(e3) {
    let t2 = _2(e3).expression_schema;
    return i2(t2);
  }, n3.wbg.__wbg_expressionalias_2f5b998dc873a6af = function(e3) {
    let t2 = _2(e3).expression_alias;
    return i2(t2);
  }, n3.wbg.__wbg_validateexpressions_ec69a917efb7b2a3 = function() {
    return b2(function(e3, t2) {
      let r2 = _2(e3).validate_expressions(f2(t2));
      return i2(r2);
    }, arguments);
  }, n3.wbg.__wbg_view_849b944397ab8a4f = function() {
    return b2(function(e3, t2) {
      let r2 = _2(e3).view(_2(t2));
      return i2(r2);
    }, arguments);
  }, n3.wbg.__wbg_tocsv_be032c7eff197818 = function() {
    return b2(function(e3, t2) {
      let r2 = _2(e3).to_csv(f2(t2));
      return i2(r2);
    }, arguments);
  }, n3.wbg.__wbg_toarrow_27fc6c88f6002b70 = function() {
    return b2(function(e3) {
      let t2 = _2(e3).to_arrow();
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_dimensions_5625463d8f364173 = function() {
    return b2(function(e3) {
      let t2 = _2(e3).dimensions();
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_schema_f283d68ab2d5b415 = function() {
    return b2(function(e3) {
      let t2 = _2(e3).schema();
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_delete_7c2f2670148aae51 = function() {
    return b2(function(e3) {
      let t2 = _2(e3).delete();
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_name_0ce7d6f715a3cd2b = function(e3, t2) {
    let r2 = _2(t2).name, o2 = m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
    a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
  }, n3.wbg.__wbg_category_51f992657f8d91a7 = function(e3, t2) {
    let r2 = _2(t2).category;
    var o2 = g2(r2) ? 0 : m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
    a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
  }, n3.wbg.__wbg_maxcolumns_dfd9d258fdfcf6d5 = function(e3, t2) {
    let r2 = _2(t2).max_columns;
    a2()[e3 / 4 + 1] = g2(r2) ? 0 : r2, a2()[e3 / 4 + 0] = !g2(r2);
  }, n3.wbg.__wbg_maxcells_71c477e0e902b657 = function(e3, t2) {
    let r2 = _2(t2).max_cells;
    a2()[e3 / 4 + 1] = g2(r2) ? 0 : r2, a2()[e3 / 4 + 0] = !g2(r2);
  }, n3.wbg.__wbg_renderwarning_ca46433ccca94998 = function(e3) {
    let t2 = _2(e3).render_warning;
    return g2(t2) ? 16777215 : t2 ? 1 : 0;
  }, n3.wbg.__wbg_selectmode_d121a7f4c8fb42ae = function(e3) {
    let t2 = _2(e3).select_mode;
    return i2(t2);
  }, n3.wbg.__wbg_minconfigcolumns_78cbe5037b264304 = function(e3, t2) {
    let r2 = _2(t2).min_config_columns;
    a2()[e3 / 4 + 1] = g2(r2) ? 0 : r2, a2()[e3 / 4 + 0] = !g2(r2);
  }, n3.wbg.__wbg_configcolumnnames_6513af731ccfa522 = function(e3) {
    let t2 = _2(e3).config_column_names;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_priority_ba26399937b75ff4 = function(e3, t2) {
    let r2 = _2(t2).priority;
    a2()[e3 / 4 + 1] = g2(r2) ? 0 : r2, a2()[e3 / 4 + 0] = !g2(r2);
  }, n3.wbg.__wbg_save_d0af55f976113604 = function(e3) {
    let t2 = _2(e3).save();
    return i2(t2);
  }, n3.wbg.__wbg_restyle_a74e882d03551bc8 = function() {
    return b2(function(e3, t2) {
      let r2 = _2(e3).restyle(_2(t2));
      return i2(r2);
    }, arguments);
  }, n3.wbg.__wbg_resize_61cdc49ddf68ca31 = function() {
    return b2(function(e3) {
      let t2 = _2(e3).resize();
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_new_6d8065574d67c98e = function(e3) {
    let t2 = new ee(_2(e3));
    return i2(t2);
  }, n3.wbg.__wbg_observe_1a69690ff4549b9e = function(e3, t2) {
    _2(e3).observe(_2(t2));
  }, n3.wbg.__wbg_unobserve_e7ec03ea939e64ab = function(e3, t2) {
    _2(e3).unobserve(_2(t2));
  }, n3.wbg.__wbg_contentRect_dce710ffe98a7627 = function(e3) {
    let t2 = _2(e3).contentRect;
    return i2(t2);
  }, n3.wbg.__wbg_bootstrap_528703cad82a7798 = function(e3, t2, r2, o2, s3, u3) {
    let d2 = te(_2(e3), w2(t2, r2), w2(o2, s3), f2(u3));
    return i2(d2);
  }, n3.wbg.__wbg_mark_40e050a77cc39fea = function(e3, t2) {
    performance.mark(w2(e3, t2));
  }, n3.wbg.__wbg_measure_aa7a73f17813f708 = function() {
    return b2(function(e3, t2, r2, o2) {
      try {
        performance.measure(w2(e3, t2), w2(r2, o2));
      } finally {
        c.__wbindgen_export_12(e3, t2), c.__wbindgen_export_12(r2, o2);
      }
    }, arguments);
  }, n3.wbg.__wbg_log_c9486ca5d8e2cbe8 = function(e3, t2) {
    try {
      console.log(w2(e3, t2));
    } finally {
      c.__wbindgen_export_12(e3, t2);
    }
  }, n3.wbg.__wbg_log_aba5996d9bde071f = function(e3, t2, r2, o2, s3, u3, d2, p2) {
    try {
      console.log(w2(e3, t2), w2(r2, o2), w2(s3, u3), w2(d2, p2));
    } finally {
      c.__wbindgen_export_12(e3, t2);
    }
  }, n3.wbg.__wbindgen_number_new = function(e3) {
    return i2(e3);
  }, n3.wbg.__wbg_listenerid_12315eee21527820 = function(e3, t2) {
    let r2 = _2(t2).__yew_listener_id;
    a2()[e3 / 4 + 1] = g2(r2) ? 0 : r2, a2()[e3 / 4 + 0] = !g2(r2);
  }, n3.wbg.__wbg_setlistenerid_3183aae8fa5840fb = function(e3, t2) {
    _2(e3).__yew_listener_id = t2 >>> 0;
  }, n3.wbg.__wbg_setsubtreeid_d32e6327eef1f7fc = function(e3, t2) {
    _2(e3).__yew_subtree_id = t2 >>> 0;
  }, n3.wbg.__wbg_setcachekey_80183b7cfc421143 = function(e3, t2) {
    _2(e3).__yew_subtree_cache_key = t2 >>> 0;
  }, n3.wbg.__wbg_subtreeid_e348577f7ef777e3 = function(e3, t2) {
    let r2 = _2(t2).__yew_subtree_id;
    a2()[e3 / 4 + 1] = g2(r2) ? 0 : r2, a2()[e3 / 4 + 0] = !g2(r2);
  }, n3.wbg.__wbg_cachekey_b61393159c57fd7b = function(e3, t2) {
    let r2 = _2(t2).__yew_subtree_cache_key;
    a2()[e3 / 4 + 1] = g2(r2) ? 0 : r2, a2()[e3 / 4 + 0] = !g2(r2);
  }, n3.wbg.__wbg_new_abda76e883ba8a5f = function() {
    let e3 = new Error();
    return i2(e3);
  }, n3.wbg.__wbg_stack_658279fe44541cf6 = function(e3, t2) {
    let r2 = _2(t2).stack, o2 = m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
    a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
  }, n3.wbg.__wbg_error_f851667af71bcfc6 = function(e3, t2) {
    try {
      console.error(w2(e3, t2));
    } finally {
      c.__wbindgen_export_12(e3, t2);
    }
  }, n3.wbg.__wbindgen_jsval_loose_eq = function(e3, t2) {
    return _2(e3) == _2(t2);
  }, n3.wbg.__wbg_String_91fba7ded13ba54c = function(e3, t2) {
    let r2 = String(_2(t2)), o2 = m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
    a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
  }, n3.wbg.__wbg_getwithrefkey_15c62c2b8546208d = function(e3, t2) {
    let r2 = _2(e3)[_2(t2)];
    return i2(r2);
  }, n3.wbg.__wbg_set_20cbc34131e76824 = function(e3, t2, r2) {
    _2(e3)[f2(t2)] = f2(r2);
  }, n3.wbg.__wbg_error_c0a7dc7e3b138aad = function(e3, t2) {
    var r2 = oe2(e3, t2).slice();
    c.__wbindgen_export_12(e3, t2 * 4), console.error(...r2);
  }, n3.wbg.__wbg_newwithu8arraysequence_f863246af83e1785 = function() {
    return b2(function(e3) {
      let t2 = new Blob(_2(e3));
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_newwithstrsequenceandoptions_4f45d51a76d0e731 = function() {
    return b2(function(e3, t2) {
      let r2 = new Blob(_2(e3), _2(t2));
      return i2(r2);
    }, arguments);
  }, n3.wbg.__wbg_write_6ab17e2f46d9af07 = function(e3, t2) {
    let r2 = _2(e3).write(_2(t2));
    return i2(r2);
  }, n3.wbg.__wbg_length_01b9a7602c8f3b92 = function(e3) {
    return _2(e3).length;
  }, n3.wbg.__wbg_item_83fc3c9843b5b55c = function(e3, t2) {
    let r2 = _2(e3).item(t2 >>> 0);
    return g2(r2) ? 0 : i2(r2);
  }, n3.wbg.__wbg_length_cd5bf94cfb3798c6 = function(e3) {
    return _2(e3).length;
  }, n3.wbg.__wbg_getPropertyValue_e1afcfe3e0dda270 = function() {
    return b2(function(e3, t2, r2, o2) {
      let s3 = _2(t2).getPropertyValue(w2(r2, o2)), u3 = m(s3, c.__wbindgen_export_0, c.__wbindgen_export_1), d2 = l;
      a2()[e3 / 4 + 1] = d2, a2()[e3 / 4 + 0] = u3;
    }, arguments);
  }, n3.wbg.__wbg_item_fb51ec5c6f84e7e8 = function(e3, t2, r2) {
    let o2 = _2(t2).item(r2 >>> 0), s3 = m(o2, c.__wbindgen_export_0, c.__wbindgen_export_1), u3 = l;
    a2()[e3 / 4 + 1] = u3, a2()[e3 / 4 + 0] = s3;
  }, n3.wbg.__wbg_setProperty_e489dfd8c0a6bffc = function() {
    return b2(function(e3, t2, r2, o2, s3) {
      _2(e3).setProperty(w2(t2, r2), w2(o2, s3));
    }, arguments);
  }, n3.wbg.__wbg_instanceof_CssStyleRule_c541984a3485ca68 = function(e3) {
    let t2;
    try {
      t2 = _2(e3) instanceof CSSStyleRule;
    } catch {
      t2 = false;
    }
    return t2;
  }, n3.wbg.__wbg_selectorText_82d2610a92edaa5e = function(e3, t2) {
    let r2 = _2(t2).selectorText, o2 = m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
    a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
  }, n3.wbg.__wbg_style_cf013b9d95e0ab9e = function(e3) {
    let t2 = _2(e3).style;
    return i2(t2);
  }, n3.wbg.__wbg_cssRules_854cc83d669b5359 = function() {
    return b2(function(e3) {
      let t2 = _2(e3).cssRules;
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_new_fc739aa39a85df5e = function() {
    return b2(function(e3, t2) {
      let r2 = new CustomEvent(w2(e3, t2));
      return i2(r2);
    }, arguments);
  }, n3.wbg.__wbg_newwitheventinitdict_cfe41e76471dadcc = function() {
    return b2(function(e3, t2, r2) {
      let o2 = new CustomEvent(w2(e3, t2), _2(r2));
      return i2(o2);
    }, arguments);
  }, n3.wbg.__wbg_setdropEffect_ef988aabbd6fd5d3 = function(e3, t2, r2) {
    _2(e3).dropEffect = w2(t2, r2);
  }, n3.wbg.__wbg_setData_0547a743d5659015 = function() {
    return b2(function(e3, t2, r2, o2, s3) {
      _2(e3).setData(w2(t2, r2), w2(o2, s3));
    }, arguments);
  }, n3.wbg.__wbg_setDragImage_478cf090a4d1b5a8 = function(e3, t2, r2, o2) {
    _2(e3).setDragImage(_2(t2), r2, o2);
  }, n3.wbg.__wbg_readyState_d8d7acda9cf45bb1 = function(e3, t2) {
    let r2 = _2(t2).readyState, o2 = m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
    a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
  }, n3.wbg.__wbg_body_3cb4b4042b9a632b = function(e3) {
    let t2 = _2(e3).body;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_activeElement_832e9d448ca74309 = function(e3) {
    let t2 = _2(e3).activeElement;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_styleSheets_4c75951913bdea3c = function(e3) {
    let t2 = _2(e3).styleSheets;
    return i2(t2);
  }, n3.wbg.__wbg_fonts_1d04fb4c680677a5 = function(e3) {
    let t2 = _2(e3).fonts;
    return i2(t2);
  }, n3.wbg.__wbg_createElement_976dbb84fe1661b5 = function() {
    return b2(function(e3, t2, r2) {
      let o2 = _2(e3).createElement(w2(t2, r2));
      return i2(o2);
    }, arguments);
  }, n3.wbg.__wbg_createElementNS_1561aca8ee3693c0 = function() {
    return b2(function(e3, t2, r2, o2, s3) {
      let u3 = _2(e3).createElementNS(t2 === 0 ? void 0 : w2(t2, r2), w2(o2, s3));
      return i2(u3);
    }, arguments);
  }, n3.wbg.__wbg_createTextNode_300f845fab76642f = function(e3, t2, r2) {
    let o2 = _2(e3).createTextNode(w2(t2, r2));
    return i2(o2);
  }, n3.wbg.__wbg_width_3ca95ccb4ba994e2 = function(e3) {
    return _2(e3).width;
  }, n3.wbg.__wbg_height_52d1d8c8ada7c55d = function(e3) {
    return _2(e3).height;
  }, n3.wbg.__wbg_width_470981a9ec24a32e = function(e3) {
    return _2(e3).width;
  }, n3.wbg.__wbg_height_f4174d843edb0906 = function(e3) {
    return _2(e3).height;
  }, n3.wbg.__wbg_top_af8250f1ed584537 = function(e3) {
    return _2(e3).top;
  }, n3.wbg.__wbg_left_e700000a247fe781 = function(e3) {
    return _2(e3).left;
  }, n3.wbg.__wbg_get_fc5705c1298c5dc3 = function(e3, t2, r2, o2) {
    let s3 = _2(t2)[w2(r2, o2)];
    var u3 = g2(s3) ? 0 : m(s3, c.__wbindgen_export_0, c.__wbindgen_export_1), d2 = l;
    a2()[e3 / 4 + 1] = d2, a2()[e3 / 4 + 0] = u3;
  }, n3.wbg.__wbg_set_45d8640eed33057c = function() {
    return b2(function(e3, t2, r2, o2, s3) {
      _2(e3)[w2(t2, r2)] = w2(o2, s3);
    }, arguments);
  }, n3.wbg.__wbg_delete_71c6d72669c7a7bf = function(e3, t2, r2) {
    delete _2(e3)[w2(t2, r2)];
  }, n3.wbg.__wbg_add_89a4f3b0846cf0aa = function() {
    return b2(function(e3, t2, r2) {
      _2(e3).add(w2(t2, r2));
    }, arguments);
  }, n3.wbg.__wbg_remove_1a26eb5d822902ed = function() {
    return b2(function(e3, t2, r2) {
      _2(e3).remove(w2(t2, r2));
    }, arguments);
  }, n3.wbg.__wbg_toggle_98fc718f1f361e81 = function() {
    return b2(function(e3, t2, r2) {
      return _2(e3).toggle(w2(t2, r2));
    }, arguments);
  }, n3.wbg.__wbg_dataTransfer_52971d8875475cec = function(e3) {
    let t2 = _2(e3).dataTransfer;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_instanceof_Element_33bd126d58f2021b = function(e3) {
    let t2;
    try {
      t2 = _2(e3) instanceof Element;
    } catch {
      t2 = false;
    }
    return t2;
  }, n3.wbg.__wbg_namespaceURI_e19c7be2c60e5b5c = function(e3, t2) {
    let r2 = _2(t2).namespaceURI;
    var o2 = g2(r2) ? 0 : m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
    a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
  }, n3.wbg.__wbg_tagName_50571f9480ac166a = function(e3, t2) {
    let r2 = _2(t2).tagName, o2 = m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
    a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
  }, n3.wbg.__wbg_classList_8a97f5e2e1bc3fa9 = function(e3) {
    let t2 = _2(e3).classList;
    return i2(t2);
  }, n3.wbg.__wbg_scrollTop_e9a97925f8b862b4 = function(e3) {
    return _2(e3).scrollTop;
  }, n3.wbg.__wbg_scrollLeft_fccd2eab5376d5e9 = function(e3) {
    return _2(e3).scrollLeft;
  }, n3.wbg.__wbg_setscrollLeft_058057e59ebab6e0 = function(e3, t2) {
    _2(e3).scrollLeft = t2;
  }, n3.wbg.__wbg_clientWidth_999b9163952471ee = function(e3) {
    return _2(e3).clientWidth;
  }, n3.wbg.__wbg_clientHeight_1fc8bff4acf145b1 = function(e3) {
    return _2(e3).clientHeight;
  }, n3.wbg.__wbg_setinnerHTML_32081d8a164e6dc4 = function(e3, t2, r2) {
    _2(e3).innerHTML = w2(t2, r2);
  }, n3.wbg.__wbg_children_67776b4810f38b6a = function(e3) {
    let t2 = _2(e3).children;
    return i2(t2);
  }, n3.wbg.__wbg_attachShadow_6679406270042c29 = function() {
    return b2(function(e3, t2) {
      let r2 = _2(e3).attachShadow(_2(t2));
      return i2(r2);
    }, arguments);
  }, n3.wbg.__wbg_getAttribute_3a1f0fb396184372 = function(e3, t2, r2, o2) {
    let s3 = _2(t2).getAttribute(w2(r2, o2));
    var u3 = g2(s3) ? 0 : m(s3, c.__wbindgen_export_0, c.__wbindgen_export_1), d2 = l;
    a2()[e3 / 4 + 1] = d2, a2()[e3 / 4 + 0] = u3;
  }, n3.wbg.__wbg_getBoundingClientRect_06acb6ac1c23e409 = function(e3) {
    let t2 = _2(e3).getBoundingClientRect();
    return i2(t2);
  }, n3.wbg.__wbg_hasAttribute_a9fb6bc740fe4146 = function(e3, t2, r2) {
    return _2(e3).hasAttribute(w2(t2, r2));
  }, n3.wbg.__wbg_matches_392e935e2ce3b2f8 = function() {
    return b2(function(e3, t2, r2) {
      return _2(e3).matches(w2(t2, r2));
    }, arguments);
  }, n3.wbg.__wbg_releasePointerCapture_45283df79b1542f3 = function() {
    return b2(function(e3, t2) {
      _2(e3).releasePointerCapture(t2);
    }, arguments);
  }, n3.wbg.__wbg_removeAttribute_beaed7727852af78 = function() {
    return b2(function(e3, t2, r2) {
      _2(e3).removeAttribute(w2(t2, r2));
    }, arguments);
  }, n3.wbg.__wbg_setAttribute_d8436c14a59ab1af = function() {
    return b2(function(e3, t2, r2, o2, s3) {
      _2(e3).setAttribute(w2(t2, r2), w2(o2, s3));
    }, arguments);
  }, n3.wbg.__wbg_setPointerCapture_7cc6c6e831d5dae0 = function() {
    return b2(function(e3, t2) {
      _2(e3).setPointerCapture(t2);
    }, arguments);
  }, n3.wbg.__wbg_toggleAttribute_ae95fde458610a9c = function() {
    return b2(function(e3, t2, r2, o2) {
      return _2(e3).toggleAttribute(w2(t2, r2), o2 !== 0);
    }, arguments);
  }, n3.wbg.__wbg_target_bf704b7db7ad1387 = function(e3) {
    let t2 = _2(e3).target;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_bubbles_03eed164b4feeaf1 = function(e3) {
    return _2(e3).bubbles;
  }, n3.wbg.__wbg_cancelBubble_8c0bdf21c08f1717 = function(e3) {
    return _2(e3).cancelBubble;
  }, n3.wbg.__wbg_composedPath_160ed014dc4d787f = function(e3) {
    let t2 = _2(e3).composedPath();
    return i2(t2);
  }, n3.wbg.__wbg_preventDefault_3209279b490de583 = function(e3) {
    _2(e3).preventDefault();
  }, n3.wbg.__wbg_stopPropagation_eca3af16f2d02a91 = function(e3) {
    _2(e3).stopPropagation();
  }, n3.wbg.__wbg_addEventListener_cbe4c6f619b032f3 = function() {
    return b2(function(e3, t2, r2, o2) {
      _2(e3).addEventListener(w2(t2, r2), _2(o2));
    }, arguments);
  }, n3.wbg.__wbg_addEventListener_1fc744729ac6dc27 = function() {
    return b2(function(e3, t2, r2, o2, s3) {
      _2(e3).addEventListener(w2(t2, r2), _2(o2), _2(s3));
    }, arguments);
  }, n3.wbg.__wbg_dispatchEvent_9c61816a838ce0ce = function() {
    return b2(function(e3, t2) {
      return _2(e3).dispatchEvent(_2(t2));
    }, arguments);
  }, n3.wbg.__wbg_removeEventListener_dd20475efce70084 = function() {
    return b2(function(e3, t2, r2, o2) {
      _2(e3).removeEventListener(w2(t2, r2), _2(o2));
    }, arguments);
  }, n3.wbg.__wbg_instanceof_FontFace_5d117907c456abee = function(e3) {
    let t2;
    try {
      t2 = _2(e3) instanceof FontFace;
    } catch {
      t2 = false;
    }
    return t2;
  }, n3.wbg.__wbg_family_42c509521128281a = function(e3, t2) {
    let r2 = _2(t2).family, o2 = m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
    a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
  }, n3.wbg.__wbg_weight_f8819f77448d73cf = function(e3, t2) {
    let r2 = _2(t2).weight, o2 = m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
    a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
  }, n3.wbg.__wbg_loaded_923fa6f5cc2d1ef3 = function() {
    return b2(function(e3) {
      let t2 = _2(e3).loaded;
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_values_007d212e9a93f562 = function(e3) {
    let t2 = _2(e3).values();
    return i2(t2);
  }, n3.wbg.__wbg_next_447cf1b072ae69ff = function() {
    return b2(function(e3) {
      let t2 = _2(e3).next();
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_item_37cbb972da31ad43 = function(e3, t2) {
    let r2 = _2(e3).item(t2 >>> 0);
    return g2(r2) ? 0 : i2(r2);
  }, n3.wbg.__wbg_getwithindex_5571ba24207565a4 = function(e3, t2) {
    let r2 = _2(e3)[t2 >>> 0];
    return g2(r2) ? 0 : i2(r2);
  }, n3.wbg.__wbg_scrollTop_779068ee3be0f2d0 = function(e3) {
    return _2(e3).scrollTop;
  }, n3.wbg.__wbg_setscrollTop_80e548104e4ea213 = function(e3, t2) {
    _2(e3).scrollTop = t2;
  }, n3.wbg.__wbg_dataset_236dd69c02c8bb59 = function(e3) {
    let t2 = _2(e3).dataset;
    return i2(t2);
  }, n3.wbg.__wbg_style_e9380748cee29f13 = function(e3) {
    let t2 = _2(e3).style;
    return i2(t2);
  }, n3.wbg.__wbg_offsetParent_1620d2946bd2551a = function(e3) {
    let t2 = _2(e3).offsetParent;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_offsetWidth_8906f5432e06a269 = function(e3) {
    return _2(e3).offsetWidth;
  }, n3.wbg.__wbg_offsetHeight_3099b53c020bbd40 = function(e3) {
    return _2(e3).offsetHeight;
  }, n3.wbg.__wbg_blur_48356fc7ce64e8db = function() {
    return b2(function(e3) {
      _2(e3).blur();
    }, arguments);
  }, n3.wbg.__wbg_click_dc312915ae093463 = function(e3) {
    _2(e3).click();
  }, n3.wbg.__wbg_focus_adfe4cc61e2c09bc = function() {
    return b2(function(e3) {
      _2(e3).focus();
    }, arguments);
  }, n3.wbg.__wbg_checked_f0b666100ef39e44 = function(e3) {
    return _2(e3).checked;
  }, n3.wbg.__wbg_setchecked_f1e1f3e62cdca8e7 = function(e3, t2) {
    _2(e3).checked = t2 !== 0;
  }, n3.wbg.__wbg_value_b2a620d34c663701 = function(e3, t2) {
    let r2 = _2(t2).value, o2 = m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
    a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
  }, n3.wbg.__wbg_setvalue_e5b519cca37d82a7 = function(e3, t2, r2) {
    _2(e3).value = w2(t2, r2);
  }, n3.wbg.__wbg_selectedIndex_006e7532179f4366 = function(e3) {
    return _2(e3).selectedIndex;
  }, n3.wbg.__wbg_setvalue_511e4a973ca603a8 = function(e3, t2, r2) {
    _2(e3).value = w2(t2, r2);
  }, n3.wbg.__wbg_value_ccb32485ee1b3928 = function(e3, t2) {
    let r2 = _2(t2).value, o2 = m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
    a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
  }, n3.wbg.__wbg_setvalue_df64bc6794c098f2 = function(e3, t2, r2) {
    _2(e3).value = w2(t2, r2);
  }, n3.wbg.__wbg_setselectionStart_87a1777e51e06ed4 = function() {
    return b2(function(e3, t2, r2) {
      _2(e3).selectionStart = t2 === 0 ? void 0 : r2 >>> 0;
    }, arguments);
  }, n3.wbg.__wbg_selectionEnd_f88c311ef9851368 = function() {
    return b2(function(e3, t2) {
      let r2 = _2(t2).selectionEnd;
      a2()[e3 / 4 + 1] = g2(r2) ? 0 : r2, a2()[e3 / 4 + 0] = !g2(r2);
    }, arguments);
  }, n3.wbg.__wbg_setselectionEnd_e639d81bc8c38f56 = function() {
    return b2(function(e3, t2, r2) {
      _2(e3).selectionEnd = t2 === 0 ? void 0 : r2 >>> 0;
    }, arguments);
  }, n3.wbg.__wbg_keyCode_72faed4278f77f2c = function(e3) {
    return _2(e3).keyCode;
  }, n3.wbg.__wbg_shiftKey_908ae224b8722a41 = function(e3) {
    return _2(e3).shiftKey;
  }, n3.wbg.__wbg_clientX_e39206f946859108 = function(e3) {
    return _2(e3).clientX;
  }, n3.wbg.__wbg_clientY_e376bb2d8f470c88 = function(e3) {
    return _2(e3).clientY;
  }, n3.wbg.__wbg_offsetX_8891849b36542d53 = function(e3) {
    return _2(e3).offsetX;
  }, n3.wbg.__wbg_offsetY_1f52082687af467b = function(e3) {
    return _2(e3).offsetY;
  }, n3.wbg.__wbg_shiftKey_81014521a7612e6a = function(e3) {
    return _2(e3).shiftKey;
  }, n3.wbg.__wbg_relatedTarget_e7a22a26498fa39d = function(e3) {
    let t2 = _2(e3).relatedTarget;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_clipboard_7f9a0c2ee555ca31 = function(e3) {
    let t2 = _2(e3).clipboard;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_isConnected_c2256d1e3bdf0c41 = function(e3) {
    return _2(e3).isConnected;
  }, n3.wbg.__wbg_parentNode_e397bbbe28be7b28 = function(e3) {
    let t2 = _2(e3).parentNode;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_parentElement_0cffb3ceb0f107bd = function(e3) {
    let t2 = _2(e3).parentElement;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_lastChild_a2f5ed739809bb31 = function(e3) {
    let t2 = _2(e3).lastChild;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_nextSibling_62338ec2a05607b4 = function(e3) {
    let t2 = _2(e3).nextSibling;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_setnodeValue_4077cafeefd0725e = function(e3, t2, r2) {
    _2(e3).nodeValue = t2 === 0 ? void 0 : w2(t2, r2);
  }, n3.wbg.__wbg_settextContent_538ceb17614272d8 = function(e3, t2, r2) {
    _2(e3).textContent = t2 === 0 ? void 0 : w2(t2, r2);
  }, n3.wbg.__wbg_appendChild_e513ef0e5098dfdd = function() {
    return b2(function(e3, t2) {
      let r2 = _2(e3).appendChild(_2(t2));
      return i2(r2);
    }, arguments);
  }, n3.wbg.__wbg_cloneNode_27fa6913b5172820 = function() {
    return b2(function(e3, t2) {
      let r2 = _2(e3).cloneNode(t2 !== 0);
      return i2(r2);
    }, arguments);
  }, n3.wbg.__wbg_contains_e35a6bed906082fb = function(e3, t2) {
    return _2(e3).contains(_2(t2));
  }, n3.wbg.__wbg_getRootNode_1ec3ce813f3b619c = function(e3) {
    let t2 = _2(e3).getRootNode();
    return i2(t2);
  }, n3.wbg.__wbg_insertBefore_9f2d2defb9471006 = function() {
    return b2(function(e3, t2, r2) {
      let o2 = _2(e3).insertBefore(_2(t2), _2(r2));
      return i2(o2);
    }, arguments);
  }, n3.wbg.__wbg_removeChild_6751e9ca5d9aaf00 = function() {
    return b2(function(e3, t2) {
      let r2 = _2(e3).removeChild(_2(t2));
      return i2(r2);
    }, arguments);
  }, n3.wbg.__wbg_now_8172cd917e5eda6b = function(e3) {
    return _2(e3).now();
  }, n3.wbg.__wbg_pointerId_18be034781db46f3 = function(e3) {
    return _2(e3).pointerId;
  }, n3.wbg.__wbg_instanceof_ShadowRoot_76b32ccdae10a710 = function(e3) {
    let t2;
    try {
      t2 = _2(e3) instanceof ShadowRoot;
    } catch {
      t2 = false;
    }
    return t2;
  }, n3.wbg.__wbg_host_57eec05a2624bc1b = function(e3) {
    let t2 = _2(e3).host;
    return i2(t2);
  }, n3.wbg.__wbg_length_026b786c7cebe4f1 = function(e3) {
    return _2(e3).length;
  }, n3.wbg.__wbg_item_2dde9f1bb6be5544 = function(e3, t2) {
    let r2 = _2(e3).item(t2 >>> 0);
    return g2(r2) ? 0 : i2(r2);
  }, n3.wbg.__wbg_which_16f59d07cee1a753 = function(e3) {
    return _2(e3).which;
  }, n3.wbg.__wbg_createObjectURL_8e3f999d8bc1855f = function() {
    return b2(function(e3, t2) {
      let r2 = URL.createObjectURL(_2(t2)), o2 = m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
      a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
    }, arguments);
  }, n3.wbg.__wbg_instanceof_Window_acc97ff9f5d2c7b4 = function(e3) {
    let t2;
    try {
      t2 = _2(e3) instanceof Window;
    } catch {
      t2 = false;
    }
    return t2;
  }, n3.wbg.__wbg_document_3ead31dbcad65886 = function(e3) {
    let t2 = _2(e3).document;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_navigator_d1dcf282b97e2495 = function(e3) {
    let t2 = _2(e3).navigator;
    return i2(t2);
  }, n3.wbg.__wbg_innerWidth_ffa584f74d721fce = function() {
    return b2(function(e3) {
      let t2 = _2(e3).innerWidth;
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_innerHeight_f4804c803fcf02b0 = function() {
    return b2(function(e3) {
      let t2 = _2(e3).innerHeight;
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_performance_de9825f9a8678574 = function(e3) {
    let t2 = _2(e3).performance;
    return g2(t2) ? 0 : i2(t2);
  }, n3.wbg.__wbg_getComputedStyle_9d689205a00d4ac6 = function() {
    return b2(function(e3, t2) {
      let r2 = _2(e3).getComputedStyle(_2(t2));
      return g2(r2) ? 0 : i2(r2);
    }, arguments);
  }, n3.wbg.__wbg_requestAnimationFrame_4181656476a7d86c = function() {
    return b2(function(e3, t2) {
      return _2(e3).requestAnimationFrame(_2(t2));
    }, arguments);
  }, n3.wbg.__wbg_setTimeout_d6fcf0d9067b8e64 = function() {
    return b2(function(e3, t2, r2) {
      return _2(e3).setTimeout(_2(t2), r2);
    }, arguments);
  }, n3.wbg.__wbg_error_ef9a0be47931175f = function(e3) {
    console.error(_2(e3));
  }, n3.wbg.__wbg_error_7fc7eaeed853a7db = function(e3, t2, r2) {
    console.error(_2(e3), _2(t2), _2(r2));
  }, n3.wbg.__wbg_warn_58110c4a199df084 = function(e3) {
    console.warn(_2(e3));
  }, n3.wbg.__wbindgen_is_function = function(e3) {
    return typeof _2(e3) == "function";
  }, n3.wbg.__wbg_self_6d479506f72c6a71 = function() {
    return b2(function() {
      let e3 = self.self;
      return i2(e3);
    }, arguments);
  }, n3.wbg.__wbg_window_f2557cc78490aceb = function() {
    return b2(function() {
      let e3 = window.window;
      return i2(e3);
    }, arguments);
  }, n3.wbg.__wbg_globalThis_7f206bda628d5286 = function() {
    return b2(function() {
      let e3 = globalThis.globalThis;
      return i2(e3);
    }, arguments);
  }, n3.wbg.__wbg_global_ba75c50d1cf384f4 = function() {
    return b2(function() {
      let e3 = global.global;
      return i2(e3);
    }, arguments);
  }, n3.wbg.__wbg_newnoargs_b5b063fc6c2f0376 = function(e3, t2) {
    let r2 = new Function(w2(e3, t2));
    return i2(r2);
  }, n3.wbg.__wbg_new_1d9a920c6bfc44a8 = function() {
    let e3 = new Array();
    return i2(e3);
  }, n3.wbg.__wbg_new_268f7b7dd3430798 = function() {
    return i2(/* @__PURE__ */ new Map());
  }, n3.wbg.__wbg_next_579e583d33566a86 = function(e3) {
    let t2 = _2(e3).next;
    return i2(t2);
  }, n3.wbg.__wbg_value_1ccc36bc03462d71 = function(e3) {
    let t2 = _2(e3).value;
    return i2(t2);
  }, n3.wbg.__wbg_iterator_6f9d4f28845f426c = function() {
    return i2(Symbol.iterator);
  }, n3.wbg.__wbg_new_0b9bfdd97583284e = function() {
    let e3 = new Object();
    return i2(e3);
  }, n3.wbg.__wbg_new_303d960d276348b1 = function(e3, t2) {
    let r2 = new Intl.DateTimeFormat(_2(e3), _2(t2));
    return i2(r2);
  }, n3.wbg.__wbg_get_57245cc7d7c7619d = function(e3, t2) {
    let r2 = _2(e3)[t2 >>> 0];
    return i2(r2);
  }, n3.wbg.__wbg_set_a68214f35c417fa9 = function(e3, t2, r2) {
    _2(e3)[t2 >>> 0] = f2(r2);
  }, n3.wbg.__wbg_from_7ce3cb27cb258569 = function(e3) {
    let t2 = Array.from(_2(e3));
    return i2(t2);
  }, n3.wbg.__wbg_isArray_27c46c67f498e15d = function(e3) {
    return Array.isArray(_2(e3));
  }, n3.wbg.__wbg_length_6e3bbe7c8bd4dbd8 = function(e3) {
    return _2(e3).length;
  }, n3.wbg.__wbg_push_740e4b286702d964 = function(e3, t2) {
    return _2(e3).push(_2(t2));
  }, n3.wbg.__wbg_instanceof_ArrayBuffer_e5e48f4762c5610b = function(e3) {
    let t2;
    try {
      t2 = _2(e3) instanceof ArrayBuffer;
    } catch {
      t2 = false;
    }
    return t2;
  }, n3.wbg.__wbg_slice_27c1b5dece69af8a = function(e3, t2, r2) {
    let o2 = _2(e3).slice(t2 >>> 0, r2 >>> 0);
    return i2(o2);
  }, n3.wbg.__wbg_instanceof_Error_56b496a10a56de66 = function(e3) {
    let t2;
    try {
      t2 = _2(e3) instanceof Error;
    } catch {
      t2 = false;
    }
    return t2;
  }, n3.wbg.__wbg_message_fe2af63ccc8985bc = function(e3) {
    let t2 = _2(e3).message;
    return i2(t2);
  }, n3.wbg.__wbg_call_97ae9d8645dc388b = function() {
    return b2(function(e3, t2) {
      let r2 = _2(e3).call(_2(t2));
      return i2(r2);
    }, arguments);
  }, n3.wbg.__wbg_call_168da88779e35f61 = function() {
    return b2(function(e3, t2, r2) {
      let o2 = _2(e3).call(_2(t2), _2(r2));
      return i2(o2);
    }, arguments);
  }, n3.wbg.__wbg_set_933729cf5b66ac11 = function(e3, t2, r2) {
    let o2 = _2(e3).set(_2(t2), _2(r2));
    return i2(o2);
  }, n3.wbg.__wbg_next_aaef7c8aa5e212ac = function() {
    return b2(function(e3) {
      let t2 = _2(e3).next();
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_done_1b73b0672e15f234 = function(e3) {
    return _2(e3).done;
  }, n3.wbg.__wbg_isSafeInteger_dfa0593e8d7ac35a = function(e3) {
    return Number.isSafeInteger(_2(e3));
  }, n3.wbg.__wbg_getTimezoneOffset_89bd4275e1ca8341 = function(e3) {
    return _2(e3).getTimezoneOffset();
  }, n3.wbg.__wbg_new_c8631234f931e1c4 = function(e3) {
    let t2 = new Date(_2(e3));
    return i2(t2);
  }, n3.wbg.__wbg_entries_65a76a413fc91037 = function(e3) {
    let t2 = Object.entries(_2(e3));
    return i2(t2);
  }, n3.wbg.__wbg_is_40a66842732708e7 = function(e3, t2) {
    return Object.is(_2(e3), _2(t2));
  }, n3.wbg.__wbg_keys_0702294afaeb6044 = function(e3) {
    let t2 = Object.keys(_2(e3));
    return i2(t2);
  }, n3.wbg.__wbg_get_765201544a2b6869 = function() {
    return b2(function(e3, t2) {
      let r2 = Reflect.get(_2(e3), _2(t2));
      return i2(r2);
    }, arguments);
  }, n3.wbg.__wbg_has_8359f114ce042f5a = function() {
    return b2(function(e3, t2) {
      return Reflect.has(_2(e3), _2(t2));
    }, arguments);
  }, n3.wbg.__wbg_set_bf3f89b92d5a34bf = function() {
    return b2(function(e3, t2, r2) {
      return Reflect.set(_2(e3), _2(t2), _2(r2));
    }, arguments);
  }, n3.wbg.__wbg_buffer_3f3d764d4747d564 = function(e3) {
    let t2 = _2(e3).buffer;
    return i2(t2);
  }, n3.wbg.__wbg_stringify_d6471d300ded9b68 = function() {
    return b2(function(e3) {
      let t2 = JSON.stringify(_2(e3));
      return i2(t2);
    }, arguments);
  }, n3.wbg.__wbg_resolvedOptions_26c2a9c2873e7d80 = function(e3) {
    let t2 = _2(e3).resolvedOptions();
    return i2(t2);
  }, n3.wbg.__wbg_instanceof_Promise_8f075b2904633ce9 = function(e3) {
    let t2;
    try {
      t2 = _2(e3) instanceof Promise;
    } catch {
      t2 = false;
    }
    return t2;
  }, n3.wbg.__wbg_new_9962f939219f1820 = function(e3, t2) {
    try {
      var r2 = { a: e3, b: t2 }, o2 = (u3, d2) => {
        let p2 = r2.a;
        r2.a = 0;
        try {
          return Fe(p2, r2.b, u3, d2);
        } finally {
          r2.a = p2;
        }
      };
      let s3 = new Promise(o2);
      return i2(s3);
    } finally {
      r2.a = r2.b = 0;
    }
  }, n3.wbg.__wbg_resolve_99fe17964f31ffc0 = function(e3) {
    let t2 = Promise.resolve(_2(e3));
    return i2(t2);
  }, n3.wbg.__wbg_then_11f7a54d67b4bfad = function(e3, t2) {
    let r2 = _2(e3).then(_2(t2));
    return i2(r2);
  }, n3.wbg.__wbg_then_cedad20fbbd9418a = function(e3, t2, r2) {
    let o2 = _2(e3).then(_2(t2), _2(r2));
    return i2(o2);
  }, n3.wbg.__wbg_newwithbyteoffsetandlength_d9aa266703cb98be = function(e3, t2, r2) {
    let o2 = new Uint8Array(_2(e3), t2 >>> 0, r2 >>> 0);
    return i2(o2);
  }, n3.wbg.__wbg_new_8c3f0052272a457a = function(e3) {
    let t2 = new Uint8Array(_2(e3));
    return i2(t2);
  }, n3.wbg.__wbg_instanceof_Uint8Array_971eeda69eb75003 = function(e3) {
    let t2;
    try {
      t2 = _2(e3) instanceof Uint8Array;
    } catch {
      t2 = false;
    }
    return t2;
  }, n3.wbg.__wbg_buffer_21310ea17257b0b4 = function(e3) {
    let t2 = _2(e3).buffer;
    return i2(t2);
  }, n3.wbg.__wbg_length_9e1ae1900cb0fbd5 = function(e3) {
    return _2(e3).length;
  }, n3.wbg.__wbg_byteLength_87a0436a74adc26c = function(e3) {
    return _2(e3).byteLength;
  }, n3.wbg.__wbg_byteOffset_4477d54710af6f9b = function(e3) {
    return _2(e3).byteOffset;
  }, n3.wbg.__wbg_set_83db9690f9353e79 = function(e3, t2, r2) {
    _2(e3).set(_2(t2), r2 >>> 0);
  }, n3.wbg.__wbindgen_bigint_get_as_i64 = function(e3, t2) {
    let r2 = _2(t2), o2 = typeof r2 == "bigint" ? r2 : void 0;
    we()[e3 / 8 + 1] = g2(o2) ? 0n : o2, a2()[e3 / 4 + 0] = !g2(o2);
  }, n3.wbg.__wbindgen_debug_string = function(e3, t2) {
    let r2 = N2(_2(t2)), o2 = m(r2, c.__wbindgen_export_0, c.__wbindgen_export_1), s3 = l;
    a2()[e3 / 4 + 1] = s3, a2()[e3 / 4 + 0] = o2;
  }, n3.wbg.__wbindgen_throw = function(e3, t2) {
    throw new Error(w2(e3, t2));
  }, n3.wbg.__wbindgen_memory = function() {
    let e3 = c.memory;
    return i2(e3);
  }, n3.wbg.__wbindgen_closure_wrapper3208 = function(e3, t2, r2) {
    let o2 = k2(e3, t2, 35, de);
    return i2(o2);
  }, n3.wbg.__wbindgen_closure_wrapper3210 = function(e3, t2, r2) {
    let o2 = W2(e3, t2, 39, pe);
    return i2(o2);
  }, n3.wbg.__wbindgen_closure_wrapper3212 = function(e3, t2, r2) {
    let o2 = W2(e3, t2, 35, le);
    return i2(o2);
  }, n3.wbg.__wbindgen_closure_wrapper3214 = function(e3, t2, r2) {
    let o2 = W2(e3, t2, 35, me);
    return i2(o2);
  }, n3.wbg.__wbindgen_closure_wrapper3216 = function(e3, t2, r2) {
    let o2 = k2(e3, t2, 35, ye);
    return i2(o2);
  }, n3.wbg.__wbindgen_closure_wrapper3218 = function(e3, t2, r2) {
    let o2 = k2(e3, t2, 39, he);
    return i2(o2);
  }, n3.wbg.__wbindgen_closure_wrapper9312 = function(e3, t2, r2) {
    let o2 = k2(e3, t2, 2184, ve);
    return i2(o2);
  }, n3.wbg.__wbindgen_closure_wrapper9342 = function(e3, t2, r2) {
    let o2 = k2(e3, t2, 2190, xe);
    return i2(o2);
  }, n3.wbg.__wbindgen_closure_wrapper9405 = function(e3, t2, r2) {
    let o2 = k2(e3, t2, 2207, Ae);
    return i2(o2);
  }, n3;
}
function ie2(n3, e3) {
  return c = n3.exports, se2.__wbindgen_wasm_module = e3, $2 = new BigInt64Array(), I2 = new Float64Array(), M2 = new Int32Array(), H2 = new Uint32Array(), C2 = new Uint8Array(), c;
}
function Ee(n3) {
  let e3 = ce();
  n3 instanceof WebAssembly.Module || (n3 = new WebAssembly.Module(n3));
  let t2 = new WebAssembly.Instance(n3, e3);
  return ie2(t2, n3);
}
async function se2(n3) {
  typeof n3 > "u" && (n3 = new URL("perspective_bg.wasm", import.meta.url));
  let e3 = ce();
  (typeof n3 == "string" || typeof Request == "function" && n3 instanceof Request || typeof URL == "function" && n3 instanceof URL) && (n3 = fetch(n3));
  let { instance: t2, module: r2 } = await Oe(await n3, e3);
  return ie2(t2, r2);
}
var J2 = se2;
function q2(n3, e3) {
  return function(t2, r2) {
    let o2 = 0;
    for (let s3 of e3)
      if (s3 in t2) {
        if (o2++ > 0)
          throw new Error(`Duplicate "${n3}" fields`);
        t2[n3] = t2[s3], s3 !== n3 && (delete t2[s3], r2.warn && console.warn(`Deprecated perspective attribute "${s3}" renamed "${n3}"`));
      }
    return t2;
  };
}
var Ie = q2("group_by", ["group_by", "row_pivots", "row-pivot", "row-pivots", "row_pivot"]);
var Me = q2("split_by", ["split_by", "column_pivots", "column-pivot", "column-pivots", "column_pivot", "col_pivots", "col-pivot", "col-pivots", "col_pivot"]);
var Ce = q2("filter", ["filter", "filters"]);
window.addEventListener("unhandledrejection", (n3) => {
  n3.reason?.message === "View method cancelled" && n3.preventDefault();
});
function K2(n3) {
  return new Uint32Array(n3.slice(0, 4))[0] == 559903;
}
async function ze() {
  let n3 = await perspective_bg_default2, e3 = [], t2 = 0, r2 = new Decompress((u3) => {
    u3 && (t2 += u3.byteLength, e3.push(u3));
  });
  if (n3 instanceof URL || typeof n3 == "string") {
    let d2 = (await fetch(n3.toString())).body?.getReader(), p2 = 0;
    if (d2 !== void 0)
      for (; ; ) {
        let { value: v4, done: Q2 } = await d2.read();
        if (Q2 || v4 === void 0)
          break;
        p2 === 0 && K2(v4?.buffer) || p2 === 1 ? (p2 = 1, r2.push(v4, Q2)) : (p2 = 2, t2 += v4.byteLength, e3.push(v4));
      }
  } else if (n3 instanceof Uint8Array)
    K2(n3.buffer) ? r2.push(n3, true) : (t2 = n3.byteLength, e3 = [n3]);
  else {
    let u3 = new Uint8Array(n3);
    K2(n3) ? r2.push(u3, true) : (t2 = u3.byteLength, e3 = [u3]);
  }
  let o2 = 0, s3 = new Uint8Array(t2);
  for (let u3 of e3)
    s3.set(u3, o2), o2 += u3.byteLength;
  return await J2(s3), X2(), x2;
}
var G2 = ze();
var S2 = class extends HTMLElement {
  constructor() {
    super();
    this.__load_wasm();
  }
  async __load_wasm() {
    await G2, this._instance === void 0 && (this._instance = new h2(this));
  }
};
var Xe = h2.prototype;
var Je = Object.getOwnPropertyNames(Xe);
for (let n3 of Je)
  Object.defineProperty(S2.prototype, n3, { value: async function(...e3) {
    return await this.__load_wasm(), await this._instance[n3].call(this._instance, ...e3);
  } });
for (let n3 of ["registerPlugin", "getExprTKCommands"])
  Object.defineProperty(S2, n3, { value: async function(...e3) {
    let t2 = await G2;
    return t2[n3].call(t2, ...e3);
  } });
customElements.define("perspective-viewer", S2);

// ../../node_modules/regular-table/dist/umd/regular-table.js
var t = /* @__PURE__ */ new WeakMap();
var e = navigator.userAgent.toLowerCase().indexOf("firefox") > -1 ? 5e6 : 1e7;
function i3(t2, e3, i4, s3, o2) {
  var l3 = {};
  return Object.keys(s3).forEach(function(t3) {
    l3[t3] = s3[t3];
  }), l3.enumerable = !!l3.enumerable, l3.configurable = !!l3.configurable, ("value" in l3 || l3.initializer) && (l3.writable = true), l3 = i4.slice().reverse().reduce(function(i5, s4) {
    return s4(t2, e3, i5) || i5;
  }, l3), o2 && void 0 !== l3.initializer && (l3.value = l3.initializer ? l3.initializer.call(o2) : void 0, l3.initializer = void 0), void 0 === l3.initializer && (Object.defineProperty(t2, e3, l3), l3 = null), l3;
}
var s = 0;
var o = 0;
var l2 = performance.now();
var a3 = (t2, ...e3) => t2.map((t3, i4) => [t3, e3[i4]]).flat().filter((t3) => !!t3).join("");
function r(t2, e3, i4) {
  const s3 = i4.value, o2 = Symbol("regular-table throttle lock");
  return i4.value = async function(...t3) {
    if (void 0 !== this[o2] && (await this[o2], void 0 !== this[o2]))
      return void await this[o2];
    let e4;
    this[o2] = (() => {
      let t4;
      const e6 = new Promise((e7) => {
        t4 = e7;
      });
      return e6.resolve = t4, e6;
    })();
    try {
      e4 = await s3.call(this, ...t3);
    } finally {
      const t4 = this[o2];
      this[o2] = void 0, t4.resolve();
    }
    return e4;
  }, i4.value.flush = async function() {
    return await new Promise(requestAnimationFrame), await this[o2];
  }, i4;
}
var _3;
var n2 = (i3((_3 = class extends HTMLElement {
  create_shadow_dom() {
    this.attachShadow({ mode: "open" });
    this.shadowRoot.innerHTML = a3` <style> ${":host{bottom:0;overflow:scroll;overflow-anchor:none;overscroll-behavior:none;-webkit-overflow-scrolling:touch}:host,div.rt-virtual-panel{position:absolute;top:0;left:0;right:0}div.rt-virtual-panel{pointer-events:none}div.rt-scroll-table-clip{position:sticky;contain:strict;overflow-anchor:none;width:100%;height:100%}div.rt-tree-container{display:flex;align-items:center;height:100%}slot{position:absolute;overflow:hidden;overflow-anchor:none}"} </style> <style> ${":host ::slotted(table){--regular-table--transform-x:0px;--regular-table--transform-y:0px;--regular-table--clip-x:0px;--regular-table--clip-y:0px}"} </style> <div class="rt-virtual-panel"></div> <div class="rt-scroll-table-clip"> ${"<slot></slot>"} </div> `;
    const [, t2, e3, i4] = this.shadowRoot.children;
    this._sub_cell_style = t2, this._table_clip = i4, this._virtual_panel = e3, this._setup_virtual_scroll();
  }
  _setup_virtual_scroll() {
    this._table_clip && ("both" === this._virtual_mode || "vertical" === this._virtual_mode ? this._table_clip.style.top = "0px" : this._table_clip.style.removeProperty("top"), "both" === this._virtual_mode || "horizontal" === this._virtual_mode ? this._table_clip.style.left = "0px" : this._table_clip.style.removeProperty("left"), "both" !== this._virtual_mode ? this._table_clip.style.contain = "none" : this._table_clip.style.removeProperty("contain"));
  }
  _calculate_viewport(t2, e3) {
    const { start_row: i4, end_row: s3 } = this._calculate_row_range(t2), { start_col: o2, end_col: l3 } = this._calculate_column_range(e3);
    return this._nrows = t2, { start_col: o2, end_col: l3, start_row: i4, end_row: s3 };
  }
  _calculate_row_range(t2) {
    const { height: e3 } = this._container_size, i4 = this._column_sizes.row_height || 19, s3 = this._view_cache.config.column_pivots.length, o2 = Math.max(1, this._virtual_panel.offsetHeight - this.clientHeight), l3 = Math.max(Math.ceil(this.scrollTop), 0) / o2, a5 = e3 / i4 - s3, r2 = t2 || 0, _4 = Math.max(0, Math.ceil(r2 - a5)) * l3;
    return { start_row: _4, end_row: Math.max(0, Math.min(_4 + a5, t2)) };
  }
  _calc_start_column() {
    const t2 = this._view_cache.config.row_pivots.length;
    let e3 = 0, i4 = 0, s3 = 0;
    for (; i4 < this.scrollLeft; ) {
      const o2 = this._column_sizes.indices[e3 + t2];
      s3 = this.scrollLeft - i4, e3 += 1, i4 += void 0 !== o2 ? o2 : 60;
    }
    return e3 += s3 / (this._column_sizes.indices[e3 + t2 - 1] || 60), Math.max(0, e3 - 1);
  }
  _calculate_column_range(t2) {
    if ("none" === this._virtual_mode || "vertical" === this._virtual_mode)
      return { start_col: 0, end_col: 1 / 0 };
    {
      const e3 = this._calc_start_column();
      return { start_col: e3, end_col: e3 + (this.table_model.num_columns() || Math.min(t2, Math.ceil(this._container_size.width / 60))) + 1 };
    }
  }
  _max_scroll_column(t2) {
    let e3 = 0;
    if (this._view_cache.config.row_pivots.length > 0)
      for (const t3 of this._column_sizes.indices.slice(0, this._view_cache.config.row_pivots.length))
        e3 += t3;
    let i4 = this._view_cache.config.row_pivots.length, s3 = t2;
    for (; e3 < this._container_size.width && s3 >= 0; )
      s3--, e3 += this._column_sizes.indices[s3 + i4] || 60;
    return Math.min(t2 - 1, s3 + 1);
  }
  _validate_viewport({ start_col: t2, end_col: e3, start_row: i4, end_row: s3 }) {
    i4 = Math.floor(i4), s3 = Math.ceil(s3), t2 = Math.floor(t2), e3 = Math.ceil(e3);
    const o2 = this._start_col !== t2, l3 = this._start_row !== i4 || this._end_row !== s3 || this._end_col !== e3;
    return this._start_col = t2, this._end_col = e3, this._start_row = i4, this._end_row = s3, { invalid_column: o2, invalid_row: l3 };
  }
  _calc_scrollable_column_width(t2) {
    let e3 = this._view_cache.config.row_pivots.length;
    const i4 = this._max_scroll_column(t2);
    let s3 = e3, o2 = 0;
    for (; s3 < i4 + e3; )
      o2 += this._column_sizes.indices[s3] || 60, s3++;
    return o2;
  }
  _update_virtual_panel_width(t2, e3) {
    if (t2)
      if ("vertical" === this._virtual_mode || "none" === this._virtual_mode)
        this._virtual_panel.style.width = this._column_sizes.indices.reduce((t3, e4) => t3 + e4, 0) + "px";
      else {
        const t3 = this._calc_scrollable_column_width(e3);
        if (0 !== t3) {
          const e4 = this._container_size.width + t3 + 2;
          this._virtual_panel.style.width = e4 + "px";
        } else
          this._virtual_panel.style.width = "1px";
      }
  }
  _update_virtual_panel_height(t2) {
    const { row_height: i4 = 19 } = this._column_sizes, s3 = this._view_cache.config.column_pivots.length * i4;
    let o2;
    if ("horizontal" === this._virtual_mode || "none" === this._virtual_mode)
      o2 = t2 * i4 + s3;
    else {
      const l3 = this.clientHeight / (this._table_clip.offsetHeight - s3);
      o2 = Math.min(e, t2 * i4 * l3);
    }
    this._virtual_panel.style.height = o2 + "px";
  }
  async draw(t2 = {}) {
    const e3 = performance.now(), { invalid_viewport: i4 = true, preserve_width: l3 = false } = t2, { num_columns: a5, num_rows: r2 } = await this._view_cache.view(0, 0, 0, 0);
    this._container_size = { width: "none" === this._virtual_mode || "vertical" === this._virtual_mode ? 1 / 0 : this._table_clip.clientWidth, height: "none" === this._virtual_mode || "horizontal" === this._virtual_mode ? 1 / 0 : this._table_clip.clientHeight }, this._update_virtual_panel_height(r2), l3 || this._update_virtual_panel_width(i4, a5);
    const _4 = this._calculate_viewport(r2, a5), { invalid_row: n3, invalid_column: h4 } = this._validate_viewport(_4);
    if (this._invalid_schema || n3 || h4 || i4) {
      let t3 = [], e4 = true;
      for await (let i5 of this.table_model.draw(this._container_size, this._view_cache, this._selected_id, l3, _4, a5)) {
        void 0 !== i5 && (t3 = t3.concat(i5)), e4 && (this.update_sub_cell_offset(_4), e4 = false), this._is_styling = true;
        const s3 = this._style_callbacks;
        for (const t4 of s3)
          await t4({ detail: this });
        if (this._is_styling = false, !this._invalidated && void 0 !== i5)
          break;
        this._invalidated = false;
      }
      this.table_model.autosize_cells(t3), this.table_model.header.reset_header_cache(), l3 || this._update_virtual_panel_width(this._invalid_schema || h4, a5), this._invalid_schema = false;
    } else
      this.update_sub_cell_offset(_4);
    var c6;
    c6 = performance.now() - e3, s = (s * o + c6) / (o + 1), o += 1;
  }
  update_sub_cell_offset(t2) {
    var e3;
    const i4 = this._column_sizes.row_height * (t2.start_row % 1) || 0, s3 = this._column_sizes.indices[(this.table_model._row_headers_length || 0) + Math.floor(t2.start_col)] * (t2.start_col % 1) || 0;
    let o2 = null === (e3 = this._sub_cell_style.sheet) || void 0 === e3 ? void 0 : e3.cssRules[0].style;
    o2 && (o2.setProperty("--regular-table--clip-x", s3 + "px"), o2.setProperty("--regular-table--clip-y", i4 + "px"), o2.setProperty("--regular-table--transform-x", `-${s3}px`), o2.setProperty("--regular-table--transform-y", `-${i4}px`));
  }
}).prototype, "draw", [r], Object.getOwnPropertyDescriptor(_3.prototype, "draw"), _3.prototype), _3);
var h3;
var c2 = (i3((h3 = class extends n2 {
  register_listeners() {
    this.addEventListener("mousedown", this._on_click_or_dblclick.bind(this)), this.addEventListener("scroll", this._on_scroll.bind(this), { passive: true }), this._register_glitch_scroll_listeners();
  }
  _on_scroll(t2) {
    t2.stopPropagation(), this.draw({ invalid_viewport: false });
  }
  _register_glitch_scroll_listeners() {
    this.addEventListener("mousewheel", this._on_mousewheel.bind(this));
  }
  _on_mousewheel(t2) {
    if (!window.safari)
      return;
    const { clientWidth: e3, clientHeight: i4, scrollTop: s3, scrollLeft: o2 } = this;
    t2.preventDefault(), t2.returnValue = false;
    const l3 = Math.max(1, this._virtual_panel.offsetHeight - i4), a5 = Math.max(1, this._virtual_panel.offsetWidth - e3);
    this.scrollTop = Math.max(0, Math.min(l3, s3 + t2.deltaY)), this.scrollLeft = Math.max(0, Math.min(a5, o2 + t2.deltaX)), this._on_scroll(t2);
  }
  _on_touchmove(t2) {
    t2.stopPropagation(), t2.preventDefault(), t2.returnValue = false;
    const { clientWidth: e3, clientHeight: i4 } = this, s3 = Math.max(1, this._virtual_panel.offsetHeight - i4), o2 = Math.max(1, this._virtual_panel.offsetWidth - e3);
    this.scrollTop = Math.min(s3, this._memo_scroll_top + (this._memo_touch_startY - t2.touches[0].pageY)), this.scrollLeft = Math.min(o2, this._memo_scroll_left + (this._memo_touch_startX - t2.touches[0].pageX)), this._on_scroll(t2);
  }
  _on_touchstart(t2) {
    this._memo_touch_startY = t2.touches[0].pageY, this._memo_touch_startX = t2.touches[0].pageX, this._memo_scroll_top = this.scrollTop, this._memo_scroll_left = this.scrollLeft;
  }
  async _on_dblclick(e3) {
    let i4 = e3.target;
    for (; "TD" !== i4.tagName && "TH" !== i4.tagName; )
      if (i4 = i4.parentElement, !this.contains(i4))
        return;
    const s3 = e3.target.classList.contains("rt-column-resize"), o2 = t.get(i4);
    if (s3) {
      e3.stopImmediatePropagation(), i4.style.minWidth = "", i4.style.maxWidth = "", e3.shiftKey ? (this._column_sizes.override = [], this._column_sizes.auto = [], this._column_sizes.indices = []) : (this._column_sizes.override[o2.size_key] = void 0, this._column_sizes.auto[o2.size_key] = void 0, this._column_sizes.indices[o2.size_key] = void 0);
      for (const t2 of e3.shiftKey ? [this.table_model.header.cells[this.table_model.header.cells.length - 1], ...this.table_model.body.cells] : this.table_model.body.cells)
        for (const i5 of e3.shiftKey ? t2 : [t2[o2._virtual_x]])
          i5 && (i5.style.minWidth = "", i5.style.maxWidth = "", i5.classList.remove("rt-cell-clip"));
      await this.draw();
    }
  }
  async _on_click(e3) {
    if (0 !== e3.button)
      return;
    let i4 = e3.target;
    for (; "TD" !== i4.tagName && "TH" !== i4.tagName; )
      if (i4 = i4.parentElement, !this.contains(i4))
        return;
    const s3 = e3.target.classList.contains("rt-column-resize"), o2 = t.get(i4);
    s3 && (this._on_resize_column(e3, i4, o2), e3.stopImmediatePropagation());
  }
  async _on_click_or_dblclick(t2) {
    const e3 = performance.now();
    this._last_clicked_time && e3 - this._last_clicked_time < 500 ? (this._last_clicked_time = e3, await this._on_dblclick(t2)) : (this._last_clicked_time = e3, await this._on_click(t2));
  }
  _on_resize_column(t2, e3, i4) {
    const { _virtual_x: s3, size_key: o2 } = i4, l3 = t2.pageX, a5 = s3 + e3.colSpan - 1, r2 = this.table_model.header.get_column_header(a5), _4 = this._column_sizes.indices[o2], n3 = (t3) => this._on_resize_column_move(t3, r2, l3, _4, o2, a5), h4 = () => {
      document.removeEventListener("mousemove", n3), document.removeEventListener("mouseup", h4);
      const t3 = this._column_sizes.override[o2], e4 = this._column_sizes.indices[o2] !== t3;
      this._column_sizes.indices[o2] = t3, e4 && this.draw();
    };
    document.addEventListener("mousemove", n3), document.addEventListener("mouseup", h4);
  }
  async _on_resize_column_move(t2, e3, i4, s3, o2, l3) {
    await new Promise(setTimeout);
    const a5 = t2.pageX - i4, r2 = Math.max(1, s3 + a5);
    if (this._column_sizes.override[o2] = r2, a5 < 0)
      await this.draw({ preserve_width: true });
    else {
      e3.style.minWidth = r2 + "px", e3.style.maxWidth = r2 + "px";
      const t3 = this._column_sizes.auto[o2];
      for (const e4 of this.table_model.body.cells) {
        const i5 = e4[l3];
        i5 && (i5.style.maxWidth = i5.style.minWidth = r2 + "px", i5.classList.toggle("rt-cell-clip", t3 > r2));
      }
    }
  }
}).prototype, "_on_resize_column_move", [r], Object.getOwnPropertyDescriptor(h3.prototype, "_on_resize_column_move"), h3.prototype), h3);
var d = class {
  constructor(t2) {
    this._name = t2, this._elements = [], this._index = 0;
  }
  reset() {
    this._index = 0;
  }
  get() {
    this._elements[this._index] || (this._elements[this._index] = document.createElement(this._name));
    const t2 = this._elements[this._index];
    return this._index += 1, t2;
  }
};
var u2 = class {
  constructor(t2, e3, i4) {
    this._column_sizes = t2, this._container = e3, this._span_factory = new d("span"), this.table = i4, this.cells = [], this.rows = [];
  }
  num_columns() {
    return this._get_row(Math.max(0, this.rows.length - 1)).row_container.length;
  }
  num_rows() {
    return this.cells.length;
  }
  _set_metadata(e3, i4) {
    t.set(e3, i4);
  }
  _get_or_create_metadata(e3) {
    if (void 0 === e3)
      return {};
    if (t.has(e3))
      return t.get(e3);
    {
      const i4 = {};
      return t.set(e3, i4), i4;
    }
  }
  _replace_cell(t2, e3) {
    const { tr: i4, row_container: s3 } = this._get_row(t2);
    let o2 = s3[e3];
    return o2 && (i4.removeChild(o2), s3.splice(e3, 1, void 0)), o2;
  }
  _fetch_cell(t2, e3) {
    if (t2 < 0 || e3 < 0)
      return;
    const { row_container: i4 } = this._get_row(t2);
    return i4[e3];
  }
  _get_cell(t2 = "TD", e3, i4) {
    const { tr: s3, row_container: o2 } = this._get_row(e3);
    let l3 = o2[i4];
    if (l3 || (i4 < o2.length ? (l3 = o2[i4] = document.createElement(t2), s3.insertBefore(l3, o2.slice(i4 + 1).find((t3) => t3))) : (l3 = o2[i4] = document.createElement(t2), s3.appendChild(l3))), l3.tagName !== t2) {
      const o3 = document.createElement(t2);
      s3.replaceChild(o3, l3), this.cells[e3].splice(i4, 1, o3), l3 = o3;
    }
    return l3;
  }
  _get_row(t2) {
    let e3 = this.rows[t2];
    e3 || (e3 = this.rows[t2] = document.createElement("tr"), this.table.appendChild(e3));
    let i4 = this.cells[t2];
    return i4 || (i4 = this.cells[t2] = []), { tr: e3, row_container: i4 };
  }
  _clean_columns(t2) {
    for (let e3 = 0; e3 < this.rows.length; e3++) {
      const i4 = this.rows[e3], s3 = this.cells[e3];
      this.cells[e3] = s3.slice(0, t2[e3] || t2);
      const o2 = this.cells[e3].filter((t3) => void 0 !== t3).length;
      for (; i4.children[o2]; )
        i4.removeChild(i4.children[o2]);
    }
  }
  _clean_rows(t2) {
    for (; this.table.children[t2]; )
      this.table.removeChild(this.table.children[t2]);
    this.rows = this.rows.slice(0, t2), this.cells = this.cells.slice(0, t2);
  }
};
var m2 = class extends u2 {
  constructor(...t2) {
    super(...t2), this._group_header_cache = [], this._offset_cache = [];
  }
  _draw_group_th(t2, e3, i4) {
    const s3 = this._get_cell("TH", e3, t2[e3] || 0);
    if (t2[e3] += 1, s3.removeAttribute("colspan"), s3.style.minWidth = "0", s3.textContent = "", i4 instanceof HTMLElement)
      s3.appendChild(i4);
    else {
      const t3 = this._span_factory.get("span");
      t3.textContent = i4, s3.appendChild(t3);
    }
    const o2 = this._span_factory.get("span");
    return o2.className = "rt-column-resize", s3.appendChild(o2), s3;
  }
  _draw_group(t2, e3, i4) {
    const s3 = this._get_or_create_metadata(i4);
    return s3.column_header = t2, s3.value = e3, s3.value = e3, s3;
  }
  _draw_th(t2, e3, i4, s3, o2) {
    const l3 = this._get_or_create_metadata(i4);
    if (l3.column_header = t2, l3.value = e3, l3.size_key = o2.length ? o2[0] : o2, !(o2.length > 1)) {
      const t3 = this._column_sizes.override[l3.size_key], e4 = this._column_sizes.auto[l3.size_key];
      t3 ? (i4.classList.toggle("rt-cell-clip", e4 > t3), i4.style.minWidth = t3 + "px", i4.style.maxWidth = t3 + "px") : e4 ? (i4.classList.remove("rt-cell-clip"), i4.style.maxWidth = "", i4.style.minWidth = e4 + "px") : (i4.style.maxWidth = "", i4.style.maxWidth = "");
    }
    return l3;
  }
  get_column_header(t2) {
    return this._get_cell("TH", this.num_rows() - 1, t2);
  }
  draw(t2, e3, i4, s3, o2, l3, a5) {
    const r2 = null == e3 ? void 0 : e3.length;
    if (0 === r2)
      return;
    let _4, n3, h4;
    for (let m4 = 0; m4 < r2; m4++) {
      if (h4 = e3[m4] ? e3[m4] : "", this._offset_cache[m4] = this._offset_cache[m4] || 0, m4 < r2 - 1) {
        var c6, d2, u3;
        (null === (c6 = this._group_header_cache) || void 0 === c6 || null === (d2 = c6[m4]) || void 0 === d2 || null === (u3 = d2[0]) || void 0 === u3 ? void 0 : u3.value) === h4 ? (_4 = this._group_header_cache[m4][1], this._group_header_cache[m4][2] += 1, 1 === i4 && (this._group_header_cache[m4][0].row_header_x = o2), _4.setAttribute("colspan", this._group_header_cache[m4][2])) : (_4 = this._draw_group_th(this._offset_cache, m4, h4), n3 = this._draw_group(e3, h4, _4), this._group_header_cache[m4] = [n3, _4, 1]);
      } else {
        _4 = this._draw_group_th(this._offset_cache, m4, h4), n3 = this._draw_th(t2 || e3, h4, _4, s3, o2);
        for (const [t3] of this._group_header_cache)
          t3.size_key = n3.size_key;
        _4.removeAttribute("colspan");
      }
      _4.classList.toggle("rt-group-corner", void 0 === s3), n3 && (n3.x = void 0 === s3 ? s3 : Math.floor(s3), n3.column_header_y = m4, n3.x0 = Math.floor(l3), n3._virtual_x = a5, 1 === i4 && (n3.row_header_x = o2));
    }
    return this._clean_rows(this._offset_cache.length), { th: _4, metadata: n3 };
  }
  clean() {
    this._clean_columns(this._offset_cache);
  }
  reset_header_cache() {
    this._offset_cache = [], this._group_header_cache = [];
  }
};
var v2 = class extends u2 {
  _draw_td(t2, e3, i4, s3, { column_name: o2 }, { ridx_offset: l3 }, a5) {
    const r2 = this._get_cell(t2, e3, s3), _4 = this._get_or_create_metadata(r2);
    _4.y = e3 + Math.floor(l3), _4.size_key = a5, "TD" === t2 && (_4.column_header = o2);
    const n3 = this._column_sizes.override[_4.size_key];
    if (n3) {
      const t3 = this._column_sizes.auto[_4.size_key];
      r2.classList.toggle("rt-cell-clip", t3 > n3), r2.style.minWidth = n3 + "px", r2.style.maxWidth = n3 + "px";
    } else
      r2.classList.remove("rt-cell-clip"), r2.style.minWidth = "", r2.style.maxWidth = "";
    return _4.value !== i4 && (i4 instanceof HTMLElement ? (r2.textContent = "", r2.appendChild(i4)) : r2.textContent = i4), _4.value = i4, { td: r2, metadata: _4 };
  }
  draw(t2, e3, i4, s3 = false, o2, l3, a5) {
    const { cidx: r2, column_data: _4, row_headers: n3, column_data_listener_metadata: h4 } = e3;
    let c6, { row_height: d2 } = i4;
    const u3 = [], m4 = [];
    let v4 = 0;
    const f4 = [];
    for (let w4 = 0; w4 < (s3 ? i4.row_headers_length : 1); w4++) {
      v4 = 0;
      for (const g3 of _4) {
        var p2;
        const _5 = null == n3 ? void 0 : n3[v4];
        let y3;
        if (s3) {
          const t3 = g3[w4], s4 = this._fetch_cell(v4 - (u3[w4] || 1), r2 + w4), o3 = this._get_or_create_metadata(s4), a6 = this._fetch_cell(v4, r2 + w4 - (f4[v4] || 1)), _6 = this._get_or_create_metadata(a6);
          !a6 || _6.value !== t3 && void 0 !== t3 || a6.hasAttribute("rowspan") ? s4 && o3.value === t3 && !s4.hasAttribute("colspan") ? (u3[w4] = u3[w4] ? u3[w4] + 1 : 2, s4.setAttribute("rowspan", u3[w4]), this._replace_cell(v4, r2 + w4)) : (y3 = this._draw_td("TH", v4, t3, r2 + w4, e3, i4, w4), y3.td.style.display = "", y3.td.removeAttribute("rowspan"), y3.td.removeAttribute("colspan"), y3.metadata.row_header = g3, y3.metadata.row_header_x = w4, y3.metadata.y0 = Math.floor(i4.ridx_offset), y3.metadata.y1 = Math.ceil(i4.y1), y3.metadata._virtual_x = w4, void 0 !== l3 && (y3.metadata.x0 = Math.floor(l3)), u3[w4] = 1, f4[v4] = 1, m4[w4] = y3) : (f4[v4] = f4[v4] ? f4[v4] + 1 : 2, a6.setAttribute("colspan", f4[v4]), this._replace_cell(v4, r2 + w4));
        } else
          y3 = this._draw_td("TD", v4, g3, r2, e3, i4, a5), h4 && (y3.metadata.user = h4[v4]), y3.metadata.x = void 0 === o2 ? o2 : Math.floor(o2), y3.metadata.x1 = Math.ceil(i4.x1), y3.metadata.row_header = _5 || [], y3.metadata.y0 = Math.floor(i4.ridx_offset), y3.metadata.y1 = Math.ceil(i4.y1), y3.metadata.dx = Math.floor(o2 - l3), y3.metadata.dy = y3.metadata.y - Math.floor(y3.metadata.y0), y3.metadata._virtual_x = r2, void 0 !== l3 && (y3.metadata.x0 = Math.floor(l3)), m4[0] = y3;
        if (v4++, c6 = y3 ? y3.metadata : c6, d2 = d2 || (null === (p2 = y3) || void 0 === p2 ? void 0 : p2.td.offsetHeight), v4 * d2 > t2)
          break;
      }
    }
    return this._clean_rows(v4), { tds: m4, ridx: v4, metadata: c6, row_height: d2 };
  }
  clean({ ridx: t2, cidx: e3 }) {
    this._clean_rows(t2), this._clean_columns(e3);
  }
};
var f3 = class {
  constructor(t2, e3, i4) {
    this.clear(i4);
    const [s3] = i4.children, [o2, l3] = s3.children;
    this.table = s3, this._column_sizes = e3, this.header = new m2(e3, t2, o2), this.body = new v2(e3, t2, l3), this.fragment = document.createDocumentFragment();
  }
  num_columns() {
    return this.header.num_columns();
  }
  clear(t2) {
    t2.innerHTML = a3` <table cellspacing="0"> <thead></thead> <tbody></tbody> </table> `;
  }
  autosize_cells(t2) {
    for (; t2.length > 0; ) {
      const [e3, i4, s3] = t2.pop();
      let o2;
      const l3 = getComputedStyle(e3);
      "border-box" !== l3.boxSizing ? (o2 = e3.clientWidth, o2 -= l3.paddingLeft ? parseFloat(l3.paddingLeft) : 0, o2 -= l3.paddingRight ? parseFloat(l3.paddingRight) : 0) : o2 = parseFloat(l3.width), this._column_sizes.row_height = this._column_sizes.row_height || s3.offsetHeight, this._column_sizes.indices[i4.size_key] = o2;
      const a5 = void 0 !== this._column_sizes.override[i4.size_key];
      o2 && !a5 && (this._column_sizes.auto[i4.size_key] = o2), "0px" === e3.style.minWidth && (e3.style.minWidth = o2 + "px");
    }
  }
  async *draw(t2, e3, i4, s3, o2, l3) {
    var a5, r2, _4, n3;
    const { width: h4, height: c6 } = t2, { view: d2, config: u3 } = e3;
    let { data: m4, row_headers: v4, column_headers: f4, metadata: p2 } = await d2(Math.floor(o2.start_col), Math.floor(o2.start_row), Math.ceil(o2.end_col), Math.ceil(o2.end_row));
    const { start_row: w4 = 0, start_col: g3 = 0, end_col: y3 = 0, end_row: b3 = 0 } = o2;
    v4 && (this._row_headers_length = v4.reduce((t3, e4) => Math.max(t3, e4.length), 0), v4 = v4.map((t3) => (t3.length = this._row_headers_length, t3))), e3.config.column_pivots = Array.from(Array((null == f4 || null === (a5 = f4[0]) || void 0 === a5 ? void 0 : a5.length) || 0).keys()), e3.config.row_pivots = Array.from(Array((null === (r2 = v4) || void 0 === r2 || null === (_4 = r2[0]) || void 0 === _4 ? void 0 : _4.length) || 0).keys());
    const x4 = { viewport_width: 0, selected_id: i4, ridx_offset: w4, sub_cell_offset: this._column_sizes.indices[(this._row_headers_length || 0) + Math.floor(o2.start_col)] || 0, x0: g3, x1: y3, y1: b3, row_height: this._column_sizes.row_height, row_headers_length: this._row_headers_length };
    let z3, M4 = 0, k4 = [], L4 = true;
    if ((null === (n3 = v4) || void 0 === n3 ? void 0 : n3.length) > 0) {
      const t3 = u3.row_pivots.join(","), i5 = { column_name: t3, cidx: 0, column_data: v4, row_headers: v4, first_col: L4 }, o3 = M4 + Math.floor(g3);
      z3 = this.body.draw(c6, i5, { ...x4, x0: 0 }, true, void 0, void 0, o3);
      const l4 = [];
      for (let i6 = 0; i6 < e3.config.row_pivots.length; i6++) {
        const s4 = this.header.draw(t3, Array(e3.config.column_pivots.length).fill(""), 1, void 0, i6, g3, i6);
        s4 && l4.push(s4);
      }
      if (L4 = false, x4.viewport_width += l4.reduce((t4, { th: e4 }, i6) => t4 + (this._column_sizes.indices[i6] || e4.offsetWidth), 0), x4.row_height = x4.row_height || z3.row_height, M4 = v4[0].length, !s3)
        for (let t4 = 0; t4 < e3.config.row_pivots.length; t4++) {
          const { td: e4, metadata: i6 } = z3.tds[t4] || {}, { th: s4, metadata: o4 } = l4[t4] || {};
          (e4 || s4) && k4.push([s4 || e4, o4 || i6, e4 || s4]);
        }
    }
    try {
      var W4;
      let t3 = 0;
      const e4 = l3 - o2.start_col;
      for (; t3 < e4; ) {
        if (!m4[t3]) {
          let e7 = Math.max(o2.end_col, 0);
          o2.start_col = e7;
          let i6 = 0, s4 = 0;
          for (; this._column_sizes.indices.length > M4 + g3 + i6 + 1 && s4 + x4.viewport_width < h4; )
            i6++, s4 += this._column_sizes.indices[M4 + g3 + i6];
          if (s4 + x4.viewport_width < h4) {
            const t4 = Math.min(l3, e7 + 5);
            o2.end_col = Math.max(1, Math.min(l3, t4));
          } else
            o2.end_col = Math.max(1, Math.min(l3, e7 + i6));
          const a7 = d2(Math.floor(o2.start_col), Math.floor(o2.start_row), Math.ceil(o2.end_col), Math.ceil(o2.end_row));
          yield;
          const r4 = await a7;
          if (0 === r4.data.length)
            return void (yield k4);
          o2.end_col = o2.start_col + r4.data.length;
          for (let e8 = 0; e8 < r4.data.length; e8++) {
            var T3;
            if (m4[t3 + e8] = r4.data[e8], r4.metadata && (p2[t3 + e8] = r4.metadata[e8]), f4)
              f4[t3 + e8] = null === (T3 = r4.column_headers) || void 0 === T3 ? void 0 : T3[e8];
          }
        }
        const e6 = (null == f4 ? void 0 : f4[t3]) || "", i5 = m4[t3], a6 = { column_name: e6, cidx: M4, column_data: i5, column_data_listener_metadata: null == p2 ? void 0 : p2[t3], row_headers: v4, first_col: L4 }, r3 = t3 + g3, _5 = M4 + Math.floor(g3), n4 = this.header.draw(void 0, e6, void 0, r3, _5, g3, M4);
        if (z3 = this.body.draw(c6, a6, x4, false, r3, g3, _5), L4 = false, !s3)
          for (const { td: t4, metadata: e7 } of z3.tds)
            k4.push([(null == n4 ? void 0 : n4.th) || t4, (null == n4 ? void 0 : n4.metadata) || e7, t4 || (null == n4 ? void 0 : n4.th)]);
        const u4 = this._column_sizes.indices[M4 + Math.floor(g3)];
        var H5;
        if (u4)
          x4.viewport_width += u4;
        else
          x4.viewport_width += (null == n4 || null === (H5 = n4.th) || void 0 === H5 ? void 0 : H5.offsetWidth) || z3.tds.reduce((t4, e7) => {
            var i6;
            return t4 + (null === (i6 = e7.td) || void 0 === i6 ? void 0 : i6.offsetWidth);
          }, 0);
        if (x4.row_height = x4.row_height || z3.row_height, M4++, t3++, x4.viewport_width - x4.sub_cell_offset > h4) {
          var E6;
          this.body.clean({ ridx: (null === (E6 = z3) || void 0 === E6 ? void 0 : E6.ridx) || 0, cidx: M4 }), this.header.clean(), yield k4, x4.viewport_width = 0;
          for (let [t4] of k4)
            x4.viewport_width += t4.offsetWidth;
          if (x4.viewport_width - x4.sub_cell_offset > h4)
            return;
        }
      }
      this.body.clean({ ridx: (null === (W4 = z3) || void 0 === W4 ? void 0 : W4.ridx) || 0, cidx: M4 }), this.header.clean(), yield k4;
    } finally {
      var A7;
      this.body.clean({ ridx: (null === (A7 = z3) || void 0 === A7 ? void 0 : A7.ridx) || 0, cidx: M4 }), this.header.clean(), this.body._span_factory.reset(), this.header._span_factory.reset();
    }
  }
};
var p = ["both", "horizontal", "vertical", "none"];
var w3 = class extends c2 {
  constructor() {
    super(), this._column_sizes = { auto: [], override: [], indices: [] }, this._style_callbacks = [], this._initialized = false;
  }
  connectedCallback() {
    this._initialized || (this.create_shadow_dom(), this.register_listeners(), this.setAttribute("tabindex", "0"), this._initialized = true, this.table_model = new f3(this._table_clip, this._column_sizes, this));
  }
  _reset_viewport() {
    this._start_row = void 0, this._end_row = void 0, this._start_col = void 0, this._end_col = void 0;
  }
  _reset_scroll() {
    this._column_sizes.indices = [], this.scrollTop = 0, this.scrollLeft = 0, this._reset_viewport();
  }
  _resetAutoSize() {
    this._column_sizes.auto = [], this._column_sizes.override = [], this._column_sizes.indices = [];
    for (let t2 = 0; t2 < this.table_model.header.num_columns(); t2++) {
      const e3 = this.table_model.header.get_column_header(t2);
      e3.style.minWidth = "", e3.style.maxWidth = "";
    }
  }
  clear() {
    this.table_model = new f3(this._table_clip, this._column_sizes, this);
  }
  addStyleListener(t2) {
    this._style_callbacks = this._style_callbacks.concat(t2);
    let e3 = true;
    return () => {
      if (!e3)
        return;
      e3 = false;
      const i4 = this._style_callbacks = this._style_callbacks.slice(), s3 = i4.indexOf(t2);
      i4.splice(s3, 1);
    };
  }
  invalidate() {
    if (!this._is_styling)
      throw new Error("Cannot call `invalidate()` outside of a `StyleListener`");
    this._invalidated = true;
  }
  getMeta(e3) {
    if (void 0 !== e3) {
      if (e3 instanceof HTMLElement)
        return t.get(e3);
      if (e3.row_header_x >= 0) {
        if (e3.row_header_x < this._view_cache.config.row_pivots.length) {
          const t2 = this.table_model.body._fetch_cell(e3.y, e3.row_header_x);
          return this.getMeta(t2);
        }
      } else {
        if (!(e3.column_header_y >= 0))
          return this.getMeta(this.table_model.body._fetch_cell(e3.dy, e3.dx + this.table_model._row_headers_length));
        if (e3.column_header_y < this._view_cache.config.column_pivots.length) {
          const t2 = this.table_model.body._fetch_cell(e3.column_header_y, e3.y);
          return this.getMeta(t2);
        }
      }
    }
  }
  getDrawFPS() {
    return function() {
      const t2 = performance.now(), e3 = t2 - l2, i4 = s, a5 = 1e3 * o / e3, r2 = o;
      return s = 0, o = 0, l2 = t2, { avg: i4, real_fps: a5, virtual_fps: 1e3 / i4, num_frames: r2, elapsed: e3 };
    }();
  }
  async scrollToCell(t2, e3) {
    if (!this._view_cache)
      return void console.warn("data listener not configured");
    const i4 = this._column_sizes.row_height || 19, s3 = this._view_cache.config.column_pivots.length * i4, o2 = (this._table_clip.offsetHeight - s3) % i4;
    let l3 = (this._virtual_panel.offsetHeight - o2) / this._nrows;
    this.scrollTop = Math.ceil(l3 * e3);
    let a5 = 0;
    for (; t2 > 0; )
      t2--, a5 += this._column_sizes.indices[t2 + this._view_cache.config.row_pivots.length] || 60;
    this.scrollLeft = Math.ceil(a5), await new Promise(requestAnimationFrame), await this.draw.flush();
  }
  setDataListener(t2, { virtual_mode: e3 = "both" } = {}) {
    console.assert(p.indexOf(e3) > -1, `Unknown virtual_mode ${e3};  valid options are "both" (default), "horizontal", "vertical" or "none"`), this._virtual_mode = e3, this._invalid_schema = true, this._view_cache = { view: t2, config: { row_pivots: [], column_pivots: [] }, schema: {} }, this._setup_virtual_scroll();
  }
  __noop_jsdoc_hints() {
  }
};
document.createElement("regular-table").constructor === HTMLElement && window.customElements.define("regular-table", w3);

// ../../packages/perspective-viewer-datagrid/dist/esm/perspective-viewer-datagrid.js
var import_chroma_js = __toESM(require_chroma());
var import_chroma_js2 = __toESM(require_chroma());
var import_chroma_js3 = __toESM(require_chroma());
var import_chroma_js4 = __toESM(require_chroma());

// ../../packages/perspective/src/js/config/settings.js
var settings_default = {
  types: {
    float: {
      filter_operator: "==",
      aggregate: "sum",
      format: {
        style: "decimal",
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }
    },
    string: {
      filter_operator: "==",
      aggregate: "count"
    },
    integer: {
      filter_operator: "==",
      aggregate: "sum",
      format: {}
    },
    boolean: {
      filter_operator: "==",
      aggregate: "count"
    },
    datetime: {
      filter_operator: "==",
      aggregate: "count",
      format: {
        dateStyle: "short",
        timeStyle: "medium"
      },
      null_value: -1
    },
    date: {
      filter_operator: "==",
      aggregate: "count",
      format: {
        dateStyle: "short"
      },
      null_value: -1
    }
  }
};

// ../../packages/perspective/src/js/config/index.js
function get_type_config(type2) {
  const config = {};
  if (get_config().types[type2]) {
    Object.assign(config, get_config().types[type2]);
  }
  if (config.type) {
    const props = get_type_config(config.type);
    Object.assign(props, config);
    return props;
  } else {
    return config;
  }
}
function isObject(item) {
  return item && typeof item === "object" && !Array.isArray(item);
}
function mergeDeep(target, ...sources) {
  if (!sources.length)
    return target;
  const source = sources.shift();
  if (isObject(target) && isObject(source)) {
    for (const key in source) {
      if (isObject(source[key])) {
        if (!target[key])
          Object.assign(target, { [key]: {} });
        mergeDeep(target[key], source[key]);
      } else {
        Object.assign(target, { [key]: source[key] });
      }
    }
  }
  return mergeDeep(target, ...sources);
}
function get_config() {
  if (!globalThis.__PERSPECTIVE_CONFIG__) {
    globalThis.__PERSPECTIVE_CONFIG__ = mergeDeep(
      settings_default,
      globalThis.__TEMPLATE_CONFIG__ || {}
    );
  }
  return globalThis.__PERSPECTIVE_CONFIG__;
}

// ../../packages/perspective-viewer-datagrid/dist/esm/perspective-viewer-datagrid.js
var K3 = 'regular-table{padding:0;margin:12px 0 0 12px;scrollbar-color:transparent transparent;scrollbar-width:thin;outline:none;}regular-table:hover{scrollbar-color:rgba(0,0,0,0.3)transparent;}perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table tbody td,perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table thead th:not(.rt-group-corner){transform:translate(var(--regular-table--transform-x,0px));}perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table tbody{transform:translate(0,var(--regular-table--transform-y,0px));}perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table tbody tr:first-child td,perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table tbody tr:first-child th{clip-path:polygon(0 var(--regular-table--clip-y,0),0 200%,200% 200%,200% var(--regular-table--clip-y,0));}perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table thead th.rt-group-corner{background:var(--plugin--background,white);z-index:1;}perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table tbody tr td:first-of-type{clip-path:polygon(var(--regular-table--clip-x,0)0,var(--regular-table--clip-x,0)200%,200% 200%,200% 0);}perspective-viewer-datagrid:not(.sub-cell-scroll-disabled) regular-table table tbody tr:first-child td:first-of-type{clip-path:polygon(var(--regular-table--clip-x,0)var(--regular-table--clip-y,0),var(--regular-table--clip-x,0)200%,200% 200%,200% var(--regular-table--clip-y,0));}regular-table{font-family:inherit;}regular-table div[tabindex]{outline:none;}regular-table>div{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden;}regular-table th{text-align:center;}regular-table thead tr:not(:last-child) th{overflow:hidden;max-width:0px;}regular-table thead tr:last-child .rt-float,regular-table tbody .rt-float{text-align:right;}regular-table thead .rt-integer,regular-table tbody .rt-integer{text-align:right;}regular-table tbody th{text-align:left;}regular-table span.rt-tree-container{display:flex;align-items:center;height:100%;}regular-table thead .rt-string,regular-table tbody .rt-string,regular-table thead .rt-date,regular-table tbody .rt-date,regular-table thead .rt-datetime,regular-table tbody .rt-datetime{text-align:left;}regular-table thead tr:last-child th{border-bottom:1px solid#8b868045;}regular-table tbody tr:first-child td,regular-table tbody tr:first-child th{border-top:1px solid transparent!important;}regular-table th{position:relative;}regular-table tr th span.rt-tree-group{margin-left:5px;margin-right:15px;border-left:1px solid#eee;height:100%;}regular-table td,regular-table th{white-space:nowrap;font-size:12px;padding-right:5px;padding-left:5px;padding-top:0px;padding-bottom:0px;height:19px;}regular-table tr:hover td{background:#eee;opacity:1;}regular-table tr:hover{color:#333;}regular-table table *{box-sizing:border-box;}regular-table table{position:absolute;overflow:hidden;color:#666;outline:none;}regular-table span.rt-row-header-icon{color:#aaa;padding-right:4px;font-family:var(--button--font-family,"Material Icons");}regular-table span.rt-column-header-icon{font-size:10px;padding-left:3px;display:inline-block;width:10px;font-family:var(--button--font-family,"Material Icons");}regular-table span.rt-row-header-icon:hover{color:#1a7da1;text-shadow:0px 0px 3px#1a7da1;}regular-table .rt-selected td{background-color:#eee;}regular-table .rt-cell-clip{overflow:hidden;text-overflow:ellipsis;}regular-table td span.rt-group-name,regular-table th span.rt-group-name{margin-right:-5px;padding-right:5px;padding-left:8px;flex:1;height:100%;}regular-table th span.rt-group-name{text-align:left;}regular-table td th span.rt-group-leaf,regular-table th span.rt-group-leaf{margin-left:16px;height:100%;}regular-table .rt-column-resize{height:100%;width:10px;position:absolute;top:0;right:0;cursor:col-resize;}regular-table a{color:var(--rt-pos-cell--color);}regular-table a:visited{color:var(--active--color);}regular-table::-webkit-scrollbar,regular-table::-webkit-scrollbar-corner{background-color:transparent;height:12px;width:12px;}regular-table::-webkit-scrollbar-thumb{background-clip:content-box;background-color:rgba(0,0,0,0);border-radius:5px;}regular-table::-webkit-scrollbar-thumb:horizontal{border-bottom:2px solid transparent;border-top:2px solid transparent;}regular-table::-webkit-scrollbar-thumb:vertical{border-left:2px solid transparent;border-right:2px solid transparent;}regular-table:hover::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,0.15);}regular-table::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,0.3);}.psp-header-border:not(.psp-is-top):not(.psp-header-leaf){box-shadow:1px 0px var(--inactive--color,#8b868045);}.psp-header-group{box-shadow:0px 10px 0 -9px var(--inactive--color,#8b868045);}.psp-is-top{box-shadow:5px 4px 0px -4px var(--inactive--color,#8b868045);}.psp-is-top.psp-header-group:not(.psp-header-group-corner){box-shadow:5px 4px 0px -4px var(--inactive--color,#8b868045),0px 10px 0 -9px var(--inactive--color,#8b868045);}.psp-header-border.psp-header-group:not(.psp-is-top):not(.psp-header-group-corner){box-shadow:1px 0px var(--inactive--color,#8b868045),0px 10px 0 -9px var(--inactive--color,#8b868045);}.psp-header-leaf.psp-header-border{box-shadow:5px -4px 0px -4px var(--inactive--color,#8b868045);}tr:only-child th{box-shadow:none!important;}regular-table tbody tr:hover th.psp-tree-leaf:not(.psp-row-selected):not(.psp-row-subselected),regular-table tbody tr:hover th.psp-tree-label:not(.psp-row-selected):not(.psp-row-subselected),regular-table tbody tr:hover td:not(.psp-row-selected):not(.psp-row-subselected){border-color:var(--rt-hover--border-color,#c5c9d080)!important;background-color:transparent;box-shadow:0px 1px 0px var(--rt-hover--border-color,#c5c9d080),0px 3px 0px rgba(0,0,0,0.05),0px 5px 0px rgba(0,0,0,0.01);}regular-table tbody tr:hover+tr th.psp-tree-leaf:not(.psp-row-selected):not(.psp-row-subselected),regular-table tbody tr:hover+tr th.psp-tree-label:not(.psp-row-selected):not(.psp-row-subselected),regular-table tbody tr:hover+tr td:not(.psp-row-selected):not(.psp-row-subselected){border-top-color:transparent;}regular-table tbody tr th:first-child:not(:empty),regular-table tbody tr th:first-child:empty+th:not(:empty),regular-table tbody tr th:first-child:empty~th:empty+th:not(:empty),regular-table tbody tr td:first-child{border-left-width:1px;border-left-color:transparent;}regular-table tbody tr th:last-child,regular-table tbody tr td:last-child{border-right-width:1px;border-right-color:transparent;}regular-table tbody tr:hover{color:#161616;}regular-table tbody tr:hover th:first-child:not(:empty),regular-table tbody tr:hover th:first-child:empty+th:not(:empty),regular-table tbody tr:hover th:first-child:empty~th:empty+th:not(:empty),regular-table tbody tr:hover td:first-child{border-left-color:var(--rt-hover--border-color,#c5c9d080)!important;}regular-table tbody tr:hover th:last-child,regular-table tbody tr:hover td:last-child{border-right-color:var(--rt-hover--border-color,#c5c9d080)!important;}perspective-viewer[settings] regular-table .psp-header-leaf{height:36px;vertical-align:top;padding-top:3.5px;}perspective-viewer[settings] regular-table .psp-header-leaf:not(.psp-header-corner):before{font-family:var(--button--font-family,inherit);content:var(--column-style-open-button--content,var(--config-button-icon--content,"\\1f527"));position:absolute;width:calc(100% - 8px);left:5px;bottom:0px;padding-bottom:1px;margin-bottom:3px;color:var(--inactive--color,#8b868045);font-size:9px;border:1px solid transparent;border-radius:2px;}perspective-viewer[settings] regular-table .psp-header-leaf.psp-menu-enabled:not(.psp-header-corner):before{color:inherit;cursor:pointer;}perspective-viewer[settings] regular-table .psp-header-leaf.psp-menu-open:not(.psp-header-corner){pointer-events:none;}perspective-viewer[settings] regular-table .psp-header-leaf.psp-menu-open:not(.psp-header-corner):before{border:1px solid var(--inactive--color);content:var(--column-style-close-button--content,"X");}perspective-viewer[settings] regular-table .psp-header-leaf.psp-menu-enabled:hover:before{border:1px solid var(--inactive--color);}perspective-viewer[settings] regular-table .psp-header-leaf .rt-column-resize{height:18px;}.psp-row-selected,:hover .psp-row-selected,:hover th.psp-tree-leaf.psp-row-selected,:hover th.psp-tree-label.psp-row-selected{color:white!important;background-color:#ea7319!important;border-color:#ea7319!important;}.psp-row-selected.psp-tree-label:not(:hover):before{color:white;}.psp-row-subselected,:hover .psp-row-subselected,:hover th.psp-tree-leaf.psp-row-subselected,:hover th.psp-tree-label.psp-row-subselected{background:rgba(234,115,25,0.2)!important;}.psp-error{color:red;}td:focus{outline:#666;outline-style:dotted;outline-width:1px;}perspective-viewer.dragging regular-table{pointer-events:none;}.psp-header-border:last-child{border-right-width:0px;}.psp-header-sort-desc:after{background-repeat:no-repeat;background-color:var(--icon--color);content:"";display:inline-block;-webkit-mask-size:cover;mask-size:cover;width:14px;height:12px;-webkit-mask-image:var(--sort-desc-icon--mask-image);mask-image:var(--sort-desc-icon--mask-image);}.psp-header-sort-asc:after{background-repeat:no-repeat;background-color:var(--icon--color);content:"";display:inline-block;-webkit-mask-size:cover;mask-size:cover;width:14px;height:12px;-webkit-mask-image:var(--sort-asc-icon--mask-image);mask-image:var(--sort-asc-icon--mask-image);}.psp-header-sort-col-desc:after{background-repeat:no-repeat;background-color:var(--icon--color);content:"";display:inline-block;-webkit-mask-size:cover;mask-size:cover;width:14px;height:12px;-webkit-mask-image:var(--sort-col-desc-icon--mask-image);mask-image:var(--sort-col-desc-icon--mask-image);}.psp-header-sort-col-asc:after{background-repeat:no-repeat;background-color:var(--icon--color);content:"";display:inline-block;-webkit-mask-size:cover;mask-size:cover;width:14px;height:12px;-webkit-mask-image:var(--sort-col-asc-icon--mask-image);mask-image:var(--sort-col-asc-icon--mask-image);}tbody th:last-of-type{border-right:1px solid var(--inactive--color,#8b868045);overflow:hidden;text-overflow:ellipsis;}tbody th:empty{background-image:linear-gradient(to right,transparent 9px,#eee 10px,transparent 11px);background-repeat:no-repeat;min-width:20px;max-width:20px;pointer-events:none;}.psp-tree-label{max-width:0px;min-width:0px;}.psp-tree-label:before{color:var(--icon--color);font-family:var(--button--font-family,inherit);padding-right:11px;}.psp-tree-label-expand:before{content:var(--tree-label-expand--content,"+");}.psp-tree-label-collapse:before{content:var(--tree-label-collapse--content,"-");}.psp-tree-label-expand,.psp-tree-label-collapse{cursor:pointer;}.psp-tree-label:hover:before{color:var(--active--color);text-shadow:0px 0px 5px var(--active--color);}regular-table thead tr:last-child th{border-bottom-width:1px;border-bottom-color:var(--inactive--color,#8b868045);}.psp-tree-leaf{padding-left:24px;}.psp-align-right{text-align:right;}.psp-align-left{text-align:left;}.psp-positive:not(:focus){color:var(--rt-pos-cell--color);}.psp-negative:not(:focus){color:var(--rt-neg-cell--color);}regular-table table tbody td{min-width:52px!important;}.psp-is-width-override .rt-column-resize,.rt-column-resize:hover{border:1px dashed#999;border-bottom-width:0px;border-left-width:0px;}.psp-bool-type{font-family:var(--button--font-family,"Material Icons");}.boolean-editable{cursor:pointer;}regular-table table{user-select:none;color:#161616;border-collapse:separate;}regular-table table th{font-weight:400;}regular-table table td,regular-table table th{border-color:var(--inactive--color,#8b868045);height:23px;}regular-table table .psp-header-group{text-overflow:ellipsis;}regular-table table th.psp-header-leaf{border-bottom-width:0px;}regular-table table th.psp-header-leaf span{height:23px;min-height:23px;}regular-table table td,regular-table table th.psp-tree-label,regular-table table th.psp-tree-label,regular-table table th.psp-tree-leaf,regular-table table tbody tr:first-child th{border-style:solid;border-width:0px;border-top-width:1px;}regular-table table tbody th:empty{background-position:0px -10px;}@keyframes pulse_pos{0%{background-color:var(--pulse--background-color-start,rgba(0,128,255,0.5));}100%{background-color:var(--pulse--background-color-end,rgba(0,128,255,0));}}@keyframes pulse_pos2{0%{background-color:var(--pulse--background-color-start,rgba(0,128,255,0.5));}100%{background-color:var(--pulse--background-color-end,rgba(0,128,255,0));}}@keyframes pulse_neg{0%{background-color:var(--pulse--background-color-start,rgba(255,25,0,0.5));}100%{background-color:var(--pulse--background-color-end,rgba(255,25,0,0));}}@keyframes pulse_neg2{0%{background-color:var(--pulse--background-color-start,rgba(255,25,0,0.5));}100%{background-color:var(--pulse--background-color-end,rgba(255,25,0,0));}}';
function Ne(e3) {
  return e3.x >= 0 ? this._column_types[e3.x] : this._row_header_types[e3.row_header_x - 1];
}
function X3(e3) {
  let t2 = e3._view_cache.config.row_pivots.length - 1, r2 = Array.from(e3.children[0].children[0].children);
  if (r2.length > 0) {
    let [s3] = r2.splice(r2.length - 1, 1);
    for (let o2 of s3?.children) {
      let l3 = e3.getMeta(o2), i4 = l3.column_header?.[l3.column_header?.length - 1], n3 = this._config.sort.find((_4) => _4[0] === i4), a5 = l3.row_header_x === t2, c6 = typeof l3.x > "u";
      a5 = a5 || (l3.x + 1) % this._config.columns.length === 0, o2.classList.toggle("psp-header-border", a5), o2.classList.toggle("psp-header-group", false), o2.classList.toggle("psp-header-leaf", true), o2.classList.toggle("psp-is-top", false), o2.classList.toggle("psp-header-corner", c6), o2.classList.toggle("psp-header-sort-asc", !!n3 && n3[1] === "asc"), o2.classList.toggle("psp-header-sort-desc", !!n3 && n3[1] === "desc"), o2.classList.toggle("psp-header-sort-col-asc", !!n3 && n3[1] === "col asc"), o2.classList.toggle("psp-header-sort-col-desc", !!n3 && n3[1] === "col desc");
      let d2 = Ne.call(this, l3), h4 = d2 === "integer" || d2 === "float", b3 = d2 === "string", p2 = d2 === "date", g3 = d2 === "datetime";
      o2.classList.toggle("psp-align-right", h4), o2.classList.toggle("psp-align-left", !h4), o2.classList.toggle("psp-menu-open", this._open_column_styles_menu[0] === l3._virtual_x), o2.classList.toggle("psp-menu-enabled", (b3 || h4 || p2 || g3) && !c6), o2.classList.toggle("psp-is-width-override", e3._column_sizes?.override[l3.size_key] !== void 0);
    }
  }
}
function Z3(e3) {
  let t2 = e3._view_cache.config.row_pivots.length - 1, r2 = Array.from(e3.children[0].children[0].children), s3 = [], o2 = /* @__PURE__ */ new Set(), l3 = e3.children[0];
  for (let i4 = 0; i4 < r2.length; i4++) {
    let n3 = l3.rows[i4], a5 = /* @__PURE__ */ new Set();
    for (let c6 = 0; c6 < n3.cells.length; c6++) {
      let d2 = n3.cells[c6];
      d2.style.backgroundColor = "";
      let h4 = e3.getMeta(d2), b3 = h4.row_header_x === t2 || h4.x >= 0;
      d2.classList.toggle("psp-align-right", false), d2.classList.toggle("psp-align-left", false), d2.classList.toggle("psp-header-group", true), d2.classList.toggle("psp-header-leaf", false), d2.classList.toggle("psp-header-border", b3), d2.classList.toggle("psp-header-group-corner", typeof h4.x > "u"), d2.classList.toggle("psp-color-mode-bar", false), d2.classList.toggle("psp-header-sort-asc", false), d2.classList.toggle("psp-header-sort-desc", false), d2.classList.toggle("psp-header-sort-col-asc", false), d2.classList.toggle("psp-header-sort-col-desc", false);
      let p2 = n3.cells[c6], g3 = c6, _4, y3;
      for (; s3[i4] && s3[i4][g3]; ++g3)
        ;
      for (a5.add(g3), _4 = g3; _4 < g3 + p2.colSpan; ++_4)
        for (y3 = i4; y3 < i4 + p2.rowSpan; ++y3)
          s3[y3] || (s3[y3] = []), s3[y3][_4] = true;
      p2.classList.toggle("psp-is-top", i4 === 0 || !o2.has(_4));
    }
    o2 = a5;
  }
}
var v3 = Symbol("Plugin Symbol");
function Q(e3, t2, [, , , , , r2, s3], [, , , , , o2, l3]) {
  let i4 = this._ids?.[e3.dy]?.join("|"), n3 = e3.column_header.join("|");
  if (this.last_reverse_columns?.has(n3) && this.last_reverse_ids?.has(i4)) {
    let a5 = this.last_reverse_ids?.get(i4), c6 = this.last_reverse_columns.get(n3);
    this._is_old_viewport ? this.last_meta?.[c6]?.[a5] > e3.user ? (t2.style.setProperty("--pulse--background-color-start", o2), t2.style.setProperty("--pulse--background-color-end", l3), t2.style.animationName === "pulse_neg" ? t2.style.animation = "pulse_neg2 0.5s linear" : t2.style.animation = "pulse_neg 0.5s linear") : this.last_meta?.[c6]?.[a5] < e3.user ? (t2.style.setProperty("--pulse--background-color-start", r2), t2.style.setProperty("--pulse--background-color-end", s3), t2.style.animationName === "pulse_pos" ? t2.style.animation = "pulse_pos2 0.5s linear" : t2.style.animation = "pulse_pos 0.5s linear") : a5 !== e3.dy && (t2.style.animation = "") : t2.style.animation = "";
  } else
    t2.style.animation = "";
}
function T2(e3, t2) {
  return import_chroma_js.default.mix(e3, `rgb(${t2[0]},${t2[1]},${t2[2]})`, 0.5).hex();
}
function L3([e3, t2, r2, s3], o2 = [255, 255, 255]) {
  function l3(i4, n3) {
    return ((1 - s3) * (o2[i4] / 255) + s3 * (n3 / 255)) * 255;
  }
  return [l3(0, e3), l3(1, t2), l3(2, r2)];
}
function E3([e3, t2, r2]) {
  return Math.sqrt(e3 * e3 * 0.299 + t2 * t2 * 0.587 + r2 * r2 * 0.114) > 130 ? "#161616" : "#ffffff";
}
function De(e3) {
  let [t2, r2, s3] = e3.rgb(), [o2, l3, i4] = e3.set("hsl.h", (e3.get("hsl.h") - 15) % 360).rgb(), [n3, a5, c6] = e3.set("hsl.h", (e3.get("hsl.h") + 15) % 360).rgb();
  return `linear-gradient(to right top,rgb(${o2},${l3},${i4}),rgb(${t2},${r2},${s3}) 50%,rgb(${n3},${a5},${c6}))`;
}
function m3(e3) {
  let t2 = (0, import_chroma_js.default)(e3), r2 = De(t2), s3 = t2.rgb();
  return [e3, ...s3, r2, `rgba(${s3[0]},${s3[1]},${s3[2]},1)`, `rgba(${s3[0]},${s3[1]},${s3[2]},0)`];
}
function te2(e3, t2, r2) {
  let s3 = r2.user > 0, o2 = r2.user < 0, l3;
  e3?.pos_bg_color !== void 0 ? l3 = e3.pos_bg_color : l3 = this._pos_bg_color;
  let i4;
  e3?.neg_bg_color !== void 0 ? i4 = e3.neg_bg_color : i4 = this._neg_bg_color;
  let n3 = s3 ? l3 : o2 ? i4 : ["", ...this._plugin_background, ""];
  {
    let [p2, g3, _4, y3, u3] = n3;
    if (t2.style.position = "", e3?.number_bg_mode === "color")
      t2.style.animation = "", t2.style.backgroundColor = p2;
    else if (e3?.number_bg_mode === "gradient") {
      let f4 = Math.max(0, Math.min(1, Math.abs(r2.user / e3.bg_gradient))), x4 = this._plugin_background, w4 = E3(L3([g3, _4, y3, f4], x4));
      t2.style.animation = "", t2.style.color = w4, t2.style.backgroundColor = `rgba(${g3},${_4},${y3},${f4})`;
    } else
      e3?.number_bg_mode === "pulse" ? (Q.call(this, r2, t2, l3, i4), t2.style.backgroundColor = "") : (e3?.number_bg_mode === "disabled" || e3?.number_bg_mode, t2.style.animation = "", t2.style.backgroundColor = "");
  }
  let [a5, c6, d2, h4, b3] = (() => e3?.pos_fg_color !== void 0 ? s3 ? e3.pos_fg_color : o2 ? e3.neg_fg_color : ["", ...this._plugin_background, ""] : s3 ? this._pos_fg_color : o2 ? this._neg_fg_color : ["", ...this._plugin_background, ""])();
  if (e3?.number_fg_mode === "disabled")
    if (e3?.number_bg_mode === "color") {
      let p2 = this._plugin_background, g3 = E3(L3([n3[1], n3[2], n3[3], 1], p2));
      t2.style.color = g3;
    } else
      e3?.number_bg_mode === "gradient" || (t2.style.color = "");
  else
    e3?.number_fg_mode === "bar" ? (t2.style.color = "", t2.style.position = "relative", b3 !== "" && t2.children.length > 0 && t2.children[0].nodeType === Node.ELEMENT_NODE && (t2.children[0].style.background = b3)) : (e3?.number_fg_mode === "color" || !e3?.number_fg_mode) && (t2.style.color = a5);
}
function re3(e3, t2, r2) {
  let s3 = r2.column_header?.[r2.column_header?.length - 1], [o2, l3, i4, n3, a5] = (() => e3?.color !== void 0 ? e3.color : this._color)();
  if (e3?.string_color_mode === "foreground" && r2.user !== null)
    t2.style.color = o2, t2.style.backgroundColor = "", e3?.format === "link" && (t2.children[0].style.color = o2);
  else if (e3?.string_color_mode === "background" && r2.user !== null) {
    let c6 = this._plugin_background, d2 = E3(L3([l3, i4, n3, 1], c6));
    t2.style.color = d2, t2.style.backgroundColor = o2;
  } else if (e3?.string_color_mode === "series" && r2.user !== null) {
    this._series_color_map.has(s3) || (this._series_color_map.set(s3, /* @__PURE__ */ new Map()), this._series_color_seed.set(s3, 0));
    let c6 = this._series_color_map.get(s3);
    if (!c6.has(r2.user)) {
      let S3 = this._series_color_seed.get(s3);
      c6.set(r2.user, S3), this._series_color_seed.set(s3, S3 + 1);
    }
    let d2 = c6.get(r2.user), [h4, b3, p2] = (0, import_chroma_js2.default)(o2).hsl();
    h4 = h4 + d2 * 150 % 360;
    let g3 = (0, import_chroma_js2.default)(h4, b3, p2, "hsl"), [_4, y3, u3] = g3.rgb(), f4 = g3.hex(), x4 = this._plugin_background, w4 = E3(L3([_4, y3, u3, 1], x4));
    t2.style.color = w4, t2.style.backgroundColor = f4;
  } else
    t2.style.backgroundColor = "", t2.style.color = "";
}
function se3(e3, t2, r2) {
  let s3 = r2.column_header?.[r2.column_header?.length - 1], [o2, l3, i4, n3, a5] = (() => e3?.color !== void 0 ? e3.color : this._color)();
  if (e3?.datetime_color_mode === "foreground" && r2.user !== null)
    t2.style.color = o2, t2.style.backgroundColor = "";
  else if (e3?.datetime_color_mode === "background" && r2.user !== null) {
    let c6 = this._plugin_background, d2 = E3(L3([l3, i4, n3, 1], c6));
    t2.style.color = d2, t2.style.backgroundColor = o2;
  } else
    t2.style.backgroundColor = "", t2.style.color = "";
}
function le2(e3, t2, r2) {
  let [s3] = r2.user === true ? this._pos_fg_color : r2.user === false ? this._neg_fg_color : ["", 0, 0, 0, ""];
  t2.style.backgroundColor = "", t2.style.color = s3;
}
function ie3(e3, t2, r2) {
  let s3 = typeof r2.value != null && typeof r2.value != null && r2.value?.toString()?.trim().length > 0, o2 = r2.row_header_x >= this._config.group_by.length, l3 = e3.getMeta({ dx: 0, dy: r2.y - r2.y0 + 1 }), i4 = l3 && l3.row_header && typeof l3.row_header[r2.row_header_x + 1] < "u";
  t2.classList.toggle("psp-tree-label", s3 && !o2), t2.classList.toggle("psp-tree-label-expand", s3 && !o2 && !i4), t2.classList.toggle("psp-tree-label-collapse", s3 && !o2 && i4), t2.classList.toggle("psp-tree-leaf", s3 && o2);
}
function $e(e3) {
  return e3.x >= 0 ? this._column_types[e3.x] : this._row_header_types[e3.row_header_x - 1];
}
function ne3(e3) {
  let t2 = e3[v3] || {};
  for (let r2 of e3.children[0].children[1].children)
    for (let s3 of r2.children) {
      let o2 = e3.getMeta(s3), l3 = o2.column_header?.[o2.column_header?.length - 1], i4 = $e.call(this, o2), n3 = t2[l3], a5 = i4 === "integer" || i4 === "float";
      a5 ? te2.call(this, n3, s3, o2) : i4 === "boolean" ? le2.call(this, n3, s3, o2) : i4 === "string" ? re3.call(this, n3, s3, o2) : i4 === "date" || i4 === "datetime" ? se3.call(this, n3, s3, o2) : (s3.style.backgroundColor = "", s3.style.color = ""), s3.classList.toggle("psp-bool-type", i4 === "boolean" && o2.user !== null);
      let c6 = s3.tagName === "TH";
      c6 && ie3.call(this, e3, s3, o2), s3.classList.toggle("psp-align-right", !c6 && a5), s3.classList.toggle("psp-align-left", c6 || !a5), s3.classList.toggle("psp-color-mode-bar", n3?.number_fg_mode === "bar" && a5);
    }
}
async function ae2(e3, t2, r2) {
  let s3 = e3.getMeta(r2), o2 = s3.column_header[s3.column_header.length - 1], i4 = (t2.shiftKey ? Fe2 : He).call(this, o2);
  this._preserve_focus_state = true, await e3.parentElement.parentElement.restore({ sort: i4 });
}
function Fe2(e3) {
  let t2 = [], r2 = false;
  for (let s3 of this._config.sort) {
    let [o2, l3] = s3;
    if (o2 === e3) {
      r2 = true;
      let i4 = ce2.call(this, e3, l3);
      i4 && t2.push(i4);
    } else
      t2.push(s3);
  }
  return r2 || t2.push([e3, "desc"]), t2;
}
function He(e3) {
  for (let [t2, r2] of this._config.sort)
    if (t2 === e3) {
      let s3 = ce2.call(this, e3, r2);
      return s3 ? [s3] : [];
    }
  return [[e3, "desc"]];
}
function ce2(e3, t2) {
  let s3 = this._config.split_by.length > 0 ? Be : je, o2 = t2 ? s3[t2] : "desc";
  if (o2)
    return [e3, o2];
}
var je = { desc: "asc", asc: void 0 };
var Be = { desc: "asc", asc: "col desc", "col desc": "col asc", "col asc": void 0 };
function Y3(e3, t2, r2) {
  let s3 = e3.getMeta(t2), o2 = s3.column_header[s3.column_header.length - 1], l3 = this._schema[o2], i4 = l3 === "integer" || l3 === "float", n3 = document.createElement(`perspective-${{ float: "number", integer: "number", string: "string", date: "date", datetime: "datetime" }[l3]}-column-style`), a5;
  if (i4 ? a5 = { fg_gradient: r2, pos_fg_color: this._pos_fg_color[0], neg_fg_color: this._neg_fg_color[0], number_fg_mode: "color", bg_gradient: r2, pos_bg_color: this._pos_bg_color[0], neg_bg_color: this._neg_bg_color[0], number_bg_mode: "disabled" } : a5 = { color: this._color[0], bg_color: this._color[0] }, !(l3 === "string" || l3 === "date" || l3 === "datetime"))
    if (l3 === "float")
      a5.fixed = 2;
    else if (l3 === "integer")
      a5.fixed = 0;
    else {
      this._open_column_styles_menu.pop(), t2.classList.remove("psp-menu-open");
      return;
    }
  let c6 = () => n3.blur(), d2 = (g3) => {
    let _4 = g3.detail;
    _4.pos_fg_color && (_4.pos_fg_color = m3(_4.pos_fg_color), _4.neg_fg_color = m3(_4.neg_fg_color)), _4.pos_bg_color && (_4.pos_bg_color = m3(_4.pos_bg_color), _4.neg_bg_color = m3(_4.neg_bg_color)), _4.color && (_4.color = m3(_4.color)), _4.bg_color && (_4.bg_color = m3(_4.bg_color)), e3[v3] = e3[v3] || {}, e3[v3][o2] = _4, e3.draw({ preserve_width: true }), e3.parentElement.parentElement.dispatchEvent(new Event("perspective-config-update"));
  }, h4 = async () => {
    e3.removeEventListener("regular-table-scroll", c6), n3.removeEventListener("perspective-column-style-change", d2), n3.removeEventListener("blur", h4), this._open_column_styles_menu.pop(), e3.parentElement.parentElement.dispatchEvent(new Event("perspective-config-update")), t2.classList.remove("psp-menu-open"), n3.destroy();
  };
  n3.addEventListener("perspective-column-style-change", d2), n3.addEventListener("blur", h4), e3.addEventListener("regular-table-scroll", c6);
  let b3 = e3[v3] || {}, p2 = Object.assign({}, b3[o2] = b3[o2] || {});
  (p2.pos_fg_color || p2.pos_bg_color) && (p2.pos_fg_color = p2.pos_fg_color?.[0], p2.neg_fg_color = p2.neg_fg_color?.[0], p2.pos_bg_color = p2.pos_bg_color?.[0], p2.neg_bg_color = p2.neg_bg_color?.[0]), p2.color && (p2.color = p2.color[0]), p2.bg_color && (p2.bg_color = p2.bg_color[0]), n3.open(t2, p2, a5);
}
async function de2(e3, t2) {
  let r2 = e3.getMeta(t2.target), s3 = t2.target.classList.contains("psp-tree-label-collapse");
  t2.shiftKey && s3 ? this._view.set_depth(r2.row_header.filter((o2) => o2 !== void 0).length - 2) : t2.shiftKey ? this._view.set_depth(r2.row_header.filter((o2) => o2 !== void 0).length - 1) : s3 ? this._view.collapse(r2.y) : this._view.expand(r2.y), this._num_rows = await this._view.num_rows(), this._num_columns = await this._view.num_columns(), e3.draw();
}
async function pe2(e3, t2) {
  if (t2.which !== 1)
    return;
  let r2 = t2.target;
  if (r2.tagName === "A")
    return;
  for (; r2.tagName !== "TD" && r2.tagName !== "TH"; )
    if (r2 = r2.parentElement, !e3.contains(r2))
      return;
  if (r2.classList.contains("psp-tree-label")) {
    de2.call(this, e3, t2), t2.stopImmediatePropagation();
    return;
  }
  let s3 = r2.getBoundingClientRect();
  if (r2.classList.contains("psp-menu-enabled") && t2.clientY - s3.top > 16) {
    r2.classList.add("psp-menu-open");
    let o2 = e3.getMeta(r2), l3 = o2.column_header?.[o2.column_header?.length - 1], i4 = this._schema[l3];
    if (this._open_column_styles_menu.unshift(o2._virtual_x), i4 === "string" || i4 === "date" || i4 === "datetime")
      Y3.call(this, e3, r2);
    else {
      let [n3, a5] = await this._view.get_min_max(l3), c6 = Math.max(Math.abs(n3), Math.abs(a5));
      c6 > 1 && (c6 = Math.round(c6 * 100) / 100), Y3.call(this, e3, r2, c6);
    }
    t2.preventDefault(), t2.stopImmediatePropagation();
  } else
    r2.classList.contains("psp-header-leaf") && !r2.classList.contains("psp-header-corner") && (ae2.call(this, e3, t2, r2), t2.stopImmediatePropagation());
}
function _e2(e3, t2) {
  if (t2.which !== 1)
    return;
  let r2 = t2.target;
  for (; r2.tagName !== "TD" && r2.tagName !== "TH"; )
    if (r2 = r2.parentElement, !e3.contains(r2))
      return;
  (r2.classList.contains("psp-tree-label") && t2.offsetX < 26 || r2.classList.contains("psp-header-leaf") && !r2.classList.contains("psp-header-corner")) && t2.stopImmediatePropagation();
}
function ge2(e3, t2 = false) {
  let r2 = this._config.group_by.length === 0 && this._config.split_by.length === 0, s3 = e3.hasAttribute("selectable"), o2 = t2 || !!e3.children[0]._is_edit_mode;
  return r2 && !s3 && o2;
}
function he2(e3, t2) {
  let r2 = e3[v3] || {}, s3 = ge2.call(this, t2);
  e3.parentElement.classList.toggle("edit-mode-allowed", ge2.call(this, t2, true));
  for (let o2 of e3.querySelectorAll("td")) {
    let l3 = e3.getMeta(o2), i4 = this.get_psp_type(l3);
    if (s3 && this._is_editable[l3.x]) {
      let n3 = l3.column_header[l3.column_header.length - 1];
      i4 === "string" && r2[n3]?.format === "link" ? (o2.toggleAttribute("contenteditable", false), o2.classList.toggle("boolean-editable", false)) : i4 === "boolean" ? (o2.toggleAttribute("contenteditable", false), o2.classList.toggle("boolean-editable", l3.user !== null)) : (s3 !== o2.hasAttribute("contenteditable") && o2.toggleAttribute("contenteditable", s3), o2.classList.toggle("boolean-editable", false));
    } else
      o2.toggleAttribute("contenteditable", false), o2.classList.toggle("boolean-editable", false);
  }
}
var A3 = (e3, t2, r2) => {
  let s3 = e3.querySelectorAll("td"), o2 = r2.get(e3);
  if (o2) {
    for (let l3 of s3) {
      let i4 = e3.getMeta(l3);
      if (i4.x === o2.x && i4.y === o2.y)
        return document.activeElement !== l3 && l3.focus({ preventScroll: true }), true;
    }
    document.activeElement !== document.body && e3.contains(document.activeElement) && document.activeElement.blur();
  }
};
function Te2(e3) {
  let t2;
  return async function(...r2) {
    if (!!t2 && await t2 && !!t2)
      return;
    let s3;
    t2 = new Promise((o2) => s3 = o2), await e3.apply(this, r2), t2 = void 0, s3();
  };
}
function ue2() {
  if (this.isContentEditable) {
    let e3 = document.getSelection().getRangeAt(0), t2 = e3.cloneRange();
    return t2.selectNodeContents(this), t2.setEnd(e3.endContainer, e3.endOffset), t2.toString().length;
  } else
    return this.target.selectionStart;
}
function be2(e3, t2, r2) {
  let s3 = e3.getMeta(r2), o2 = t2._schema[t2._column_paths[s3.x]];
  if (s3) {
    let l3 = r2.textContent, i4 = t2._ids[s3.y - s3.y0];
    if (o2 === "float" || o2 === "integer") {
      if (l3 = parseFloat(l3.replace(/,/g, "")), isNaN(l3))
        return false;
    } else if (o2 === "date" || o2 === "datetime") {
      if (l3 = Date.parse(l3), isNaN(l3))
        return false;
    } else
      o2 === "boolean" && (l3 = l3 === "check" ? false : l3 === "close" ? true : null);
    let n3 = { __INDEX__: i4, [t2._column_paths[s3.x]]: l3 };
    return t2._table.update([n3], { port_id: t2._edit_port }), true;
  }
}
function O3(e3, t2 = false) {
  let r2 = this._config.group_by.length === 0 && this._config.split_by.length === 0, s3 = e3.hasAttribute("selectable"), o2 = t2 || !!e3.children[0]._is_edit_mode;
  return r2 && !s3 && o2;
}
var C3 = Te2(async function(e3, t2, r2, s3, o2) {
  let l3 = e3.getMeta(r2), i4 = this._column_paths.length, n3 = this._num_rows, a5 = t2.get(e3);
  if (!a5)
    return;
  l3.x + s3 < i4 && 0 <= l3.x + s3 && (a5.x = l3.x + s3), l3.y + o2 < n3 && 0 <= l3.y + o2 && (a5.y = l3.y + o2);
  let c6 = Math.max(l3.x0 - 10, 0), d2 = Math.min(l3.x0 + 10, i4), h4 = Math.max(l3.y0 - 5, 0), b3 = Math.min(l3.y0 + 10, n3), p2 = l3.x0 + s3, g3 = l3.y0 + o2;
  for (; !A3(e3, void 0, t2) && p2 >= c6 && p2 < d2 && g3 >= h4 && g3 < b3; )
    await e3.scrollToCell(p2, g3, i4, n3), t2.set(e3, a5), p2 += s3, g3 += o2;
});
function fe2(e3, t2, r2, s3) {
  if (!O3.call(this, t2))
    return;
  let o2 = document.activeElement;
  switch (s3.target.classList.remove("psp-error"), s3.keyCode) {
    case 13:
      s3.preventDefault(), s3.shiftKey ? C3.call(this, e3, r2, o2, 0, -1) : C3.call(this, e3, r2, o2, 0, 1);
      break;
    case 37:
      ue2.call(o2) == 0 && (s3.preventDefault(), C3.call(this, e3, r2, o2, -1, 0));
      break;
    case 38:
      s3.preventDefault(), C3.call(this, e3, r2, o2, 0, -1);
      break;
    case 39:
      ue2.call(o2) == o2.textContent.length && (s3.preventDefault(), C3.call(this, e3, r2, o2, 1, 0));
      break;
    case 40:
      s3.preventDefault(), C3.call(this, e3, r2, o2, 0, 1);
      break;
    default:
  }
}
function me2(e3, t2, r2) {
  let s3 = e3.getMeta(r2.target);
  if (typeof s3?.x < "u") {
    let o2 = O3.call(this, t2), l3 = this._is_editable[s3.x], i4 = this.get_psp_type(s3) === "boolean", n3 = r2.target.textContent === "-";
    o2 && l3 && i4 && !n3 && write(e3, this, r2.target);
  }
}
function ye2(e3, t2, r2, s3) {
  if (O3.call(this, t2) && r2.has(e3)) {
    s3.target.classList.remove("psp-error");
    let o2 = r2.get(e3);
    r2.delete(e3), o2.content !== s3.target.textContent && (be2(e3, this, s3.target) || (s3.target.textContent = o2.content, s3.target.classList.add("psp-error"), s3.target.focus()));
  }
}
function xe2(e3, t2, r2, s3) {
  let o2 = e3.getMeta(s3.target);
  if (o2) {
    let l3 = { x: o2.x, y: o2.y, content: s3.target.textContent };
    r2.set(e3, l3);
  }
}
async function M3({ _view: e3, _config: t2 }, r2, s3) {
  let o2 = t2.group_by, l3 = t2.split_by, i4 = r2 >= 0 ? r2 : 0, n3 = i4 + 1, a5 = await e3.to_json({ start_row: i4, end_row: n3 }), d2 = a5.map((u3) => u3.__ROW_PATH__)[0] || [], h4 = o2.map((u3, f4) => {
    let x4 = d2[f4];
    return x4 ? [u3, "==", x4] : void 0;
  }).filter((u3) => u3), b3 = o2.length > 0 ? s3 + 1 : s3, p2 = Object.keys(a5[0])[b3], g3 = { row: a5[0] }, _4 = [];
  if (p2) {
    let u3 = p2.split("|");
    g3.column_names = [u3[u3.length - 1]], _4 = l3.map((f4, x4) => {
      let w4 = u3[x4];
      return w4 ? [f4, "==", w4] : void 0;
    }).filter((f4) => f4).filter(([, , f4]) => f4 !== "__ROW_PATH__");
  }
  let y3 = t2.filter.concat(h4).concat(_4);
  return g3.config = { filter: y3 }, g3;
}
async function ve2(e3, t2, r2, s3) {
  let o2 = e3.getMeta(s3.target);
  if (!t2.hasAttribute("selectable") || s3.handled || s3.which !== 1 || !o2)
    return;
  let l3 = this._ids[o2.y - o2.y0];
  if (o2 && o2.y >= 0) {
    let i4 = r2.get(e3), n3 = !!i4 && i4.reduce((p2, g3, _4) => p2 && g3 === l3[_4], true), a5 = !!i4 && l3.length === i4.length && n3, c6 = { selected: !a5 }, { row: d2, column_names: h4, config: b3 } = await M3(this, o2.y, o2.x);
    a5 ? (r2.delete(e3), c6 = { ...c6, row: d2, config: { filter: structuredClone(this._config.filter) } }) : (r2.set(e3, l3), c6 = { ...c6, row: d2, column_names: h4, config: b3 }), await e3.draw({ preserve_width: true }), s3.handled = true, t2.dispatchEvent(new CustomEvent("perspective-select", { bubbles: true, composed: true, detail: c6 }));
  }
}
function we2(e3, t2, r2) {
  if (!t2.hasAttribute("selectable"))
    return;
  let s3 = r2.has(e3), o2 = r2.get(e3);
  for (let l3 of e3.querySelectorAll("td"))
    if (!s3)
      l3.classList.toggle("psp-row-selected", false), l3.classList.toggle("psp-row-subselected", false);
    else {
      let i4 = e3.getMeta(l3), n3 = this._ids[i4.y - i4.y0], a5 = o2.reduce((c6, d2, h4) => c6 && d2 === n3[h4], true);
      l3.classList.toggle("psp-row-selected", n3.length === o2.length && a5), l3.classList.toggle("psp-row-subselected", n3.length !== o2.length && a5);
    }
  for (let l3 of e3.querySelectorAll("tbody th")) {
    let i4 = e3.getMeta(l3), n3 = this._ids[i4.y - i4.y0];
    if (!s3 || !!n3[i4.row_header_x])
      l3.classList.toggle("psp-row-selected", false), l3.classList.toggle("psp-row-subselected", false);
    else {
      let a5 = o2.reduce((c6, d2, h4) => c6 && d2 === n3[h4], true);
      l3.classList.toggle("psp-row-selected", n3.length === o2.length && a5), l3.classList.toggle("psp-row-subselected", n3.length !== o2.length && a5);
    }
  }
}
async function ke2(e3, t2, r2) {
  r2.delete(e3);
  for (let s3 of e3.querySelectorAll("td,th"))
    s3.classList.toggle("psp-row-selected", false), s3.classList.toggle("psp-row-subselected", false);
}
var Le2 = { datetime: Intl.DateTimeFormat, date: Intl.DateTimeFormat, integer: Intl.NumberFormat, float: Intl.NumberFormat, boolean: class {
  format(e3) {
    return e3 ? "check" : "close";
  }
} };
var R3 = class {
  constructor() {
    this._formatters = /* @__PURE__ */ new Map();
  }
  create_datetime_formatter(t2, r2) {
    let s3 = get_type_config(t2), o2 = { ...s3.format, timeZone: r2.timeZone, dateStyle: r2.dateStyle, timeStyle: r2.timeStyle };
    return o2.dateStyle === "disabled" ? o2.dateStyle = void 0 : o2.dateStyle === void 0 && (o2.dateStyle = s3.format.dateStyle), o2.timeStyle === "disabled" ? o2.timeStyle = void 0 : o2.timeStyle === void 0 && (o2.timeStyle = s3.format.timeStyle), new Intl.DateTimeFormat([], o2);
  }
  create_number_formatter(t2, r2) {
    let { format: s3 } = get_type_config(t2);
    return r2.fixed !== void 0 && (s3.minimumFractionDigits = r2.fixed, s3.maximumFractionDigits = r2.fixed), new Le2[t2]([], s3);
  }
  create_boolean_formatter(t2, r2) {
    let s3 = get_type_config(t2);
    return new Le2[t2]([], s3.format);
  }
  get(t2, r2) {
    let s3 = [t2, r2.fixed, r2.timeZone, r2.dateStyle, r2.timeStyle].join("-");
    if (!this._formatters.has(s3)) {
      let o2 = get_type_config(t2);
      t2 === "date" || t2 === "datetime" ? this._formatters.set(s3, this.create_datetime_formatter(t2, r2)) : t2 === "integer" || t2 === "float" ? this._formatters.set(s3, this.create_number_formatter(t2, r2)) : t2 === "boolean" ? this._formatters.set(s3, this.create_boolean_formatter(t2, r2)) : this._formatters.set(s3, false);
    }
    return this._formatters.get(s3);
  }
};
var Ye = new R3();
function I3(e3, t2, r2 = {}, s3 = false) {
  if (t2 === null)
    return "-";
  let o2 = e3[e3.length - 1], l3 = s3 && this._table_schema[o2] || this._schema[o2] || "string", i4 = r2[o2] || {};
  if ((l3 === "integer" || l3 === "float") && i4?.number_fg_mode === "bar") {
    let a5 = Math.max(0, Math.min(0.95, Math.abs(t2 / i4.fg_gradient) * 0.95)), c6 = this._div_factory.get(), d2 = t2 >= 0 ? "left" : "right";
    return c6.setAttribute("style", `width:${(a5 * 100).toFixed(2)}%;position:absolute;${d2}:0;height:80%;top:10%;pointer-events:none;`), c6;
  } else if (i4?.format === "link" && l3 === "string") {
    let a5 = document.createElement("a");
    return a5.setAttribute("href", t2), a5.setAttribute("target", "_blank"), a5.textContent = t2, a5;
  } else if (i4?.format === "bold" && l3 === "string") {
    let a5 = document.createElement("b");
    return a5.textContent = t2, a5;
  } else if (i4?.format === "italics" && l3 === "string") {
    let a5 = document.createElement("i");
    return a5.textContent = t2, a5;
  } else {
    let a5 = Ye.get(l3, i4);
    return a5 ? a5.format(t2) : t2;
  }
}
function* Ee2(e3 = [], t2, r2) {
  let s3 = r2[v3];
  for (let o2 of e3) {
    o2 = ["TOTAL", ...o2];
    let l3 = o2[o2.length - 1];
    o2 = o2.slice(0, o2.length - 1).fill("");
    let i4 = I3.call(this, [t2[o2.length - 1]], l3, s3, true);
    i4 instanceof HTMLElement ? o2 = o2.concat(i4) : o2 = o2.concat({ toString: () => i4 }), o2.length = t2.length + 1, yield o2;
  }
}
function Se() {
  let e3, t2, r2, s3, o2;
  return async function(i4, n3, a5, c6, d2) {
    let h4 = {}, b3;
    c6 - n3 > 0 && d2 - a5 > 0 ? (this._is_old_viewport = this._last_window?.start_row === a5 && this._last_window?.end_row === d2 && this._last_window?.start_col === n3 && this._last_window?.end_col === c6, b3 = { start_row: a5, start_col: n3, end_row: d2, end_col: c6, id: true }, h4 = await this._view.to_columns(b3), this._last_window = b3, this._ids = h4.__ID__, this._reverse_columns = this._column_paths.slice(n3, c6).reduce((u3, f4, x4) => (u3.set(f4, x4), u3), /* @__PURE__ */ new Map()), this._reverse_ids = this._ids.reduce((u3, f4, x4) => (u3.set(f4?.join("|"), x4), u3), /* @__PURE__ */ new Map())) : this._div_factory.clear();
    let p2 = [], g3 = [], _4 = [], y3 = [];
    for (let u3 = n3; u3 < Math.min(c6, this._column_paths.length); ++u3) {
      let f4 = this._column_paths[u3], x4 = f4.split("|"), w4 = h4[f4] || new Array(d2 - a5).fill(null);
      p2.push(w4.map((S3) => I3.call(this, x4, S3, i4[v3]))), g3.push(w4), _4.push(x4), y3.push(f4);
    }
    return c6 - n3 > 0 && d2 - a5 > 0 && (this.last_column_paths = t2, this.last_meta = e3, this.last_ids = r2, this.last_reverse_ids = s3, this.last_reverse_columns = o2, t2 = y3, e3 = g3, r2 = this._ids, s3 = this._reverse_ids, o2 = this._reverse_columns), { num_rows: this._num_rows, num_columns: this._column_paths.length, row_headers: Array.from(Ee2.call(this, h4.__ROW_PATH__, this._config.group_by, i4)), column_headers: _4, data: p2, metadata: g3 };
  };
}
function N3(e3, t2, r2) {
  let s3 = window.getComputedStyle(e3).getPropertyValue(t2).trim();
  return s3.length > 0 ? s3 : r2;
}
var V3 = class {
  constructor(t2) {
    this._name = t2, this._elements = [], this._index = 0;
  }
  clear() {
    this._index = 0;
  }
  get() {
    this._elements[this._index] || (this._elements[this._index] = document.createElement(this._name));
    let t2 = this._elements[this._index];
    return this._index += 1, t2;
  }
};
function We(e3) {
  return e3.x >= 0 ? this._column_types[e3.x] : this._row_header_types[e3.row_header_x - 1];
}
async function W3(e3, t2, r2, s3 = {}) {
  let o2 = await r2.get_config(), l3 = o2.expressions.map((k4) => k4[1]), [i4, n3, a5, c6, d2, h4, b3] = await Promise.all([t2.schema(), t2.validate_expressions(l3), r2.num_rows(), r2.schema(), r2.expression_schema(), r2.column_paths(), this.parentElement.getEditPort()]), p2 = (0, import_chroma_js4.default)(N3(e3, "--plugin--background", "#FFFFFF")).rgb(), g3 = m3(N3(e3, "--rt-pos-cell--color", "#338DCD")), _4 = m3(N3(e3, "--rt-neg-cell--color", "#FF5942")), y3 = m3(T2(g3[0], p2)), u3 = m3(T2(_4[0], p2)), f4 = m3(N3(e3, "--active--color", "#ff0000")), x4 = { ...c6, ...d2 }, w4 = { ...i4, ...n3.expression_schema }, S3 = h4.filter((k4) => k4 !== "__ROW_PATH__" && k4 !== "__ID__"), q4 = [], U4 = [];
  for (let k4 of S3) {
    let G4 = k4.split("|"), J4 = G4[G4.length - 1];
    U4.push(x4[J4]), q4.push(!!i4[J4]);
  }
  let z3 = Object.assign(s3, { _edit_port: b3, _view: r2, _table: t2, _table_schema: w4, _config: o2, _num_rows: a5, _schema: x4, _ids: [], _open_column_styles_menu: [], _plugin_background: p2, _color: f4, _pos_fg_color: g3, _neg_fg_color: _4, _pos_bg_color: y3, _neg_bg_color: u3, _column_paths: S3, _column_types: U4, _is_editable: q4, _row_header_types: o2.group_by.map((k4) => w4[k4]), _series_color_map: /* @__PURE__ */ new Map(), _series_color_seed: /* @__PURE__ */ new Map(), get_psp_type: We });
  return z3._div_factory = z3._div_factory || new V3("div"), e3.setDataListener(Se().bind(z3, e3), { virtual_mode: window.getComputedStyle(e3).getPropertyValue("--datagrid-virtual-mode")?.trim() || "both" }), z3;
}
async function Ce2(e3, t2, r2) {
  let s3 = e3.getMeta(r2.target);
  if (!s3)
    return;
  let { x: o2, y: l3 } = s3, { row: i4, column_names: n3, config: a5 } = await M3(this, l3, o2);
  t2.dispatchEvent(new CustomEvent("perspective-click", { bubbles: true, composed: true, detail: { row: i4, column_names: n3, config: a5 } }));
}
async function Me2(e3) {
  let t2 = this.parentElement, r2 = await t2.getTable(true);
  if (this._initialized)
    await W3.call(this, this.regular_table, r2, e3, this.model);
  else {
    this.innerHTML = "", this.appendChild(this.regular_table), this.model = await W3.call(this, this.regular_table, r2, e3), this.regular_table.addStyleListener(ne3.bind(this.model, this.regular_table)), this.regular_table.addStyleListener(Z3.bind(this.model, this.regular_table)), this.regular_table.addStyleListener(X3.bind(this.model, this.regular_table)), this.regular_table.addEventListener("click", _e2.bind(this.model, this.regular_table)), this.regular_table.addEventListener("mousedown", pe2.bind(this.model, this.regular_table));
    let s3 = /* @__PURE__ */ new WeakMap();
    this.regular_table.addStyleListener(we2.bind(this.model, this.regular_table, t2, s3)), this.regular_table.addEventListener("mousedown", ve2.bind(this.model, this.regular_table, t2, s3)), this.regular_table.addEventListener("psp-deselect-all", ke2.bind(this.model, this.regular_table, t2, s3)), this.regular_table.addEventListener("click", Ce2.bind(this.model, this.regular_table, t2));
    let o2 = /* @__PURE__ */ new WeakMap();
    this.regular_table.addStyleListener(he2.bind(this.model, this.regular_table, t2)), this.regular_table.addStyleListener(A3.bind(this.model, this.regular_table, t2, o2)), this.regular_table.addEventListener("click", me2.bind(this.model, this.regular_table, t2)), this.regular_table.addEventListener("focusin", xe2.bind(this.model, this.regular_table, t2, o2)), this.regular_table.addEventListener("focusout", ye2.bind(this.model, this.regular_table, t2, o2)), this.regular_table.addEventListener("keydown", fe2.bind(this.model, this.regular_table, t2, o2)), this._initialized = true;
  }
}
function D3(e3, t2 = false) {
  if (!this._initialized)
    return;
  t2 && (this._cached_column_sizes = e3);
  let r2 = {}, { group_by: s3, columns: o2 } = this.model._config, l3 = s3?.length > 0 ? s3.length + 1 : 0;
  for (let i4 of Object.keys(e3))
    if (i4 === "__ROW_PATH__")
      r2[l3 - 1] = e3[i4];
    else {
      let n3 = this.model._column_paths.indexOf(i4);
      r2[n3 + l3] = e3[i4];
    }
  this.regular_table._column_sizes.override = r2;
}
function $3() {
  if (!this._initialized)
    return [];
  if (this._cached_column_sizes) {
    let l3 = this._cached_column_sizes;
    return this._cached_column_sizes = void 0, l3;
  }
  let e3 = this.regular_table._column_sizes.override, { group_by: t2, columns: r2 } = this.model._config, s3 = t2?.length > 0 ? t2.length + 1 : 0, o2 = {};
  for (let l3 of Object.keys(e3))
    if (e3[l3] !== void 0) {
      let i4 = l3 - s3;
      i4 > -1 ? o2[this.model._column_paths[i4]] = e3[l3] : i4 === -1 && (o2.__ROW_PATH__ = e3[l3]);
    }
  return o2;
}
function F3(e3 = void 0) {
  typeof e3 > "u" && (e3 = !this._is_edit_mode), this._is_edit_mode = e3, this.classList.toggle("editable", e3), this._edit_mode !== void 0 && (this._edit_mode.classList.toggle("editable", e3), e3 ? this._edit_mode.children[0].textContent = "Editable" : this._edit_mode.children[0].textContent = "Read Only");
}
function H3(e3 = void 0) {
  typeof e3 > "u" && (e3 = !this._is_scroll_lock), this._is_scroll_lock = e3, this.classList.toggle("sub-cell-scroll-disabled", !e3), this._scroll_lock !== void 0 && (this._scroll_lock.classList.toggle("lock-scroll", e3), e3 ? this._scroll_lock.children[0].textContent = "Align Scroll" : this._scroll_lock.children[0].textContent = "Free Scroll");
}
function ze2(e3) {
  e3 = JSON.parse(JSON.stringify(e3));
  let t2 = {};
  if (e3.columns)
    for (let s3 of Object.keys(e3.columns)) {
      let o2 = e3.columns[s3];
      o2.column_size_override !== void 0 && (t2[s3] = o2.column_size_override, delete o2.column_size_override), o2?.pos_fg_color && (o2.pos_fg_color = m3(o2.pos_fg_color), o2.neg_fg_color = m3(o2.neg_fg_color)), o2?.pos_bg_color && (o2.pos_bg_color = m3(o2.pos_bg_color), o2.neg_bg_color = m3(o2.neg_bg_color)), o2?.color && (o2.color = m3(o2.color)), Object.keys(o2).length === 0 && delete e3.columns[s3];
    }
  "editable" in e3 && F3.call(this, e3.editable), "scroll_lock" in e3 && H3.call(this, e3.scroll_lock);
  let r2 = this.regular_table;
  try {
    r2._resetAutoSize();
  } catch {
  }
  D3.call(this, t2, true), r2[v3] = e3.columns;
}
function Ae2() {
  this._toolbar || (this._toolbar = document.createElement("perspective-viewer-datagrid-toolbar")), this.parentElement.appendChild(this._toolbar);
}
function Oe2() {
  if (this.regular_table) {
    let e3 = this.regular_table, t2 = { columns: {}, scroll_lock: !!this._is_scroll_lock, editable: !!this._is_edit_mode };
    for (let s3 of Object.keys(e3[v3] || {})) {
      let o2 = Object.assign({}, e3[v3][s3]);
      (o2?.pos_fg_color || o2?.pos_bg_color) && (o2.pos_fg_color = o2.pos_fg_color?.[0], o2.neg_fg_color = o2.neg_fg_color?.[0], o2.pos_bg_color = o2.pos_bg_color?.[0], o2.neg_bg_color = o2.neg_bg_color?.[0]), o2?.color && (o2.color = o2.color[0]), t2.columns[s3] = o2;
    }
    let r2 = $3.call(this);
    for (let s3 of Object.keys(r2 || {}))
      t2.columns[s3] || (t2.columns[s3] = {}), t2.columns[s3].column_size_override = r2[s3];
    return JSON.parse(JSON.stringify(t2));
  }
  return {};
}
async function Pe2(e3) {
  if (this.parentElement && await this.activate(e3), !this.isConnected || this.offsetParent == null)
    return;
  let t2 = $3.call(this), r2 = this.regular_table.draw({ invalid_columns: true });
  this.model._preserve_focus_state ? this.model._preserve_focus_state = false : (this.regular_table.scrollTop = 0, this.regular_table.scrollLeft = 0, this.regular_table.dispatchEvent(new CustomEvent("psp-deselect-all", { bubbles: false })), this.regular_table._resetAutoSize()), D3.call(this, t2), await r2, this._toolbar.classList.toggle("aggregated", this.model._config.group_by.length > 0 || this.model._config.split_by.length > 0);
}
var j3 = class extends HTMLElement {
  constructor() {
    super(), this.regular_table = document.createElement("regular-table"), this._is_scroll_lock = false;
  }
  connectedCallback() {
    return Ae2.call(this);
  }
  disconnectedCallback() {
    this._toolbar.parentElement.removeChild(this._toolbar);
  }
  async activate(t2) {
    return await Me2.call(this, t2);
  }
  get name() {
    return "Datagrid";
  }
  get category() {
    return "Basic";
  }
  get select_mode() {
    return "toggle";
  }
  get min_config_columns() {
  }
  get config_column_names() {
    return ["Columns"];
  }
  get priority() {
    return 1;
  }
  async draw(t2) {
    return await Pe2.call(this, t2);
  }
  async update(t2) {
    this.model._num_rows = await t2.num_rows(), await this.regular_table.draw();
  }
  async resize() {
    !this.isConnected || this.offsetParent == null || this._initialized && await this.regular_table.draw();
  }
  async clear() {
    this.regular_table._resetAutoSize(), this.regular_table.clear();
  }
  save() {
    return Oe2.call(this);
  }
  restore(t2) {
    return ze2.call(this, t2);
  }
  async restyle(t2) {
    await this.draw(t2);
  }
  delete() {
    this.regular_table.table_model && this.regular_table._resetAutoSize(), this.regular_table.clear();
  }
};
var Re = ':host{position:relative;display:block;}:host #container{position:absolute;display:flex;flex-direction:column;justify-content:stretch;align-items:stretch;top:0;left:0;right:0;bottom:0;}:host #toolbar{display:flex;align-items:center;height:36px;}:host #slot-container{flex:1;position:relative;}#scroll_lock.lock-scroll:before{-webkit-mask-image:var(--toolbar-scroll-lock-active--content);}#scroll_lock:before{-webkit-mask-image:var(--toolbar-scroll-lock--content);}#select_mode:before{content:"highlight_alt";}#edit_mode:before{-webkit-mask-image:var(--toolbar-edit-mode--content);}#edit_mode.editable:before{-webkit-mask-image:var(--toolbar-edit-mode-active--content);}:host(.aggregated) #toolbar #edit_mode{display:none;}.button:before{width:21px;height:21px;content:"";-webkit-mask-image:cover;mask-image:cover;background-color:var(--icon--color,#ccc);margin-left:9.5px;}.button.editable:before,.button.lock-scroll:before{color:inherit;}.button{display:inline-flex;align-items:center;user-select:none;width:42px;height:36px;box-sizing:border-box;white-space:nowrap;border:1px solid transparent;border-radius:2px;}.button>span{display:none;margin:0;padding:0;}.button:hover{opacity:1;display:flex;align-items:center;color:inherit;cursor:pointer;min-width:var(--button--min-width,105px);border:1px solid var(--inactive--color,#8b868045);}.button:hover:before{margin:0 6px 0 9.5px;}.button:hover>span{display:contents;font-size:9px;line-height:36px;}';
var B3 = class extends HTMLElement {
  connectedCallback() {
    if (this._initialized)
      return;
    this._initialized = true, this.setAttribute("slot", "plugin-settings"), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = `
            <style>
                ${Re}
            </style>
            <div id="toolbar">
                <span id="scroll_lock" class="button">
                    <span>Free Scroll</span>
                </span>
                <span id="edit_mode" class="button"><span>Read Only</span></span>
            </div>
        `;
    let t2 = this.parentElement, r2 = t2.querySelector("perspective-viewer-datagrid");
    r2._scroll_lock = this.shadowRoot.querySelector("#scroll_lock"), r2._scroll_lock.addEventListener("click", () => H3.call(r2)), r2._edit_mode = this.shadowRoot.querySelector("#edit_mode"), r2._edit_mode.addEventListener("click", () => {
      F3.call(r2), r2.regular_table.draw(), t2.dispatchEvent(new Event("perspective-config-update"));
    });
  }
};
function Ue() {
  let e3 = document.createElement("style");
  e3.textContent = K3, document.head.insertBefore(e3, document.head.firstChild);
}
async function Ge2() {
  customElements.define("perspective-viewer-datagrid-toolbar", B3), customElements.define("perspective-viewer-datagrid", j3), await customElements.whenDefined("perspective-viewer"), customElements.get("perspective-viewer").registerPlugin("perspective-viewer-datagrid");
}
Ge2();
Ue();

// ../../packages/perspective-viewer-d3fc/dist/esm/perspective-viewer-d3fc.js
var Jr = __toESM(require_d3fc());
var ue3 = __toESM(require_d3fc());

// ../../packages/perspective-viewer-d3fc/node_modules/d3/node_modules/d3-array/src/range.js
function range3(start2, stop, step) {
  start2 = +start2, stop = +stop, step = (n3 = arguments.length) < 2 ? (stop = start2, start2 = 0, 1) : n3 < 3 ? 1 : +step;
  var i4 = -1, n3 = Math.max(0, Math.ceil((stop - start2) / step)) | 0, range4 = new Array(n3);
  while (++i4 < n3) {
    range4[i4] = start2 + i4 * step;
  }
  return range4;
}

// ../../packages/perspective-viewer-d3fc/node_modules/d3/src/index.js
init_src23();
init_src4();
init_src18();
init_src19();
init_src12();
init_src21();
init_src13();
init_src6();

// ../../node_modules/d3-hierarchy/src/hierarchy/count.js
function count2(node) {
  var sum3 = 0, children2 = node.children, i4 = children2 && children2.length;
  if (!i4)
    sum3 = 1;
  else
    while (--i4 >= 0)
      sum3 += children2[i4].value;
  node.value = sum3;
}
function count_default() {
  return this.eachAfter(count2);
}

// ../../node_modules/d3-hierarchy/src/hierarchy/each.js
function each_default2(callback, that) {
  let index2 = -1;
  for (const node of this) {
    callback.call(that, node, ++index2, this);
  }
  return this;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js
function eachBefore_default(callback, that) {
  var node = this, nodes = [node], children2, i4, index2 = -1;
  while (node = nodes.pop()) {
    callback.call(that, node, ++index2, this);
    if (children2 = node.children) {
      for (i4 = children2.length - 1; i4 >= 0; --i4) {
        nodes.push(children2[i4]);
      }
    }
  }
  return this;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js
function eachAfter_default(callback, that) {
  var node = this, nodes = [node], next = [], children2, i4, n3, index2 = -1;
  while (node = nodes.pop()) {
    next.push(node);
    if (children2 = node.children) {
      for (i4 = 0, n3 = children2.length; i4 < n3; ++i4) {
        nodes.push(children2[i4]);
      }
    }
  }
  while (node = next.pop()) {
    callback.call(that, node, ++index2, this);
  }
  return this;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/find.js
function find_default(callback, that) {
  let index2 = -1;
  for (const node of this) {
    if (callback.call(that, node, ++index2, this)) {
      return node;
    }
  }
}

// ../../node_modules/d3-hierarchy/src/hierarchy/sum.js
function sum_default(value) {
  return this.eachAfter(function(node) {
    var sum3 = +value(node.data) || 0, children2 = node.children, i4 = children2 && children2.length;
    while (--i4 >= 0)
      sum3 += children2[i4].value;
    node.value = sum3;
  });
}

// ../../node_modules/d3-hierarchy/src/hierarchy/sort.js
function sort_default2(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}

// ../../node_modules/d3-hierarchy/src/hierarchy/path.js
function path_default2(end) {
  var start2 = this, ancestor = leastCommonAncestor(start2, end), nodes = [start2];
  while (start2 !== ancestor) {
    start2 = start2.parent;
    nodes.push(start2);
  }
  var k4 = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k4, 0, end);
    end = end.parent;
  }
  return nodes;
}
function leastCommonAncestor(a5, b3) {
  if (a5 === b3)
    return a5;
  var aNodes = a5.ancestors(), bNodes = b3.ancestors(), c6 = null;
  a5 = aNodes.pop();
  b3 = bNodes.pop();
  while (a5 === b3) {
    c6 = a5;
    a5 = aNodes.pop();
    b3 = bNodes.pop();
  }
  return c6;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/ancestors.js
function ancestors_default() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/descendants.js
function descendants_default() {
  return Array.from(this);
}

// ../../node_modules/d3-hierarchy/src/hierarchy/leaves.js
function leaves_default() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/links.js
function links_default() {
  var root3 = this, links = [];
  root3.each(function(node) {
    if (node !== root3) {
      links.push({ source: node.parent, target: node });
    }
  });
  return links;
}

// ../../node_modules/d3-hierarchy/src/hierarchy/iterator.js
function* iterator_default2() {
  var node = this, current, next = [node], children2, i4, n3;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      yield node;
      if (children2 = node.children) {
        for (i4 = 0, n3 = children2.length; i4 < n3; ++i4) {
          next.push(children2[i4]);
        }
      }
    }
  } while (next.length);
}

// ../../node_modules/d3-hierarchy/src/hierarchy/index.js
function hierarchy(data, children2) {
  if (data instanceof Map) {
    data = [void 0, data];
    if (children2 === void 0)
      children2 = mapChildren;
  } else if (children2 === void 0) {
    children2 = objectChildren;
  }
  var root3 = new Node2(data), node, nodes = [root3], child, childs, i4, n3;
  while (node = nodes.pop()) {
    if ((childs = children2(node.data)) && (n3 = (childs = Array.from(childs)).length)) {
      node.children = childs;
      for (i4 = n3 - 1; i4 >= 0; --i4) {
        nodes.push(child = childs[i4] = new Node2(childs[i4]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }
  return root3.eachBefore(computeHeight);
}
function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}
function objectChildren(d2) {
  return d2.children;
}
function mapChildren(d2) {
  return Array.isArray(d2) ? d2[1] : null;
}
function copyData(node) {
  if (node.data.value !== void 0)
    node.value = node.data.value;
  node.data = node.data.data;
}
function computeHeight(node) {
  var height = 0;
  do
    node.height = height;
  while ((node = node.parent) && node.height < ++height);
}
function Node2(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}
Node2.prototype = hierarchy.prototype = {
  constructor: Node2,
  count: count_default,
  each: each_default2,
  eachAfter: eachAfter_default,
  eachBefore: eachBefore_default,
  find: find_default,
  sum: sum_default,
  sort: sort_default2,
  path: path_default2,
  ancestors: ancestors_default,
  descendants: descendants_default,
  leaves: leaves_default,
  links: links_default,
  copy: node_copy,
  [Symbol.iterator]: iterator_default2
};

// ../../node_modules/d3-hierarchy/src/accessors.js
function required(f4) {
  if (typeof f4 !== "function")
    throw new Error();
  return f4;
}

// ../../node_modules/d3-hierarchy/src/constant.js
function constantZero() {
  return 0;
}
function constant_default7(x4) {
  return function() {
    return x4;
  };
}

// ../../node_modules/d3-hierarchy/src/treemap/round.js
function round_default2(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}

// ../../node_modules/d3-hierarchy/src/treemap/dice.js
function dice_default(parent, x0, y0, x1, y1) {
  var nodes = parent.children, node, i4 = -1, n3 = nodes.length, k4 = parent.value && (x1 - x0) / parent.value;
  while (++i4 < n3) {
    node = nodes[i4], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k4;
  }
}

// ../../node_modules/d3-hierarchy/src/partition.js
function partition_default() {
  var dx = 1, dy = 1, padding = 0, round = false;
  function partition(root3) {
    var n3 = root3.height + 1;
    root3.x0 = root3.y0 = padding;
    root3.x1 = dx;
    root3.y1 = dy / n3;
    root3.eachBefore(positionNode(dy, n3));
    if (round)
      root3.eachBefore(round_default2);
    return root3;
  }
  function positionNode(dy2, n3) {
    return function(node) {
      if (node.children) {
        dice_default(node, node.x0, dy2 * (node.depth + 1) / n3, node.x1, dy2 * (node.depth + 2) / n3);
      }
      var x0 = node.x0, y0 = node.y0, x1 = node.x1 - padding, y1 = node.y1 - padding;
      if (x1 < x0)
        x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0)
        y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }
  partition.round = function(x4) {
    return arguments.length ? (round = !!x4, partition) : round;
  };
  partition.size = function(x4) {
    return arguments.length ? (dx = +x4[0], dy = +x4[1], partition) : [dx, dy];
  };
  partition.padding = function(x4) {
    return arguments.length ? (padding = +x4, partition) : padding;
  };
  return partition;
}

// ../../node_modules/d3-hierarchy/src/treemap/slice.js
function slice_default(parent, x0, y0, x1, y1) {
  var nodes = parent.children, node, i4 = -1, n3 = nodes.length, k4 = parent.value && (y1 - y0) / parent.value;
  while (++i4 < n3) {
    node = nodes[i4], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k4;
  }
}

// ../../node_modules/d3-hierarchy/src/treemap/squarify.js
var phi = (1 + Math.sqrt(5)) / 2;
function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n3 = nodes.length, dx, dy, value = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
  while (i0 < n3) {
    dx = x1 - x0, dy = y1 - y0;
    do
      sumValue = nodes[i1++].value;
    while (!sumValue && i1 < n3);
    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue);
    for (; i1 < n3; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue)
        minValue = nodeValue;
      if (nodeValue > maxValue)
        maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);
      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }
      minRatio = newRatio;
    }
    rows.push(row = { value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1) });
    if (row.dice)
      dice_default(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
    else
      slice_default(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }
  return rows;
}
var squarify_default = function custom8(ratio) {
  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }
  squarify.ratio = function(x4) {
    return custom8((x4 = +x4) > 1 ? x4 : 1);
  };
  return squarify;
}(phi);

// ../../node_modules/d3-hierarchy/src/treemap/index.js
function treemap_default() {
  var tile = squarify_default, round = false, dx = 1, dy = 1, paddingStack = [0], paddingInner = constantZero, paddingTop = constantZero, paddingRight = constantZero, paddingBottom = constantZero, paddingLeft = constantZero;
  function treemap(root3) {
    root3.x0 = root3.y0 = 0;
    root3.x1 = dx;
    root3.y1 = dy;
    root3.eachBefore(positionNode);
    paddingStack = [0];
    if (round)
      root3.eachBefore(round_default2);
    return root3;
  }
  function positionNode(node) {
    var p2 = paddingStack[node.depth], x0 = node.x0 + p2, y0 = node.y0 + p2, x1 = node.x1 - p2, y1 = node.y1 - p2;
    if (x1 < x0)
      x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0)
      y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;
    if (node.children) {
      p2 = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p2;
      y0 += paddingTop(node) - p2;
      x1 -= paddingRight(node) - p2;
      y1 -= paddingBottom(node) - p2;
      if (x1 < x0)
        x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0)
        y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }
  treemap.round = function(x4) {
    return arguments.length ? (round = !!x4, treemap) : round;
  };
  treemap.size = function(x4) {
    return arguments.length ? (dx = +x4[0], dy = +x4[1], treemap) : [dx, dy];
  };
  treemap.tile = function(x4) {
    return arguments.length ? (tile = required(x4), treemap) : tile;
  };
  treemap.padding = function(x4) {
    return arguments.length ? treemap.paddingInner(x4).paddingOuter(x4) : treemap.paddingInner();
  };
  treemap.paddingInner = function(x4) {
    return arguments.length ? (paddingInner = typeof x4 === "function" ? x4 : constant_default7(+x4), treemap) : paddingInner;
  };
  treemap.paddingOuter = function(x4) {
    return arguments.length ? treemap.paddingTop(x4).paddingRight(x4).paddingBottom(x4).paddingLeft(x4) : treemap.paddingTop();
  };
  treemap.paddingTop = function(x4) {
    return arguments.length ? (paddingTop = typeof x4 === "function" ? x4 : constant_default7(+x4), treemap) : paddingTop;
  };
  treemap.paddingRight = function(x4) {
    return arguments.length ? (paddingRight = typeof x4 === "function" ? x4 : constant_default7(+x4), treemap) : paddingRight;
  };
  treemap.paddingBottom = function(x4) {
    return arguments.length ? (paddingBottom = typeof x4 === "function" ? x4 : constant_default7(+x4), treemap) : paddingBottom;
  };
  treemap.paddingLeft = function(x4) {
    return arguments.length ? (paddingLeft = typeof x4 === "function" ? x4 : constant_default7(+x4), treemap) : paddingLeft;
  };
  return treemap;
}

// ../../node_modules/d3-hierarchy/src/treemap/binary.js
function binary_default(parent, x0, y0, x1, y1) {
  var nodes = parent.children, i4, n3 = nodes.length, sum3, sums = new Array(n3 + 1);
  for (sums[0] = sum3 = i4 = 0; i4 < n3; ++i4) {
    sums[i4 + 1] = sum3 += nodes[i4].value;
  }
  partition(0, n3, parent.value, x0, y0, x1, y1);
  function partition(i5, j4, value, x02, y02, x12, y12) {
    if (i5 >= j4 - 1) {
      var node = nodes[i5];
      node.x0 = x02, node.y0 = y02;
      node.x1 = x12, node.y1 = y12;
      return;
    }
    var valueOffset = sums[i5], valueTarget = value / 2 + valueOffset, k4 = i5 + 1, hi = j4 - 1;
    while (k4 < hi) {
      var mid = k4 + hi >>> 1;
      if (sums[mid] < valueTarget)
        k4 = mid + 1;
      else
        hi = mid;
    }
    if (valueTarget - sums[k4 - 1] < sums[k4] - valueTarget && i5 + 1 < k4)
      --k4;
    var valueLeft = sums[k4] - valueOffset, valueRight = value - valueLeft;
    if (x12 - x02 > y12 - y02) {
      var xk = value ? (x02 * valueRight + x12 * valueLeft) / value : x12;
      partition(i5, k4, valueLeft, x02, y02, xk, y12);
      partition(k4, j4, valueRight, xk, y02, x12, y12);
    } else {
      var yk = value ? (y02 * valueRight + y12 * valueLeft) / value : y12;
      partition(i5, k4, valueLeft, x02, y02, x12, yk);
      partition(k4, j4, valueRight, x02, yk, x12, y12);
    }
  }
}

// ../../packages/perspective-viewer-d3fc/node_modules/d3/src/index.js
init_src5();
init_src14();
init_src11();
init_src10();
init_src17();
init_src15();
init_src16();
init_src8();
init_src9();
init_src20();
init_src22();
init_src24();

// ../../packages/perspective-viewer-d3fc/dist/esm/perspective-viewer-d3fc.js
var import_d3fc = __toESM(require_d3fc());
var import_d3fc2 = __toESM(require_d3fc());
var X5 = __toESM(require_d3fc());
init_src2();
var Oe3 = __toESM(require_d3fc());
var ce3 = __toESM(require_d3fc());
var import_d3fc3 = __toESM(require_d3fc());
var Ve2 = __toESM(require_d3fc());
var ne4 = __toESM(require_d3fc());
var import_d3fc4 = __toESM(require_d3fc());

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/namespaces.js
var xhtml2 = "http://www.w3.org/1999/xhtml";
var namespaces_default2 = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml2,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/namespace.js
function namespace_default2(name) {
  var prefix2 = name += "", i4 = prefix2.indexOf(":");
  if (i4 >= 0 && (prefix2 = name.slice(0, i4)) !== "xmlns")
    name = name.slice(i4 + 1);
  return namespaces_default2.hasOwnProperty(prefix2) ? { space: namespaces_default2[prefix2], local: name } : name;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/creator.js
function creatorInherit2(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml2 && document2.documentElement.namespaceURI === xhtml2 ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed2(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default2(name) {
  var fullname = namespace_default2(name);
  return (fullname.local ? creatorFixed2 : creatorInherit2)(fullname);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/local.js
var nextId2 = 0;
function local3() {
  return new Local2();
}
function Local2() {
  this._ = "@" + (++nextId2).toString(36);
}
Local2.prototype = local3.prototype = {
  constructor: Local2,
  get: function(node) {
    var id2 = this._;
    while (!(id2 in node))
      if (!(node = node.parentNode))
        return;
    return node[id2];
  },
  set: function(node, value) {
    return node[this._] = value;
  },
  remove: function(node) {
    return this._ in node && delete node[this._];
  },
  toString: function() {
    return this._;
  }
};

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/matcher.js
var matcher = function(selector) {
  return function() {
    return this.matches(selector);
  };
};
if (typeof document !== "undefined") {
  element = document.documentElement;
  if (!element.matches) {
    vendorMatches = element.webkitMatchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector;
    matcher = function(selector) {
      return function() {
        return vendorMatches.call(this, selector);
      };
    };
  }
}
var element;
var vendorMatches;
var matcher_default2 = matcher;

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/on.js
var filterEvents = {};
var event = null;
if (typeof document !== "undefined") {
  element = document.documentElement;
  if (!("onmouseenter" in element)) {
    filterEvents = { mouseenter: "mouseover", mouseleave: "mouseout" };
  }
}
var element;
function filterContextListener(listener, index2, group2) {
  listener = contextListener2(listener, index2, group2);
  return function(event2) {
    var related = event2.relatedTarget;
    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
      listener.call(this, event2);
    }
  };
}
function contextListener2(listener, index2, group2) {
  return function(event1) {
    var event0 = event;
    event = event1;
    try {
      listener.call(this, this.__data__, index2, group2);
    } finally {
      event = event0;
    }
  };
}
function parseTypenames3(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t2) {
    var name = "", i4 = t2.indexOf(".");
    if (i4 >= 0)
      name = t2.slice(i4 + 1), t2 = t2.slice(0, i4);
    return { type: t2, name };
  });
}
function onRemove2(typename) {
  return function() {
    var on2 = this.__on;
    if (!on2)
      return;
    for (var j4 = 0, i4 = -1, m4 = on2.length, o2; j4 < m4; ++j4) {
      if (o2 = on2[j4], (!typename.type || o2.type === typename.type) && o2.name === typename.name) {
        this.removeEventListener(o2.type, o2.listener, o2.capture);
      } else {
        on2[++i4] = o2;
      }
    }
    if (++i4)
      on2.length = i4;
    else
      delete this.__on;
  };
}
function onAdd2(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener2;
  return function(d2, i4, group2) {
    var on2 = this.__on, o2, listener = wrap(value, i4, group2);
    if (on2)
      for (var j4 = 0, m4 = on2.length; j4 < m4; ++j4) {
        if ((o2 = on2[j4]).type === typename.type && o2.name === typename.name) {
          this.removeEventListener(o2.type, o2.listener, o2.capture);
          this.addEventListener(o2.type, o2.listener = listener, o2.capture = capture);
          o2.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, capture);
    o2 = { type: typename.type, name: typename.name, value, listener, capture };
    if (!on2)
      this.__on = [o2];
    else
      on2.push(o2);
  };
}
function on_default3(typename, value, capture) {
  var typenames = parseTypenames3(typename + ""), i4, n3 = typenames.length, t2;
  if (arguments.length < 2) {
    var on2 = this.node().__on;
    if (on2)
      for (var j4 = 0, m4 = on2.length, o2; j4 < m4; ++j4) {
        for (i4 = 0, o2 = on2[j4]; i4 < n3; ++i4) {
          if ((t2 = typenames[i4]).type === o2.type && t2.name === o2.name) {
            return o2.value;
          }
        }
      }
    return;
  }
  on2 = value ? onAdd2 : onRemove2;
  if (capture == null)
    capture = false;
  for (i4 = 0; i4 < n3; ++i4)
    this.each(on2(typenames[i4], value, capture));
  return this;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selector.js
function none2() {
}
function selector_default2(selector) {
  return selector == null ? none2 : function() {
    return this.querySelector(selector);
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/select.js
function select_default4(select) {
  if (typeof select !== "function")
    select = selector_default2(select);
  for (var groups2 = this._groups, m4 = groups2.length, subgroups = new Array(m4), j4 = 0; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], n3 = group2.length, subgroup = subgroups[j4] = new Array(n3), node, subnode, i4 = 0; i4 < n3; ++i4) {
      if ((node = group2[i4]) && (subnode = select.call(node, node.__data__, i4, group2))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i4] = subnode;
      }
    }
  }
  return new Selection3(subgroups, this._parents);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selectorAll.js
function empty4() {
  return [];
}
function selectorAll_default2(selector) {
  return selector == null ? empty4 : function() {
    return this.querySelectorAll(selector);
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/selectAll.js
function selectAll_default4(select) {
  if (typeof select !== "function")
    select = selectorAll_default2(select);
  for (var groups2 = this._groups, m4 = groups2.length, subgroups = [], parents = [], j4 = 0; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], n3 = group2.length, node, i4 = 0; i4 < n3; ++i4) {
      if (node = group2[i4]) {
        subgroups.push(select.call(node, node.__data__, i4, group2));
        parents.push(node);
      }
    }
  }
  return new Selection3(subgroups, parents);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/filter.js
function filter_default3(match) {
  if (typeof match !== "function")
    match = matcher_default2(match);
  for (var groups2 = this._groups, m4 = groups2.length, subgroups = new Array(m4), j4 = 0; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], n3 = group2.length, subgroup = subgroups[j4] = [], node, i4 = 0; i4 < n3; ++i4) {
      if ((node = group2[i4]) && match.call(node, node.__data__, i4, group2)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection3(subgroups, this._parents);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/sparse.js
function sparse_default2(update) {
  return new Array(update.length);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/enter.js
function enter_default2() {
  return new Selection3(this._enter || this._groups.map(sparse_default2), this._parents);
}
function EnterNode2(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
EnterNode2.prototype = {
  constructor: EnterNode2,
  appendChild: function(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function(selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function(selector) {
    return this._parent.querySelectorAll(selector);
  }
};

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/constant.js
function constant_default8(x4) {
  return function() {
    return x4;
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/data.js
var keyPrefix = "$";
function bindIndex2(parent, group2, enter, update, exit, data) {
  var i4 = 0, node, groupLength = group2.length, dataLength = data.length;
  for (; i4 < dataLength; ++i4) {
    if (node = group2[i4]) {
      node.__data__ = data[i4];
      update[i4] = node;
    } else {
      enter[i4] = new EnterNode2(parent, data[i4]);
    }
  }
  for (; i4 < groupLength; ++i4) {
    if (node = group2[i4]) {
      exit[i4] = node;
    }
  }
}
function bindKey2(parent, group2, enter, update, exit, data, key) {
  var i4, node, nodeByKeyValue = {}, groupLength = group2.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i4 = 0; i4 < groupLength; ++i4) {
    if (node = group2[i4]) {
      keyValues[i4] = keyValue = keyPrefix + key.call(node, node.__data__, i4, group2);
      if (keyValue in nodeByKeyValue) {
        exit[i4] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  }
  for (i4 = 0; i4 < dataLength; ++i4) {
    keyValue = keyPrefix + key.call(parent, data[i4], i4, data);
    if (node = nodeByKeyValue[keyValue]) {
      update[i4] = node;
      node.__data__ = data[i4];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i4] = new EnterNode2(parent, data[i4]);
    }
  }
  for (i4 = 0; i4 < groupLength; ++i4) {
    if ((node = group2[i4]) && nodeByKeyValue[keyValues[i4]] === node) {
      exit[i4] = node;
    }
  }
}
function data_default2(value, key) {
  if (!value) {
    data = new Array(this.size()), j4 = -1;
    this.each(function(d2) {
      data[++j4] = d2;
    });
    return data;
  }
  var bind = key ? bindKey2 : bindIndex2, parents = this._parents, groups2 = this._groups;
  if (typeof value !== "function")
    value = constant_default8(value);
  for (var m4 = groups2.length, update = new Array(m4), enter = new Array(m4), exit = new Array(m4), j4 = 0; j4 < m4; ++j4) {
    var parent = parents[j4], group2 = groups2[j4], groupLength = group2.length, data = value.call(parent, parent && parent.__data__, j4, parents), dataLength = data.length, enterGroup = enter[j4] = new Array(dataLength), updateGroup = update[j4] = new Array(dataLength), exitGroup = exit[j4] = new Array(groupLength);
    bind(parent, group2, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection3(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/exit.js
function exit_default2() {
  return new Selection3(this._exit || this._groups.map(sparse_default2), this._parents);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/merge.js
function merge_default3(selection3) {
  for (var groups0 = this._groups, groups1 = selection3._groups, m0 = groups0.length, m1 = groups1.length, m4 = Math.min(m0, m1), merges = new Array(m0), j4 = 0; j4 < m4; ++j4) {
    for (var group0 = groups0[j4], group1 = groups1[j4], n3 = group0.length, merge2 = merges[j4] = new Array(n3), node, i4 = 0; i4 < n3; ++i4) {
      if (node = group0[i4] || group1[i4]) {
        merge2[i4] = node;
      }
    }
  }
  for (; j4 < m0; ++j4) {
    merges[j4] = groups0[j4];
  }
  return new Selection3(merges, this._parents);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/order.js
function order_default2() {
  for (var groups2 = this._groups, j4 = -1, m4 = groups2.length; ++j4 < m4; ) {
    for (var group2 = groups2[j4], i4 = group2.length - 1, next = group2[i4], node; --i4 >= 0; ) {
      if (node = group2[i4]) {
        if (next && next !== node.nextSibling)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/sort.js
function sort_default3(compare) {
  if (!compare)
    compare = ascending5;
  function compareNode(a5, b3) {
    return a5 && b3 ? compare(a5.__data__, b3.__data__) : !a5 - !b3;
  }
  for (var groups2 = this._groups, m4 = groups2.length, sortgroups = new Array(m4), j4 = 0; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], n3 = group2.length, sortgroup = sortgroups[j4] = new Array(n3), node, i4 = 0; i4 < n3; ++i4) {
      if (node = group2[i4]) {
        sortgroup[i4] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection3(sortgroups, this._parents).order();
}
function ascending5(a5, b3) {
  return a5 < b3 ? -1 : a5 > b3 ? 1 : a5 >= b3 ? 0 : NaN;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/call.js
function call_default2() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/nodes.js
function nodes_default2() {
  var nodes = new Array(this.size()), i4 = -1;
  this.each(function() {
    nodes[++i4] = this;
  });
  return nodes;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/node.js
function node_default2() {
  for (var groups2 = this._groups, j4 = 0, m4 = groups2.length; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], i4 = 0, n3 = group2.length; i4 < n3; ++i4) {
      var node = group2[i4];
      if (node)
        return node;
    }
  }
  return null;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/size.js
function size_default2() {
  var size = 0;
  this.each(function() {
    ++size;
  });
  return size;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/empty.js
function empty_default2() {
  return !this.node();
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/each.js
function each_default3(callback) {
  for (var groups2 = this._groups, j4 = 0, m4 = groups2.length; j4 < m4; ++j4) {
    for (var group2 = groups2[j4], i4 = 0, n3 = group2.length, node; i4 < n3; ++i4) {
      if (node = group2[i4])
        callback.call(node, node.__data__, i4, group2);
    }
  }
  return this;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/attr.js
function attrRemove3(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS3(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant3(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS3(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction3(name, value) {
  return function() {
    var v4 = value.apply(this, arguments);
    if (v4 == null)
      this.removeAttribute(name);
    else
      this.setAttribute(name, v4);
  };
}
function attrFunctionNS3(fullname, value) {
  return function() {
    var v4 = value.apply(this, arguments);
    if (v4 == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v4);
  };
}
function attr_default3(name, value) {
  var fullname = namespace_default2(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS3 : attrRemove3 : typeof value === "function" ? fullname.local ? attrFunctionNS3 : attrFunction3 : fullname.local ? attrConstantNS3 : attrConstant3)(fullname, value));
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/window.js
function window_default2(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/style.js
function styleRemove3(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant3(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction3(name, value, priority) {
  return function() {
    var v4 = value.apply(this, arguments);
    if (v4 == null)
      this.style.removeProperty(name);
    else
      this.style.setProperty(name, v4, priority);
  };
}
function style_default3(name, value, priority) {
  var node;
  return arguments.length > 1 ? this.each((value == null ? styleRemove3 : typeof value === "function" ? styleFunction3 : styleConstant3)(name, value, priority == null ? "" : priority)) : window_default2(node = this.node()).getComputedStyle(node, null).getPropertyValue(name);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/property.js
function propertyRemove2(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant2(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction2(name, value) {
  return function() {
    var v4 = value.apply(this, arguments);
    if (v4 == null)
      delete this[name];
    else
      this[name] = v4;
  };
}
function property_default2(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove2 : typeof value === "function" ? propertyFunction2 : propertyConstant2)(name, value)) : this.node()[name];
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/classed.js
function classArray2(string) {
  return string.trim().split(/^|\s+/);
}
function classList2(node) {
  return node.classList || new ClassList2(node);
}
function ClassList2(node) {
  this._node = node;
  this._names = classArray2(node.getAttribute("class") || "");
}
ClassList2.prototype = {
  add: function(name) {
    var i4 = this._names.indexOf(name);
    if (i4 < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i4 = this._names.indexOf(name);
    if (i4 >= 0) {
      this._names.splice(i4, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};
function classedAdd2(node, names) {
  var list = classList2(node), i4 = -1, n3 = names.length;
  while (++i4 < n3)
    list.add(names[i4]);
}
function classedRemove2(node, names) {
  var list = classList2(node), i4 = -1, n3 = names.length;
  while (++i4 < n3)
    list.remove(names[i4]);
}
function classedTrue2(names) {
  return function() {
    classedAdd2(this, names);
  };
}
function classedFalse2(names) {
  return function() {
    classedRemove2(this, names);
  };
}
function classedFunction2(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd2 : classedRemove2)(this, names);
  };
}
function classed_default2(name, value) {
  var names = classArray2(name + "");
  if (arguments.length < 2) {
    var list = classList2(this.node()), i4 = -1, n3 = names.length;
    while (++i4 < n3)
      if (!list.contains(names[i4]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction2 : value ? classedTrue2 : classedFalse2)(names, value));
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/text.js
function textRemove2() {
  this.textContent = "";
}
function textConstant3(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction3(value) {
  return function() {
    var v4 = value.apply(this, arguments);
    this.textContent = v4 == null ? "" : v4;
  };
}
function text_default4(value) {
  return arguments.length ? this.each(value == null ? textRemove2 : (typeof value === "function" ? textFunction3 : textConstant3)(value)) : this.node().textContent;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/html.js
function htmlRemove2() {
  this.innerHTML = "";
}
function htmlConstant2(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction2(value) {
  return function() {
    var v4 = value.apply(this, arguments);
    this.innerHTML = v4 == null ? "" : v4;
  };
}
function html_default2(value) {
  return arguments.length ? this.each(value == null ? htmlRemove2 : (typeof value === "function" ? htmlFunction2 : htmlConstant2)(value)) : this.node().innerHTML;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/raise.js
function raise2() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function raise_default2() {
  return this.each(raise2);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/lower.js
function lower2() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default2() {
  return this.each(lower2);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/append.js
function append_default2(name) {
  var create2 = typeof name === "function" ? name : creator_default2(name);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/insert.js
function constantNull2() {
  return null;
}
function insert_default2(name, before) {
  var create2 = typeof name === "function" ? name : creator_default2(name), select = before == null ? constantNull2 : typeof before === "function" ? before : selector_default2(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/remove.js
function remove2() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function remove_default3() {
  return this.each(remove2);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/datum.js
function datum_default2(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent2(node, type2, params) {
  var window2 = window_default2(node), event2 = window2.CustomEvent;
  if (event2) {
    event2 = new event2(type2, params);
  } else {
    event2 = window2.document.createEvent("Event");
    if (params)
      event2.initEvent(type2, params.bubbles, params.cancelable), event2.detail = params.detail;
    else
      event2.initEvent(type2, false, false);
  }
  node.dispatchEvent(event2);
}
function dispatchConstant2(type2, params) {
  return function() {
    return dispatchEvent2(this, type2, params);
  };
}
function dispatchFunction2(type2, params) {
  return function() {
    return dispatchEvent2(this, type2, params.apply(this, arguments));
  };
}
function dispatch_default3(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction2 : dispatchConstant2)(type2, params));
}

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js
var root2 = [null];
function Selection3(groups2, parents) {
  this._groups = groups2;
  this._parents = parents;
}
function selection2() {
  return new Selection3([[document.documentElement]], root2);
}
Selection3.prototype = selection2.prototype = {
  constructor: Selection3,
  select: select_default4,
  selectAll: selectAll_default4,
  filter: filter_default3,
  data: data_default2,
  enter: enter_default2,
  exit: exit_default2,
  merge: merge_default3,
  order: order_default2,
  sort: sort_default3,
  call: call_default2,
  nodes: nodes_default2,
  node: node_default2,
  size: size_default2,
  empty: empty_default2,
  each: each_default3,
  attr: attr_default3,
  style: style_default3,
  property: property_default2,
  classed: classed_default2,
  text: text_default4,
  html: html_default2,
  raise: raise_default2,
  lower: lower_default2,
  append: append_default2,
  insert: insert_default2,
  remove: remove_default3,
  datum: datum_default2,
  on: on_default3,
  dispatch: dispatch_default3
};

// ../../node_modules/d3-svg-legend/node_modules/d3-selection/src/select.js
function select_default5(selector) {
  return typeof selector === "string" ? new Selection3([[document.querySelector(selector)]], [document.documentElement]) : new Selection3([[selector]], root2);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default2(x4, p2) {
  if ((i4 = (x4 = p2 ? x4.toExponential(p2 - 1) : x4.toExponential()).indexOf("e")) < 0)
    return null;
  var i4, coefficient = x4.slice(0, i4);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x4.slice(i4 + 1)
  ];
}

// ../../node_modules/d3-svg-legend/node_modules/d3-format/src/exponent.js
function exponent_default2(x4) {
  return x4 = formatDecimal_default2(Math.abs(x4)), x4 ? x4[1] : NaN;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-format/src/formatGroup.js
function formatGroup_default2(grouping, thousands) {
  return function(value, width) {
    var i4 = value.length, t2 = [], j4 = 0, g3 = grouping[0], length3 = 0;
    while (i4 > 0 && g3 > 0) {
      if (length3 + g3 + 1 > width)
        g3 = Math.max(1, width - length3);
      t2.push(value.substring(i4 -= g3, i4 + g3));
      if ((length3 += g3 + 1) > width)
        break;
      g3 = grouping[j4 = (j4 + 1) % grouping.length];
    }
    return t2.reverse().join(thousands);
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-format/src/formatDefault.js
function formatDefault_default(x4, p2) {
  x4 = x4.toPrecision(p2);
  out:
    for (var n3 = x4.length, i4 = 1, i0 = -1, i1; i4 < n3; ++i4) {
      switch (x4[i4]) {
        case ".":
          i0 = i1 = i4;
          break;
        case "0":
          if (i0 === 0)
            i0 = i4;
          i1 = i4;
          break;
        case "e":
          break out;
        default:
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? x4.slice(0, i0) + x4.slice(i1 + 1) : x4;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent2;
function formatPrefixAuto_default2(x4, p2) {
  var d2 = formatDecimal_default2(x4, p2);
  if (!d2)
    return x4 + "";
  var coefficient = d2[0], exponent = d2[1], i4 = exponent - (prefixExponent2 = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n3 = coefficient.length;
  return i4 === n3 ? coefficient : i4 > n3 ? coefficient + new Array(i4 - n3 + 1).join("0") : i4 > 0 ? coefficient.slice(0, i4) + "." + coefficient.slice(i4) : "0." + new Array(1 - i4).join("0") + formatDecimal_default2(x4, Math.max(0, p2 + i4 - 1))[0];
}

// ../../node_modules/d3-svg-legend/node_modules/d3-format/src/formatRounded.js
function formatRounded_default2(x4, p2) {
  var d2 = formatDecimal_default2(x4, p2);
  if (!d2)
    return x4 + "";
  var coefficient = d2[0], exponent = d2[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// ../../node_modules/d3-svg-legend/node_modules/d3-format/src/formatTypes.js
var formatTypes_default2 = {
  "": formatDefault_default,
  "%": function(x4, p2) {
    return (x4 * 100).toFixed(p2);
  },
  "b": function(x4) {
    return Math.round(x4).toString(2);
  },
  "c": function(x4) {
    return x4 + "";
  },
  "d": function(x4) {
    return Math.round(x4).toString(10);
  },
  "e": function(x4, p2) {
    return x4.toExponential(p2);
  },
  "f": function(x4, p2) {
    return x4.toFixed(p2);
  },
  "g": function(x4, p2) {
    return x4.toPrecision(p2);
  },
  "o": function(x4) {
    return Math.round(x4).toString(8);
  },
  "p": function(x4, p2) {
    return formatRounded_default2(x4 * 100, p2);
  },
  "r": formatRounded_default2,
  "s": formatPrefixAuto_default2,
  "X": function(x4) {
    return Math.round(x4).toString(16).toUpperCase();
  },
  "x": function(x4) {
    return Math.round(x4).toString(16);
  }
};

// ../../node_modules/d3-svg-legend/node_modules/d3-format/src/formatSpecifier.js
var re5 = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
function formatSpecifier_default(specifier) {
  return new FormatSpecifier2(specifier);
}
function FormatSpecifier2(specifier) {
  if (!(match = re5.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match, fill = match[1] || " ", align = match[2] || ">", sign2 = match[3] || "-", symbol2 = match[4] || "", zero4 = !!match[5], width = match[6] && +match[6], comma = !!match[7], precision = match[8] && +match[8].slice(1), type2 = match[9] || "";
  if (type2 === "n")
    comma = true, type2 = "g";
  else if (!formatTypes_default2[type2])
    type2 = "";
  if (zero4 || fill === "0" && align === "=")
    zero4 = true, fill = "0", align = "=";
  this.fill = fill;
  this.align = align;
  this.sign = sign2;
  this.symbol = symbol2;
  this.zero = zero4;
  this.width = width;
  this.comma = comma;
  this.precision = precision;
  this.type = type2;
}
FormatSpecifier2.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width == null ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0)) + this.type;
};

// ../../node_modules/d3-svg-legend/node_modules/d3-format/src/locale.js
var prefixes2 = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function identity6(x4) {
  return x4;
}
function locale_default2(locale5) {
  var group2 = locale5.grouping && locale5.thousands ? formatGroup_default2(locale5.grouping, locale5.thousands) : identity6, currency = locale5.currency, decimal = locale5.decimal;
  function newFormat(specifier) {
    specifier = formatSpecifier_default(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol2 = specifier.symbol, zero4 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, type2 = specifier.type;
    var prefix2 = symbol2 === "$" ? currency[0] : symbol2 === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol2 === "$" ? currency[1] : /[%p]/.test(type2) ? "%" : "";
    var formatType = formatTypes_default2[type2], maybeSuffix = !type2 || /[defgprs%]/.test(type2);
    precision = precision == null ? type2 ? 6 : 12 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format4(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i4, n3, c6;
      if (type2 === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);
        value = formatType(value, precision);
        if (valueNegative) {
          i4 = -1, n3 = value.length;
          valueNegative = false;
          while (++i4 < n3) {
            if (c6 = value.charCodeAt(i4), 48 < c6 && c6 < 58 || type2 === "x" && 96 < c6 && c6 < 103 || type2 === "X" && 64 < c6 && c6 < 71) {
              valueNegative = true;
              break;
            }
          }
        }
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : "-" : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = valueSuffix + (type2 === "s" ? prefixes2[8 + prefixExponent2 / 3] : "") + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i4 = -1, n3 = value.length;
          while (++i4 < n3) {
            if (c6 = value.charCodeAt(i4), 48 > c6 || c6 > 57) {
              valueSuffix = (c6 === 46 ? decimal + value.slice(i4 + 1) : value.slice(i4)) + valueSuffix;
              value = value.slice(0, i4);
              break;
            }
          }
        }
      }
      if (comma && !zero4)
        value = group2(value, Infinity);
      var length3 = valuePrefix.length + value.length + valueSuffix.length, padding = length3 < width ? new Array(width - length3 + 1).join(fill) : "";
      if (comma && zero4)
        value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          return valuePrefix + value + valueSuffix + padding;
        case "=":
          return valuePrefix + padding + value + valueSuffix;
        case "^":
          return padding.slice(0, length3 = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length3);
      }
      return padding + valuePrefix + value + valueSuffix;
    }
    format4.toString = function() {
      return specifier + "";
    };
    return format4;
  }
  function formatPrefix4(specifier, value) {
    var f4 = newFormat((specifier = formatSpecifier_default(specifier), specifier.type = "f", specifier)), e3 = Math.max(-8, Math.min(8, Math.floor(exponent_default2(value) / 3))) * 3, k4 = Math.pow(10, -e3), prefix2 = prefixes2[8 + e3 / 3];
    return function(value2) {
      return f4(k4 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix4
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-format/src/defaultLocale.js
var locale3;
var format2;
var formatPrefix2;
defaultLocale3({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale3(definition) {
  locale3 = locale_default2(definition);
  format2 = locale3.format;
  formatPrefix2 = locale3.formatPrefix;
  return locale3;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-dispatch/src/dispatch.js
var noop2 = { value: function() {
} };
function dispatch2() {
  for (var i4 = 0, n3 = arguments.length, _4 = {}, t2; i4 < n3; ++i4) {
    if (!(t2 = arguments[i4] + "") || t2 in _4)
      throw new Error("illegal type: " + t2);
    _4[t2] = [];
  }
  return new Dispatch2(_4);
}
function Dispatch2(_4) {
  this._ = _4;
}
function parseTypenames4(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t2) {
    var name = "", i4 = t2.indexOf(".");
    if (i4 >= 0)
      name = t2.slice(i4 + 1), t2 = t2.slice(0, i4);
    if (t2 && !types.hasOwnProperty(t2))
      throw new Error("unknown type: " + t2);
    return { type: t2, name };
  });
}
Dispatch2.prototype = dispatch2.prototype = {
  constructor: Dispatch2,
  on: function(typename, callback) {
    var _4 = this._, T3 = parseTypenames4(typename + "", _4), t2, i4 = -1, n3 = T3.length;
    if (arguments.length < 2) {
      while (++i4 < n3)
        if ((t2 = (typename = T3[i4]).type) && (t2 = get3(_4[t2], typename.name)))
          return t2;
      return;
    }
    if (callback != null && typeof callback !== "function")
      throw new Error("invalid callback: " + callback);
    while (++i4 < n3) {
      if (t2 = (typename = T3[i4]).type)
        _4[t2] = set4(_4[t2], typename.name, callback);
      else if (callback == null)
        for (t2 in _4)
          _4[t2] = set4(_4[t2], typename.name, null);
    }
    return this;
  },
  copy: function() {
    var copy4 = {}, _4 = this._;
    for (var t2 in _4)
      copy4[t2] = _4[t2].slice();
    return new Dispatch2(copy4);
  },
  call: function(type2, that) {
    if ((n3 = arguments.length - 2) > 0)
      for (var args = new Array(n3), i4 = 0, n3, t2; i4 < n3; ++i4)
        args[i4] = arguments[i4 + 2];
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (t2 = this._[type2], i4 = 0, n3 = t2.length; i4 < n3; ++i4)
      t2[i4].value.apply(that, args);
  },
  apply: function(type2, that, args) {
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (var t2 = this._[type2], i4 = 0, n3 = t2.length; i4 < n3; ++i4)
      t2[i4].value.apply(that, args);
  }
};
function get3(type2, name) {
  for (var i4 = 0, n3 = type2.length, c6; i4 < n3; ++i4) {
    if ((c6 = type2[i4]).name === name) {
      return c6.value;
    }
  }
}
function set4(type2, name, callback) {
  for (var i4 = 0, n3 = type2.length; i4 < n3; ++i4) {
    if (type2[i4].name === name) {
      type2[i4] = noop2, type2 = type2.slice(0, i4).concat(type2.slice(i4 + 1));
      break;
    }
  }
  if (callback != null)
    type2.push({ name, value: callback });
  return type2;
}
var dispatch_default4 = dispatch2;

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-array/src/ascending.js
function ascending_default2(a5, b3) {
  return a5 < b3 ? -1 : a5 > b3 ? 1 : a5 >= b3 ? 0 : NaN;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-array/src/bisector.js
function bisector_default(compare) {
  if (compare.length === 1)
    compare = ascendingComparator(compare);
  return {
    left: function(a5, x4, lo2, hi) {
      if (lo2 == null)
        lo2 = 0;
      if (hi == null)
        hi = a5.length;
      while (lo2 < hi) {
        var mid = lo2 + hi >>> 1;
        if (compare(a5[mid], x4) < 0)
          lo2 = mid + 1;
        else
          hi = mid;
      }
      return lo2;
    },
    right: function(a5, x4, lo2, hi) {
      if (lo2 == null)
        lo2 = 0;
      if (hi == null)
        hi = a5.length;
      while (lo2 < hi) {
        var mid = lo2 + hi >>> 1;
        if (compare(a5[mid], x4) > 0)
          hi = mid;
        else
          lo2 = mid + 1;
      }
      return lo2;
    }
  };
}
function ascendingComparator(f4) {
  return function(d2, x4) {
    return ascending_default2(f4(d2), x4);
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-array/src/bisect.js
var ascendingBisect3 = bisector_default(ascending_default2);
var bisectRight3 = ascendingBisect3.right;
var bisectLeft3 = ascendingBisect3.left;
var bisect_default3 = bisectRight3;

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-array/src/array.js
var array3 = Array.prototype;
var slice3 = array3.slice;
var map4 = array3.map;

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-array/src/ticks.js
var e104 = Math.sqrt(50);
var e54 = Math.sqrt(10);
var e24 = Math.sqrt(2);
function ticks_default(start2, stop, count3) {
  var reverse2, i4 = -1, n3, ticks4, step;
  stop = +stop, start2 = +start2, count3 = +count3;
  if (start2 === stop && count3 > 0)
    return [start2];
  if (reverse2 = stop < start2)
    n3 = start2, start2 = stop, stop = n3;
  if ((step = tickIncrement4(start2, stop, count3)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    start2 = Math.ceil(start2 / step);
    stop = Math.floor(stop / step);
    ticks4 = new Array(n3 = Math.ceil(stop - start2 + 1));
    while (++i4 < n3)
      ticks4[i4] = (start2 + i4) * step;
  } else {
    start2 = Math.floor(start2 * step);
    stop = Math.ceil(stop * step);
    ticks4 = new Array(n3 = Math.ceil(start2 - stop + 1));
    while (++i4 < n3)
      ticks4[i4] = (start2 - i4) / step;
  }
  if (reverse2)
    ticks4.reverse();
  return ticks4;
}
function tickIncrement4(start2, stop, count3) {
  var step = (stop - start2) / Math.max(0, count3), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e104 ? 10 : error >= e54 ? 5 : error >= e24 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e104 ? 10 : error >= e54 ? 5 : error >= e24 ? 2 : 1);
}
function tickStep4(start2, stop, count3) {
  var step0 = Math.abs(stop - start2) / Math.max(0, count3), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e104)
    step1 *= 10;
  else if (error >= e54)
    step1 *= 5;
  else if (error >= e24)
    step1 *= 2;
  return stop < start2 ? -step1 : step1;
}

// ../../node_modules/d3-collection/src/map.js
var prefix = "$";
function Map2() {
}
Map2.prototype = map5.prototype = {
  constructor: Map2,
  has: function(key) {
    return prefix + key in this;
  },
  get: function(key) {
    return this[prefix + key];
  },
  set: function(key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function(key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function() {
    for (var property in this)
      if (property[0] === prefix)
        delete this[property];
  },
  keys: function() {
    var keys = [];
    for (var property in this)
      if (property[0] === prefix)
        keys.push(property.slice(1));
    return keys;
  },
  values: function() {
    var values = [];
    for (var property in this)
      if (property[0] === prefix)
        values.push(this[property]);
    return values;
  },
  entries: function() {
    var entries = [];
    for (var property in this)
      if (property[0] === prefix)
        entries.push({ key: property.slice(1), value: this[property] });
    return entries;
  },
  size: function() {
    var size = 0;
    for (var property in this)
      if (property[0] === prefix)
        ++size;
    return size;
  },
  empty: function() {
    for (var property in this)
      if (property[0] === prefix)
        return false;
    return true;
  },
  each: function(f4) {
    for (var property in this)
      if (property[0] === prefix)
        f4(this[property], property.slice(1), this);
  }
};
function map5(object, f4) {
  var map9 = new Map2();
  if (object instanceof Map2)
    object.each(function(value, key2) {
      map9.set(key2, value);
    });
  else if (Array.isArray(object)) {
    var i4 = -1, n3 = object.length, o2;
    if (f4 == null)
      while (++i4 < n3)
        map9.set(i4, object[i4]);
    else
      while (++i4 < n3)
        map9.set(f4(o2 = object[i4], i4, object), o2);
  } else if (object)
    for (var key in object)
      map9.set(key, object[key]);
  return map9;
}
var map_default = map5;

// ../../node_modules/d3-collection/src/set.js
function Set2() {
}
var proto = map_default.prototype;
Set2.prototype = set5.prototype = {
  constructor: Set2,
  has: proto.has,
  add: function(value) {
    value += "";
    this[prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};
function set5(object, f4) {
  var set6 = new Set2();
  if (object instanceof Set2)
    object.each(function(value) {
      set6.add(value);
    });
  else if (object) {
    var i4 = -1, n3 = object.length;
    if (f4 == null)
      while (++i4 < n3)
        set6.add(object[i4]);
    else
      while (++i4 < n3)
        set6.add(f4(object[i4], i4, object));
  }
  return set6;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/array.js
var array4 = Array.prototype;
var map6 = array4.map;
var slice4 = array4.slice;

// ../../node_modules/d3-svg-legend/node_modules/d3-color/src/define.js
function define_default2(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend2(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-color/src/color.js
function Color2() {
}
var darker2 = 0.7;
var brighter2 = 1 / darker2;
var reI2 = "\\s*([+-]?\\d+)\\s*";
var reN2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex2 = /^#([0-9a-f]{3,8})$/;
var reRgbInteger2 = new RegExp("^rgb\\(" + [reI2, reI2, reI2] + "\\)$");
var reRgbPercent2 = new RegExp("^rgb\\(" + [reP2, reP2, reP2] + "\\)$");
var reRgbaInteger2 = new RegExp("^rgba\\(" + [reI2, reI2, reI2, reN2] + "\\)$");
var reRgbaPercent2 = new RegExp("^rgba\\(" + [reP2, reP2, reP2, reN2] + "\\)$");
var reHslPercent2 = new RegExp("^hsl\\(" + [reN2, reP2, reP2] + "\\)$");
var reHslaPercent2 = new RegExp("^hsla\\(" + [reN2, reP2, reP2, reN2] + "\\)$");
var named2 = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default2(Color2, color2, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex2,
  formatHex: color_formatHex2,
  formatHsl: color_formatHsl2,
  formatRgb: color_formatRgb2,
  toString: color_formatRgb2
});
function color_formatHex2() {
  return this.rgb().formatHex();
}
function color_formatHsl2() {
  return hslConvert2(this).formatHsl();
}
function color_formatRgb2() {
  return this.rgb().formatRgb();
}
function color2(format4) {
  var m4, l3;
  format4 = (format4 + "").trim().toLowerCase();
  return (m4 = reHex2.exec(format4)) ? (l3 = m4[1].length, m4 = parseInt(m4[1], 16), l3 === 6 ? rgbn2(m4) : l3 === 3 ? new Rgb2(m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, (m4 & 15) << 4 | m4 & 15, 1) : l3 === 8 ? rgba2(m4 >> 24 & 255, m4 >> 16 & 255, m4 >> 8 & 255, (m4 & 255) / 255) : l3 === 4 ? rgba2(m4 >> 12 & 15 | m4 >> 8 & 240, m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, ((m4 & 15) << 4 | m4 & 15) / 255) : null) : (m4 = reRgbInteger2.exec(format4)) ? new Rgb2(m4[1], m4[2], m4[3], 1) : (m4 = reRgbPercent2.exec(format4)) ? new Rgb2(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, 1) : (m4 = reRgbaInteger2.exec(format4)) ? rgba2(m4[1], m4[2], m4[3], m4[4]) : (m4 = reRgbaPercent2.exec(format4)) ? rgba2(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, m4[4]) : (m4 = reHslPercent2.exec(format4)) ? hsla2(m4[1], m4[2] / 100, m4[3] / 100, 1) : (m4 = reHslaPercent2.exec(format4)) ? hsla2(m4[1], m4[2] / 100, m4[3] / 100, m4[4]) : named2.hasOwnProperty(format4) ? rgbn2(named2[format4]) : format4 === "transparent" ? new Rgb2(NaN, NaN, NaN, 0) : null;
}
function rgbn2(n3) {
  return new Rgb2(n3 >> 16 & 255, n3 >> 8 & 255, n3 & 255, 1);
}
function rgba2(r2, g3, b3, a5) {
  if (a5 <= 0)
    r2 = g3 = b3 = NaN;
  return new Rgb2(r2, g3, b3, a5);
}
function rgbConvert2(o2) {
  if (!(o2 instanceof Color2))
    o2 = color2(o2);
  if (!o2)
    return new Rgb2();
  o2 = o2.rgb();
  return new Rgb2(o2.r, o2.g, o2.b, o2.opacity);
}
function rgb2(r2, g3, b3, opacity) {
  return arguments.length === 1 ? rgbConvert2(r2) : new Rgb2(r2, g3, b3, opacity == null ? 1 : opacity);
}
function Rgb2(r2, g3, b3, opacity) {
  this.r = +r2;
  this.g = +g3;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default2(Rgb2, rgb2, extend2(Color2, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter2 : Math.pow(brighter2, k4);
    return new Rgb2(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker2 : Math.pow(darker2, k4);
    return new Rgb2(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex2,
  formatHex: rgb_formatHex2,
  formatRgb: rgb_formatRgb2,
  toString: rgb_formatRgb2
}));
function rgb_formatHex2() {
  return "#" + hex2(this.r) + hex2(this.g) + hex2(this.b);
}
function rgb_formatRgb2() {
  var a5 = this.opacity;
  a5 = isNaN(a5) ? 1 : Math.max(0, Math.min(1, a5));
  return (a5 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a5 === 1 ? ")" : ", " + a5 + ")");
}
function hex2(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla2(h4, s3, l3, a5) {
  if (a5 <= 0)
    h4 = s3 = l3 = NaN;
  else if (l3 <= 0 || l3 >= 1)
    h4 = s3 = NaN;
  else if (s3 <= 0)
    h4 = NaN;
  return new Hsl2(h4, s3, l3, a5);
}
function hslConvert2(o2) {
  if (o2 instanceof Hsl2)
    return new Hsl2(o2.h, o2.s, o2.l, o2.opacity);
  if (!(o2 instanceof Color2))
    o2 = color2(o2);
  if (!o2)
    return new Hsl2();
  if (o2 instanceof Hsl2)
    return o2;
  o2 = o2.rgb();
  var r2 = o2.r / 255, g3 = o2.g / 255, b3 = o2.b / 255, min5 = Math.min(r2, g3, b3), max6 = Math.max(r2, g3, b3), h4 = NaN, s3 = max6 - min5, l3 = (max6 + min5) / 2;
  if (s3) {
    if (r2 === max6)
      h4 = (g3 - b3) / s3 + (g3 < b3) * 6;
    else if (g3 === max6)
      h4 = (b3 - r2) / s3 + 2;
    else
      h4 = (r2 - g3) / s3 + 4;
    s3 /= l3 < 0.5 ? max6 + min5 : 2 - max6 - min5;
    h4 *= 60;
  } else {
    s3 = l3 > 0 && l3 < 1 ? 0 : h4;
  }
  return new Hsl2(h4, s3, l3, o2.opacity);
}
function hsl2(h4, s3, l3, opacity) {
  return arguments.length === 1 ? hslConvert2(h4) : new Hsl2(h4, s3, l3, opacity == null ? 1 : opacity);
}
function Hsl2(h4, s3, l3, opacity) {
  this.h = +h4;
  this.s = +s3;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default2(Hsl2, hsl2, extend2(Color2, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter2 : Math.pow(brighter2, k4);
    return new Hsl2(this.h, this.s, this.l * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker2 : Math.pow(darker2, k4);
    return new Hsl2(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb: function() {
    var h4 = this.h % 360 + (this.h < 0) * 360, s3 = isNaN(h4) || isNaN(this.s) ? 0 : this.s, l3 = this.l, m22 = l3 + (l3 < 0.5 ? l3 : 1 - l3) * s3, m1 = 2 * l3 - m22;
    return new Rgb2(
      hsl2rgb2(h4 >= 240 ? h4 - 240 : h4 + 120, m1, m22),
      hsl2rgb2(h4, m1, m22),
      hsl2rgb2(h4 < 120 ? h4 + 240 : h4 - 120, m1, m22),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a5 = this.opacity;
    a5 = isNaN(a5) ? 1 : Math.max(0, Math.min(1, a5));
    return (a5 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a5 === 1 ? ")" : ", " + a5 + ")");
  }
}));
function hsl2rgb2(h4, m1, m22) {
  return (h4 < 60 ? m1 + (m22 - m1) * h4 / 60 : h4 < 180 ? m22 : h4 < 240 ? m1 + (m22 - m1) * (240 - h4) / 60 : m1) * 255;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-color/src/math.js
var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;

// ../../node_modules/d3-svg-legend/node_modules/d3-color/src/cubehelix.js
var A5 = -0.14861;
var B5 = 1.78277;
var C5 = -0.29227;
var D5 = -0.90649;
var E5 = 1.97294;
var ED2 = E5 * D5;
var EB2 = E5 * B5;
var BC_DA2 = B5 * C5 - D5 * A5;
function cubehelixConvert2(o2) {
  if (o2 instanceof Cubehelix2)
    return new Cubehelix2(o2.h, o2.s, o2.l, o2.opacity);
  if (!(o2 instanceof Rgb2))
    o2 = rgbConvert2(o2);
  var r2 = o2.r / 255, g3 = o2.g / 255, b3 = o2.b / 255, l3 = (BC_DA2 * b3 + ED2 * r2 - EB2 * g3) / (BC_DA2 + ED2 - EB2), bl = b3 - l3, k4 = (E5 * (g3 - l3) - C5 * bl) / D5, s3 = Math.sqrt(k4 * k4 + bl * bl) / (E5 * l3 * (1 - l3)), h4 = s3 ? Math.atan2(k4, bl) * rad2deg - 120 : NaN;
  return new Cubehelix2(h4 < 0 ? h4 + 360 : h4, s3, l3, o2.opacity);
}
function cubehelix3(h4, s3, l3, opacity) {
  return arguments.length === 1 ? cubehelixConvert2(h4) : new Cubehelix2(h4, s3, l3, opacity == null ? 1 : opacity);
}
function Cubehelix2(h4, s3, l3, opacity) {
  this.h = +h4;
  this.s = +s3;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default2(Cubehelix2, cubehelix3, extend2(Color2, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter2 : Math.pow(brighter2, k4);
    return new Cubehelix2(this.h, this.s, this.l * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker2 : Math.pow(darker2, k4);
    return new Cubehelix2(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb: function() {
    var h4 = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad, l3 = +this.l, a5 = isNaN(this.s) ? 0 : this.s * l3 * (1 - l3), cosh2 = Math.cos(h4), sinh2 = Math.sin(h4);
    return new Rgb2(
      255 * (l3 + a5 * (A5 * cosh2 + B5 * sinh2)),
      255 * (l3 + a5 * (C5 * cosh2 + D5 * sinh2)),
      255 * (l3 + a5 * (E5 * cosh2)),
      this.opacity
    );
  }
}));

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/basis.js
function basis2(t12, v0, v1, v22, v32) {
  var t2 = t12 * t12, t3 = t2 * t12;
  return ((1 - 3 * t12 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t12 + 3 * t2 - 3 * t3) * v22 + t3 * v32) / 6;
}
function basis_default3(values) {
  var n3 = values.length - 1;
  return function(t2) {
    var i4 = t2 <= 0 ? t2 = 0 : t2 >= 1 ? (t2 = 1, n3 - 1) : Math.floor(t2 * n3), v1 = values[i4], v22 = values[i4 + 1], v0 = i4 > 0 ? values[i4 - 1] : 2 * v1 - v22, v32 = i4 < n3 - 1 ? values[i4 + 2] : 2 * v22 - v1;
    return basis2((t2 - i4 / n3) * n3, v0, v1, v22, v32);
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default3(values) {
  var n3 = values.length;
  return function(t2) {
    var i4 = Math.floor(((t2 %= 1) < 0 ? ++t2 : t2) * n3), v0 = values[(i4 + n3 - 1) % n3], v1 = values[i4 % n3], v22 = values[(i4 + 1) % n3], v32 = values[(i4 + 2) % n3];
    return basis2((t2 - i4 / n3) * n3, v0, v1, v22, v32);
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/constant.js
function constant_default10(x4) {
  return function() {
    return x4;
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/color.js
function linear3(a5, d2) {
  return function(t2) {
    return a5 + t2 * d2;
  };
}
function exponential2(a5, b3, y3) {
  return a5 = Math.pow(a5, y3), b3 = Math.pow(b3, y3) - a5, y3 = 1 / y3, function(t2) {
    return Math.pow(a5 + t2 * b3, y3);
  };
}
function hue2(a5, b3) {
  var d2 = b3 - a5;
  return d2 ? linear3(a5, d2 > 180 || d2 < -180 ? d2 - 360 * Math.round(d2 / 360) : d2) : constant_default10(isNaN(a5) ? b3 : a5);
}
function gamma2(y3) {
  return (y3 = +y3) === 1 ? nogamma2 : function(a5, b3) {
    return b3 - a5 ? exponential2(a5, b3, y3) : constant_default10(isNaN(a5) ? b3 : a5);
  };
}
function nogamma2(a5, b3) {
  var d2 = b3 - a5;
  return d2 ? linear3(a5, d2) : constant_default10(isNaN(a5) ? b3 : a5);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/rgb.js
var rgb_default2 = function rgbGamma2(y3) {
  var color4 = gamma2(y3);
  function rgb3(start2, end) {
    var r2 = color4((start2 = rgb2(start2)).r, (end = rgb2(end)).r), g3 = color4(start2.g, end.g), b3 = color4(start2.b, end.b), opacity = nogamma2(start2.opacity, end.opacity);
    return function(t2) {
      start2.r = r2(t2);
      start2.g = g3(t2);
      start2.b = b3(t2);
      start2.opacity = opacity(t2);
      return start2 + "";
    };
  }
  rgb3.gamma = rgbGamma2;
  return rgb3;
}(1);
function rgbSpline2(spline) {
  return function(colors) {
    var n3 = colors.length, r2 = new Array(n3), g3 = new Array(n3), b3 = new Array(n3), i4, color4;
    for (i4 = 0; i4 < n3; ++i4) {
      color4 = rgb2(colors[i4]);
      r2[i4] = color4.r || 0;
      g3[i4] = color4.g || 0;
      b3[i4] = color4.b || 0;
    }
    r2 = spline(r2);
    g3 = spline(g3);
    b3 = spline(b3);
    color4.opacity = 1;
    return function(t2) {
      color4.r = r2(t2);
      color4.g = g3(t2);
      color4.b = b3(t2);
      return color4 + "";
    };
  };
}
var rgbBasis2 = rgbSpline2(basis_default3);
var rgbBasisClosed2 = rgbSpline2(basisClosed_default3);

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/numberArray.js
function numberArray_default2(a5, b3) {
  if (!b3)
    b3 = [];
  var n3 = a5 ? Math.min(b3.length, a5.length) : 0, c6 = b3.slice(), i4;
  return function(t2) {
    for (i4 = 0; i4 < n3; ++i4)
      c6[i4] = a5[i4] * (1 - t2) + b3[i4] * t2;
    return c6;
  };
}
function isNumberArray2(x4) {
  return ArrayBuffer.isView(x4) && !(x4 instanceof DataView);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/array.js
function genericArray2(a5, b3) {
  var nb = b3 ? b3.length : 0, na2 = a5 ? Math.min(nb, a5.length) : 0, x4 = new Array(na2), c6 = new Array(nb), i4;
  for (i4 = 0; i4 < na2; ++i4)
    x4[i4] = value_default2(a5[i4], b3[i4]);
  for (; i4 < nb; ++i4)
    c6[i4] = b3[i4];
  return function(t2) {
    for (i4 = 0; i4 < na2; ++i4)
      c6[i4] = x4[i4](t2);
    return c6;
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/date.js
function date_default2(a5, b3) {
  var d2 = new Date();
  return a5 = +a5, b3 = +b3, function(t2) {
    return d2.setTime(a5 * (1 - t2) + b3 * t2), d2;
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/number.js
function number_default3(a5, b3) {
  return a5 = +a5, b3 = +b3, function(t2) {
    return a5 * (1 - t2) + b3 * t2;
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/object.js
function object_default2(a5, b3) {
  var i4 = {}, c6 = {}, k4;
  if (a5 === null || typeof a5 !== "object")
    a5 = {};
  if (b3 === null || typeof b3 !== "object")
    b3 = {};
  for (k4 in b3) {
    if (k4 in a5) {
      i4[k4] = value_default2(a5[k4], b3[k4]);
    } else {
      c6[k4] = b3[k4];
    }
  }
  return function(t2) {
    for (k4 in i4)
      c6[k4] = i4[k4](t2);
    return c6;
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/string.js
var reA2 = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB2 = new RegExp(reA2.source, "g");
function zero3(b3) {
  return function() {
    return b3;
  };
}
function one2(b3) {
  return function(t2) {
    return b3(t2) + "";
  };
}
function string_default2(a5, b3) {
  var bi = reA2.lastIndex = reB2.lastIndex = 0, am, bm, bs, i4 = -1, s3 = [], q4 = [];
  a5 = a5 + "", b3 = b3 + "";
  while ((am = reA2.exec(a5)) && (bm = reB2.exec(b3))) {
    if ((bs = bm.index) > bi) {
      bs = b3.slice(bi, bs);
      if (s3[i4])
        s3[i4] += bs;
      else
        s3[++i4] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s3[i4])
        s3[i4] += bm;
      else
        s3[++i4] = bm;
    } else {
      s3[++i4] = null;
      q4.push({ i: i4, x: number_default3(am, bm) });
    }
    bi = reB2.lastIndex;
  }
  if (bi < b3.length) {
    bs = b3.slice(bi);
    if (s3[i4])
      s3[i4] += bs;
    else
      s3[++i4] = bs;
  }
  return s3.length < 2 ? q4[0] ? one2(q4[0].x) : zero3(b3) : (b3 = q4.length, function(t2) {
    for (var i5 = 0, o2; i5 < b3; ++i5)
      s3[(o2 = q4[i5]).i] = o2.x(t2);
    return s3.join("");
  });
}

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/value.js
function value_default2(a5, b3) {
  var t2 = typeof b3, c6;
  return b3 == null || t2 === "boolean" ? constant_default10(b3) : (t2 === "number" ? number_default3 : t2 === "string" ? (c6 = color2(b3)) ? (b3 = c6, rgb_default2) : string_default2 : b3 instanceof color2 ? rgb_default2 : b3 instanceof Date ? date_default2 : isNumberArray2(b3) ? numberArray_default2 : Array.isArray(b3) ? genericArray2 : typeof b3.valueOf !== "function" && typeof b3.toString !== "function" || isNaN(b3) ? object_default2 : number_default3)(a5, b3);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/round.js
function round_default3(a5, b3) {
  return a5 = +a5, b3 = +b3, function(t2) {
    return Math.round(a5 * (1 - t2) + b3 * t2);
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-interpolate/src/cubehelix.js
function cubehelix4(hue3) {
  return function cubehelixGamma(y3) {
    y3 = +y3;
    function cubehelix5(start2, end) {
      var h4 = hue3((start2 = cubehelix3(start2)).h, (end = cubehelix3(end)).h), s3 = nogamma2(start2.s, end.s), l3 = nogamma2(start2.l, end.l), opacity = nogamma2(start2.opacity, end.opacity);
      return function(t2) {
        start2.h = h4(t2);
        start2.s = s3(t2);
        start2.l = l3(Math.pow(t2, y3));
        start2.opacity = opacity(t2);
        return start2 + "";
      };
    }
    cubehelix5.gamma = cubehelixGamma;
    return cubehelix5;
  }(1);
}
var cubehelix_default3 = cubehelix4(hue2);
var cubehelixLong2 = cubehelix4(nogamma2);

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/constant.js
function constant_default11(x4) {
  return function() {
    return x4;
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/number.js
function number_default4(x4) {
  return +x4;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/continuous.js
var unit2 = [0, 1];
function deinterpolateLinear(a5, b3) {
  return (b3 -= a5 = +a5) ? function(x4) {
    return (x4 - a5) / b3;
  } : constant_default11(b3);
}
function deinterpolateClamp(deinterpolate) {
  return function(a5, b3) {
    var d2 = deinterpolate(a5 = +a5, b3 = +b3);
    return function(x4) {
      return x4 <= a5 ? 0 : x4 >= b3 ? 1 : d2(x4);
    };
  };
}
function reinterpolateClamp(reinterpolate) {
  return function(a5, b3) {
    var r2 = reinterpolate(a5 = +a5, b3 = +b3);
    return function(t2) {
      return t2 <= 0 ? a5 : t2 >= 1 ? b3 : r2(t2);
    };
  };
}
function bimap2(domain, range4, deinterpolate, reinterpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range4[0], r1 = range4[1];
  if (d1 < d0)
    d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
  else
    d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
  return function(x4) {
    return r0(d0(x4));
  };
}
function polymap2(domain, range4, deinterpolate, reinterpolate) {
  var j4 = Math.min(domain.length, range4.length) - 1, d2 = new Array(j4), r2 = new Array(j4), i4 = -1;
  if (domain[j4] < domain[0]) {
    domain = domain.slice().reverse();
    range4 = range4.slice().reverse();
  }
  while (++i4 < j4) {
    d2[i4] = deinterpolate(domain[i4], domain[i4 + 1]);
    r2[i4] = reinterpolate(range4[i4], range4[i4 + 1]);
  }
  return function(x4) {
    var i5 = bisect_default3(domain, x4, 1, j4) - 1;
    return r2[i5](d2[i5](x4));
  };
}
function copy3(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());
}
function continuous2(deinterpolate, reinterpolate) {
  var domain = unit2, range4 = unit2, interpolate = value_default2, clamp = false, piecewise2, output, input;
  function rescale() {
    piecewise2 = Math.min(domain.length, range4.length) > 2 ? polymap2 : bimap2;
    output = input = null;
    return scale;
  }
  function scale(x4) {
    return (output || (output = piecewise2(domain, range4, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate)))(+x4);
  }
  scale.invert = function(y3) {
    return (input || (input = piecewise2(range4, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y3);
  };
  scale.domain = function(_4) {
    return arguments.length ? (domain = map6.call(_4, number_default4), rescale()) : domain.slice();
  };
  scale.range = function(_4) {
    return arguments.length ? (range4 = slice4.call(_4), rescale()) : range4.slice();
  };
  scale.rangeRound = function(_4) {
    return range4 = slice4.call(_4), interpolate = round_default3, rescale();
  };
  scale.clamp = function(_4) {
    return arguments.length ? (clamp = !!_4, rescale()) : clamp;
  };
  scale.interpolate = function(_4) {
    return arguments.length ? (interpolate = _4, rescale()) : interpolate;
  };
  return rescale();
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default3(x4) {
  return Math.abs(x4 = Math.round(x4)) >= 1e21 ? x4.toLocaleString("en").replace(/,/g, "") : x4.toString(10);
}
function formatDecimalParts2(x4, p2) {
  if ((i4 = (x4 = p2 ? x4.toExponential(p2 - 1) : x4.toExponential()).indexOf("e")) < 0)
    return null;
  var i4, coefficient = x4.slice(0, i4);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x4.slice(i4 + 1)
  ];
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/exponent.js
function exponent_default3(x4) {
  return x4 = formatDecimalParts2(Math.abs(x4)), x4 ? x4[1] : NaN;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/formatGroup.js
function formatGroup_default3(grouping, thousands) {
  return function(value, width) {
    var i4 = value.length, t2 = [], j4 = 0, g3 = grouping[0], length3 = 0;
    while (i4 > 0 && g3 > 0) {
      if (length3 + g3 + 1 > width)
        g3 = Math.max(1, width - length3);
      t2.push(value.substring(i4 -= g3, i4 + g3));
      if ((length3 += g3 + 1) > width)
        break;
      g3 = grouping[j4 = (j4 + 1) % grouping.length];
    }
    return t2.reverse().join(thousands);
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default2(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i4) {
      return numerals[+i4];
    });
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/formatSpecifier.js
var re6 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier2(specifier) {
  if (!(match = re6.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier3({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier2.prototype = FormatSpecifier3.prototype;
function FormatSpecifier3(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier3.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/formatTrim.js
function formatTrim_default2(s3) {
  out:
    for (var n3 = s3.length, i4 = 1, i0 = -1, i1; i4 < n3; ++i4) {
      switch (s3[i4]) {
        case ".":
          i0 = i1 = i4;
          break;
        case "0":
          if (i0 === 0)
            i0 = i4;
          i1 = i4;
          break;
        default:
          if (!+s3[i4])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s3.slice(0, i0) + s3.slice(i1 + 1) : s3;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent3;
function formatPrefixAuto_default3(x4, p2) {
  var d2 = formatDecimalParts2(x4, p2);
  if (!d2)
    return x4 + "";
  var coefficient = d2[0], exponent = d2[1], i4 = exponent - (prefixExponent3 = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n3 = coefficient.length;
  return i4 === n3 ? coefficient : i4 > n3 ? coefficient + new Array(i4 - n3 + 1).join("0") : i4 > 0 ? coefficient.slice(0, i4) + "." + coefficient.slice(i4) : "0." + new Array(1 - i4).join("0") + formatDecimalParts2(x4, Math.max(0, p2 + i4 - 1))[0];
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/formatRounded.js
function formatRounded_default3(x4, p2) {
  var d2 = formatDecimalParts2(x4, p2);
  if (!d2)
    return x4 + "";
  var coefficient = d2[0], exponent = d2[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/formatTypes.js
var formatTypes_default3 = {
  "%": function(x4, p2) {
    return (x4 * 100).toFixed(p2);
  },
  "b": function(x4) {
    return Math.round(x4).toString(2);
  },
  "c": function(x4) {
    return x4 + "";
  },
  "d": formatDecimal_default3,
  "e": function(x4, p2) {
    return x4.toExponential(p2);
  },
  "f": function(x4, p2) {
    return x4.toFixed(p2);
  },
  "g": function(x4, p2) {
    return x4.toPrecision(p2);
  },
  "o": function(x4) {
    return Math.round(x4).toString(8);
  },
  "p": function(x4, p2) {
    return formatRounded_default3(x4 * 100, p2);
  },
  "r": formatRounded_default3,
  "s": formatPrefixAuto_default3,
  "X": function(x4) {
    return Math.round(x4).toString(16).toUpperCase();
  },
  "x": function(x4) {
    return Math.round(x4).toString(16);
  }
};

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/identity.js
function identity_default4(x4) {
  return x4;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/locale.js
var map7 = Array.prototype.map;
var prefixes3 = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default3(locale5) {
  var group2 = locale5.grouping === void 0 || locale5.thousands === void 0 ? identity_default4 : formatGroup_default3(map7.call(locale5.grouping, Number), locale5.thousands + ""), currencyPrefix = locale5.currency === void 0 ? "" : locale5.currency[0] + "", currencySuffix = locale5.currency === void 0 ? "" : locale5.currency[1] + "", decimal = locale5.decimal === void 0 ? "." : locale5.decimal + "", numerals = locale5.numerals === void 0 ? identity_default4 : formatNumerals_default2(map7.call(locale5.numerals, String)), percent = locale5.percent === void 0 ? "%" : locale5.percent + "", minus = locale5.minus === void 0 ? "-" : locale5.minus + "", nan = locale5.nan === void 0 ? "NaN" : locale5.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier2(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol2 = specifier.symbol, zero4 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
    if (type2 === "n")
      comma = true, type2 = "g";
    else if (!formatTypes_default3[type2])
      precision === void 0 && (precision = 12), trim = true, type2 = "g";
    if (zero4 || fill === "0" && align === "=")
      zero4 = true, fill = "0", align = "=";
    var prefix2 = symbol2 === "$" ? currencyPrefix : symbol2 === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol2 === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
    var formatType = formatTypes_default3[type2], maybeSuffix = /[defgprs%]/.test(type2);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format4(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i4, n3, c6;
      if (type2 === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default2(value);
        if (valueNegative && +value === 0 && sign2 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type2 === "s" ? prefixes3[8 + prefixExponent3 / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i4 = -1, n3 = value.length;
          while (++i4 < n3) {
            if (c6 = value.charCodeAt(i4), 48 > c6 || c6 > 57) {
              valueSuffix = (c6 === 46 ? decimal + value.slice(i4 + 1) : value.slice(i4)) + valueSuffix;
              value = value.slice(0, i4);
              break;
            }
          }
        }
      }
      if (comma && !zero4)
        value = group2(value, Infinity);
      var length3 = valuePrefix.length + value.length + valueSuffix.length, padding = length3 < width ? new Array(width - length3 + 1).join(fill) : "";
      if (comma && zero4)
        value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length3 = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length3);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format4.toString = function() {
      return specifier + "";
    };
    return format4;
  }
  function formatPrefix4(specifier, value) {
    var f4 = newFormat((specifier = formatSpecifier2(specifier), specifier.type = "f", specifier)), e3 = Math.max(-8, Math.min(8, Math.floor(exponent_default3(value) / 3))) * 3, k4 = Math.pow(10, -e3), prefix2 = prefixes3[8 + e3 / 3];
    return function(value2) {
      return f4(k4 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix4
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/defaultLocale.js
var locale4;
var format3;
var formatPrefix3;
defaultLocale4({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});
function defaultLocale4(definition) {
  locale4 = locale_default3(definition);
  format3 = locale4.format;
  formatPrefix3 = locale4.formatPrefix;
  return locale4;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default3(step) {
  return Math.max(0, -exponent_default3(Math.abs(step)));
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default3(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default3(value) / 3))) * 3 - exponent_default3(Math.abs(step)));
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/node_modules/d3-format/src/precisionRound.js
function precisionRound_default3(step, max6) {
  step = Math.abs(step), max6 = Math.abs(max6) - step;
  return Math.max(0, exponent_default3(max6) - exponent_default3(step)) + 1;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/tickFormat.js
function tickFormat_default(domain, count3, specifier) {
  var start2 = domain[0], stop = domain[domain.length - 1], step = tickStep4(start2, stop, count3 == null ? 10 : count3), precision;
  specifier = formatSpecifier2(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default3(step, value)))
        specifier.precision = precision;
      return formatPrefix3(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default3(step, Math.max(Math.abs(start2), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default3(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format3(specifier);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/linear.js
function linearish2(scale) {
  var domain = scale.domain;
  scale.ticks = function(count3) {
    var d2 = domain();
    return ticks_default(d2[0], d2[d2.length - 1], count3 == null ? 10 : count3);
  };
  scale.tickFormat = function(count3, specifier) {
    return tickFormat_default(domain(), count3, specifier);
  };
  scale.nice = function(count3) {
    var d2 = domain(), i4 = d2.length - 1, n3 = count3 == null ? 10 : count3, start2 = d2[0], stop = d2[i4], step = tickStep4(start2, stop, n3);
    if (step) {
      step = tickStep4(Math.floor(start2 / step) * step, Math.ceil(stop / step) * step, n3);
      d2[0] = Math.floor(start2 / step) * step;
      d2[i4] = Math.ceil(stop / step) * step;
      domain(d2);
    }
    return scale;
  };
  return scale;
}
function linear4() {
  var scale = continuous2(deinterpolateLinear, number_default3);
  scale.copy = function() {
    return copy3(scale, linear4());
  };
  return linearish2(scale);
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/time.js
var durationSecond2 = 1e3;
var durationMinute2 = durationSecond2 * 60;
var durationHour2 = durationMinute2 * 60;
var durationDay2 = durationHour2 * 24;
var durationWeek2 = durationDay2 * 7;
var durationMonth2 = durationDay2 * 30;
var durationYear2 = durationDay2 * 365;

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/colors.js
function colors_default2(s3) {
  return s3.match(/.{6}/g).map(function(x4) {
    return "#" + x4;
  });
}

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/category10.js
var category10_default2 = colors_default2("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/category20b.js
var category20b_default = colors_default2("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/category20c.js
var category20c_default = colors_default2("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/category20.js
var category20_default = colors_default2("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/cubehelix.js
var cubehelix_default4 = cubehelixLong2(cubehelix3(300, 0.5, 0), cubehelix3(-240, 0.5, 1));

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/rainbow.js
var warm2 = cubehelixLong2(cubehelix3(-100, 0.75, 0.35), cubehelix3(80, 1.5, 0.8));
var cool2 = cubehelixLong2(cubehelix3(260, 0.75, 0.35), cubehelix3(80, 1.5, 0.8));
var rainbow = cubehelix3();

// ../../node_modules/d3-svg-legend/node_modules/d3-scale/src/viridis.js
function ramp2(range4) {
  var n3 = range4.length;
  return function(t2) {
    return range4[Math.max(0, Math.min(n3 - 1, Math.floor(t2 * n3)))];
  };
}
var viridis_default2 = ramp2(colors_default2("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma2 = ramp2(colors_default2("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno2 = ramp2(colors_default2("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma2 = ramp2(colors_default2("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

// ../../node_modules/d3-svg-legend/node_modules/d3-array/src/ascending.js
function ascending_default3(a5, b3) {
  return a5 < b3 ? -1 : a5 > b3 ? 1 : a5 >= b3 ? 0 : NaN;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-array/src/bisector.js
function bisector_default2(compare) {
  if (compare.length === 1)
    compare = ascendingComparator2(compare);
  return {
    left: function(a5, x4, lo2, hi) {
      if (lo2 == null)
        lo2 = 0;
      if (hi == null)
        hi = a5.length;
      while (lo2 < hi) {
        var mid = lo2 + hi >>> 1;
        if (compare(a5[mid], x4) < 0)
          lo2 = mid + 1;
        else
          hi = mid;
      }
      return lo2;
    },
    right: function(a5, x4, lo2, hi) {
      if (lo2 == null)
        lo2 = 0;
      if (hi == null)
        hi = a5.length;
      while (lo2 < hi) {
        var mid = lo2 + hi >>> 1;
        if (compare(a5[mid], x4) > 0)
          hi = mid;
        else
          lo2 = mid + 1;
      }
      return lo2;
    }
  };
}
function ascendingComparator2(f4) {
  return function(d2, x4) {
    return ascending_default3(f4(d2), x4);
  };
}

// ../../node_modules/d3-svg-legend/node_modules/d3-array/src/bisect.js
var ascendingBisect4 = bisector_default2(ascending_default3);
var bisectRight4 = ascendingBisect4.right;
var bisectLeft4 = ascendingBisect4.left;

// ../../node_modules/d3-svg-legend/node_modules/d3-array/src/array.js
var array5 = Array.prototype;
var slice5 = array5.slice;
var map8 = array5.map;

// ../../node_modules/d3-svg-legend/node_modules/d3-array/src/ticks.js
var e105 = Math.sqrt(50);
var e55 = Math.sqrt(10);
var e25 = Math.sqrt(2);

// ../../node_modules/d3-svg-legend/node_modules/d3-array/src/max.js
function max_default2(array6, f4) {
  var i4 = -1, n3 = array6.length, a5, b3;
  if (f4 == null) {
    while (++i4 < n3)
      if ((b3 = array6[i4]) != null && b3 >= b3) {
        a5 = b3;
        break;
      }
    while (++i4 < n3)
      if ((b3 = array6[i4]) != null && b3 > a5)
        a5 = b3;
  } else {
    while (++i4 < n3)
      if ((b3 = f4(array6[i4], i4, array6)) != null && b3 >= b3) {
        a5 = b3;
        break;
      }
    while (++i4 < n3)
      if ((b3 = f4(array6[i4], i4, array6)) != null && b3 > a5)
        a5 = b3;
  }
  return a5;
}

// ../../node_modules/d3-svg-legend/node_modules/d3-array/src/sum.js
function sum_default3(array6, f4) {
  var s3 = 0, n3 = array6.length, a5, i4 = -1;
  if (f4 == null) {
    while (++i4 < n3)
      if (a5 = +array6[i4])
        s3 += a5;
  } else {
    while (++i4 < n3)
      if (a5 = +f4(array6[i4], i4, array6))
        s3 += a5;
  }
  return s3;
}

// ../../node_modules/d3-svg-legend/indexRollupNext.js
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
var d3_identity = function d3_identity2(d2) {
  return d2;
};
var d3_reverse = function d3_reverse2(arr) {
  var mirror = [];
  for (var i4 = 0, l3 = arr.length; i4 < l3; i4++) {
    mirror[i4] = arr[l3 - i4 - 1];
  }
  return mirror;
};
var d3_textWrapping = function d3_textWrapping2(text, width) {
  text.each(function() {
    var text2 = select_default5(this), words = text2.text().split(/\s+/).reverse(), word, line = [], lineNumber = 0, lineHeight = 1.2, y3 = text2.attr("y"), dy = parseFloat(text2.attr("dy")) || 0, tspan = text2.text(null).append("tspan").attr("x", 0).attr("dy", dy + "em");
    while (word = words.pop()) {
      line.push(word);
      tspan.text(line.join(" "));
      if (tspan.node().getComputedTextLength() > width && line.length > 1) {
        line.pop();
        tspan.text(line.join(" "));
        line = [word];
        tspan = text2.append("tspan").attr("x", 0).attr("dy", lineHeight + dy + "em").text(word);
      }
    }
  });
};
var d3_mergeLabels = function d3_mergeLabels2() {
  var gen = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var labels = arguments[1];
  var domain = arguments[2];
  var range4 = arguments[3];
  var labelDelimiter = arguments[4];
  if ((typeof labels === "undefined" ? "undefined" : _typeof(labels)) === "object") {
    if (labels.length === 0)
      return gen;
    var i4 = labels.length;
    for (; i4 < gen.length; i4++) {
      labels.push(gen[i4]);
    }
    return labels;
  } else if (typeof labels === "function") {
    var customLabels = [];
    var genLength = gen.length;
    for (var _i = 0; _i < genLength; _i++) {
      customLabels.push(labels({
        i: _i,
        genLength,
        generatedLabels: gen,
        domain,
        range: range4,
        labelDelimiter
      }));
    }
    return customLabels;
  }
  return gen;
};
var d3_linearLegend = function d3_linearLegend2(scale, cells, labelFormat) {
  var data = [];
  if (cells.length > 1) {
    data = cells;
  } else {
    var domain = scale.domain(), increment = (domain[domain.length - 1] - domain[0]) / (cells - 1);
    var i4 = 0;
    for (; i4 < cells; i4++) {
      data.push(domain[0] + i4 * increment);
    }
  }
  var labels = data.map(labelFormat);
  return {
    data,
    labels,
    feature: function feature(d2) {
      return scale(d2);
    }
  };
};
var d3_quantLegend = function d3_quantLegend2(scale, labelFormat, labelDelimiter) {
  var labels = scale.range().map(function(d2) {
    var invert = scale.invertExtent(d2);
    return labelFormat(invert[0]) + " " + labelDelimiter + " " + labelFormat(invert[1]);
  });
  return {
    data: scale.range(),
    labels,
    feature: d3_identity
  };
};
var d3_ordinalLegend = function d3_ordinalLegend2(scale) {
  return {
    data: scale.domain(),
    labels: scale.domain(),
    feature: function feature(d2) {
      return scale(d2);
    }
  };
};
var d3_cellOver = function d3_cellOver2(cellDispatcher, d2, obj) {
  cellDispatcher.call("cellover", obj, d2);
};
var d3_cellOut = function d3_cellOut2(cellDispatcher, d2, obj) {
  cellDispatcher.call("cellout", obj, d2);
};
var d3_cellClick = function d3_cellClick2(cellDispatcher, d2, obj) {
  cellDispatcher.call("cellclick", obj, d2);
};
var helper = {
  d3_drawShapes: function d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, path2) {
    if (shape === "rect") {
      shapes.attr("height", shapeHeight).attr("width", shapeWidth);
    } else if (shape === "circle") {
      shapes.attr("r", shapeRadius);
    } else if (shape === "line") {
      shapes.attr("x1", 0).attr("x2", shapeWidth).attr("y1", 0).attr("y2", 0);
    } else if (shape === "path") {
      shapes.attr("d", path2);
    }
  },
  d3_addText: function d3_addText(svg2, enter, labels, classPrefix, labelWidth) {
    enter.append("text").attr("class", classPrefix + "label");
    var text = svg2.selectAll("g." + classPrefix + "cell text." + classPrefix + "label").data(labels).text(d3_identity);
    if (labelWidth) {
      svg2.selectAll("g." + classPrefix + "cell text." + classPrefix + "label").call(d3_textWrapping, labelWidth);
    }
    return text;
  },
  d3_calcType: function d3_calcType(scale, ascending6, cells, labels, labelFormat, labelDelimiter) {
    var type2 = scale.invertExtent ? d3_quantLegend(scale, labelFormat, labelDelimiter) : scale.ticks ? d3_linearLegend(scale, cells, labelFormat) : d3_ordinalLegend(scale);
    var range4 = scale.range && scale.range() || scale.domain();
    type2.labels = d3_mergeLabels(type2.labels, labels, scale.domain(), range4, labelDelimiter);
    if (ascending6) {
      type2.labels = d3_reverse(type2.labels);
      type2.data = d3_reverse(type2.data);
    }
    return type2;
  },
  d3_filterCells: function d3_filterCells(type2, cellFilter) {
    var filterCells = type2.data.map(function(d2, i4) {
      return { data: d2, label: type2.labels[i4] };
    }).filter(cellFilter);
    var dataValues = filterCells.map(function(d2) {
      return d2.data;
    });
    var labelValues = filterCells.map(function(d2) {
      return d2.label;
    });
    type2.data = type2.data.filter(function(d2) {
      return dataValues.indexOf(d2) !== -1;
    });
    type2.labels = type2.labels.filter(function(d2) {
      return labelValues.indexOf(d2) !== -1;
    });
    return type2;
  },
  d3_placement: function d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign) {
    cell.attr("transform", cellTrans);
    text.attr("transform", textTrans);
    if (orient === "horizontal") {
      text.style("text-anchor", labelAlign);
    }
  },
  d3_addEvents: function d3_addEvents(cells, dispatcher) {
    cells.on("mouseover.legend", function(d2) {
      d3_cellOver(dispatcher, d2, this);
    }).on("mouseout.legend", function(d2) {
      d3_cellOut(dispatcher, d2, this);
    }).on("click.legend", function(d2) {
      d3_cellClick(dispatcher, d2, this);
    });
  },
  d3_title: function d3_title(svg2, title, classPrefix, titleWidth) {
    if (title !== "") {
      var titleText = svg2.selectAll("text." + classPrefix + "legendTitle");
      titleText.data([title]).enter().append("text").attr("class", classPrefix + "legendTitle");
      svg2.selectAll("text." + classPrefix + "legendTitle").text(title);
      if (titleWidth) {
        svg2.selectAll("text." + classPrefix + "legendTitle").call(d3_textWrapping, titleWidth);
      }
      var cellsSvg = svg2.select("." + classPrefix + "legendCells");
      var yOffset = svg2.select("." + classPrefix + "legendTitle").nodes().map(function(d2) {
        return d2.getBBox().height;
      })[0], xOffset = -cellsSvg.nodes().map(function(d2) {
        return d2.getBBox().x;
      })[0];
      cellsSvg.attr("transform", "translate(" + xOffset + "," + yOffset + ")");
    }
  },
  d3_defaultLocale: {
    format: format2,
    formatPrefix: formatPrefix2
  },
  d3_defaultFormatSpecifier: ".01f",
  d3_defaultDelimiter: "to"
};
function color3() {
  var scale = linear4(), shape = "rect", shapeWidth = 15, shapeHeight = 15, shapeRadius = 10, shapePadding = 2, cells = [5], cellFilter = void 0, labels = [], classPrefix = "", useClass = false, title = "", locale5 = helper.d3_defaultLocale, specifier = helper.d3_defaultFormatSpecifier, labelOffset = 10, labelAlign = "middle", labelDelimiter = helper.d3_defaultDelimiter, labelWrap = void 0, orient = "vertical", ascending6 = false, path2 = void 0, titleWidth = void 0, legendDispatcher = dispatch_default4("cellover", "cellout", "cellclick");
  function legend(svg2) {
    var type2 = helper.d3_calcType(scale, ascending6, cells, labels, locale5.format(specifier), labelDelimiter), legendG = svg2.selectAll("g").data([scale]);
    legendG.enter().append("g").attr("class", classPrefix + "legendCells");
    if (cellFilter) {
      helper.d3_filterCells(type2, cellFilter);
    }
    var cell = svg2.select("." + classPrefix + "legendCells").selectAll("." + classPrefix + "cell").data(type2.data);
    var cellEnter = cell.enter().append("g").attr("class", classPrefix + "cell");
    cellEnter.append(shape).attr("class", classPrefix + "swatch");
    var shapes = svg2.selectAll("g." + classPrefix + "cell " + shape + "." + classPrefix + "swatch").data(type2.data);
    helper.d3_addEvents(cellEnter, legendDispatcher);
    cell.exit().transition().style("opacity", 0).remove();
    shapes.exit().transition().style("opacity", 0).remove();
    shapes = shapes.merge(shapes);
    helper.d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, path2);
    var text = helper.d3_addText(svg2, cellEnter, type2.labels, classPrefix, labelWrap);
    cell = cellEnter.merge(cell);
    var textSize = text.nodes().map(function(d2) {
      return d2.getBBox();
    }), shapeSize = shapes.nodes().map(function(d2) {
      return d2.getBBox();
    });
    if (!useClass) {
      if (shape == "line") {
        shapes.style("stroke", type2.feature);
      } else {
        shapes.style("fill", type2.feature);
      }
    } else {
      shapes.attr("class", function(d2) {
        return classPrefix + "swatch " + type2.feature(d2);
      });
    }
    var cellTrans = void 0, textTrans = void 0, textAlign = labelAlign == "start" ? 0 : labelAlign == "middle" ? 0.5 : 1;
    if (orient === "vertical") {
      (function() {
        var cellSize = textSize.map(function(d2, i4) {
          return Math.max(d2.height, shapeSize[i4].height);
        });
        cellTrans = function cellTrans2(d2, i4) {
          var height = sum_default3(cellSize.slice(0, i4));
          return "translate(0, " + (height + i4 * shapePadding) + ")";
        };
        textTrans = function textTrans2(d2, i4) {
          return "translate( " + (shapeSize[i4].width + shapeSize[i4].x + labelOffset) + ", " + (shapeSize[i4].y + shapeSize[i4].height / 2 + 5) + ")";
        };
      })();
    } else if (orient === "horizontal") {
      cellTrans = function cellTrans2(d2, i4) {
        return "translate(" + i4 * (shapeSize[i4].width + shapePadding) + ",0)";
      };
      textTrans = function textTrans2(d2, i4) {
        return "translate(" + (shapeSize[i4].width * textAlign + shapeSize[i4].x) + ",\n          " + (shapeSize[i4].height + shapeSize[i4].y + labelOffset + 8) + ")";
      };
    }
    helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);
    helper.d3_title(svg2, title, classPrefix, titleWidth);
    cell.transition().style("opacity", 1);
  }
  legend.scale = function(_4) {
    if (!arguments.length)
      return scale;
    scale = _4;
    return legend;
  };
  legend.cells = function(_4) {
    if (!arguments.length)
      return cells;
    if (_4.length > 1 || _4 >= 2) {
      cells = _4;
    }
    return legend;
  };
  legend.cellFilter = function(_4) {
    if (!arguments.length)
      return cellFilter;
    cellFilter = _4;
    return legend;
  };
  legend.shape = function(_4, d2) {
    if (!arguments.length)
      return shape;
    if (_4 == "rect" || _4 == "circle" || _4 == "line" || _4 == "path" && typeof d2 === "string") {
      shape = _4;
      path2 = d2;
    }
    return legend;
  };
  legend.shapeWidth = function(_4) {
    if (!arguments.length)
      return shapeWidth;
    shapeWidth = +_4;
    return legend;
  };
  legend.shapeHeight = function(_4) {
    if (!arguments.length)
      return shapeHeight;
    shapeHeight = +_4;
    return legend;
  };
  legend.shapeRadius = function(_4) {
    if (!arguments.length)
      return shapeRadius;
    shapeRadius = +_4;
    return legend;
  };
  legend.shapePadding = function(_4) {
    if (!arguments.length)
      return shapePadding;
    shapePadding = +_4;
    return legend;
  };
  legend.labels = function(_4) {
    if (!arguments.length)
      return labels;
    labels = _4;
    return legend;
  };
  legend.labelAlign = function(_4) {
    if (!arguments.length)
      return labelAlign;
    if (_4 == "start" || _4 == "end" || _4 == "middle") {
      labelAlign = _4;
    }
    return legend;
  };
  legend.locale = function(_4) {
    if (!arguments.length)
      return locale5;
    locale5 = locale_default2(_4);
    return legend;
  };
  legend.labelFormat = function(_4) {
    if (!arguments.length)
      return legend.locale().format(specifier);
    specifier = formatSpecifier_default(_4);
    return legend;
  };
  legend.labelOffset = function(_4) {
    if (!arguments.length)
      return labelOffset;
    labelOffset = +_4;
    return legend;
  };
  legend.labelDelimiter = function(_4) {
    if (!arguments.length)
      return labelDelimiter;
    labelDelimiter = _4;
    return legend;
  };
  legend.labelWrap = function(_4) {
    if (!arguments.length)
      return labelWrap;
    labelWrap = _4;
    return legend;
  };
  legend.useClass = function(_4) {
    if (!arguments.length)
      return useClass;
    if (_4 === true || _4 === false) {
      useClass = _4;
    }
    return legend;
  };
  legend.orient = function(_4) {
    if (!arguments.length)
      return orient;
    _4 = _4.toLowerCase();
    if (_4 == "horizontal" || _4 == "vertical") {
      orient = _4;
    }
    return legend;
  };
  legend.ascending = function(_4) {
    if (!arguments.length)
      return ascending6;
    ascending6 = !!_4;
    return legend;
  };
  legend.classPrefix = function(_4) {
    if (!arguments.length)
      return classPrefix;
    classPrefix = _4;
    return legend;
  };
  legend.title = function(_4) {
    if (!arguments.length)
      return title;
    title = _4;
    return legend;
  };
  legend.titleWidth = function(_4) {
    if (!arguments.length)
      return titleWidth;
    titleWidth = _4;
    return legend;
  };
  legend.textWrap = function(_4) {
    if (!arguments.length)
      return textWrap;
    textWrap = _4;
    return legend;
  };
  legend.on = function() {
    var value = legendDispatcher.on.apply(legendDispatcher, arguments);
    return value === legendDispatcher ? legend : value;
  };
  return legend;
}
function symbol() {
  var scale = linear4(), shape = "path", shapeWidth = 15, shapeHeight = 15, shapeRadius = 10, shapePadding = 5, cells = [5], cellFilter = void 0, labels = [], classPrefix = "", title = "", locale5 = helper.d3_defaultLocale, specifier = helper.d3_defaultFormatSpecifier, labelAlign = "middle", labelOffset = 10, labelDelimiter = helper.d3_defaultDelimiter, labelWrap = void 0, orient = "vertical", ascending6 = false, titleWidth = void 0, legendDispatcher = dispatch_default4("cellover", "cellout", "cellclick");
  function legend(svg2) {
    var type2 = helper.d3_calcType(scale, ascending6, cells, labels, locale5.format(specifier), labelDelimiter), legendG = svg2.selectAll("g").data([scale]);
    if (cellFilter) {
      helper.d3_filterCells(type2, cellFilter);
    }
    legendG.enter().append("g").attr("class", classPrefix + "legendCells");
    var cell = svg2.select("." + classPrefix + "legendCells").selectAll("." + classPrefix + "cell").data(type2.data);
    var cellEnter = cell.enter().append("g").attr("class", classPrefix + "cell");
    cellEnter.append(shape).attr("class", classPrefix + "swatch");
    var shapes = svg2.selectAll("g." + classPrefix + "cell " + shape + "." + classPrefix + "swatch");
    helper.d3_addEvents(cellEnter, legendDispatcher);
    cell.exit().transition().style("opacity", 0).remove();
    shapes.exit().transition().style("opacity", 0).remove();
    shapes = shapes.merge(shapes);
    helper.d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, type2.feature);
    var text = helper.d3_addText(svg2, cellEnter, type2.labels, classPrefix, labelWrap);
    cell = cellEnter.merge(cell);
    var textSize = text.nodes().map(function(d2) {
      return d2.getBBox();
    }), shapeSize = shapes.nodes().map(function(d2) {
      return d2.getBBox();
    });
    var maxH = max_default2(shapeSize, function(d2) {
      return d2.height;
    }), maxW = max_default2(shapeSize, function(d2) {
      return d2.width;
    });
    var cellTrans = void 0, textTrans = void 0, textAlign = labelAlign == "start" ? 0 : labelAlign == "middle" ? 0.5 : 1;
    if (orient === "vertical") {
      (function() {
        var cellSize = textSize.map(function(d2, i4) {
          return Math.max(maxH, d2.height);
        });
        cellTrans = function cellTrans2(d2, i4) {
          var height = sum_default3(cellSize.slice(0, i4));
          return "translate(0, " + (height + i4 * shapePadding) + " )";
        };
        textTrans = function textTrans2(d2, i4) {
          return "translate( " + (maxW + labelOffset) + ",\n              " + (shapeSize[i4].y + shapeSize[i4].height / 2 + 5) + ")";
        };
      })();
    } else if (orient === "horizontal") {
      cellTrans = function cellTrans2(d2, i4) {
        return "translate( " + i4 * (maxW + shapePadding) + ",0)";
      };
      textTrans = function textTrans2(d2, i4) {
        return "translate( " + (shapeSize[i4].width * textAlign + shapeSize[i4].x) + ",\n              " + (maxH + labelOffset) + ")";
      };
    }
    helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);
    helper.d3_title(svg2, title, classPrefix, titleWidth);
    cell.transition().style("opacity", 1);
  }
  legend.scale = function(_4) {
    if (!arguments.length)
      return scale;
    scale = _4;
    return legend;
  };
  legend.cells = function(_4) {
    if (!arguments.length)
      return cells;
    if (_4.length > 1 || _4 >= 2) {
      cells = _4;
    }
    return legend;
  };
  legend.cellFilter = function(_4) {
    if (!arguments.length)
      return cellFilter;
    cellFilter = _4;
    return legend;
  };
  legend.shapePadding = function(_4) {
    if (!arguments.length)
      return shapePadding;
    shapePadding = +_4;
    return legend;
  };
  legend.labels = function(_4) {
    if (!arguments.length)
      return labels;
    labels = _4;
    return legend;
  };
  legend.labelAlign = function(_4) {
    if (!arguments.length)
      return labelAlign;
    if (_4 == "start" || _4 == "end" || _4 == "middle") {
      labelAlign = _4;
    }
    return legend;
  };
  legend.locale = function(_4) {
    if (!arguments.length)
      return locale5;
    locale5 = locale_default2(_4);
    return legend;
  };
  legend.labelFormat = function(_4) {
    if (!arguments.length)
      return legend.locale().format(specifier);
    specifier = formatSpecifier_default(_4);
    return legend;
  };
  legend.labelOffset = function(_4) {
    if (!arguments.length)
      return labelOffset;
    labelOffset = +_4;
    return legend;
  };
  legend.labelDelimiter = function(_4) {
    if (!arguments.length)
      return labelDelimiter;
    labelDelimiter = _4;
    return legend;
  };
  legend.labelWrap = function(_4) {
    if (!arguments.length)
      return labelWrap;
    labelWrap = _4;
    return legend;
  };
  legend.orient = function(_4) {
    if (!arguments.length)
      return orient;
    _4 = _4.toLowerCase();
    if (_4 == "horizontal" || _4 == "vertical") {
      orient = _4;
    }
    return legend;
  };
  legend.ascending = function(_4) {
    if (!arguments.length)
      return ascending6;
    ascending6 = !!_4;
    return legend;
  };
  legend.classPrefix = function(_4) {
    if (!arguments.length)
      return classPrefix;
    classPrefix = _4;
    return legend;
  };
  legend.title = function(_4) {
    if (!arguments.length)
      return title;
    title = _4;
    return legend;
  };
  legend.titleWidth = function(_4) {
    if (!arguments.length)
      return titleWidth;
    titleWidth = _4;
    return legend;
  };
  legend.on = function() {
    var value = legendDispatcher.on.apply(legendDispatcher, arguments);
    return value === legendDispatcher ? legend : value;
  };
  return legend;
}

// ../../packages/perspective-viewer-d3fc/dist/esm/perspective-viewer-d3fc.js
var import_d3fc5 = __toESM(require_d3fc());
var xe3 = __toESM(require_d3fc());
var qr = __toESM(require_d3fc());
var cn = __toESM(require_d3fc());
var an = __toESM(require_d3fc());
var fn = __toESM(require_d3fc());
var pn = __toESM(require_d3fc());
var xt = __toESM(require_d3fc());
var bn = __toESM(require_d3fc());
var import_d3fc6 = __toESM(require_d3fc());
var Xe2 = __toESM(require_d3fc());
var _n = __toESM(require_d3fc());
var zn = __toESM(require_d3fc());
var kn = __toESM(require_d3fc());
var Pn = __toESM(require_d3fc());
var we3 = __toESM(require_d3fc());
var wt = __toESM(require_d3fc());
var import_d3fc7 = __toESM(require_d3fc());
var _t = __toESM(require_d3fc());
var He2 = __toESM(require_d3fc());
var import_d3fc8 = __toESM(require_d3fc());
var vo = __toESM(require_node());
var Ao = Object.defineProperty;
var et2 = (e3, t2) => {
  for (var r2 in t2)
    Ao(e3, r2, { get: t2[r2], enumerable: true });
};
Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector);
Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector);
Element.prototype.closest || (Element.prototype.closest = function(e3) {
  var t2 = this;
  do {
    if (t2.matches(e3))
      return t2;
    t2 = t2.parentElement || t2.parentNode;
  } while (t2 !== null && t2.nodeType === 1);
  return null;
});
var C6 = { none: "none", ordinal: "ordinal", time: "time", linear: "linear" };
var Me3 = (e3) => {
  let t2 = "crossValues", r2 = null, o2 = null, n3 = () => {
    let a5 = (l3) => {
      let i4 = r2 ? e3[t2].filter((c6) => r2 == c6.name) : e3[t2];
      return t2 == "crossValues" && i4.length > 1 ? false : i4.some((c6) => l3.includes(c6.type));
    };
    return e3[t2].length === 0 ? C6.none : o2 != C6.time && a5(["datetime", "date"]) ? C6.time : o2 != C6.linear && a5(["integer", "float"]) || o2 == C6.ordinal ? C6.linear : C6.ordinal;
  };
  return n3.settingName = (...a5) => a5.length ? (t2 = a5[0], n3) : t2, n3.settingValue = (...a5) => a5.length ? (r2 = a5[0], n3) : r2, n3.excludeType = (...a5) => a5.length ? (o2 = a5[0], n3) : o2, n3;
};
var Ft = {};
et2(Ft, { domain: () => Eo, labelFunction: () => Pt, scale: () => zo });
var pr = (e3) => {
  let t2 = (r2) => (o2, n3) => o2 === void 0 ? n3 : n3 === void 0 ? o2 : r2(o2, n3);
  return e3.reduce((r2, o2) => [t2(Math.min)(r2[0], o2[0]), t2(Math.max)(r2[1], o2[1])], [void 0, void 0]);
};
var le3 = (e3) => Array.isArray(e3) ? e3.flat(1 / 0) : [e3];
var To = 1;
var tt = (e3) => {
  let t2 = (r2) => e3(r2);
  return (0, import_d3fc.rebindAll)(t2, e3), t2.bandwidth = (...r2) => r2.length ? (e3.bandwidth(...r2), t2) : Math.max(e3.bandwidth(), To), t2;
};
var dr = (e3) => {
  let t2 = (r2) => e3(r2);
  return (0, import_d3fc2.rebindAll)(t2, e3), t2.ticks = function() {
    return [];
  }, t2;
};
var zo = () => dr(tt(band()));
var Eo = () => {
  let e3 = ["crossValue"], t2 = "horizontal", r2 = (n3) => {
    let a5 = le3(n3);
    return o2([...new Set(a5.map((l3) => l3[e3[0]]))]);
  }, o2 = (n3) => t2 == "vertical" ? n3.reverse() : n3;
  return r2.valueName = (...n3) => n3.length ? (e3 = [n3[0]], r2) : e3[0], r2.valueNames = (...n3) => n3.length ? (e3 = n3[0], r2) : e3, r2.orient = (...n3) => n3.length ? (t2 = n3[0], r2) : t2, r2;
};
var Pt = (e3) => (t2) => t2[e3].join("|");
var $t = {};
et2($t, { component: () => Do, domain: () => Bt, labelFunction: () => It, scale: () => No, tickFormatFunction: () => Oo });
var rt = () => {
  let e3 = [0, 0], t2 = "percent", r2 = (o2) => {
    switch (t2) {
      case "domain": {
        o2[0] -= e3[0], o2[1] += e3[1];
        break;
      }
      case "percent": {
        let n3 = o2[1] - o2[0];
        o2[0] -= e3[0] * n3, o2[1] += e3[1] * n3;
        break;
      }
      default:
        throw new Error("Unknown padUnit: " + t2);
    }
    return o2;
  };
  return r2.pad = function() {
    return arguments.length ? (e3 = arguments.length <= 0 ? void 0 : arguments[0], r2) : e3;
  }, r2.padUnit = function() {
    return arguments.length ? (t2 = arguments.length <= 0 ? void 0 : arguments[0], r2) : t2;
  }, r2;
};
var hr = function() {
  let e3 = [function(a5) {
    return a5;
  }], t2 = null, r2 = [], o2 = rt(), n3 = function(l3) {
    let i4 = new Array(l3.length), c6 = true, s3 = false, m4, d2 = e3[Symbol.iterator]();
    try {
      for (let p2; !(c6 = (p2 = d2.next()).done); c6 = true) {
        let f4 = p2.value;
        for (let h4 = 0; h4 < l3.length; h4++) {
          let g3 = f4(l3[h4], h4);
          Array.isArray(g3) ? i4.push.apply(i4, Rt(g3)) : i4.push(g3);
        }
      }
    } catch (p2) {
      s3 = true, m4 = p2;
    } finally {
      try {
        !c6 && d2.return && d2.return();
      } finally {
        if (s3)
          throw m4;
      }
    }
    let u3 = [min(i4), max2(i4)];
    if (u3[0] = u3[0] == null ? min(r2) : min([u3[0]].concat(Rt(r2))), u3[1] = u3[1] == null ? max2(r2) : max2([u3[1]].concat(Rt(r2))), t2 != null) {
      let p2 = Math.max(Math.abs(u3[1] - t2), Math.abs(u3[0] - t2));
      u3[0] = t2 - p2, u3[1] = t2 + p2;
    }
    return o2(u3);
  };
  return n3.accessors = function() {
    return arguments.length ? (e3 = arguments.length <= 0 ? void 0 : arguments[0], n3) : e3;
  }, n3.pad = function() {
    return arguments.length ? (o2.pad(arguments.length <= 0 ? void 0 : arguments[0]), n3) : o2.pad;
  }, n3.padUnit = function() {
    return arguments.length ? (o2.padUnit(arguments.length <= 0 ? void 0 : arguments[0]), n3) : o2.padUnit;
  }, n3.include = function() {
    return arguments.length ? (r2 = arguments.length <= 0 ? void 0 : arguments[0], n3) : r2;
  }, n3.symmetricalAbout = function() {
    return arguments.length ? (t2 = arguments.length <= 0 ? void 0 : arguments[0], n3) : t2;
  }, n3.paddingStrategy = function() {
    return arguments.length ? (o2 = arguments.length <= 0 ? void 0 : arguments[0], n3) : o2;
  }, n3;
};
var Rt = function(e3) {
  if (Array.isArray(e3)) {
    let t2 = Array(e3.length);
    for (let r2 = 0; r2 < e3.length; r2++)
      t2[r2] = e3[r2];
    return t2;
  } else
    return Array.from(e3);
};
var Mo = 1e7;
var ot = (e3) => Math.abs(e3) >= Mo ? format(".3s")(e3) : Number.isInteger(e3) ? format(",.0f")(e3) : format(",.2f")(e3);
function Ne2(e3) {
  return e3.getRootNode().host;
}
function se4(e3) {
  return e3.closest("#container.chart");
}
var No = () => linear2();
var Bt = () => {
  let e3 = hr().pad([0, 0.1]).padUnit("percent"), t2 = ["crossValue"], r2 = (a5) => (e3.accessors(t2.map((l3) => (i4) => parseFloat(i4[l3]))), n3(le3(a5)));
  X5.rebindAll(r2, e3);
  let o2 = (a5) => {
    let l3 = t2.map((i4) => a5.map((c6) => c6[i4]).sort((c6, s3) => c6 - s3).filter((c6, s3, m4) => s3 === 0 || c6 !== m4[s3 - 1]).reduce((c6, s3, m4, d2) => m4 === 0 || c6 <= s3 - d2[m4 - 1] ? c6 : Math.abs(s3 - d2[m4 - 1])));
    return Math.min(...l3);
  }, n3 = (a5) => {
    if (e3.padUnit() == "domain") {
      let l3 = o2(a5);
      return e3.pad([l3 / 2, l3 / 2])(a5);
    } else
      return e3(a5);
  };
  return r2.valueName = (...a5) => a5.length ? (t2 = [a5[0]], r2) : t2[0], r2.valueNames = (...a5) => a5.length ? (t2 = a5[0], r2) : t2, r2;
};
var It = (e3) => (t2) => t2[e3][0];
var Oo = ot;
var Do = (e3) => {
  let t2 = null, r2 = "horizontal", o2 = null, n3 = (s3, m4) => {
    try {
      return se4(s3.node()).querySelector(".cartesian-chart").querySelector(`.${m4}-axis`);
    } catch {
      return null;
    }
  }, a5 = (s3) => {
    let m4 = select_default2(s3).select("text").node();
    m4.style.fontSize = "80%";
  }, l3 = (s3, m4) => {
    let d2 = s3.getBoundingClientRect();
    m4.each((u3, p2, f4) => {
      let h4 = select_default2(f4[p2]).node().getBoundingClientRect();
      (r2 == "vertical" && d2.width < h4.width || r2 == "horizontal" && d2.height < h4.height) && a5(f4[p2]);
    });
  }, i4 = (s3, m4, d2) => {
    let u3 = n3(s3, m4);
    u3 && l3(u3, s3);
  }, c6 = () => ({ bottom: X5.axisBottom, left: X5.axisLeft, top: X5.axisTop, right: X5.axisRight, decorate: i4 });
  return c6.domain = (...s3) => s3.length ? (t2 = s3[0], c6) : t2, c6.orient = (...s3) => s3.length ? (r2 = s3[0], c6) : r2, c6.settingName = (...s3) => s3.length ? (o2 = s3[0], c6) : o2, c6;
};
var Gt = {};
et2(Gt, { domain: () => Fo, labelFunction: () => Ht, scale: () => Po });
var Po = () => time();
var Fo = () => {
  let e3 = Oe3.extentTime(), t2 = ["crossValue"], r2 = (a5) => (e3.accessors(t2.map((l3) => (i4) => new Date(i4[l3]))), n3(le3(a5)));
  Oe3.rebindAll(r2, e3, Oe3.exclude("include", "paddingStrategy"));
  let o2 = (a5) => {
    let l3 = t2.map((i4) => a5.map((c6) => new Date(c6[i4]).getTime()).sort((c6, s3) => c6 - s3).filter((c6, s3, m4) => s3 === 0 || c6 !== m4[s3 - 1]).reduce((c6, s3, m4, d2) => m4 === 0 || Math.abs(c6) <= Math.abs(s3 - d2[m4 - 1]) ? Math.abs(c6) : Math.abs(s3 - d2[m4 - 1])));
    return Math.min(...l3);
  }, n3 = (a5) => {
    let l3 = Math.abs(o2(a5));
    return e3.padUnit("domain").pad([l3 / 2, l3 / 2])(a5);
  };
  return r2.valueName = (...a5) => a5.length ? (t2 = [a5[0]], r2) : t2[0], r2.valueNames = (...a5) => a5.length ? (t2 = a5[0], r2) : t2, r2;
};
var Ht = (e3) => (t2) => new Date(t2[e3][0]);
var Wt = {};
et2(Wt, { component: () => Yo, domain: () => Wo, labelFunction: () => jt, scale: () => jo });
var yr = (...e3) => {
  let t2 = {}, r2 = (o2) => {
    for (let n3 of Object.keys(t2))
      o2[n3](t2[n3]);
    return o2;
  };
  for (let o2 of e3)
    r2[o2] = (...n3) => n3.length ? (t2[o2] = n3[0], r2) : t2[o2];
  return r2;
};
var at = (e3, t2, r2) => {
  let o2 = 6, n3 = 6, a5 = yr("tickFormat", "ticks", "tickArguments", "tickValues", "tickPadding"), l3 = () => {
  }, i4 = null, c6 = (0, import_d3fc3.dataJoin)("g", "group"), s3 = (0, import_d3fc3.dataJoin)("path", "domain"), m4 = (h4, g3) => u3() ? `translate(${g3}, ${h4})` : `translate(${h4}, ${g3})`, d2 = (h4) => u3() ? h4.map((g3) => [g3[1], g3[0]]) : h4, u3 = () => e3 === "left" || e3 === "right", p2 = (h4) => {
    if (!i4) {
      a5(t2(r2).decorate(l3))(h4);
      return;
    }
    h4.each((g3, y3, x4) => {
      let v4 = x4[y3], b3 = select_default2(v4), w4 = e3 === "bottom" || e3 === "right" ? 1 : -1, V4 = r2.range(), k4 = d2([[V4[0], w4 * o2], [V4[0], 0], [V4[1], 0], [V4[1], w4 * o2]]);
      s3(b3, [g3]).attr("d", line_default()(k4)).attr("stroke", "#000").attr("fill", "none");
      let j4 = c6(b3, i4), M4 = (I4) => Array.isArray(n3) ? n3[I4] : n3, z3 = (I4) => {
        let E6 = 0;
        for (let S3 = 0; S3 < I4; S3++)
          E6 += M4(S3);
        return E6;
      };
      j4.attr("transform", (I4, E6) => m4(0, w4 * z3(E6))).each((I4, E6, S3) => {
        let T3 = select_default2(S3[E6]), $4 = f4(r2, I4);
        a5(t2($4)).decorate((te3, ae3) => l3(te3, ae3, E6)).tickSizeInner(M4(E6)).tickOffset((te3) => $4.step(te3) / 2)(T3), T3.select("path.domain").attr("visibility", "hidden");
      }), j4.exit().attr("transform", (I4, E6) => m4(0, w4 * z3(E6)));
    });
  }, f4 = (h4, g3) => {
    function y3(x4) {
      let v4 = x4.domain;
      return v4.reduce((b3, w4) => b3 + h4(w4), 0) / v4.length;
    }
    return y3.ticks = () => g3, y3.tickFormat = () => (x4) => x4.text, y3.copy = () => f4(h4, g3), y3.step = (x4) => x4.domain.length * h4.step(), (0, import_d3fc3.rebindAll)(y3, h4, (0, import_d3fc3.exclude)("ticks", "step", "copy")), y3;
  };
  return p2.tickSize = (...h4) => h4.length ? (n3 = o2 = Number(h4[0]), p2) : n3, p2.tickSizeInner = (...h4) => h4.length ? (n3 = Array.isArray(h4[0]) ? h4[0] : Number(h4[0]), p2) : n3, p2.tickSizeOuter = (...h4) => h4.length ? (o2 = Number(h4[0]), p2) : o2, p2.decorate = (...h4) => h4.length ? (l3 = h4[0], p2) : l3, p2.groups = (...h4) => h4.length ? (i4 = h4[0], p2) : i4, (0, import_d3fc3.rebindAll)(p2, a5), p2;
};
var wr = (e3) => at("top", import_d3fc3.axisOrdinalTop, e3);
var _r = (e3) => at("bottom", import_d3fc3.axisOrdinalBottom, e3);
var Vr = (e3) => at("left", import_d3fc3.axisOrdinalLeft, e3);
var Sr = (e3) => at("right", import_d3fc3.axisOrdinalRight, e3);
var jo = () => tt(band()).padding(0.5);
var Wo = () => {
  let e3 = ["crossValue"], t2 = "horizontal", r2 = (n3) => {
    let a5 = le3(n3);
    return o2([...Array.from(new Set(a5.map((l3) => l3[e3[0]])))]);
  }, o2 = (n3) => t2 == "vertical" ? n3.reverse() : n3;
  return r2.valueName = (...n3) => n3.length ? (e3 = [n3[0]], r2) : e3[0], r2.valueNames = (...n3) => n3.length ? (e3 = n3[0], r2) : e3, r2.orient = (...n3) => n3.length ? (t2 = n3[0], r2) : t2, r2;
};
var jt = (e3) => (t2) => t2[e3].join("|");
var Yo = (e3) => {
  let t2 = "horizontal", r2 = "crossValues", o2 = null, n3 = () => {
    let u3 = e3[r2].length > 1, p2 = l3(o2), f4 = p2.map(i4), h4 = u3 ? f4.map((b3) => b3.size) : f4[0].size, g3 = f4.reduce((b3, w4) => b3 + w4.size, 0), y3 = (b3) => (w4) => {
      let V4 = b3(w4);
      return u3 && V4.groups(p2).tickSizeInner(h4).tickSizeOuter(g3), t2 !== "horizontal" && V4.tickPadding(10), V4;
    }, x4 = (b3, w4, V4) => {
      let k4 = f4[V4].rotation;
      t2 === "horizontal" && d2(b3, k4), c6(b3, k4);
    }, v4 = a5(u3);
    return { bottom: y3(v4.bottom), left: y3(v4.left), right: y3(v4.right), top: y3(v4.top), size: `${g3 + 10}px`, decorate: x4 };
  }, a5 = (u3) => u3 ? { bottom: _r, left: Vr, top: wr, right: Sr } : { bottom: ce3.axisOrdinalBottom, left: ce3.axisOrdinalLeft, top: ce3.axisOrdinalTop, right: ce3.axisOrdinalRight }, l3 = (u3) => {
    let p2 = [];
    return u3.forEach((f4) => {
      (f4 && f4.split ? f4.split("|") : [f4]).forEach((g3, y3) => {
        for (; p2.length <= y3; )
          p2.push([]);
        let x4 = p2[y3];
        x4.length > 0 && x4[x4.length - 1].text === g3 ? x4[x4.length - 1].domain.push(f4) : x4.push({ text: g3, domain: [f4] });
      });
    }), p2.reverse();
  }, i4 = (u3) => {
    let p2 = e3.size.width, f4 = Math.max(...u3.map((h4) => h4.text ? h4.text.length : 0));
    return t2 === "horizontal" ? u3 && u3.length * 16 > p2 - 100 ? { size: f4 * 5 + 10, rotation: 90 } : u3 && u3.length * (f4 * 6 + 10) > p2 - 100 ? { size: f4 * 3 + 20, rotation: 45 } : { size: 25, rotation: 0 } : { size: f4 * 5 + 10, rotation: 0 };
  }, c6 = (u3, p2) => {
    let f4 = (w4) => {
      let V4 = w4.indexOf(",") !== -1 ? "," : " ", k4 = w4.substring(w4.indexOf("(") + 1, w4.indexOf(")")).split(V4).map((B6) => parseInt(B6));
      for (; k4.length < 2; )
        k4.push(0);
      return k4;
    }, y3 = p2 ? (w4, V4) => w4.x + w4.width + 14 > V4.x + V4.width : (w4, V4) => w4.x <= V4.x + V4.width && V4.x <= w4.x + w4.width && w4.y <= V4.y + V4.height && V4.y <= w4.y + w4.height, x4 = (w4, V4) => w4.x >= V4.x && w4.x + w4.width <= V4.x + V4.width && w4.y >= V4.y && w4.y + w4.height <= V4.y + V4.height, v4 = t2 == "horizontal" ? s3(u3) : null, b3 = [];
    u3.each((w4, V4, k4) => {
      let B6 = select_default2(k4[V4]), j4 = f4(B6.attr("transform")), M4 = B6.node().getBBox(), z3 = { x: M4.x + j4[0], y: M4.y + j4[1], width: M4.width, height: M4.height }, E6 = b3.some((S3) => y3(S3, z3)) || v4 && !x4(z3, v4);
      B6.attr("visibility", E6 ? "hidden" : ""), E6 || b3.push(z3);
    });
  }, s3 = (u3) => {
    let p2 = se4(u3.node());
    if (p2 === null)
      return;
    let f4 = p2.querySelector(".cartesian-chart"), h4 = f4.querySelector(".x-axis"), g3 = f4.getBoundingClientRect(), y3 = h4.getBoundingClientRect();
    return { x: g3.left - y3.left, width: g3.width, y: g3.top - y3.top, height: g3.height };
  }, m4 = (u3) => u3 ? u3 < 60 ? `rotate(-${u3} 5 5)` : `rotate(-${u3} 3 7)` : "translate(0, 8)", d2 = (u3, p2) => {
    let f4 = m4(p2), h4 = p2 ? "end" : "";
    u3.each((g3, y3, x4) => {
      select_default2(x4[y3]).select("text").attr("transform", f4).style("text-anchor", h4);
    });
  };
  return n3.orient = (...u3) => u3.length ? (t2 = u3[0], n3) : t2, n3.settingName = (...u3) => u3.length ? (r2 = u3[0], n3) : r2, n3.domain = (...u3) => u3.length ? (o2 = u3[0], n3) : o2, n3;
};
var Uo = { none: Ft, ordinal: Wt, time: Gt, linear: $t };
var A6 = (e3) => {
  let t2 = null, r2 = "horizontal", o2 = "crossValues", n3 = null, a5 = ["crossValue"], l3 = null, i4 = null, c6 = ["include", "paddingStrategy", "pad"], s3 = {}, m4 = (p2) => {
    let f4 = Me3(e3).excludeType(t2).settingName(o2).settingValue(n3)(), h4 = Uo[f4], g3 = h4.domain().valueNames(a5);
    c6.forEach((v4) => {
      s3[v4] && g3[v4] && g3[v4](s3[v4]);
    }), g3.orient && g3.orient(r2);
    let y3 = g3(p2);
    l3 !== null && (y3 = l3(y3)), i4 && typeof y3[0] == "number" && (i4[0] = y3[0] = Math.min(y3[0], i4[0]), i4[1] = y3[1] = Math.max(y3[1], i4[1]));
    let x4 = h4.component ? d2(h4, y3, p2) : u3();
    return { scale: h4.scale(), domain: y3, domainFunction: g3, labelFunction: h4.labelFunction, component: { bottom: x4.bottom, left: x4.left, top: x4.top, right: x4.right }, size: x4.size, decorate: x4.decorate, label: e3[o2].map((v4) => v4.name).join(", "), tickFormatFunction: h4.tickFormatFunction };
  }, d2 = (p2, f4, h4) => p2.component(e3).orient(r2).settingName(o2).domain(f4)(h4), u3 = () => ({ bottom: ue3.axisBottom, left: ue3.axisLeft, top: ue3.axisTop, right: ue3.axisRight, decorate: () => {
  } });
  return m4.memoValue = (...p2) => p2.length ? (i4 = p2[0], m4) : i4, m4.excludeType = (...p2) => p2.length ? (t2 = p2[0], m4) : t2, m4.orient = (...p2) => p2.length ? (r2 = p2[0], m4) : r2, m4.settingName = (...p2) => p2.length ? (o2 = p2[0], m4) : o2, m4.settingValue = (...p2) => p2.length ? (n3 = p2[0], m4) : n3, m4.valueName = (...p2) => p2.length ? (a5 = [p2[0]], m4) : a5[0], m4.valueNames = (...p2) => p2.length ? (a5 = p2[0], m4) : a5, m4.modifyDomain = (...p2) => p2.length ? (l3 = p2[0], m4) : l3, c6.forEach((p2) => {
    m4[p2] = (...f4) => f4.length ? (s3[p2] = f4[0], m4) : s3[p2];
  }), m4;
};
var Y5 = (e3, t2) => Cr(e3, t2, (r2, o2) => r2.svgPlotArea(o2), false);
var De2 = (e3, t2) => Cr(e3, t2, (r2, o2) => r2.canvasPlotArea(o2).svgPlotArea(Ve2.seriesSvgPoint()), true);
var Cr = (e3, t2, r2, o2) => {
  let n3 = null, a5 = null, l3 = Ve2.chartCartesian({ xScale: e3.scale, yScale: t2.scale, xAxis: e3.component, yAxis: t2.component }).xDomain(e3.domain).xLabel(e3.label).xAxisHeight(e3.size).xDecorate(e3.decorate).xTickFormat(e3.tickFormatFunction).yDomain(t2.domain).yLabel(t2.label).yAxisWidth(t2.size).yDecorate(t2.decorate).yOrient("left").yTickFormat(t2.tickFormatFunction);
  e3.decorate && l3.xDecorate(e3.decorate), t2.decorate && l3.yDecorate(t2.decorate), l3.xPaddingInner && l3.xPaddingInner(1), l3.xPaddingOuter && l3.xPaddingOuter(0.5), l3.yPaddingInner && l3.yPaddingInner(1), l3.yPaddingOuter && l3.yPaddingOuter(0.5), l3.axisSplitter = (...c6) => c6.length ? (n3 = c6[0], l3) : n3, l3.altAxis = (...c6) => c6.length ? (a5 = c6[0], l3) : a5, l3.plotArea = function(...c6) {
    return c6.length == 0 ? o2 ? this.canvasPlotArea() : this.svgPlotArea() : r2(this, ...c6);
  };
  let i4 = l3.decorate();
  return l3.decorate((c6, s3) => {
    let m4 = c6.select("d3fc-svg.plot-area"), d2 = m4.select("svg").node();
    d2.setAttribute("viewBox", `0 0 ${m4.node().clientWidth} ${m4.node().clientHeight}`), d2.setAttribute("preserveAspectRatio", "none");
    for (let u3 of ["x-axis", "y-axis"])
      c6.select(`d3fc-svg.${u3} svg`).node().setAttribute("preserveAspectRatio", "none");
    if (i4(c6, s3), o2) {
      let u3 = c6.select(".svg-plot-area").node(), p2 = c6.select(".canvas-plot-area").node();
      selectAll_default2([u3, p2]).order();
    }
    if (!!n3) {
      if (n3.haveSplit()) {
        let u3 = n3.altData(), p2 = Ve2.dataJoin("d3fc-svg", "y2-axis").key((y3) => y3), f4 = Ve2.dataJoin("g", "y-series").key((y3) => y3);
        c6.append("div").attr("class", "y-label right-label").style("grid-column", 5).style("-ms-grid-column", 5).style("grid-row", 3).style("-ms-grid-row", 3).style("width", a5.size || "1em").style("display", "flex").style("align-items", "center").style("justify-content", "center").append("span").attr("class", "y-label splitter-label").style("transform", "rotate(-90deg)");
        let h4 = a5.scale.domain(a5.domain), g3 = a5.component.right(h4);
        if (g3.tickFormat(a5.tickFormatFunction), a5.decorate && g3.decorate(a5.decorate), p2(c6, ["right"]).attr("class", (y3) => `y-axis ${y3}-axis`).on("measure", function(y3, x4) {
          let { width: v4, height: b3 } = y3.detail;
          x4 === "left" && select_default2(y3.currentTarget).select("svg").attr("viewBox", `${-v4} 0 ${v4} ${b3}`).attr("preserveAspectRatio", "none"), h4.range([b3, 0]);
        }).on("draw", function(y3, x4) {
          select_default2(y3.currentTarget).select("svg").call(g3);
        }), o2) {
          let y3 = (x4) => {
            let v4 = l3.plotArea();
            v4.context(x4.node().getContext("2d")).xScale(e3.scale);
            let b3 = [t2.scale, h4];
            [s3, u3].forEach((w4, V4) => {
              v4.yScale(b3[V4]), v4(w4);
            });
          };
          c6.select("d3fc-canvas.plot-area").on("draw", function(x4, v4) {
            y3(select_default2(x4.currentTarget).select("canvas"));
          });
        } else {
          let y3 = function(x4) {
            let v4 = l3.plotArea();
            v4.xScale(e3.scale);
            let b3 = [t2.scale, h4];
            f4(x4, [s3, u3]).each((w4, V4, k4) => {
              v4.yScale(b3[V4]), select_default2(k4[V4]).datum(w4).call(v4);
            });
          };
          c6.select("d3fc-svg.plot-area").on("draw", function(x4, v4) {
            y3(select_default2(x4.currentTarget).select("svg"));
          });
        }
      }
      n3(c6);
    }
  }), l3;
};
function N4(e3, t2, r2) {
  let o2 = e3.select(t2);
  return o2.size() > 0 ? o2 : r2();
}
function q3(e3, t2, r2 = "right") {
  if (r2 === "right" || r2 === "bottom")
    return e3[r2] < t2[r2];
  if (r2 === "left" || r2 === "top")
    return e3[r2] > t2[r2];
  throw `Direction being checked for overflow is invalid: ${r2}`;
}
function Yt(e3, t2, r2, o2 = 0) {
  let n3 = e3 === "x" ? "width" : "height", a5 = t2[e3], l3 = t2[e3] + t2[n3], i4 = r2[e3], c6 = r2[e3] + r2[n3], s3 = i4 + o2 > a5 && i4 - o2 < l3, m4 = c6 + o2 > a5 && c6 - o2 < l3, d2 = i4 + o2 < a5 && c6 - o2 > l3;
  return s3 || m4 || d2;
}
var Ar = `<ul id="tooltip-values"></ul>
`;
var kr2 = { types: { float: { filter_operator: "==", aggregate: "sum", format: { style: "decimal", minimumFractionDigits: 2, maximumFractionDigits: 2 } }, string: { filter_operator: "==", aggregate: "count" }, integer: { filter_operator: "==", aggregate: "sum", format: {} }, boolean: { filter_operator: "==", aggregate: "count" }, datetime: { filter_operator: "==", aggregate: "count", format: { dateStyle: "short", timeStyle: "medium" }, null_value: -1 }, date: { filter_operator: "==", aggregate: "count", format: { dateStyle: "short" }, null_value: -1 } } };
function Pe3(e3) {
  let t2 = {};
  if (Tr().types[e3] && Object.assign(t2, Tr().types[e3]), t2.type) {
    let r2 = Pe3(t2.type);
    return Object.assign(r2, t2), r2;
  } else
    return t2;
}
function Ut(e3) {
  return e3 && typeof e3 == "object" && !Array.isArray(e3);
}
function Kt(e3, ...t2) {
  if (!t2.length)
    return e3;
  let r2 = t2.shift();
  if (Ut(e3) && Ut(r2))
    for (let o2 in r2)
      Ut(r2[o2]) ? (e3[o2] || Object.assign(e3, { [o2]: {} }), Kt(e3[o2], r2[o2])) : Object.assign(e3, { [o2]: r2[o2] });
  return Kt(e3, ...t2);
}
function Tr() {
  return globalThis.__PERSPECTIVE_CONFIG__ || (globalThis.__PERSPECTIVE_CONFIG__ = Kt(kr2, globalThis.__TEMPLATE_CONFIG__ || {})), globalThis.__PERSPECTIVE_CONFIG__;
}
function pe3(e3, t2) {
  switch (e3) {
    case "date":
    case "datetime":
      return t2 instanceof Date ? t2 : new Date(parseInt(t2)).toLocaleString([], Pe3(e3).format);
    case "integer":
      return parseInt(t2, 10);
    case "float":
      return parseFloat(t2);
  }
  return t2;
}
function lt(e3, t2) {
  return t2.crossValues.length === 0 ? [] : e3.crossValue.length === 0 ? [] : ((e3.crossValue.split ? e3.crossValue.split("|") : [e3.crossValue]) || [e3.key]).map((o2, n3) => ({ name: t2.crossValues[n3].name, value: pe3(t2.crossValues[n3].type, o2) }));
}
function it(e3, t2) {
  if (t2.splitValues.length === 0)
    return [];
  let r2 = [e3.mainValue];
  return e3.key ? r2 = e3.key.split("|") : e3.mainValue?.split && (r2 = e3.mainValue.split("|")), t2.splitValues.map((o2, n3) => ({ name: o2.name, value: pe3(o2.type, r2[n3]) }));
}
function st(e3, t2) {
  return t2.mainValues.length > 1 ? e3.mainValue ? [{ name: e3.key, value: e3.mainValue - (e3.baseValue || 0) }] : t2.mainValues.map((r2, o2) => ({ name: r2.name, value: pe3(r2.type, e3.mainValues[o2]) })) : [{ name: t2.mainValues[0].name, value: pe3(t2.mainValues[0].type, e3.colorValue || e3.mainValue - e3.baseValue || e3.mainValue || e3.mainValues) }];
}
function Lr(e3, t2, r2) {
  let o2 = lt(t2, r2).concat(it(t2, r2)).concat(st(t2, r2));
  qo(e3, o2);
}
function qo(e3, t2) {
  e3.select("#tooltip-values").selectAll("li").data(t2).join("li").each(function(r2) {
    select_default2(this).text(`${r2.name}: `).append("b").text(Zo(r2.value));
  });
}
var Zo = (e3) => e3 == null ? "-" : e3.toLocaleString(void 0, { style: "decimal", minimumFractionDigits: Pe3("float").precision, maximumFractionDigits: Pe3("float").precision });
var zr = (e3) => [e3.name, "==", e3.value];
var Ue2 = (e3, t2, r2) => {
  let o2 = st(t2, r2).map((i4) => i4.name), n3 = lt(t2, r2).map(zr), a5 = it(t2, r2).map(zr), l3 = r2.filter.concat(n3).concat(a5);
  e3.dispatchEvent(new CustomEvent("perspective-click", { bubbles: true, composed: true, detail: { column_names: o2, config: { filter: l3 }, row: t2.row } }));
};
var Er = () => {
  let e3 = null, t2 = (r2) => {
    let o2 = r2.node();
    r2.on("click", (n3, a5) => Ue2(o2, a5, e3));
  };
  return t2.settings = (...r2) => r2.length ? (e3 = r2[0], t2) : e3, t2;
};
var de3 = () => {
  let e3 = false, t2 = null, r2 = null, o2 = false, n3 = (a5) => {
    let l3 = a5.node();
    if (!l3 || !l3.isConnected) {
      Mr(t2);
      return;
    }
    let i4 = select_default2(se4(l3));
    t2 = Jo(i4);
    let c6 = function(m4, d2) {
      Lr(t2, d2, r2);
      let u3 = a5.nodes(), p2 = u3.indexOf(this);
      Qo(i4.node(), u3[p2], t2, o2), select_default2(u3[p2]).style("opacity", "0.7");
    }, s3 = function(m4, d2) {
      Mr(t2);
      let u3 = a5.nodes(), p2 = u3.indexOf(this);
      u3 && select_default2(u3[p2]).style("opacity", "1");
    };
    e3 ? a5.each(function(m4) {
      return c6.call(this, void 0, m4);
    }) : (a5.on("mouseover", c6).on("mouseout", s3), Er().settings(r2)(a5));
  };
  return n3.alwaysShow = (...a5) => a5.length ? (e3 = a5[0], n3) : e3, n3.centered = (...a5) => a5.length ? (o2 = a5[0], n3) : o2, n3.settings = (...a5) => a5.length ? (r2 = a5[0], n3) : r2, n3;
};
function Jo(e3) {
  return N4(e3, "div.tooltip", () => e3.append("div").attr("class", "tooltip").style("z-index", 3).style("opacity", 0).html(Ar));
}
function Qo(e3, t2, r2, o2) {
  let n3 = e3.getBoundingClientRect(), a5 = t2.getBoundingClientRect(), l3 = a5.left + a5.width / 2 - n3.left, i4 = a5.top - n3.top + e3.scrollTop;
  o2 && (i4 = a5.top + a5.height / 2 - n3.top + e3.scrollTop), r2.style("left", `${l3}px`).style("top", `${i4}px`).style("opacity", 0.9), o2 && ([l3, i4] = ea(r2, n3)), ta(r2, n3, l3, i4, o2);
}
function ea(e3, t2) {
  let r2 = e3.node().getBoundingClientRect(), o2 = r2.width / 2, n3 = r2.left - o2 - t2.left;
  e3.style("left", `${n3}px`);
  let a5 = r2.height / 2, l3 = r2.top - a5 - t2.top;
  return e3.style("top", `${l3}px`), [n3, l3];
}
function ta(e3, t2, r2, o2, n3 = false) {
  let a5 = e3.node().getBoundingClientRect();
  if (q3(t2, a5)) {
    let l3 = a5.right - t2.right;
    e3.style("left", `${r2 - l3}px`);
  }
  if (q3(t2, a5, "bottom")) {
    let l3 = a5.bottom - t2.bottom;
    e3.style("top", `${o2 - l3}px`);
  }
  if (!!n3) {
    if (q3(t2, a5, "left")) {
      let l3 = a5.left - t2.left;
      e3.style("left", `${r2 - l3}px`);
    }
    if (q3(t2, a5, "top")) {
      let l3 = a5.top - t2.top;
      e3.style("top", `${o2 - l3}px`);
    }
  }
}
function Mr(e3) {
  e3 && e3.style("opacity", 0);
}
function ct(e3, t2) {
  let r2 = e3.mainValues.length > 1 ? ne4.seriesSvgGrouped(ne4.seriesSvgBar()) : ne4.seriesSvgBar();
  return r2 = r2.decorate((o2) => {
    de3().settings(e3)(o2), o2.style("fill", (n3) => t2(n3.key));
  }), ne4.autoBandwidth(ra(r2)).crossValue((o2) => o2.crossValue).mainValue((o2) => o2.mainValue ? o2.mainValue : 0).baseValue((o2) => o2.baseValue);
}
var ra = (e3) => {
  let t2 = (r2) => e3(r2);
  return ne4.rebindAll(t2, e3), t2.bandwidth = (...r2) => r2.length ? (e3.bandwidth(Math.max(r2[0], 1)), t2) : e3.bandwidth(), t2;
};
function fe3(e3) {
  return e3.split("|").slice(0, -1).join("|");
}
function Z4(e3) {
  let t2 = e3.data && e3.data.length > 0 ? e3.data[0] : {}, r2 = Object.keys(t2).filter((o2) => o2 !== "__ROW_PATH__");
  return he3().settings(e3).domain(r2)();
}
function mt(e3, t2) {
  let r2 = Array.from(new Set(t2));
  return he3().settings(e3).domain(r2)();
}
function pt(e3) {
  let t2 = e3.data && e3.data.length > 0 ? e3.data[0] : {}, r2 = [];
  return Object.keys(t2).forEach((o2) => {
    if (o2 !== "__ROW_PATH__") {
      let n3 = fe3(o2);
      r2.includes(n3) || r2.push(n3);
    }
  }), he3().settings(e3).domain(r2)();
}
function he3() {
  let e3 = null, t2 = null, r2 = {}, o2 = (a5) => Se2(a5, r2.colorStyles && r2.colorStyles.opacity), n3 = () => {
    let a5 = r2.colorStyles, l3 = t2 || [a5.series];
    if (l3 || e3.length > 1) {
      let i4 = e3.length > 1 ? a5.scheme : l3;
      return ordinal(i4.map(o2)).domain(e3);
    }
    return null;
  };
  return n3.domain = (...a5) => a5.length ? (e3 = a5[0], n3) : e3, n3.defaultColors = (...a5) => a5.length ? (t2 = a5[0], n3) : t2, n3.mapFunction = (...a5) => a5.length ? (o2 = a5[0], n3) : o2, n3.settings = (...a5) => a5.length ? (r2 = a5[0], n3) : r2, n3;
}
function J3(e3) {
  return Ce3(1)(e3);
}
function Se2(e3, t2 = 0.5) {
  return Ce3(t2)(e3);
}
function Ce3(e3) {
  return (t2) => {
    let r2 = color(t2);
    return r2.opacity = e3, r2 + "";
  };
}
var oa = { none: Pt, ordinal: jt, time: Ht, linear: It };
var U3 = (e3) => {
  let t2 = Me3(e3), r2 = "__ROW_PATH__", o2 = (n3, a5) => oa[t2()](r2)(n3, a5);
  return (0, import_d3fc4.rebindAll)(o2, t2), o2.valueName = (...n3) => n3.length ? (r2 = n3[0], o2) : r2, o2;
};
function Ae3(e3, t2, { stack: r2 = false, excludeEmpty: o2 = false } = {}) {
  let n3 = t2 || e3.data;
  return e3.splitValues.length > 0 ? aa(e3, n3, { stack: r2, excludeEmpty: o2 }) : [n3];
}
function aa(e3, t2, { stack: r2 = false, excludeEmpty: o2 = false }) {
  let n3 = {};
  return t2.forEach((a5) => {
    let l3 = {}, i4 = {};
    Object.keys(a5).filter((c6) => c6 !== "__ROW_PATH__").filter((c6) => !o2 || a5[c6] != null && a5[c6] != null).forEach((c6) => {
      let s3 = c6.split("|"), m4 = s3[s3.length - 1], d2 = a5[c6] || 0, u3 = `${m4}${d2 >= 0 ? "+ve" : "-ve"}`, p2 = s3.slice(0, s3.length - 1).join("|"), f4 = i4[p2] = i4[p2] || { __ROW_PATH__: a5.__ROW_PATH__ }, h4 = l3[u3] || 0;
      f4.__KEY__ = p2, r2 ? (f4[m4] = h4 + d2, f4[`__BASE_VALUE__${m4}`] = h4, l3[u3] = f4[m4]) : f4[m4] = d2, f4.row = a5;
    }), Object.keys(i4).forEach((c6) => {
      (n3[c6] = n3[c6] || []).push(i4[c6]);
    });
  }), Object.keys(n3).map((a5) => {
    let l3 = n3[a5];
    return l3.key = a5, l3;
  });
}
function Nr(e3, t2) {
  let r2 = { stack: false }, o2 = Ae3(e3, t2, r2).map((n3) => Or(e3, n3, r2));
  return e3.mainValues.length > 1 ? o2.reduce((a5, l3) => a5.concat(l3)) : o2;
}
function dt(e3, t2) {
  let r2 = { stack: true };
  return Ae3(e3, t2, r2).map((o2) => Or(e3, o2, r2));
}
function la(e3, t2, { stack: r2 = false }) {
  let o2 = U3(e3);
  return (n3) => {
    let a5 = (i4) => r2 && i4[`__BASE_VALUE__${n3.name}`] || 0, l3 = t2.map((i4, c6) => ({ crossValue: o2(i4, c6), mainValue: i4[n3.name] ? i4[n3.name] : null, baseValue: a5(i4), key: i4.__KEY__ ? `${i4.__KEY__}|${n3.name}` : n3.name, row: i4.row || i4 }));
    return l3.key = l3[0].key, l3;
  };
}
function Or(e3, t2, { stack: r2 = false }) {
  let o2 = la(e3, t2, { stack: r2 });
  return e3.mainValues.length > 1 ? e3.mainValues.map(o2) : o2(e3.mainValues[0]);
}
var Dr = `<span id="up-arrow">&#9650;</span>
<span id="page-text"></span>
<span id="down-arrow">&#9660;</span>
`;
function Pr(e3) {
  let t2 = e3.select("g.legendCells"), r2 = e3.node().getBoundingClientRect();
  if (!q3(r2, t2.node().getBoundingClientRect()))
    return;
  let o2 = e3.select(".legend");
  t2.selectAll(".label").text((n3, a5, l3) => {
    let i4 = l3[a5];
    if (q3(r2, i4.getBoundingClientRect())) {
      let c6 = sa(i4, o2, r2);
      return `${n3.substring(0, c6 - 3)}...`;
    } else
      return n3;
  });
}
function sa(e3, t2, r2) {
  let o2 = e3.getBoundingClientRect(), n3 = t2.node().createSVGPoint(), a5 = 3;
  return n3.x = r2.right - o2.left - a5, n3.y = 0, e3.getCharNumAtPosition(n3);
}
var ke3 = 10;
function ge3(e3, t2, r2) {
  let o2 = select_default2(Ne2(e3).getContainer()).node().getBoundingClientRect(), n3 = e3.getBoundingClientRect(), a5 = { top: n3.top + r2 - ke3, right: n3.right + t2 + ke3, bottom: n3.bottom + r2 + ke3, left: n3.left + t2 - ke3 }, l3 = { x: t2, y: r2 };
  return [{ edge: "right", dimension: "x" }, { edge: "left", dimension: "x" }, { edge: "top", dimension: "y" }, { edge: "bottom", dimension: "y" }].forEach((c6) => {
    if (q3(o2, a5, c6.edge)) {
      let s3 = a5[c6.edge] - o2[c6.edge];
      l3[c6.dimension] = l3[c6.dimension] - s3;
    }
  }), l3;
}
var qt = "resize.for-dragging";
function Rr() {
  let e3 = true, t2 = null, r2 = (o2) => {
    let n3 = o2.node(), a5 = n3.getRootNode().host.closest("perspective-viewer");
    n3.style.cursor = "move", t2.legend && (n3.style.left = t2.legend.left, n3.style.top = t2.legend.top);
    let l3 = drag_default().on("drag", function(i4) {
      let c6 = ge3(this, i4.dx, i4.dy);
      this.style.left = `${this.offsetLeft + c6.x}px`, this.style.top = `${this.offsetTop + c6.y}px`;
      let s3 = { left: this.style.left, top: this.style.top };
      t2.legend = { ...t2.legend, ...s3 }, e3 = ma(n3) ? ua(n3) : ca(n3, e3);
    });
    l3.on("end", function(i4) {
      select_default2(window).on(qt, null), a5?.dispatchEvent(new Event("perspective-config-update"));
    }), o2.call(l3);
  };
  return r2.settings = (...o2) => o2.length ? (t2 = o2[0], r2) : t2, r2;
}
function ca(e3, t2) {
  return t2 !== false && select_default2(window).on(qt, function() {
    let r2 = ge3(e3, 0, 0);
    e3.style.left = `${e3.offsetLeft + r2.x}px`, e3.style.top = `${e3.offsetTop + r2.y}px`;
  }), false;
}
function ua(e3) {
  return select_default2(window).on(qt, null), e3.style.left = "auto", true;
}
function ma(e3) {
  let t2 = e3.getBoundingClientRect(), r2 = select_default2(se4(e3)).node().getBoundingClientRect(), o2 = 5;
  return t2.right + ke3 + o2 >= r2.right && t2.top - ke3 - o2 <= r2.top;
}
var Br = "horizontal-drag-handle";
var Ir = "vertical-drag-handle";
var pa = "corner-drag-handle";
var Hr = "dragHandles";
var $r = 0;
var ye3 = "resize";
function Gr() {
  let e3 = 9, t2 = 3, r2 = null, o2 = { height: 100, width: 100 }, n3 = { height: null, width: null }, a5 = [], l3 = (m4, d2) => a5.filter((u3) => u3.event === m4).forEach((u3) => u3.execute(d2)), i4 = (m4) => {
    if (fa(m4))
      return;
    let d2 = { left: (_4) => l3(ye3, { horizontal: T3(_4), vertical: false }), top: (_4) => l3(ye3, { horizontal: false, vertical: ee3(_4) }), right: (_4) => l3(ye3, { horizontal: $4(_4), vertical: false }), bottom: (_4) => l3(ye3, { horizontal: false, vertical: te3(_4) }), topleft: (_4) => l3(ye3, { horizontal: T3(_4), vertical: ee3(_4) }), topright: (_4) => l3(ye3, { horizontal: $4(_4), vertical: ee3(_4) }), bottomright: (_4) => l3(ye3, { horizontal: $4(_4), vertical: te3(_4) }), bottomleft: (_4) => l3(ye3, { horizontal: T3(_4), vertical: te3(_4) }) }, u3 = m4.node();
    r2.legend && (u3.style.height = r2.legend.height, u3.style.width = r2.legend.width);
    let p2 = u3.getBoundingClientRect(), f4 = m4.append("svg").attr("id", Hr).attr("width", p2.width).attr("height", p2.height), h4 = f4.append("g"), g3 = (_4) => _4 === "left" || _4 === "right", y3 = { left: 0, top: e3, right: p2.width - e3, bottom: e3 }, x4 = { left: e3, top: 0, right: e3, bottom: p2.height - e3 }, v4 = ["left", "top", "right", "bottom"], [b3, w4, V4, k4] = v4.map((_4) => h4.append("rect").attr("id", `drag${_4}`).attr("class", g3(_4) ? Ir : Br).attr("y", x4[_4]).attr("x", y3[_4]).attr("height", g3(_4) ? p2.height - e3 * 2 : e3).attr("width", g3(_4) ? e3 : p2.width - e3 * 2).attr("fill", g3(_4) ? "lightgreen" : "lightblue").attr("fill-opacity", $r).style("z-index", t2).attr("cursor", g3(_4) ? "ew-resize" : "ns-resize").call(drag_default().on("drag", d2[_4]))), B6 = (_4) => `${_4[0]}${_4[1]}`, j4 = { topleft: "nwse", topright: "nesw", bottomright: "nwse", bottomleft: "nesw" }, M4 = [["top", "left"], ["top", "right"], ["bottom", "right"], ["bottom", "left"]], [z3, I4, E6, S3] = M4.map((_4) => h4.append("rect").attr("id", `drag${B6(_4)}`).attr("class", `${pa} ${_4[0]} ${_4[1]}`).attr("height", e3).attr("width", e3).attr("fill", "red").attr("fill-opacity", $r).style("z-index", t2).attr("cursor", `${j4[B6(_4)]}-resize`).call(drag_default().on("drag", d2[B6(_4)])));
    mr("height", "y", k4), mr("width", "x", V4), ur(f4);
    function T3(_4) {
      let L4 = s3(ge3(b3.node(), _4.x, 0).x, f4, "width", (W4, re7) => W4 - re7);
      return u3.style.left = `${u3.offsetLeft + L4}px`, u3.style.width = `${u3.offsetWidth - L4}px`, ae3(), je2(V4, L4, "width", "x");
    }
    function $4(_4) {
      let L4 = -s3(ge3(V4.node(), _4.dx, 0).x, f4, "width", (W4, re7) => W4 + re7);
      return c6(L4, "x", V4, _4) ? false : (u3.style.width = `${u3.offsetWidth - L4}px`, ae3(), je2(V4, L4, "width", "x"));
    }
    function ee3(_4) {
      let L4 = s3(ge3(w4.node(), 0, _4.y).y, f4, "height", (W4, re7) => W4 - re7);
      return u3.style.top = `${u3.offsetTop + L4}px`, u3.style.height = `${u3.offsetHeight - L4}px`, ae3(), je2(k4, L4, "height", "y");
    }
    function te3(_4) {
      let L4 = -s3(ge3(k4.node(), 0, _4.dy).y, f4, "height", (W4, re7) => W4 + re7);
      return c6(L4, "y", k4, _4) ? false : (u3.style.height = `${u3.offsetHeight - L4}px`, ae3(), je2(k4, L4, "height", "y"));
    }
    function ae3() {
      let _4 = { top: u3.style.top, left: u3.style.left, height: u3.style.height, width: u3.style.width };
      r2.legend = { ...r2.legend, ..._4 };
    }
    function je2(_4, L4, W4, re7) {
      return ga(f4, W4, L4), ha(_4, re7, L4), da(f4, L4, W4, W4 === "height" ? Ir : Br), ur(f4), L4 != 0;
    }
    function ur(_4) {
      z3.attr("y", 0, "x", 0), I4.attr("y", 0).attr("x", _4.attr("width") - e3), E6.attr("y", _4.attr("height") - e3).attr("x", _4.attr("width") - e3), S3.attr("y", _4.attr("height") - e3).attr("x", 0);
    }
    function mr(_4, L4, W4) {
      !!n3[_4] && n3[_4] < p2[_4] && (u3.style[_4] = `${n3[_4]}px`, je2(W4, p2[_4] - n3[_4], _4, L4));
    }
  };
  i4.on = (m4, d2) => (a5.push({ event: m4, execute: d2 }), i4), i4.zIndex = (m4) => (t2 = m4, i4), i4.settings = (...m4) => m4.length ? (r2 = m4[0], i4) : r2, i4.minWidth = (m4) => (o2.width = m4, n3.width && (n3.width = Math.max(o2.width, n3.width)), i4), i4.minHeight = (m4) => (o2.height = m4, n3.height && (n3.height = Math.max(o2.height, n3.height)), i4), i4.handleWidth = (m4) => (e3 = m4, i4), i4.maxWidth = (m4) => (n3.width = m4, o2.width = Math.min(o2.width, n3.width), i4), i4.maxHeight = (m4) => (n3.height = m4, o2.height = Math.min(o2.height, n3.height), i4);
  function c6(m4, d2, u3, p2) {
    let f4 = (g3, y3, x4, v4) => g3 < 0 && v4[y3] < Number(x4.attr(y3)), h4 = (g3, y3, x4, v4) => g3 > 0 && v4[y3] > Number(x4.attr(y3));
    return f4(m4, d2, u3, p2) || h4(m4, d2, u3, p2);
  }
  function s3(m4, d2, u3, p2) {
    let f4 = p2(Number(d2.attr(u3)), m4);
    if (f4 < o2[u3]) {
      let h4 = o2[u3] - f4;
      return p2(m4, h4);
    }
    if (!!n3[u3] && f4 > n3[u3]) {
      let h4 = n3[u3] - f4;
      return p2(m4, h4);
    }
    return m4;
  }
  return i4;
}
var da = (e3, t2, r2, o2) => {
  e3.selectAll(`.${o2}`).each((a5, l3, i4) => {
    let c6 = i4[l3];
    select_default2(c6).attr(r2, c6.getBoundingClientRect()[r2] - t2);
  });
};
var fa = (e3) => e3.select(`#${Hr}`).size() > 0;
var ha = (e3, t2, r2) => e3.attr(t2, Number(e3.attr(t2)) - r2);
var ga = (e3, t2, r2) => e3.attr(t2, e3.node().getBoundingClientRect()[t2] - r2);
var jr = 16;
var Wr = 20;
var Zt = (e3, t2) => {
  let r2 = e3 || color3(), o2 = [], n3 = 1, a5, l3 = t2.legend && t2.legend.pageIndex ? t2.legend.pageIndex : 0, i4 = () => {
  }, c6 = Rr().settings(t2), s3, m4 = (b3) => {
    o2 = r2.scale().domain(), s3 = Gr().settings(t2).maxHeight(o2.length * jr + Wr).on("resize", () => d2(b3)), s3(b3), c6(b3), d2(b3);
  }, d2 = (b3) => {
    g3(b3), u3(b3), p2(b3), Pr(b3);
  }, u3 = (b3) => {
    let w4 = x4(b3);
    w4.style("display", n3 <= 1 ? "none" : "block"), w4.select("#page-text").text(`${l3 + 1}/${n3}`), w4.select("#up-arrow").attr("class", l3 === 0 ? "disabled" : "").on("click", () => {
      l3 > 0 && (f4(l3 - 1), d2(b3));
    }), w4.select("#down-arrow").attr("class", l3 >= n3 - 1 ? "disabled" : "").on("click", () => {
      l3 < n3 - 1 && (f4(l3 + 1), d2(b3));
    });
  }, p2 = (b3) => {
    n3 > 1 && r2.cellFilter(h4()), b3.select("g.legendCells").remove();
    let w4 = v4(b3);
    w4.call(r2);
    let V4 = b3.select("g.legendCells").node().getBBox();
    w4.attr("height", V4.height + Wr), i4(b3);
  }, f4 = (b3) => {
    l3 = b3, t2.legend = { ...t2.legend, pageIndex: l3 };
  }, h4 = () => (b3, w4) => w4 >= a5 * l3 && w4 < a5 * l3 + a5, g3 = (b3) => {
    let w4 = b3.node().getBoundingClientRect(), V4 = Math.floor(w4.height / jr) - 1;
    a5 = V4 < o2.length ? V4 - 1 : V4, n3 = y3(V4), l3 = Math.min(l3, n3 - 1);
  }, y3 = (b3) => Math.ceil(o2.length / b3), x4 = (b3) => N4(b3, ".legend-controls", () => b3.append("g").attr("class", "legend-controls").html(Dr)), v4 = (b3) => N4(b3, ".legend", () => b3.append("svg").attr("class", "legend"));
  return m4.decorate = (...b3) => b3.length ? (i4 = b3[0], m4) : i4, (0, import_d3fc5.rebindAll)(m4, r2), m4;
};
var Ur = (e3) => Zt(color3().shape("circle").shapeRadius(6), e3);
var xa = (e3) => Zt(symbol().shapePadding(1).labelOffset(3), e3);
var H4 = () => Jt(Ur);
var gt = () => Jt(xa, Xr);
var Kr = () => Jt(Ur, Xr);
function Xr(e3) {
  if (!e3)
    return null;
  let t2 = e3.domain(), r2 = e3.range().map((o2) => symbol_default().type(o2)());
  return ordinal().domain(t2).range(r2);
}
function Jt(e3, t2) {
  let r2 = {}, o2 = null, n3 = null;
  function a5(l3) {
    if (o2 && o2.range().length > 1) {
      let i4 = e3(r2);
      i4.scale(o2).orient("vertical").on("cellclick", function(s3) {
        let m4 = this.__data__;
        r2.hideKeys = r2.hideKeys || [], r2.hideKeys.includes(m4) ? r2.hideKeys = r2.hideKeys.filter((d2) => d2 !== m4) : r2.hideKeys.push(m4), Ne2(this)._draw();
      }), i4.labels((s3) => {
        let m4 = s3.domain[s3.i].split("|");
        return r2.mainValues.length <= 1 && m4.length > 1 ? m4.slice(0, m4.length - 1).join("|") : s3.domain[s3.i];
      });
      let c6 = N4(l3, "div.legend-container", () => l3.append("div"));
      i4.decorate((s3) => {
        let m4 = (u3) => r2.hideKeys && r2.hideKeys.includes(u3), d2 = s3.select("g.legendCells").attr("transform", "translate(20,20)").selectAll("g.cell");
        d2.classed("hidden", m4), d2.append("title").html((u3) => u3), n3 && d2.select("circle, path").style("fill", (u3) => m4(u3) ? null : n3(u3)).style("stroke", (u3) => m4(u3) ? null : J3(n3(u3)));
      }), c6.attr("class", "legend-container").attr("borderbox-on-hover", true).style("z-index", "2").call(i4);
    }
  }
  return a5.settings = (...l3) => l3.length ? (r2 = l3[0], a5) : r2, a5.scale = (...l3) => l3.length ? (o2 = t2 ? t2(l3[0]) : l3[0], a5) : o2, a5.color = (...l3) => l3.length ? (n3 = l3[0], a5) : n3, a5;
}
function K4(e3, t2) {
  let r2 = t2 || e3.data;
  return e3.hideKeys && e3.hideKeys.length > 0 ? r2.map((o2) => {
    let n3 = { ...o2 };
    return e3.hideKeys.forEach((a5) => {
      delete n3[a5];
    }), n3;
  }) : r2;
}
function Fe3(e3, t2) {
  let r2 = t2 || e3.data;
  return e3.hideKeys && e3.hideKeys.length > 0 ? r2.map((o2) => {
    let n3 = {};
    return Object.keys(o2).map((a5) => {
      e3.hideKeys.includes(fe3(a5)) || (n3[a5] = o2[a5]);
    }), n3;
  }) : r2;
}
var ba = (e3) => (t2) => t2.style("stroke-width", "1.0").style("stroke", e3 ? e3.colorStyles.grid.gridLineColor : "#bbb");
var va = (e3) => (t2) => {
  t2.strokeStyle = e3 ? e3.colorStyles.grid.gridLineColor : "#bbb", t2.lineWidth = 1;
};
var wa = (e3) => e3.style("display", "none");
var _a2 = (e3) => (t2) => {
  t2.lineWidth = 1, t2.strokeStyle = e3 ? e3.colorStyles.grid.gridLineColor : "#bbb";
};
var O4 = (e3, t2) => {
  let r2 = "both", o2 = false, n3 = null, a5 = null, l3 = null, i4 = xe3.seriesSvgMulti(), c6 = xe3.annotationSvgGridline(), s3 = ba(t2), m4 = wa, d2 = function(...u3) {
    o2 && (i4 = xe3.seriesCanvasMulti().context(l3), c6 = xe3.annotationCanvasGridline(), s3 = va(t2), m4 = _a2(t2));
    let p2 = i4.xScale(n3).yScale(a5), f4 = r2 === "vertical" ? m4 : s3, h4 = r2 === "horizontal" ? m4 : s3, g3 = c6.xDecorate(f4).yDecorate(h4);
    return p2.series([g3, e3])(...u3);
  };
  return d2.orient = (...u3) => u3.length ? (r2 = u3[0], d2) : r2, d2.canvas = (...u3) => u3.length ? (o2 = u3[0], d2) : o2, d2.xScale = (...u3) => u3.length ? (n3 = u3[0], d2) : n3, d2.yScale = (...u3) => u3.length ? (a5 = u3[0], d2) : a5, d2.context = (...u3) => u3.length ? (l3 = u3[0], d2) : l3, d2;
};
var P2 = () => {
  let e3 = rt(), t2 = (r2) => {
    let o2 = e3.pad(), n3 = e3.padUnit(), a5 = 1;
    switch (n3) {
      case "domain":
        break;
      case "percent": {
        a5 = r2[1] - r2[0];
        break;
      }
      default:
        throw new Error("Unknown padUnit: " + n3);
    }
    let l3 = r2[0] - o2[0] * a5, i4 = r2[1] + o2[1] * a5;
    return r2[0] = r2[0] >= 0 && l3 < 0 ? 0 : l3, r2[1] = r2[1] <= 0 && i4 > 0 ? 0 : i4, r2;
  };
  return qr.rebindAll(t2, e3), t2;
};
var Zr = `<button id="zoom-reset">Reset zoom</button>
<button id="one-year">1 Year</button>
<button id="six-months">6 Months</button>
<button id="one-month">1 Month</button>
`;
var D6 = () => {
  let e3 = null, t2 = null, r2 = null, o2 = null, n3 = null, a5 = null, l3 = false, i4 = false, c6 = () => {
  };
  function s3(p2) {
    let f4 = `d3fc-${i4 ? "canvas" : "svg"}.plot-area`;
    if (r2 || n3) {
      let h4 = o2 && o2.domain()[0] instanceof Date, g3 = zoom_default2().on("zoom", (x4) => {
        let { transform: v4 } = x4;
        t2.zoom = { k: v4.k, x: v4.x, y: v4.y }, m4(v4), p2.call(e3);
        let b3 = v4.k === 1 && v4.x === 0 && v4.y === 0, w4 = d2(p2).style("display", b3 ? "none" : "");
        w4.select("#zoom-reset").on("click", () => p2.select(f4).call(g3.transform, identity5));
        let V4 = w4.select("#one-year").style("display", h4 ? "" : "none"), k4 = w4.select("#six-months").style("display", h4 ? "" : "none"), B6 = w4.select("#one-month").style("display", h4 ? "" : "none");
        if (h4) {
          let j4 = (M4) => () => {
            let z3 = new Date(r2.domain()[0]), I4 = new Date(z3);
            M4(z3, I4);
            let E6 = o2.range(), S3 = (E6[1] - E6[0]) / (o2(I4) - o2(z3)), T3 = -o2(z3) * S3, $4 = 0;
            if (n3) {
              let ee3 = n3.domain().reduce((te3, ae3) => te3 + ae3) / 2;
              $4 = -a5(ee3) * S3 + n3(ee3);
            }
            p2.select(f4).call(g3.transform, identity5.translate(T3, $4).scale(S3));
          };
          V4.on("click", j4((M4, z3) => z3.setYear(M4.getFullYear() + 1))), k4.on("click", j4((M4, z3) => z3.setMonth(M4.getMonth() + 6))), B6.on("click", j4((M4, z3) => z3.setMonth(M4.getMonth() + 1)));
        }
      }), y3 = e3.decorate();
      e3.decorate((x4, v4) => {
        if (y3(x4, v4), !l3) {
          l3 = true;
          let b3 = x4.select(f4), w4 = i4 ? window.devicePixelRatio : 1;
          b3.on("measure.zoom-range", (V4) => {
            if (o2 && o2.range([0, V4.detail.width / w4]), a5 && a5.range([0, V4.detail.height / w4]), t2.zoom) {
              let k4 = identity5.translate(t2.zoom.x, t2.zoom.y).scale(t2.zoom.k);
              b3.call(g3.transform, k4);
            }
          }).call(g3);
        }
      });
    }
    p2.call(e3);
  }
  s3.chart = (...p2) => p2.length ? (e3 = p2[0], s3) : e3, s3.settings = (...p2) => p2.length ? (t2 = p2[0], s3) : t2, s3.xScale = (...p2) => p2.length ? (r2 = u3(p2[0]), o2 = r2 ? r2.copy() : null, s3) : r2, s3.yScale = (...p2) => {
    if (!p2.length)
      return n3;
    if (n3 = u3(p2[0]), a5 = n3 ? n3.copy() : null, a5) {
      let f4 = a5.domain();
      a5.domain([f4[1], f4[0]]);
    }
    return s3;
  }, s3.canvas = (...p2) => p2.length ? (i4 = p2[0], s3) : i4, s3.onChange = (...p2) => p2.length ? (c6 = p2[0], s3) : c6;
  let m4 = (p2) => {
    let f4 = { ...p2 };
    if (r2 && (r2.domain(p2.rescaleX(o2).domain()), f4.xDomain = r2.domain()), n3) {
      let h4 = p2.rescaleY(a5).domain();
      n3.domain([h4[1], h4[0]]), f4.yDomain = n3.domain();
    }
    c6(f4);
  }, d2 = (p2) => N4(p2, ".zoom-controls", () => p2.append("div").attr("class", "zoom-controls").style("display", "none").html(Zr)), u3 = (p2) => p2 && p2.nice ? p2 : null;
  return s3;
};
function Qr(e3, t2) {
  let r2 = dt(t2, K4(t2)), o2 = Z4(t2), n3 = H4().settings(t2).scale(o2), a5 = ct(t2, o2).orient("horizontal"), l3 = Jr.seriesSvgMulti().mapping((d2, u3) => d2[u3]).series(r2.map(() => a5)), i4 = A6(t2).settingName("mainValues").valueName("mainValue").memoValue(t2.axisMemo[0]).excludeType(C6.ordinal).include([0]).paddingStrategy(P2())(r2), c6 = A6(t2).excludeType(C6.linear).settingName("crossValues").valueName("crossValue").orient("vertical")(r2), s3 = Y5(i4, c6).plotArea(O4(l3, t2).orient("horizontal"));
  s3.yPaddingInner && (s3.yPaddingInner(0.5), s3.yPaddingOuter(0.25), a5.align("left")), s3.xNice && s3.xNice();
  let m4 = D6().chart(s3).settings(t2).yScale(c6.scale);
  e3.datum(r2).call(m4), e3.call(n3);
}
Qr.plugin = { name: "X Bar", category: "X Chart", max_cells: 1e3, max_columns: 50, render_warning: true, initial: { names: ["X Axis"] } };
var en = Qr;
var on = (e3, t2) => {
  if (!tn(e3) || !tn(t2))
    return;
  let r2 = rn(e3), o2 = rn(t2);
  r2 > o2 ? t2[0] = nn(t2, r2) : e3[0] = nn(e3, o2);
};
var tn = (e3) => e3.length === 2 && !isNaN(e3[0]) && !isNaN(e3[1]) && e3[0] !== e3[1];
var rn = (e3) => (0 - e3[0]) / (e3[1] - e3[0]);
var nn = (e3, t2) => t2 * e3[1] / (t2 - 1);
var ln = (e3) => {
  let t2 = [], r2 = false, o2, n3 = (l3) => {
    l3.text("");
    let i4 = an.dataJoin("span", "splitter-label").key((m4) => m4), c6 = !r2 && t2.length === 1, s3 = o2 && e3.splitValues.length === 0;
    i4(l3, t2).classed("disabled", c6).text((m4) => m4.name).style("color", (m4) => s3 ? J3(o2(m4.name)) : void 0).on("click", (m4, d2) => {
      c6 || (r2 ? e3.splitMainValues = e3.splitMainValues.filter((u3) => u3 != d2.name) : e3.splitMainValues = [d2.name].concat(e3.splitMainValues || []), m4.target.getRootNode().host.closest("perspective-viewer")?.dispatchEvent(new Event("perspective-config-update")), a5(l3));
    });
  }, a5 = (l3) => {
    let i4 = Ne2(l3.node());
    i4._container.innerHTML = "", i4._draw();
  };
  return n3.labels = (...l3) => l3.length ? (t2 = l3[0], n3) : t2, n3.alt = (...l3) => l3.length ? (r2 = l3[0], n3) : r2, n3.color = (...l3) => l3.length ? (o2 = l3[0], n3) : o2, n3;
};
var be3 = (e3, t2, r2 = Sa) => {
  let o2, n3, a5, l3 = e3.splitMainValues || [], i4 = (m4) => {
    let d2 = m4.split("|");
    return l3.includes(d2[d2.length - 1]);
  }, c6 = e3.mainValues.some((m4) => i4(m4.name));
  n3 = c6 ? r2(t2, (m4) => !i4(m4)) : t2, a5 = c6 ? r2(t2, i4) : null;
  let s3 = (m4) => {
    if (e3.mainValues.length === 1)
      return;
    let d2 = e3.mainValues.map((h4, g3) => ({ index: g3, name: h4.name })), u3 = d2.filter((h4) => !i4(h4.name)), p2 = d2.filter((h4) => i4(h4.name)), f4 = () => ln(e3).color(o2);
    m4.select(".y-label.left-label").call(f4().labels(u3)), m4.select(".y-label.right-label").call(f4().labels(p2).alt(true));
  };
  return s3.color = (...m4) => m4.length ? (o2 = m4[0], s3) : o2, s3.haveSplit = () => c6, s3.data = (...m4) => m4.length ? (n3 = m4[0], s3) : n3, s3.altData = (...m4) => m4.length ? (a5 = m4[0], s3) : a5, s3;
};
var Sa = (e3, t2) => e3.map((r2) => r2.filter((o2) => t2(o2.key)));
var Qt = (e3, t2) => e3.map((r2) => t2(r2.key) ? r2 : r2.map((o2) => Object.assign({}, o2, { mainValue: null })));
var sn = (e3, t2) => e3.map((r2) => Qt(r2, t2));
function un(e3, t2) {
  let r2 = dt(t2, K4(t2)), o2 = Z4(t2), n3 = H4().settings(t2).scale(o2), a5 = ct(t2, o2).orient("vertical"), l3 = cn.seriesSvgMulti().mapping((h4, g3) => h4[g3]).series(r2.map(() => a5)), i4 = A6(t2).excludeType(C6.linear).settingName("crossValues").valueName("crossValue")(r2), c6 = A6(t2).settingName("mainValues").valueName("mainValue").memoValue(t2.axisMemo[1]).excludeType(C6.ordinal).orient("vertical").include([0]).paddingStrategy(P2()), s3 = t2.mainValues.length > 1 ? sn : Qt, m4 = be3(t2, r2, s3).color(o2), d2 = c6(m4.data()), u3 = m4.haveSplit() ? l3 : O4(l3, t2).orient("vertical"), p2 = Y5(i4, d2).axisSplitter(m4).plotArea(u3);
  p2.xPaddingInner && (p2.xPaddingInner(0.5), p2.xPaddingOuter(0.25), a5.align("left")), p2.yNice && p2.yNice();
  let f4 = D6().chart(p2).settings(t2).xScale(i4.scale);
  if (m4.haveSplit()) {
    let h4 = c6(m4.altData());
    on(d2.domain, h4.domain), p2.yDomain(d2.domain).altAxis(h4);
  }
  e3.datum(m4.data()).call(f4), e3.call(n3);
}
un.plugin = { name: "Y Bar", category: "Y Chart", max_cells: 1e3, max_columns: 50, render_warning: true, initial: { names: ["Y Axis"] } };
var mn = un;
function Be2(e3, t2) {
  let r2 = pn.seriesSvgLine(), o2 = e3.data.length * (e3.data?.length > 0 ? Object.keys(e3.data[0]).length - (e3.crossValues?.length > 0 ? 1 : 0) : 0), n3 = Math.max(1, Math.min(3, Math.floor(e3.size.width / o2 / 2)));
  return r2 = r2.decorate((a5) => {
    a5.style("stroke", (l3) => J3(t2(l3[0] && l3[0].key))).style("stroke-width", n3);
  }), r2.crossValue((a5) => a5.crossValue).mainValue((a5) => a5.mainValue);
}
function dn(e3, t2) {
  let r2 = U3(e3);
  return t2.map((o2, n3) => Object.keys(o2).filter((a5) => a5 !== "__ROW_PATH__").map((a5) => ({ key: a5, crossValue: r2(o2, n3), mainValue: o2[a5], row: o2 })));
}
var yt = function(e3) {
  let t2 = [];
  for (let r2 of e3)
    for (let o2 = 0; o2 < r2.length; o2++)
      r2[o2].mainValue !== null && (t2[o2] = t2[o2] || [], t2[o2].push(r2[o2]));
  return t2;
};
var er = (e3, t2, r2 = Math.min) => {
  let o2 = (l3) => l3.reduce((i4, c6) => {
    let s3 = n3(c6, t2);
    return s3 && (!i4 || r2(i4.value, s3.value) === s3.value) ? s3 : i4;
  }, null), n3 = (l3) => {
    if (Array.isArray(l3))
      return o2(l3, t2);
    let i4 = t2(l3);
    return i4 !== null ? { item: l3, value: i4 } : null;
  }, a5 = o2(e3, t2);
  return a5 ? a5.item : null;
};
var G3 = () => {
  let e3 = de3().alwaysShow(true), t2 = null, r2 = null, o2 = null, n3 = null, a5 = false, l3 = null, i4 = "crossValue", c6 = "mainValue", s3 = null, m4 = 1;
  function d2(f4) {
    let h4 = `d3fc-${a5 ? "canvas" : "svg"}.plot-area`;
    if (t2 || r2) {
      let g3 = null, y3 = xt.pointer().on("point", (x4) => {
        let v4 = x4.length ? p2(x4[0]) : null;
        g3 = v4 ? [v4.data] : [];
        let b3 = v4 ? v4.scale : r2;
        u3(f4, g3, b3);
      });
      f4.select(h4).on("measure.nearbyTip", () => u3(f4, [])).on("click", () => {
        g3.length && Ue2(f4.node(), g3[0], e3.settings());
      }).call(y3);
    }
  }
  let u3 = (f4, h4, g3 = r2) => {
    let y3 = f4.select("d3fc-svg.plot-area svg").selectAll("circle.nearbyTip").data(h4);
    y3.exit().remove(), y3.enter().append("circle").attr("class", "nearbyTip").merge(y3).attr("r", (x4) => n3 ? m4 * Math.sqrt(n3(x4.size)) : 10).attr("transform", (x4) => `translate(${t2(x4[i4])},${g3(x4[c6])})`).style("stroke", "none").style("fill", (x4) => o2 && x4.key && Se2(o2(x4.key))), e3(y3);
  }, p2 = (f4) => {
    let h4 = (x4) => (v4) => v4[c6] === void 0 || v4[c6] === null || v4[i4] === void 0 || v4[i4] === null ? null : Math.sqrt(Math.pow(t2(v4[i4]) - f4.x, 2) + Math.pow(x4(v4[c6]) - f4.y, 2)), g3 = h4(r2), y3 = er(l3, g3, Math.min);
    if (s3) {
      let x4 = h4(s3.yScale), v4 = er(s3.data, x4, Math.min);
      return g3(y3) <= x4(v4) ? { data: y3, scale: r2 } : { data: v4, scale: s3.yScale };
    }
    return { data: y3, scale: r2 };
  };
  return d2.scaleFactor = (...f4) => f4.length ? (m4 = f4[0], d2) : m4, d2.xScale = (...f4) => f4.length ? (t2 = f4[0], d2) : t2, d2.yScale = (...f4) => f4.length ? (r2 = f4[0], d2) : r2, d2.color = (...f4) => f4.length ? (o2 = f4[0], d2) : o2, d2.size = (...f4) => f4.length ? (n3 = f4[0] ? f4[0].copy().range([40, 4e3]) : null, d2) : n3, d2.canvas = (...f4) => f4.length ? (a5 = f4[0], d2) : a5, d2.data = (...f4) => f4.length ? (l3 = f4[0], d2) : l3, d2.xValueName = (...f4) => f4.length ? (i4 = f4[0], d2) : i4, d2.yValueName = (...f4) => f4.length ? (c6 = f4[0], d2) : c6, d2.altDataWithScale = (...f4) => f4.length ? (s3 = f4[0], d2) : s3, xt.rebindAll(d2, e3), d2;
};
function hn(e3, t2) {
  let r2 = dn(t2, K4(t2)), o2 = Z4(t2), n3 = H4().settings(t2).scale(o2), a5 = fn.seriesSvgRepeat().series(Be2(t2, o2)).orient("horizontal"), l3 = P2().pad([0.1, 0.1]).padUnit("percent"), i4 = A6(t2).excludeType(C6.linear).settingName("crossValues").valueName("crossValue")(r2), c6 = A6(t2).settingName("mainValues").valueName("mainValue").memoValue(t2.axisMemo[0]).orient("vertical").paddingStrategy(l3), s3 = be3(t2, yt(r2)).color(o2), m4 = c6(s3.data()), d2 = s3.haveSplit() ? a5 : O4(a5, t2).orient("vertical"), u3 = Y5(i4, m4).axisSplitter(s3).plotArea(d2);
  u3.yNice && u3.yNice();
  let p2 = D6().chart(u3).settings(t2).xScale(i4.scale), f4 = G3().settings(t2).xScale(i4.scale).yScale(m4.scale).color(o2).data(r2);
  if (s3.haveSplit()) {
    let g3 = c6(s3.altData());
    u3.altAxis(g3), f4.data(s3.data()).altDataWithScale({ yScale: g3.scale, data: s3.altData() });
  }
  let h4 = s3.data();
  e3.datum(h4).call(p2), e3.call(f4), e3.call(n3);
}
hn.plugin = { name: "Y Line", category: "Y Chart", max_cells: 4e3, max_columns: 50, render_warning: true, initial: { names: ["Y Axis"] } };
var gn = hn;
var Ca = [circle_default, cross_default, diamond_default, square_default, star_default, triangle_default, wye_default];
function bt(e3) {
  return e3.length > 1 ? ordinal().domain(e3).range(Ca) : null;
}
var ka2 = 8;
var Ta = 1;
function yn(e3, t2, r2, o2, n3, a5, l3 = 1) {
  let i4 = (0, import_d3fc6.seriesCanvasPoint)().crossValue((c6) => c6.x).mainValue((c6) => c6.y);
  return r2 && i4.size((c6) => Math.round(l3 * r2(c6.size))), a5 && i4.type(a5(t2)), i4.decorate((c6, s3) => {
    let m4 = o2(s3.colorValue !== void 0 ? s3.colorValue : t2), d2 = e3.colorStyles && e3.colorStyles.opacity;
    if (n3) {
      let { type: u3 } = e3.mainValues.find((f4) => f4.name === n3), p2 = pe3(u3, s3.row[n3]);
      if (p2 !== null) {
        c6.fillStyle = e3.textStyles.color, c6.font = e3.textStyles.font;
        let f4 = 0;
        r2 && (f4 = Math.sqrt(l3 * r2(s3.size) / Math.PI) * Ta);
        let h4 = f4 + ka2;
        c6.fillText(p2, h4, 4);
      }
    }
    c6.strokeStyle = J3(m4), c6.fillStyle = Se2(m4, d2);
  }), i4;
}
function vt(e3) {
  let t2 = e3.data && e3.data.length > 0 ? e3.data[0] : {}, r2 = [];
  return Object.keys(t2).forEach((o2) => {
    if (o2 !== "__ROW_PATH__") {
      let n3 = fe3(o2);
      r2.includes(n3) || r2.push(n3);
    }
  }), bt(r2);
}
function xn(e3, t2) {
  let r2 = e3.mainValues.length;
  return t2.map((o2) => {
    let n3 = Object.keys(o2).filter((l3) => l3 !== "__ROW_PATH__"), a5 = new Array(n3.length / r2);
    for (let l3 = 0; l3 < n3.length / r2; l3++)
      a5[l3] = { key: fe3(n3[l3 * r2]), crossValue: o2[n3[l3 * r2]], mainValue: o2[n3[l3 * r2 + 1]], row: o2 };
    return a5;
  });
}
function vn(e3, t2) {
  let r2 = yt(xn(t2, Fe3(t2))), o2 = pt(t2), n3 = vt(t2), a5 = null;
  o2.domain().length >= 2 && (a5 = Kr().settings(t2).scale(n3).color(o2));
  let l3 = bn.seriesSvgRepeat().series(Be2(t2, o2)).orient("horizontal"), i4 = P2().pad([0.1, 0.1]).padUnit("percent"), c6 = A6(t2).settingName("mainValues").settingValue(t2.mainValues[0].name).valueName("crossValue").memoValue(t2.axisMemo[0]).paddingStrategy(i4), m4 = A6(t2).settingName("mainValues").settingValue(t2.mainValues[1].name).valueName("mainValue").memoValue(t2.axisMemo[1]).orient("vertical").paddingStrategy(i4)(r2), d2 = c6(r2), u3 = O4(l3, t2).orient("vertical"), p2 = Y5(d2, m4).xLabel(t2.mainValues[0].name).yLabel(t2.mainValues[1].name).plotArea(u3);
  p2.xNice && p2.xNice(), p2.yNice && p2.yNice();
  let f4 = D6().chart(p2).settings(t2).xScale(d2.scale).yScale(m4.scale), h4 = G3().settings(t2).xScale(d2.scale).yScale(m4.scale).color(o2).data(r2);
  e3.datum(r2).call(f4), e3.call(h4), a5 && e3.call(a5);
}
vn.plugin = { name: "X/Y Line", category: "X/Y Chart", max_cells: 5e4, max_columns: 50, render_warning: true, initial: { type: "number", count: 2, names: ["X Axis", "Y Axis", "Tooltip"] }, selectMode: "toggle" };
var wn = vn;
function Vn(e3, t2) {
  let r2 = _n.seriesSvgArea();
  return r2 = r2.decorate((o2) => {
    o2.style("fill", (n3) => t2(n3[0].key)).style("opacity", 0.5);
  }), r2.crossValue((o2) => o2.crossValue).mainValue((o2) => o2.mainValue).baseValue((o2) => o2.baseValue);
}
function Sn(e3, t2) {
  let r2 = U3(e3);
  return t2.map((o2, n3) => {
    let a5 = {};
    return Object.keys(o2).filter((l3) => l3 !== "__ROW_PATH__").map((l3) => {
      let i4 = l3.split("|"), c6 = i4[i4.length - 1], s3 = a5[c6] || 0, m4 = s3 + o2[l3];
      return a5[c6] = m4, { key: l3, crossValue: r2(o2, n3), mainValue: m4, baseValue: s3, row: o2 };
    });
  });
}
function Cn(e3, t2) {
  let r2 = Sn(t2, K4(t2)), o2 = Z4(t2), n3 = H4().settings(t2).scale(o2), a5 = Xe2.seriesSvgRepeat().series(Vn(t2, o2).orient("vertical")), l3 = Xe2.seriesSvgRepeat().series(Be2(t2, o2)).orient("vertical"), i4 = Xe2.seriesSvgMulti().series([a5, l3]), c6 = A6(t2).excludeType(C6.linear).settingName("crossValues").valueName("crossValue")(r2), s3 = A6(t2).settingName("mainValues").valueName("mainValue").memoValue(t2.axisMemo[1]).excludeType(C6.ordinal).orient("vertical").include([0]).paddingStrategy(P2()), m4 = be3(t2, r2).color(o2), d2 = s3(m4.data()), u3 = m4.haveSplit() ? i4 : O4(i4, t2).orient("vertical"), p2 = Y5(c6, d2).axisSplitter(m4).plotArea(u3);
  p2.yNice && p2.yNice();
  let f4 = D6().chart(p2).settings(t2).xScale(c6.scale), h4 = G3().settings(t2).xScale(c6.scale).yScale(d2.scale).color(o2).data(r2);
  if (m4.haveSplit()) {
    let g3 = s3(m4.altData());
    p2.altAxis(g3), h4.data(m4.data()).altDataWithScale({ yScale: g3.scale, data: m4.altData() });
  }
  e3.datum(m4.data()).call(f4), e3.call(h4), e3.call(n3);
}
Cn.plugin = { name: "Y Area", category: "Y Chart", max_cells: 4e3, max_columns: 50, render_warning: true, initial: { names: ["Y Axis"] } };
var An = Cn;
function Tn(e3, t2, r2, o2) {
  let n3 = kn.seriesSvgPoint().size(100), a5 = e3.colorStyles && e3.colorStyles.opacity;
  return o2 && n3.type(o2(t2)), n3.decorate((l3) => {
    l3.style("stroke", (i4) => J3(r2(i4.colorValue || t2))).style("fill", (i4) => Se2(r2(i4.colorValue || t2), a5));
  }), n3.crossValue((l3) => l3.crossValue).mainValue((l3) => l3.mainValue);
}
function Ln(e3) {
  let t2 = e3.data && e3.data.length > 0 ? e3.data[0] : {}, r2 = Object.keys(t2).filter((o2) => o2 !== "__ROW_PATH__");
  return bt(r2);
}
function En(e3, t2) {
  let r2 = Nr(t2, K4(t2)), o2 = Ln(t2), n3 = Z4(t2), a5 = gt().settings(t2).scale(o2).color(n3), l3 = zn.seriesSvgMulti().mapping((g3, y3) => g3[y3]).series(r2.map((g3) => Tn(t2, g3.key, n3, o2))), i4 = P2().pad([0.05, 0.05]).padUnit("percent"), c6 = A6(t2).excludeType(C6.linear).settingName("crossValues").valueName("crossValue")(r2), s3 = A6(t2).settingName("mainValues").valueName("mainValue").memoValue(t2.axisMemo[1]).orient("vertical").paddingStrategy(i4), m4 = be3(t2, r2).color(n3), d2 = s3(m4.data()), u3 = m4.haveSplit() ? l3 : O4(l3, t2).orient("vertical"), p2 = Y5(c6, d2).axisSplitter(m4).plotArea(u3);
  p2.yNice && p2.yNice();
  let f4 = D6().chart(p2).settings(t2).xScale(c6.scale), h4 = G3().settings(t2).xScale(c6.scale).yScale(d2.scale).color(n3).data(r2);
  if (m4.haveSplit()) {
    let g3 = s3(m4.altData());
    p2.altAxis(g3), h4.data(m4.data()).altDataWithScale({ yScale: g3.scale, data: m4.altData() });
  }
  e3.datum(m4.data()).call(f4), e3.call(h4), a5 && e3.call(a5);
}
En.plugin = { name: "Y Scatter", category: "Y Chart", max_cells: 4e3, max_columns: 50, render_warning: true, initial: { names: ["Y Axis"] } };
var Mn = En;
function Nn(e3, t2) {
  return Ae3(e3, t2, { excludeEmpty: true }).map((r2) => La(e3, r2));
}
function La(e3, t2) {
  let r2 = U3(e3), o2 = t2.map((n3, a5) => ({ crossValue: r2(n3, a5), mainValues: e3.mainValues.map((l3) => n3[l3.name]), x: n3[e3.mainValues[0].name], y: n3[e3.mainValues[1].name], colorValue: e3.realValues[2] ? n3[e3.realValues[2]] : void 0, size: e3.realValues[3] ? n3[e3.realValues[3]] : void 0, key: t2.key, row: n3 }));
  return o2.key = t2.key, o2;
}
function On(e3, t2, r2, o2) {
  return linear2().domain(Dn(t2, r2, o2));
}
function ve3(e3, t2, r2, o2) {
  let n3 = Dn(t2, r2, o2), a5 = e3.colorStyles.gradient.full;
  if (n3[0] >= 0)
    a5 = e3.colorStyles.gradient.positive;
  else if (n3[1] <= 0)
    a5 = e3.colorStyles.gradient.negative;
  else {
    let i4 = Math.max(-n3[0], n3[1]);
    n3 = [-i4, i4];
  }
  let l3 = za(a5);
  return sequential(l3).domain(n3);
}
var Dn = (e3, t2, r2) => r2 || Bt().valueName(t2).pad([0, 0])(e3);
var za = (e3) => {
  let t2 = e3.slice(1).map((r2, o2) => value_default(e3[o2][1], r2[1]));
  return (r2) => {
    let o2 = e3.findIndex((i4, c6) => c6 < e3.length - 1 && r2 <= e3[c6 + 1][0] && r2 > i4[0]);
    if (o2 === -1)
      return r2 <= e3[0][0] ? e3[0][1] : e3[e3.length - 1][1];
    let n3 = t2[o2], [a5] = e3[o2], [l3] = e3[o2 + 1];
    return n3((r2 - a5) / (l3 - a5));
  };
};
function _e3() {
  let e3 = null;
  function t2(r2) {
    let o2 = N4(r2, "div.legend-container", () => r2.append("div").attr("class", "legend-container legend-color").style("z-index", "2")), { width: n3, height: a5 } = o2.node().getBoundingClientRect(), l3 = band().domain([0, 1]).range([0, n3]), i4 = e3.copy().nice().domain(), c6 = we3.extentLinear().pad([0.1, 0.1]).padUnit("percent")(i4), [s3, m4] = c6, d2 = range3(s3, m4, (m4 - s3) / a5), u3 = linear2().domain(c6).range([a5, 0]), p2 = we3.autoBandwidth(we3.seriesSvgBar()).xScale(l3).yScale(u3).crossValue(0).baseValue((b3, w4) => d2[Math.max(0, w4 - 1)]).mainValue((b3) => b3).decorate((b3) => {
      b3.selectAll("path").style("fill", (w4) => e3(w4));
    }), f4 = i4[0] < 0 && i4[1] > 0 ? 0 : Math.round((i4[1] + i4[0]) / 2), h4 = [...i4, f4], g3 = we3.axisRight(u3).tickValues(h4).tickSizeOuter(0).tickFormat((b3) => ot(b3)), y3 = N4(o2, "svg", () => o2.append("svg")).style("width", n3).style("height", a5), x4 = N4(y3, "g", () => y3.append("g")).datum(d2).call(p2), v4 = Math.abs(x4.node().getBBox().x);
    N4(y3, "#legend-axis", () => y3.append("g").attr("id", "legend-axis")).attr("transform", `translate(${v4})`).datum(d2).call(g3).select(".domain").attr("visibility", "hidden");
  }
  return t2.scale = (...r2) => r2.length ? (e3 = r2[0], t2) : e3, t2;
}
function Ea([e3, t2], [r2, o2]) {
  let n3 = (o2 - t2) / (r2 - e3), a5 = o2 - n3 * r2;
  return function(l3) {
    let i4 = l3.node(), c6 = Math.min(i4.clientWidth, i4.clientHeight);
    return Math.min(o2, Math.max(t2, n3 * c6 + a5));
  };
}
function Fn(e3, t2) {
  let r2 = Nn(t2, Fe3(t2)), o2 = vt(t2), n3 = t2.realValues.length <= 2 || t2.realValues[2] === null, a5 = null, l3 = null;
  n3 ? (a5 = pt(t2), l3 = gt().settings(t2).scale(o2).color(n3 ? a5 : null)) : (a5 = ve3(t2, r2, "colorValue"), l3 = _e3().scale(a5));
  let i4 = t2.realValues[3] ? On(t2, r2, "size").range([10, 1e4]) : null, c6 = t2.realValues[4], s3 = Ea([600, 0.1], [1600, 1])(e3), m4 = Pn.seriesCanvasMulti().mapping((y3, x4) => y3[x4]).series(r2.map((y3) => yn(t2, y3.key, i4, a5, c6, o2, s3))), d2 = () => A6(t2).settingName("mainValues").paddingStrategy(P2()).pad([0.1, 0.1]), u3 = d2().settingValue(t2.mainValues[0].name).memoValue(t2.axisMemo[0]).valueName("x")(r2), p2 = d2().orient("vertical").settingValue(t2.mainValues[1].name).memoValue(t2.axisMemo[1]).valueName("y")(r2), f4 = De2(u3, p2).xLabel(t2.mainValues[0].name).yLabel(t2.mainValues[1].name).plotArea(O4(m4, t2).canvas(true));
  f4.xNice && f4.xNice(), f4.yNice && f4.yNice();
  let h4 = D6().chart(f4).settings(t2).xScale(u3.scale).yScale(p2.scale).canvas(true), g3 = G3().scaleFactor(s3).settings(t2).canvas(true).xScale(u3.scale).xValueName("x").yValueName("y").yScale(p2.scale).color(n3 && a5).size(i4).data(r2);
  e3.datum(r2).call(h4), e3.call(g3), l3 && e3.call(l3);
}
Fn.plugin = { name: "X/Y Scatter", category: "X/Y Chart", max_cells: 5e4, max_columns: 50, render_warning: true, initial: { type: "number", count: 2, names: ["X Axis", "Y Axis", "Color", "Size", "Label", "Tooltip"] }, selectMode: "toggle" };
var Rn = Fn;
function Bn(e3, t2) {
  let r2 = wt.seriesCanvasHeatmap();
  return r2.decorate((o2, n3) => {
    o2.fillStyle = t2(n3.colorValue);
  }), wt.autoBandwidth(r2).xValue((o2) => o2.crossValue).yValue((o2) => o2.mainValue).colorValue((o2) => o2.colorValue).colorInterpolate(t2.interpolator()).widthFraction(1);
}
function In(e3, t2) {
  let r2 = U3(e3), o2 = Me3(e3).excludeType(C6.linear).settingName("splitValues")(), n3 = [];
  return t2.forEach((a5, l3) => {
    let i4 = r2(a5, l3);
    Object.keys(a5).filter((c6) => c6 !== "__ROW_PATH__").forEach((c6) => {
      let s3 = Ma(c6);
      n3.push({ crossValue: i4, mainValue: o2 === C6.time ? new Date(s3) : s3, colorValue: a5[c6], row: a5 });
    });
  }), n3;
}
function Ma(e3) {
  let t2 = e3.split("|");
  return t2.pop(), t2.join("|");
}
function $n(e3, t2) {
  let r2 = In(t2, K4(t2)), o2 = ve3(t2, r2, "colorValue"), n3 = Bn(t2, o2), a5 = _e3().scale(o2), l3 = A6(t2).excludeType(C6.linear).settingName("crossValues").valueName("crossValue")(r2), i4 = A6(t2).excludeType(C6.linear).settingName("splitValues").valueName("mainValue").modifyDomain((d2) => !isNaN(d2[0]) ? d2.reverse() : d2).orient("vertical")(r2), c6 = De2(l3, i4).plotArea(O4(n3, t2).canvas(true));
  c6.xPaddingInner && (c6.xPaddingInner(0), c6.xPaddingOuter(0), n3.xAlign("right")), c6.yPaddingInner && (c6.yPaddingInner(0), c6.yPaddingOuter(0), n3.yAlign("top"));
  let s3 = D6().chart(c6).settings(t2).xScale(l3.scale).yScale(i4.scale).canvas(true), m4 = G3().settings(t2).canvas(true).xScale(l3.scale).yScale(i4.scale).color(o2).data(r2);
  e3.datum(r2).call(s3), e3.call(a5), e3.call(m4);
}
$n.plugin = { name: "Heatmap", category: "Hierarchial Chart", max_cells: 5e4, max_columns: 500, render_warning: true, initial: { names: ["Color"] } };
var Hn = $n;
function Gn(e3, t2) {
  return Ae3(e3, t2, { excludeEmpty: true }).map((r2) => Na(e3, r2));
}
function Na(e3, t2) {
  let r2 = U3(e3), o2 = (a5) => t2[a5 < t2.length - 1 ? a5 + 1 : a5][e3.realValues[0]], n3 = t2.map((a5, l3) => {
    let i4 = e3.realValues[0] ? a5[e3.realValues[0]] : void 0, c6 = e3.realValues[1] ? a5[e3.realValues[1]] : o2(l3);
    return { crossValue: r2(a5, l3), mainValues: e3.mainValues.map((s3) => a5[s3.name]), openValue: i4, closeValue: c6, highValue: e3.realValues[2] ? a5[e3.realValues[2]] : Math.max(i4, c6), lowValue: e3.realValues[3] ? a5[e3.realValues[3]] : Math.min(i4, c6), key: t2.key, row: a5 };
  });
  return n3.key = t2.key, n3;
}
var Oa = (e3) => e3.closeValue >= e3.openValue;
function jn(e3, t2, r2) {
  let o2 = r2.domain(), n3 = he3().domain(o2).settings(e3).defaultColors([e3.colorStyles["series-2"]]).mapFunction(Ce3(0.5))(), a5 = he3().settings(e3).domain(o2)(), l3 = t2().crossValue((s3) => s3.crossValue).openValue((s3) => s3.openValue).highValue((s3) => s3.highValue).lowValue((s3) => s3.lowValue).closeValue((s3) => s3.closeValue).decorate((s3, m4) => {
    let d2 = Oa(m4) ? r2(m4.key) : n3(m4.key);
    s3.fillStyle = d2, s3.strokeStyle = d2;
  }), i4 = He2.seriesCanvasLine().mainValue((s3) => s3.bollinger.average).crossValue((s3) => s3.crossValue).decorate((s3, m4) => {
    s3.strokeStyle = a5(m4[0].key);
  }), c6 = He2.seriesCanvasArea().mainValue((s3) => s3.bollinger.upper).baseValue((s3) => s3.bollinger.lower).crossValue((s3) => s3.crossValue).decorate((s3, m4) => {
    s3.fillStyle = Ce3(0.25)(a5(m4[0].key));
  });
  return He2.seriesCanvasMulti().series([c6, l3, i4]);
}
function Da(e3) {
  return function(t2, r2) {
    let o2 = Gn(r2, Fe3(r2)), n3 = _t.indicatorBollingerBands().value((y3) => y3.openValue), a5 = o2.map((y3) => {
      let x4 = n3(y3);
      return y3.map((v4, b3) => Object.assign({ bollinger: x4[b3] }, v4));
    }), l3 = o2.map((y3) => y3.key).concat(r2.hideKeys ? r2.hideKeys : []).sort(), i4 = he3().domain(l3).settings(r2).mapFunction(Ce3(1))(), c6 = H4().settings(r2).scale(l3.length > 1 ? i4 : null), s3 = jn(r2, e3, i4), m4 = _t.seriesCanvasMulti().mapping((y3, x4) => y3[x4]).series(a5.map(() => s3)), d2 = P2().pad([0.1, 0.1]).padUnit("percent"), u3 = A6(r2).settingName("crossValues").valueName("crossValue")(a5), p2 = A6(r2).settingName("mainValues").valueNames(["lowValue", "highValue"]).memoValue(r2.axisMemo[1]).orient("vertical").paddingStrategy(d2)(a5), f4 = De2(u3, p2).plotArea(O4(m4, r2).orient("vertical").canvas(true));
    f4.yNice && f4.yNice();
    let h4 = D6().chart(f4).settings(r2).xScale(u3.scale).onChange((y3) => {
      let x4 = a5.map((v4) => v4.filter((b3) => b3.crossValue >= y3.xDomain[0] && b3.crossValue <= y3.xDomain[1]));
      f4.yDomain(p2.domainFunction(x4));
    }).canvas(true), g3 = G3().settings(r2).xScale(u3.scale).yScale(p2.scale).yValueName("closeValue").color(i4).data(a5).canvas(true);
    t2.datum(a5).call(h4), t2.call(g3), t2.call(c6);
  };
}
var Vt = Da;
var Wn = Vt(import_d3fc7.seriesCanvasOhlc);
Wn.plugin = { name: "OHLC", category: "Y Chart", max_cells: 3500, max_columns: 50, render_warning: true, initial: { type: "number", count: 1, names: ["Open", "Close", "High", "Low", "Tooltip"] }, selectMode: "toggle" };
var Yn = Wn;
var Un = Vt(import_d3fc8.seriesCanvasCandlestick);
Un.plugin = { name: "Candlestick", category: "Y Chart", max_cells: 4e3, max_columns: 50, render_warning: true, initial: { type: "number", count: 1, names: ["Open", "Close", "High", "Low", "Tooltip"] }, selectMode: "toggle" };
var Kn = Un;
function Xn(e3, t2) {
  if (e3.realValues.length > 1 && e3.realValues[1] !== null) {
    let r2 = e3.realValues[1];
    if (e3.mainValues.find((o2) => o2.name === r2)?.type === "string") {
      let o2 = t2.map((n3) => n3.data).filter((n3) => n3.height > 0).map((n3) => qn(n3)).reduce((n3, a5) => n3.concat(a5));
      return mt(e3, o2);
    } else
      return ve3(e3, null, null, pr(t2.map((o2) => o2.extents)));
  }
}
function qn(e3, t2 = []) {
  return e3.children && e3.children.length > 0 ? e3.children.forEach((r2) => t2.concat(qn(r2, t2))) : e3.data.color && t2.push(e3.data.color), t2;
}
function Ct(e3) {
  let t2 = {}, r2 = e3.realValues.map((n3) => n3 === null ? null : e3.mainValues.find((a5) => a5.name === n3));
  return e3.data.forEach((n3, a5) => {
    let l3 = n3.__ROW_PATH__;
    Ba(n3).forEach((c6) => {
      let s3;
      t2[c6] || (t2[c6] = []), s3 = t2[c6], l3.forEach((m4, d2) => {
        let u3 = s3.find((p2) => p2.name === m4);
        if (u3 || (u3 = { name: m4, children: [] }, s3.push(u3)), e3.realValues.length > 1 && e3.realValues[1] !== null) {
          let p2 = d2 === l3.length - 1, f4 = Ge3(p2 ? n3 : e3.agg_paths[a5][d2 + 1] || n3, e3.mainValues[1], c6);
          f4 !== void 0 && (u3.color = f4);
        }
        if (e3.realValues.length > 2 && e3.realValues[2] !== null) {
          u3.tooltip = [];
          for (let p2 = 2; p2 < e3.realValues.length; ++p2)
            u3.tooltip.push(Ge3(n3, r2[p2], c6));
        }
        if (d2 === l3.length - 1) {
          if (u3.name = l3.slice(-1)[0], e3.crossValues.length === 0)
            u3.size = Ge3(n3, e3.mainValues[0], "");
          else if (l3.length === e3.crossValues.length) {
            let p2 = Ge3(n3, e3.mainValues[0], c6);
            u3.size = p2 > 0 ? p2 : 0;
          }
        }
        s3 = u3.children;
      });
    });
  }), Object.entries(t2).map((n3) => {
    let a5 = { name: "root", children: n3[1] }, l3 = hierarchy(a5).sum((c6) => c6.size), i4 = partition_default().size([2 * Math.PI, l3.height + 1])(l3);
    return i4.each((c6) => {
      c6.current = c6, c6.mainValues = e3.realValues.length === 1 || e3.realValues[1] === null && e3.realValues[2] === null ? c6.value : [c6.value, c6.data.color].concat(c6.data.tooltip || []).filter((s3) => s3 !== void 0), c6.crossValue = c6.ancestors().slice(0, -1).reverse().map((s3) => s3.data.name), c6.key = n3[0], c6.label = pe3(e3.crossValues[c6.depth - 1 < 0 ? 0 : c6.depth - 1]?.type || e3.mainValues[0].type, c6.data.name);
    }), { split: n3[0], data: i4, extents: Ra(e3, n3) };
  });
}
var Ge3 = (e3, t2, r2) => r2.length ? e3[`${r2}|${t2.name}`] : e3[t2.name];
function Ra(e3, [t2, r2]) {
  if (e3.realValues.length > 1 && e3.realValues[1] !== null) {
    let o2 = Math.min(...e3.data.map((a5) => Ge3(a5, e3.mainValues[1], t2))), n3 = Math.max(...r2.map((a5) => a5.color));
    return [o2, n3];
  }
}
function Ba(e3) {
  let t2 = [];
  return Object.keys(e3).forEach((r2) => {
    if (r2 !== "__ROW_PATH__") {
      let o2 = r2.split("|").slice(0, -1).join("|");
      t2.includes(o2) || t2.push(o2);
    }
  }), t2;
}
var At = (e3) => arc_default().startAngle((t2) => t2.x0).endAngle((t2) => t2.x1).padAngle((t2) => Math.min((t2.x1 - t2.x0) / 2, 5e-3)).padRadius(e3).innerRadius((t2) => Math.max(1, (t2.y0 - 1) * e3)).outerRadius((t2) => Math.max((t2.y0 - 1) * e3, (t2.y1 - 1) * e3 - 1));
var oe4 = (e3) => e3.y0 >= 1 && e3.x1 > e3.x0;
var qe = (e3) => e3.y1 <= 3 && e3.y0 >= 1 && (e3.y1 - e3.y0) * (e3.x1 - e3.x0) > 0.06;
function kt(e3, t2) {
  let r2 = (e3.x0 + e3.x1) / 2 * 180 / Math.PI, o2 = (e3.y0 - 1 + (e3.y1 - 1)) / 2 * t2;
  return `rotate(${r2 - 90}) translate(${o2},0) rotate(${r2 < 180 ? 0 : 180})`;
}
function Zn(e3, t2) {
  let r2 = this.getBBox().width;
  if (r2 > t2) {
    let o2 = e3.label, n3 = select_default2(this);
    for (; r2 > t2; )
      o2 = o2.substring(0, o2.length - 1), n3.text(() => o2), r2 = this.getBBox().width;
    n3.text(() => `${o2.substring(0, o2.length - 3).replace(/\s+$/, "")}...`);
  }
}
var Jn = (e3, t2, r2, o2, n3, a5, l3, i4, c6) => (s3, m4) => {
  c6.sunburstLevel[i4] = s3.data.name, s3.parent ? (r2.datum(s3.parent), r2.style("cursor", "pointer"), o2.html(`&#8682; ${s3.label}`)) : (r2.datum(e3), r2.style("cursor", "default"), o2.html("")), e3.each((u3) => u3.target = { x0: Math.max(0, Math.min(1, (u3.x0 - s3.x0) / (s3.x1 - s3.x0))) * 2 * Math.PI, x1: Math.max(0, Math.min(1, (u3.x1 - s3.x0) / (s3.x1 - s3.x0))) * 2 * Math.PI, y0: Math.max(0, u3.y0 - s3.depth), y1: Math.max(0, u3.y1 - s3.depth) });
  let d2 = t2.transition().duration(m4 ? 0 : 750);
  n3.transition(d2).tween("data", (u3) => {
    let p2 = value_default(u3.current, u3.target);
    return (f4) => u3.current = p2(f4);
  }).filter(function(u3) {
    return +this.getAttribute("fill-opacity") || oe4(u3.target);
  }).attr("fill-opacity", (u3) => oe4(u3.target) ? 1 : 0).attr("user-select", (u3) => oe4(u3.target) ? "initial" : "none").style("pointer-events", (u3) => oe4(u3.target) ? "initial" : "none").attrTween("d", (u3) => () => At(l3)(u3.current)), a5.filter(function(u3) {
    return +this.getAttribute("fill-opacity") || qe(u3.target);
  }).transition(d2).attr("fill-opacity", (u3) => +qe(u3.target)).attrTween("transform", (u3) => () => kt(u3.current, l3));
};
function Qn() {
  let e3 = null, t2 = null, r2 = null, o2 = null, n3 = null, a5 = (l3) => {
    let i4 = l3.selectAll("g.segment").data(r2.descendants().slice(1)), c6 = i4.enter().append("g").attr("class", "segment");
    c6.append("path"), c6.append("text").attr("class", "segment").attr("dy", "0.35em");
    let s3 = c6.merge(i4), m4 = s3.select("path").attr("fill-opacity", (h4) => oe4(h4.current) ? 1 : 0).attr("user-select", (h4) => oe4(h4.current) ? "initial" : "none").style("pointer-events", (h4) => oe4(h4.current) ? "initial" : "none").attr("d", (h4) => At(n3)(h4.current));
    o2 && m4.style("fill", (h4) => o2(h4.data.color));
    let d2 = s3.select("text").attr("fill-opacity", (h4) => +qe(h4.current)).attr("transform", (h4) => kt(h4.current, n3)).text((h4) => h4.label).each(function(h4) {
      Zn.call(this, h4, n3);
    }), u3 = l3.select("text.parent"), p2 = l3.select("circle").attr("r", n3).datum(r2), f4 = Jn(r2, l3, p2, u3, m4, d2, n3, t2, e3);
    if (e3.sunburstLevel) {
      let h4 = r2.descendants().find((g3) => g3.data.name === e3.sunburstLevel[t2]);
      h4 && f4(h4, true);
    } else
      e3.sunburstLevel = {};
    p2.on("click", (h4) => f4(h4, false)), m4.filter((h4) => h4.children).style("cursor", "pointer").on("click", (h4) => f4(h4, false));
  };
  return a5.settings = (...l3) => l3.length ? (e3 = l3[0], a5) : e3, a5.split = (...l3) => l3.length ? (t2 = l3[0], a5) : t2, a5.data = (...l3) => l3.length ? (r2 = l3[0], a5) : r2, a5.color = (...l3) => l3.length ? (o2 = l3[0], a5) : o2, a5.radius = (...l3) => l3.length ? (n3 = l3[0], a5) : n3, a5;
}
function Tt() {
  let e3 = "element-prefix-unset", t2 = null, r2 = null, o2 = null, n3 = null, a5 = null, l3 = null, i4 = (c6) => {
    let s3 = N4(c6, "div.inner-container", () => c6.append("div").attr("class", "inner-container")), m4 = s3.node().getBoundingClientRect(), d2 = m4.height, u3 = m4.width - (a5 ? 70 : 0), p2 = 300, f4 = c6.datum(), h4 = Math.max(1, Math.min(f4.length, Math.floor(u3 / p2))), g3 = Math.ceil(f4.length / h4);
    l3 = { width: u3 / Math.max(h4, 1), height: Math.min(d2, Math.max(d2 / g3, u3 / Math.max(h4, 1))) }, d2 / g3 > l3.height * 0.75 && (l3.height = d2 / g3), f4.length > 1 ? (s3.style("grid-template-columns", `repeat(${h4}, ${100 / h4}%)`), s3.style("grid-template-rows", `repeat(${g3}, ${l3.height}px)`)) : (s3.style("grid-template-columns", "repeat(1, 100%)"), s3.style("grid-template-rows", "repeat(1, 100%)")), o2 = s3.selectAll(`div.${e3}-container`).data(f4, (y3) => y3.split), o2.exit().remove(), r2 = o2.enter().append("div").attr("class", `${e3}-container`), n3 = r2.append("div").attr("class", "title-container").style("text-align", "center").attr("display", "inline-block").append("text").attr("class", "title").style("text-align", "left"), t2 = r2.append("svg").append("g").attr("class", e3);
  };
  return i4.elementsPrefix = (...c6) => c6.length ? (e3 = c6[0], i4) : e3, i4.chartContainer = () => t2, i4.chartEnter = () => r2, i4.chartDiv = () => o2, i4.chartTitle = () => n3, i4.containerSize = () => l3, i4;
}
function to(e3, t2) {
  let r2 = Ct(t2), o2 = Xn(t2, r2), n3 = Tt().elementsPrefix("sunburst");
  if (e3.datum(r2).call(n3), o2) {
    let m4 = t2.realValues[1];
    if (t2.mainValues.find((d2) => d2.name === m4)?.type === "string") {
      let d2 = H4().settings(t2).scale(o2);
      e3.call(d2);
    } else {
      let d2 = _e3().scale(o2);
      e3.call(d2);
    }
  }
  let a5 = n3.chartContainer(), l3 = n3.chartEnter(), i4 = n3.chartDiv(), c6 = n3.chartTitle(), s3 = n3.containerSize();
  c6.each((m4, d2, u3) => select_default2(u3[d2]).text(m4.split)), a5.append("circle").attr("fill", "none").style("pointer-events", "all"), a5.append("text").attr("class", "parent"), l3.merge(i4).select("svg").select("g.sunburst").attr("transform", `translate(${s3.width / 2}, ${s3.height / 2})`).each(function({ split: m4, data: d2 }) {
    let u3 = select_default2(this), p2 = this.parentNode, { width: f4, height: h4 } = p2.getBoundingClientRect(), g3 = (Math.min(f4, h4) - 24) / Math.max(2, t2.crossValues.length * 2);
    Qn().settings(t2).split(m4).data(d2).color(o2).radius(g3)(u3), de3().settings(t2)(u3.selectAll("g.segment"));
  });
}
to.plugin = { name: "Sunburst", category: "Hierarchial Chart", max_cells: 7500, max_columns: 50, render_warning: true, initial: { type: "number", count: 1, names: ["Size", "Color", "Tooltip"] } };
var ro = to;
function no(e3, t2) {
  if (e3.realValues.length < 1 || e3.realValues[1] === null || e3.realValues[1] === void 0)
    return;
  let r2 = e3.realValues[1], o2 = t2.filter((n3) => n3.height > 0).map((n3) => oo(n3)).reduce((n3, a5) => n3.concat(a5));
  if (e3.mainValues.find((n3) => n3.name === r2)?.type === "string")
    return mt(e3, o2);
  {
    let n3 = Math.min(...o2), a5 = Math.max(...o2);
    return ve3(e3, null, null, [n3, a5]);
  }
}
function oo(e3, t2 = []) {
  return e3.children && e3.children.length > 0 ? e3.children.forEach((r2) => t2.concat(oo(r2, t2))) : e3.data.color && t2.push(e3.data.color), t2;
}
var ao = 7;
var Lt = (e3) => !!(e3.target && e3.target.textAttributes);
var zt = (e3, t2, r2) => {
  e3.selectAll("text").each(function(n3, a5) {
    let l3 = Ya(n3, t2, r2);
    this.style = l3;
  });
  let o2 = Je2(e3);
  Ga(o2), tr(o2);
};
var lo = (e3) => {
  e3.each((t2, r2, o2) => {
    select_default2(o2[r2]).selectAll("text").attr("dx", t2.target.textAttributes.dx).attr("dy", t2.target.textAttributes.dy).attr("style", t2.target.textAttributes.style);
  });
};
var tr = (e3) => {
  let o2 = (a5) => a5.getBoundingClientRect(), n3 = [];
  e3.selectAll("text").filter((a5, l3, i4) => select_default2(i4[l3]).attr("style") === Le3.high).each((a5, l3, i4) => n3.push(i4[l3])), e3.selectAll("text").filter((a5, l3, i4) => select_default2(i4[l3]).attr("style") === Le3.low).each((a5, l3, i4) => {
    let c6 = i4[l3];
    n3.filter((s3) => Yt("x", o2(s3), o2(c6)) && Yt("y", o2(s3), o2(c6), -2)).forEach(() => select_default2(c6).attr("dy", Number(select_default2(c6).attr("dy")) + 14));
  });
};
var io = (e3) => select_default2(e3).style("opacity", Ze[select_default2(e3).attr("class")]);
var so = (e3) => select_default2(e3).style("opacity", null);
var Ze = { top: 1, mid: 0.7, lower: 0 };
var Je2 = (e3) => e3.filter((t2, r2, o2) => select_default2(o2[r2]).selectAll("text").attr("style") !== Le3.zero);
var Et = (e3) => e3.selectAll("text").each((t2, r2, o2) => ja(o2[r2]));
var Ga = (e3) => e3.selectAll("text").each((t2, r2, o2) => co(o2[r2]));
var co = (e3) => {
  let t2 = select_default2(e3), r2 = e3.getBoundingClientRect();
  t2.attr("dx", 0 - r2.width / 2).attr("dy", 0 + r2.height / 4);
};
var ja = (e3) => {
  let r2 = e3.parentNode.childNodes[0], o2 = e3.getBBox(), n3 = r2.getBBox();
  Wa(e3, n3, o2) || select_default2(e3).attr("style", select_default2(e3).attr("style"));
};
var Wa = (e3, t2, r2) => {
  let o2 = Math.min(t2.height / r2.height, t2.width / r2.width);
  if (o2 < 1) {
    let n3 = parseInt(select_default2(e3).style("font-size")), a5 = Math.floor(n3 * o2);
    return n3 > ao && a5 > ao ? (select_default2(e3).style("font-size", `${a5}px`), co(e3)) : (select_default2(e3).style("font-size", null), select_default2(e3).style("opacity", "0")), true;
  }
  return false;
};
var Ya = (e3, t2, r2) => {
  if (!r2.filter((o2) => o2 !== "").every((o2) => e3.crossValue.includes(o2)))
    return Le3.zero;
  switch (e3.depth) {
    case t2 + 1:
      return Le3.high;
    case t2 + 2:
      return Le3.low;
    default:
      return Le3.zero;
  }
};
var Le3 = { high: "font-size:14px;z-index:5;pointer-events: none;", low: "font-size:8px;opacity:0.7;z-index:4;", zero: "font-size:0px;opacity:0;z-index:4;" };
var Nt = (e3, t2) => {
  let r2 = treemap_default().size([e3, t2]).paddingInner((o2) => 1 + 2 * (o2.height - 1));
  return r2.tile(binary_default), r2;
};
var Ka = (e3, t2) => t2.every((r2) => e3.crossValue.includes(r2));
function nr(e3, t2, r2, o2, n3, a5) {
  Xa(e3, t2, r2, o2, n3), e3.mapLevel[o2].levelRoot = true, qa(e3, a5.node().getBoundingClientRect().width, a5.node().getBoundingClientRect().height, o2), mo(r2, o2);
}
function uo(e3, t2) {
  e3.each((r2) => {
    r2.mapLevel = [], r2.mapLevel[0] = { x0: r2.x0, x1: ze3(r2) + r2.x0, y0: r2.y0, y1: Ee3(r2) + r2.y0, visible: true, opacity: 1 };
  }), t2.mapLevel[0].levelRoot = true, mo(e3, 0);
}
var Ot = (e3, t2) => {
  e3.each((r2, o2, n3) => {
    let a5 = select_default2(n3[o2]).selectAll("text");
    r2.mapLevel[t2].textAttributes = { dx: a5.attr("dx"), dy: a5.attr("dy"), class: a5.attr("class"), "font-size": a5.style("font-size") };
  });
};
function Xa(e3, t2, r2, o2, n3) {
  let a5 = { x: e3.x0, y: e3.y0, width: e3.x1 - e3.x0, height: e3.y1 - e3.y0 }, l3 = { width: n3.x1 - n3.x0, height: n3.y1 - n3.y0 }, i4 = { width: l3.width / a5.width, height: l3.height / a5.height };
  r2.each((c6) => {
    let s3 = (c6.x0 - a5.x) * i4.width, m4 = (c6.y0 - a5.y) * i4.height, d2 = ze3(c6) * i4.width, u3 = Ee3(c6) * i4.height, p2 = Ka(c6, t2) && c6.data.name !== t2[o2 - 1];
    c6.mapLevel[o2] = { x0: s3, x1: d2 + s3, y0: m4, y1: u3 + m4, visible: p2, opacity: p2 ? 1 : 0 };
  }), e3.mapLevel[o2].levelRoot = true;
}
function qa(e3, t2, r2, o2) {
  let l3 = Nt(t2, r2)(hierarchy(e3.data).sum((c6) => c6.size)).descendants(), i4 = e3.descendants();
  l3.forEach((c6, s3) => {
    i4[s3].mapLevel[o2].x0 = l3[s3].x0, i4[s3].mapLevel[o2].x1 = l3[s3].x1, i4[s3].mapLevel[o2].y0 = l3[s3].y0, i4[s3].mapLevel[o2].y1 = l3[s3].y1;
  });
}
function mo(e3, t2) {
  e3.selectAll("text").each((r2, o2, n3) => {
    let a5 = select_default2(n3[o2]), l3 = select_default2(n3[o2]).datum(), i4 = a5.attr("class");
    l3.mapLevel[t2].textLockedAt = { opacity: Ze[i4] };
  });
}
function po(e3, t2, r2, o2, n3, a5, l3, i4, c6) {
  if (o2.treemapLevel > 0) {
    let s3 = l3.crossValue;
    ar(l3, e3, t2, r2, o2, n3, a5, l3, 0, s3, i4, c6, 1, false), o2.treemapRoute.slice(1, o2.treemapRoute.length).forEach((m4) => {
      let d2 = t2.filter((p2) => p2.crossValue === m4).datum(), u3 = d2.crossValue;
      nr(d2, u3, t2, d2.depth, l3, n3), ar(d2, e3, t2, r2, o2, n3, a5, l3, d2.depth, u3, i4, c6, 1, false);
    });
  }
}
function lr(e3, t2, r2, o2, n3, a5, l3, i4, c6, s3) {
  if (!e3.children)
    return;
  n3.treemapLevel < e3.depth ? n3.treemapRoute.push(e3.crossValue) : n3.treemapRoute.pop(), n3.treemapLevel = e3.depth;
  let m4 = e3.crossValue;
  (!e3.mapLevel[n3.treemapLevel] || !e3.mapLevel[n3.treemapLevel].levelRoot) && nr(e3, m4, r2, n3.treemapLevel, i4, a5), ar(e3, t2, r2, o2, n3, a5, l3, i4, n3.treemapLevel, m4, c6, s3);
}
function ar(e3, t2, r2, o2, n3, a5, l3, i4, c6, s3, m4, d2, u3 = 500, p2 = true) {
  let f4 = e3.parent, h4 = l3.transition("main transition").duration(u3).ease(cubicOut);
  r2.each((y3) => y3.target = y3.mapLevel[c6]), Lt(e3) || el(r2, m4), r2.transition(h4).tween("data", (y3) => {
    let x4 = value_default(y3.current, y3.target);
    return (v4) => y3.current = x4(v4);
  }).styleTween("opacity", (y3) => () => y3.current.opacity).attrTween("pointer-events", (y3) => () => y3.target.visible ? "all" : "none"), t2.transition(h4).filter((y3) => y3.target.visible).styleTween("x", (y3) => () => `${y3.current.x0}px`).styleTween("y", (y3) => () => `${y3.current.y0}px`).styleTween("width", (y3) => () => `${y3.current.x1 - y3.current.x0}px`).styleTween("height", (y3) => () => `${y3.current.y1 - y3.current.y0}px`), o2.transition(h4).filter((y3) => y3.target.visible).attrTween("x", (y3) => () => y3.current.x0 + ze3(y3.current) / 2).attrTween("y", (y3) => () => y3.current.y0 + Ee3(y3.current) / 2).end().catch(() => or(r2)).then(() => {
    Lt(e3) || (tr(g3), Et(g3), Za(o2, l3, u3), p2 && Ot(r2, c6), or(r2, m4, f4));
  }).catch((y3) => {
    console.error("Exception completing promises after main transition", y3), or(r2, m4, f4);
  }), Lt(e3) ? lo(r2) : (o2.each((y3, x4, v4) => io(v4[x4])), zt(r2, c6, s3));
  let g3 = Je2(r2);
  f4 ? m4.hide(false).text(e3.label).onClick(() => {
    lr(f4, t2, r2, o2, n3, a5, l3, i4, m4, d2);
    let y3 = a5.node().getRootNode().host.parentElement;
    Ue2(y3, f4, d2);
  })() : m4.hide(true)();
}
async function Za(e3, t2, r2 = 400) {
  let o2 = t2.transition("text fade transition").duration(r2).ease(cubicOut);
  await e3.transition(o2).filter((n3) => n3.target.visible).tween("data", (n3, a5, l3) => {
    let i4 = l3[a5], c6 = value_default(Ja(n3), Qa(i4));
    return (s3) => n3.current.opacity = c6(s3);
  }).styleTween("opacity", (n3) => () => n3.current.opacity).end().catch((n3) => console.error("Exception in text fade transition", n3)).then(() => e3.each((n3, a5, l3) => so(l3[a5])));
}
var Ja = (e3) => e3.target.textLockedAt.opacity;
var Qa = (e3) => Ze[select_default2(e3).attr("class")];
var el = (e3, t2) => {
  t2.deactivate(true), e3.each((r2, o2, n3) => {
    select_default2(n3[o2]).selectAll("rect").style("pointer-events", "none");
  });
};
var or = (e3, t2) => {
  t2 && t2.deactivate(false), e3.each((r2, o2, n3) => {
    select_default2(n3[o2]).selectAll("rect").style("pointer-events", null);
  });
};
var fo = `<button id="goto-parent">Goto parent</button>
`;
function ho(e3) {
  let t2 = null, r2 = null, o2 = true, n3 = false, a5 = N4(e3, ".parent-controls", () => e3.append("div").attr("class", "parent-controls").style("display", o2 ? "none" : "").html(fo)), l3 = () => {
    a5.style("display", o2 ? "none" : "").select("#goto-parent").style("pointer-events", n3 ? "none" : null).html(`\u21EA ${r2}`).on("click", () => t2());
  };
  return l3.deactivate = (...i4) => {
    if (!i4.length)
      return n3;
    n3 = i4[0];
    let c6 = a5.select("#goto-parent");
    return n3 ? c6.style("pointer-events", "none") : c6.style("pointer-events", null), l3;
  }, l3.hide = (...i4) => i4.length ? (o2 = i4[0], l3) : o2, l3.text = (...i4) => i4.length ? (r2 = i4[0], l3) : r2, l3.onClick = (...i4) => i4.length ? (t2 = i4[0], l3) : t2, l3;
}
var Dt = { leaf: "leafnode", branch: "branchnode", root: "rootnode" };
var ze3 = (e3) => e3.x1 - e3.x0;
var Ee3 = (e3) => e3.y1 - e3.y0;
var rl = (e3, t2) => t2.depth === e3;
var go = (e3, t2) => t2.depth === 0 ? Dt.root : rl(e3, t2) ? Dt.leaf : Dt.branch;
function yo() {
  let e3 = null, t2 = null, r2 = null, o2 = null, n3 = null, a5 = null, l3 = (i4) => {
    a5 = ho(n3), a5();
    let c6 = r2.height;
    e3.treemapLevel || (e3.treemapLevel = 0), e3.treemapRoute || (e3.treemapRoute = []), Nt(n3.node().getBoundingClientRect().width, n3.node().getBoundingClientRect().height)(r2);
    let m4 = i4.selectAll("g").data(r2.descendants()), d2 = m4.enter().append("g");
    d2.append("rect"), d2.append("text");
    let u3 = d2.merge(m4).sort((g3, y3) => y3.depth - g3.depth), p2 = u3.select("rect").attr("class", (g3) => `treerect ${go(c6, g3)}`).style("x", (g3) => g3.x0).style("y", (g3) => g3.y0).style("width", (g3) => ze3(g3)).style("height", (g3) => Ee3(g3));
    p2.style("fill", (g3) => go(c6, g3) === Dt.leaf ? g3.data.color ? o2(g3.data.color) : t2.colorStyles.series : "transparent");
    let f4 = u3.filter((g3) => g3.value !== 0).select("text").attr("x", (g3) => g3.x0 + ze3(g3) / 2).attr("y", (g3) => g3.y0 + Ee3(g3) / 2).text((g3) => g3.label), h4 = p2.filter((g3) => g3.crossValue.length === 0).datum();
    uo(u3, h4), zt(u3, 0, []), Et(Je2(u3)), Ot(u3, 0), e3.treemapRoute.length === 0 && e3.treemapRoute.push(h4.crossValue), p2.filter((g3) => g3.children).on("click", (g3, y3) => lr(y3, p2, u3, f4, e3, n3, i4, h4, a5, t2)), po(p2, u3, f4, e3, n3, i4, h4, a5, t2);
  };
  return l3.settings = (...i4) => i4.length ? (e3 = i4[0], t2 = i4[1], l3) : e3, l3.data = (...i4) => i4.length ? (r2 = i4[0], l3) : r2, l3.color = (...i4) => i4.length ? (o2 = i4[0], l3) : o2, l3.container = (...i4) => i4.length ? (n3 = i4[0], l3) : n3, l3;
}
function xo(e3, t2) {
  t2.treemaps || (t2.treemaps = {});
  let r2 = Ct(t2), o2 = no(t2, r2.map((c6) => c6.data));
  o2 && this._container.classList.add("has-legend");
  let n3 = Tt().elementsPrefix("treemap");
  if (e3.datum(r2).call(n3), o2) {
    let c6 = t2.realValues[1];
    if (t2.mainValues.find((s3) => s3.name === c6)?.type === "string") {
      let s3 = H4().settings(t2).scale(o2);
      e3.call(s3);
    } else {
      let s3 = _e3().scale(o2);
      e3.call(s3);
    }
  }
  let a5 = n3.chartEnter(), l3 = n3.chartDiv();
  n3.chartTitle().each((c6, s3, m4) => select_default2(m4[s3]).text(c6.split)), a5.merge(l3).select("svg").select("g.treemap").each(function({ split: c6, data: s3 }) {
    let m4 = select_default2(this);
    t2.treemaps[c6] || (t2.treemaps[c6] = {}), yo().settings(t2.treemaps[c6], t2).data(s3).container(select_default2(select_default2(this.parentNode).node().parentNode)).color(o2)(m4), de3().settings(t2).centered(true)(m4.selectAll("g"));
  });
}
xo.plugin = { type: "Treemap", name: "Treemap", category: "Hierarchial Chart", max_cells: 3e3, max_columns: 50, render_warning: true, initial: { type: "number", count: 1, names: ["Size", "Color", "Tooltip"] } };
var bo = xo;
var nl = [en, mn, gn, wn, An, Mn, Rn, Yn, Kn, bo, ro, Hn];
var ir = nl;
var wo = (e3, t2) => {
  if (!t2.colorStyles) {
    let r2 = { scheme: [], gradient: {}, interpolator: {}, grid: {} }, o2 = ll(e3);
    r2.series = o2("--d3fc-local-series");
    for (let a5 = 1; ; a5++) {
      let l3 = `series-${a5}`, i4 = o2(`--d3fc-local-${l3}`);
      if (!i4)
        break;
      r2[l3] = i4, r2.scheme.push(i4);
    }
    r2.opacity = ol(r2.series), r2.grid.gridLineColor = o2`--d3fc-gridline--color`, ["full", "positive", "negative"].forEach((a5) => {
      let l3 = o2(`--d3fc-local-${a5}--gradient`);
      r2.gradient[a5] = il(l3, r2.opacity);
    }), t2.colorStyles = r2;
  }
  if (!t2.textStyles) {
    let r2 = window.getComputedStyle(e3), o2 = r2.getPropertyValue("color"), n3 = `12px ${r2.getPropertyValue("font-family")}`;
    t2.textStyles = { color: o2, font: n3 };
  }
};
var ol = (e3) => color(e3).opacity;
var al = (e3, t2) => {
  let r2 = color(`#${e3}`);
  return r2.opacity = t2, r2 + "";
};
var ll = (e3) => {
  let t2 = getComputedStyle(e3);
  return (r2) => t2?.getPropertyValue(r2);
};
var il = (e3, t2) => {
  let r2 = vo.parse(e3)[0].colorStops;
  return r2.map((o2, n3) => [o2.length ? o2.length.value / 100 : n3 / (r2.length - 1), al(o2.value, t2)]).sort((o2, n3) => o2[0] - n3[0]);
};
var _o = ':host .chart{--d3fc-local-full--gradient:var(--d3fc-full--gradient,linear-gradient(#4d342f 0%,#e4521b 22.5%,#feeb65 42.5%,#f0f0f0 50%,#dcedc8 57.5%,#42b3d5 67.5%,#1a237e 100%));--d3fc-local-positive--gradient:var(--d3fc-positive--gradient,linear-gradient(#dcedc8 0%,#42b3d5 35%,#1a237e 100%));--d3fc-local-negative--gradient:var(--d3fc-negative--gradient,linear-gradient(#feeb65 100%,#e4521b 70%,#4d342f 0%));--d3fc-local-series:var(--d3fc-series,rgba(31,119,180,0.5));--d3fc-local-series-1:var(--d3fc-series-1,#0366d6);--d3fc-local-series-2:var(--d3fc-series-2,#ff7f0e);--d3fc-local-series-3:var(--d3fc-series-3,#2ca02c);--d3fc-local-series-4:var(--d3fc-series-4,#d62728);--d3fc-local-series-5:var(--d3fc-series-5,#9467bd);--d3fc-local-series-6:var(--d3fc-series-6,#8c564b);--d3fc-local-series-7:var(--d3fc-series-7,#e377c2);--d3fc-local-series-8:var(--d3fc-series-8,#7f7f7f);--d3fc-local-series-9:var(--d3fc-series-9,#bcbd22);--d3fc-local-series-10:var(--d3fc-series-10,#17becf);}:host .chart .series{fill:var(--d3fc-local-series);}:host .chart .series-1{fill:var(--d3fc-local-series-1);}:host .chart .series-2{fill:var(--d3fc-local-series-2);}:host .chart .series-3{fill:var(--d3fc-local-series-3);}:host .chart .series-4{fill:var(--d3fc-local-series-4);}:host .chart .series-5{fill:var(--d3fc-local-series-5);}:host .chart .series-6{fill:var(--d3fc-local-series-6);}:host .chart .series-7{fill:var(--d3fc-local-series-7);}:host .chart .series-8{fill:var(--d3fc-local-series-8);}:host .chart .series-9{fill:var(--d3fc-local-series-9);}:host .chart .series-10{fill:var(--d3fc-local-series-10);}:host{user-select:none;}:host .chart{position:absolute;box-sizing:border-box;left:0;top:0;width:100%;height:100%;padding:15px;overflow:hidden;}:host .chart.heatmap d3fc-group.cartesian-chart,:host .chart.treemap d3fc-group.cartesian-chart{grid-template-columns:minmax(0em,max-content)auto 1fr auto minmax(0em,max-content);grid-template-rows:minmax(0em,max-content)auto 1fr auto minmax(0em,max-content);}:host .chart .chart-label{display:none;}:host .chart.heatmap{padding-right:120px;}:host .chart.sunburst{padding:0;font-size:14px;}:host .chart.sunburst .inner-container{width:100%;height:100%;display:inline-grid;padding:0;margin:0;overflow-x:hidden;overflow-y:auto;}:host .chart.sunburst .inner-container div{overflow:hidden;}:host .chart.sunburst .inner-container .sunburst-container:not(:only-child) svg{transform:translate(0,-27px);}:host .chart.sunburst .inner-container svg{width:100%;height:100%;}:host .chart.sunburst .inner-container path{fill:var(--d3fc-series,rgba(31,119,180,0.5));}:host .chart.sunburst .inner-container text.segment,:host .chart.sunburst .inner-container text.parent{text-anchor:middle;user-select:none;pointer-events:none;fill:var(--d3fc-treedata--labels,rgb(51,51,51));}:host .chart.sunburst .inner-container div.title-container{margin-top:5px;}:host .chart.has-legend{padding-right:120px;}:host .chart.treemap .treemap-container{position:relative;}:host .chart.treemap .treemap-container:not(:only-child){width:calc(100% - 12px);height:calc(100% - 12px);}:host .chart.treemap .inner-container{width:100%;height:100%;display:inline-grid;padding:0;margin:0;overflow-x:hidden;overflow-y:auto;}:host .chart.treemap .inner-container div{overflow:hidden;}:host .chart.treemap .inner-container svg{width:100%;height:100%;}:host .chart.treemap .inner-container .treerect{stroke:var(--d3fc-treedata-axis--lines,var(--d3fc-axis--lines,white));fill:var(--d3fc-series,rgba(31,119,180,0.5));}:host .chart.treemap .inner-container .treerect:hover{cursor:pointer;stroke:var(--d3fc-treedata--hover-highlight,black);stroke-opacity:1;}:host .chart.treemap .inner-container .rootnode{opacity:0;pointer-events:none;z-index:0;}:host .chart.treemap .inner-container .branchnode{opacity:0;}:host .chart.treemap .inner-container .branchnode:hover{fill-opacity:0.1;opacity:1;fill:var(--d3fc-treedata--hover-highlight,black);}:host .chart.treemap .inner-container .leafnode{fill-opacity:0.8;}:host .chart.treemap .inner-container .leafnode:hover{fill-opacity:0.5;}:host .chart.treemap .inner-container #hidden{opacity:0;pointer-events:none;z-index:0;}:host .chart.treemap .inner-container .top{font-size:14px;z-index:5;pointer-events:none;}:host .chart.treemap .inner-container .mid{font-size:8px;opacity:0.7;z-index:4;}:host .chart.treemap .inner-container .lower{font-size:0px;opacity:0;z-index:4;}:host .chart.treemap .inner-container text{fill:var(--d3fc-treedata--labels,rgb(51,51,51));}:host .chart.treemap .inner-container text.title{dominant-baseline:hanging;}:host .chart.treemap .inner-container .parent-controls{position:absolute;top:15px;right:auto;left:30px;width:auto;z-index:4;transition:box-shadow 1s;}:host .chart.treemap .inner-container .parent-controls:hover{box-shadow:2px 2px 6px#000;transition:box-shadow 0.2s;}:host .chart .x-label{height:1.2em!important;line-height:1em!important;}:host .chart .x-label,:host .chart .y-label{color:var(--d3fc-label--color,inherit);font-size:14px;}:host .chart d3fc-canvas.plot-area{display:none;}:host .chart.xyscatter d3fc-canvas.plot-area,:host .chart.xyline d3fc-canvas.plot-area,:host .chart.ohlc d3fc-canvas.plot-area,:host .chart.candlestick d3fc-canvas.plot-area,:host .chart.heatmap d3fc-canvas.plot-area{display:block;}:host .chart .y-axis text,:host .chart .x-axis text{fill:var(--d3fc-axis-ticks--color,rgb(80,80,80));font-size:11px;}:host .chart .y-axis path,:host .chart .x-axis path{stroke:var(--d3fc-axis--lines,rgb(180,210,225));}:host .chart .splitter-label{display:inline-block;margin:0 10px;cursor:pointer;}:host .chart .splitter-label::after{margin-left:5px;color:var(--d3fc-axis--lines,rgb(180,210,225));}:host .chart .splitter-label:hover::after{color:var(--d3fc-axis-ticks--color,rgb(80,80,80));}:host .chart .splitter-label.disabled::after{color:rgba(80,80,80,0.3);}:host .chart .splitter-label.disabled{cursor:default;}:host .chart .y-label.left-label .splitter-label::after{background-repeat:no-repeat;background-color:var(--icon--color);content:"";display:inline-block;-webkit-mask-size:cover;mask-size:cover;width:16px;height:12px;-webkit-mask-image:var(--sort-desc-icon--mask-image);mask-image:var(--sort-desc-icon--mask-image);}:host .chart .y-label.right-label .splitter-label::after{background-repeat:no-repeat;background-color:var(--icon--color);content:"";display:inline-block;-webkit-mask-size:cover;mask-size:cover;width:16px;height:12px;-webkit-mask-image:var(--sort-asc-icon--mask-image);mask-image:var(--sort-asc-icon--mask-image);}:host .chart.ybar .y-axis path,:host .chart.yline .y-axis path,:host .chart.xyline .y-axis path,:host .chart.xyline .x-axis path,:host .chart.yarea .y-axis path,:host .chart.yscatter .y-axis path,:host .chart.xyscatter .y-axis path,:host .chart.xyscatter .x-axis path,:host .chart.xbar .x-axis path{visibility:hidden;}:host .chart .y-label{white-space:nowrap;}:host .chart .nearbyTip{fill:var(--d3fc-series,rgba(31,119,180,0.5));}:host #dragHandles{position:absolute;top:0px;right:0px;left:auto;pointer-events:none;}:host #dragHandles rect{pointer-events:all;}:host .label rect{fill:none;}:host .legend-container{position:absolute;top:15px;right:15px;left:auto;width:150px;height:280px;}:host .legend-container.legend-color{width:90px;height:150px;}:host .legend-container[borderbox-on-hover="true"]{transition:box-shadow 1s;}:host .legend-container[borderbox-on-hover="true"]:hover{background-color:var(--d3fc-legend--background,#ffffff);transition:box-shadow 0.2s,background-color 0.2s;}:host .legend-container .legend{font-size:8pt;width:100%;}:host .legend-container .legend .cell{cursor:pointer;}:host .legend-container .legend .cell path{fill:var(--d3fc-series,rgba(31,119,180,0.5));stroke:var(--d3fc-series,rgb(31,119,180));}:host .legend-container .legend .cell.hidden path{fill:rgba(204,204,204,0.5);stroke:rgb(204,204,204);}:host .legend-container .legend .cell.hidden circle{fill:rgb(204,204,204)!important;}:host .legend-container text{fill:var(--d3fc-legend--text,rgb(51,51,51));}:host .legend-container .label:hover{fill:rgb(34,160,206);}:host .legend-container #legend-axis path{stroke:var(--d3fc-legend--text,rgb(51,51,51));}:host .legend-container .legend-controls{margin-left:12px;}:host .legend-container .legend-controls #up-arrow,:host .legend-container .legend-controls #down-arrow{cursor:pointer;color:rgb(31,119,180);}:host .legend-container .legend-controls #up-arrow.disabled,:host .legend-container .legend-controls #down-arrow.disabled{cursor:default;color:rgb(51,51,51);}:host .heatmap .legend-container.legend-color{height:200px;}:host .treemap .legend-container.legend-color{height:200px;}:host .treemap .legend-container:not(.legend-color){width:100px;}:host .zoom-controls{position:absolute;top:10px;left:0;width:100%;text-align:center;}:host .zoom-controls button{-webkit-appearance:none;background:var(--plugin--background,rgb(247,247,247));border:1px solid var(--inactive--color,rgb(204,204,204));color:var(--d3fc-label--color,inherit);font-size:12px;padding:8px;opacity:0.5;cursor:pointer;}:host .zoom-controls button:hover{opacity:1;}:host .parent-controls{position:absolute;top:30px;right:145px;width:100%;text-align:right;}:host .parent-controls button{-webkit-appearance:none;background:rgb(247,247,247);border:1px solid rgb(204,204,204);padding:10px;opacity:0.5;cursor:pointer;}:host .parent-controls button:hover{background:rgb(230,230,230);}:host div.tooltip{position:absolute;text-align:left;font-size:12px;font-weight:300;white-space:nowrap;padding:0.5em;background:var(--d3fc-tooltip--background,#ffffff);color:var(--d3fc-tooltip--color,black);border:1px solid var(--d3fc-tooltip--border-color,#777777);box-shadow:var(--d3fc-tooltip--box-shadow,none);pointer-events:none;}:host div.tooltip ul{margin:0;padding:0;list-style-type:none;}';
var Vo = { initial: { type: "number", count: 1 }, selectMode: "select" };
var cl = `${_o}${ul()}`;
var cr = ["crossValues", "mainValues", "realValues", "splitValues", "filter", "data", "size", "colorStyles", "textStyles", "agg_paths", "treemaps", "axisMemo"];
function ul() {
  let e3 = document.querySelector("head").querySelectorAll("style"), t2 = [];
  return e3.forEach((r2) => {
    r2.innerText.indexOf("d3fc-") !== -1 && t2.push(r2.innerText);
  }), t2.join("");
}
function ml(e3) {
  customElements.get("perspective-viewer").registerPlugin(e3);
}
function Co(...e3) {
  e3 = new Set(e3.length > 0 ? e3 : ir.map((t2) => t2.plugin.name)), ir.forEach((t2) => {
    if (e3.has(t2.plugin.name)) {
      let r2 = t2.plugin.name.toLowerCase().replace(/[ \t\r\n\/]*/g, ""), o2 = `perspective-viewer-d3fc-${r2}`;
      customElements.define(o2, class extends HTMLElement {
        constructor() {
          super(), this._chart = null, this._settings = null, this.render_warning = true;
        }
        connectedCallback() {
          this._initialized || (this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = `<style>${cl}</style>`, this.shadowRoot.innerHTML += '<div id="container" class="chart"></div>', this._container = this.shadowRoot.querySelector(".chart"), this._initialized = true);
        }
        get name() {
          return t2.plugin.name;
        }
        get category() {
          return t2.plugin.category;
        }
        get select_mode() {
          return t2.plugin.selectMode || "select";
        }
        get min_config_columns() {
          return t2.plugin.initial?.count || Vo.initial.count;
        }
        get config_column_names() {
          return t2.plugin.initial?.names || Vo.initial.names;
        }
        get max_cells() {
          return t2.plugin.max_cells || 4e3;
        }
        set max_cells(n3) {
          t2.plugin.max_cells = n3;
        }
        get max_columns() {
          return t2.plugin.max_columns || 50;
        }
        set max_columns(n3) {
          t2.plugin.max_columns = n3;
        }
        async render() {
          var n3 = document.createElement("canvas"), a5 = this.shadowRoot.querySelector("#container");
          n3.width = a5.offsetWidth, n3.height = a5.offsetHeight;
          let l3 = n3.getContext("2d");
          l3.fillStyle = window.getComputedStyle(this).getPropertyValue("--plugin--background") || "white", l3.fillRect(0, 0, n3.width, n3.height);
          let i4 = window.getComputedStyle(this).getPropertyValue("color"), c6 = Array.from(this.shadowRoot.querySelectorAll("svg:not(#dragHandles)"));
          for (let u3 of c6.reverse()) {
            var s3 = document.createElement("img");
            s3.width = u3.parentNode.offsetWidth, s3.height = u3.parentNode.offsetHeight;
            let p2 = u3.cloneNode(true);
            p2.hasAttribute("viewBox") || p2.setAttribute("viewBox", `0 0 ${s3.width} ${s3.height}`), p2.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            for (let h4 of p2.querySelectorAll("text"))
              h4.setAttribute("fill", i4);
            var m4 = new XMLSerializer().serializeToString(p2);
            m4 = m4.replace(/[^\x00-\x7F]/g, "");
            let f4 = new Promise((h4, g3) => {
              s3.onload = h4, s3.onerror = g3;
            });
            try {
              s3.src = `data:image/svg+xml;base64,${btoa(m4)}`, await f4;
            } catch {
              let g3 = new Promise((y3, x4) => {
                s3.onload = y3, s3.onerror = x4;
              });
              s3.src = `data:image/svg+xml;utf8,${m4}`, await g3;
            }
            l3.drawImage(s3, u3.parentNode.offsetLeft, u3.parentNode.offsetTop, s3.width, s3.height);
          }
          let d2 = Array.from(this.shadowRoot.querySelectorAll("canvas"));
          for (let u3 of d2.reverse())
            l3.drawImage(u3, u3.parentNode.offsetLeft, u3.parentNode.offsetTop, u3.width / window.devicePixelRatio, u3.height / window.devicePixelRatio);
          return await new Promise((u3) => n3.toBlob((p2) => u3(p2)), "image/png");
        }
        async draw(n3, a5, l3) {
          if (this.offsetParent === null) {
            this._staged_view = [n3, a5, l3];
            return;
          }
          this._staged_view = void 0, this._settings && (this._settings.axisMemo = [[1 / 0, -1 / 0], [1 / 0, -1 / 0]]), await this.update(n3, a5, l3, true);
        }
        async update(n3, a5, l3, i4 = false) {
          if (this.offsetParent === null)
            return;
          let c6 = this.parentElement, s3, m4, d2 = t2.plugin.name !== "Sunburst";
          a5 && l3 ? s3 = n3.to_json({ end_row: l3, end_col: a5, leaves_only: d2 }) : a5 ? s3 = n3.to_json({ end_col: a5, leaves_only: d2 }) : l3 ? s3 = n3.to_json({ end_row: l3, leaves_only: d2 }) : s3 = n3.to_json({ leaves_only: d2 }), m4 = await Promise.all([c6.save(), c6.getTable().then((S3) => S3.schema(false)), n3.expression_schema(false), n3.schema(false), s3, n3.get_config()]);
          let [u3, p2, f4, h4, g3, y3] = m4;
          this.config = u3;
          let x4 = this.config.columns, v4 = function(S3) {
            let T3 = p2[S3];
            return T3 || (T3 = f4[S3]), T3;
          }, { columns: b3, group_by: w4, split_by: V4, filter: k4 } = y3, B6 = w4.length > 0 ? g3.reduce((S3, T3) => {
            if (T3.__ROW_PATH__ && T3.__ROW_PATH__.length == w4.length)
              S3.agg_paths.push(S3.aggs.slice()), S3.rows.push(T3);
            else {
              let $4 = T3.__ROW_PATH__.filter((ee3) => ee3 !== void 0).length;
              S3.aggs[$4] = T3, S3.aggs = S3.aggs.slice(0, $4 + 1);
            }
            return S3;
          }, { rows: [], aggs: [], agg_paths: [] }) : { rows: g3 }, j4 = (S3, T3) => w4.length ? S3 : { ...S3, __ROW_PATH__: [T3] }, M4 = B6.rows.map(j4), z3 = { realValues: x4, crossValues: w4.map((S3) => ({ name: S3, type: v4(S3) })), mainValues: b3.map((S3) => ({ name: S3, type: h4[S3] })), splitValues: V4.map((S3) => ({ name: S3, type: v4(S3) })), filter: k4, data: M4, agg_paths: B6.agg_paths };
          this._chart = t2;
          let I4 = { set: (S3, T3, $4) => (cr.includes(T3) || this._container && this._container.dispatchEvent(new Event("perspective-plugin-update", { bubbles: true, composed: true })), S3[T3] = $4, true) }, E6 = [[1 / 0, -1 / 0], [1 / 0, -1 / 0]];
          this._settings = new Proxy({ axisMemo: E6, ...this._settings, ...z3 }, I4), this._settings.splitMainValues && this._settings.splitMainValues.length >= b3.length && (this._settings.splitMainValues = []), wo(this._container, this._settings), i4 && (this._container.innerHTML = ""), this._draw(), await new Promise((S3) => requestAnimationFrame(S3));
        }
        async clear() {
          this._container && (this._container.innerHTML = "");
        }
        _draw() {
          if (this.offsetParent !== null) {
            let n3 = select_default2(this._container), a5 = `chart ${r2}`;
            this._settings.size = this._container.getBoundingClientRect(), this._settings.data.length > 0 ? this._chart(n3.attr("class", a5), this._settings) : n3.attr("class", `${a5} disabled`);
          }
        }
        async resize(n3) {
          if (this.offsetParent !== null)
            if (this._settings?.data !== void 0)
              this._draw();
            else {
              let [a5, l3, i4] = this._staged_view;
              this._staged_view = void 0, this.draw(a5, l3, i4);
            }
        }
        async restyle(...n3) {
          let a5 = this._settings;
          a5 && (delete a5.colorStyles, delete a5.textStyles, await this.draw(...n3));
        }
        async delete() {
          this._container.innerHTML = "";
        }
        getContainer() {
          return this._container;
        }
        save() {
          let n3 = { ...this._settings };
          return cr.forEach((a5) => {
            delete n3[a5];
          }), n3;
        }
        restore(n3) {
          let a5 = {};
          for (let l3 of cr)
            this._settings?.[l3] !== void 0 && (a5[l3] = this._settings?.[l3]);
          this._settings = { ...a5, ...n3 };
        }
      }), customElements.whenDefined("perspective-viewer").then(() => ml(o2));
    }
  });
}
Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector);
Co();

// src/layouts.json
var layouts_default = [
  {
    plugin: "Y Scatter",
    plugin_config: {},
    title: "Closed Orders ((s) bucket)",
    group_by: [`bucket("timestamp", 's')`],
    split_by: [`if("status"!='open'){"status"}else{"side"}`],
    columns: ["price"],
    filter: [],
    settings: false,
    sort: [
      [
        `if("status"=='closed'){1}else if("status"=='expired'){2}else{0}`,
        "col desc"
      ]
    ],
    expressions: [
      `if("status"=='closed'){1}else if("status"=='expired'){2}else{0}`,
      `if("status"!='open'){"status"}else{"side"}`,
      `bucket("timestamp", 's')`
    ],
    aggregates: { price: "avg", timestamp: "dominant" }
  },
  {
    plugin: "X/Y Scatter",
    plugin_config: {},
    title: "Closed Orders",
    group_by: [],
    split_by: [`if("status"!='open'){"status"}else{"side"}`],
    columns: ["timestamp", "price"],
    filter: [],
    sort: [
      [
        `if("status"=='closed'){1}else if("status"=='expired'){2}else{0}`,
        "desc"
      ]
    ],
    expressions: [
      `if("status"!='open'){"status"}else{"side"}`,
      `if("status"=='closed'){1}else if("status"=='expired'){2}else{0}`
    ],
    aggregates: {}
  },
  {
    plugin: "Y Line",
    plugin_config: { zoom: { k: 1, x: 1, y: -1 } },
    title: "Mid Timeseries",
    settings: false,
    group_by: [`bucket("timestamp", 's')`],
    split_by: ["status", "side"],
    columns: ["price"],
    filter: [["status", "==", "closed"]],
    sort: [],
    expressions: [`bucket("timestamp", 's')`],
    aggregates: { price: "avg" }
  },
  {
    plugin: "Y Bar",
    plugin_config: {},
    title: "Depth Timeseries",
    group_by: [`bucket("timestamp", 'm')`],
    split_by: ["side", "status"],
    columns: [`if("side"=='buy'){1}else{-1}`],
    filter: [],
    sort: [],
    expressions: [
      `bucket("timestamp", 'm')`,
      `if("side"=='buy'){1}else{-1}`,
      `if("side"=='sell'){-1}else{null}`
    ],
    aggregates: { "bucket(\"timestamp\", 'm')": "dominant" }
  },
  {
    plugin: "Datagrid",
    plugin_config: {
      columns: {
        "Change since market open": {
          fg_gradient: 16.29,
          number_fg_mode: "bar"
        },
        "Diff from market open": {
          bg_gradient: 16.29,
          fg_gradient: 20,
          number_bg_mode: "gradient",
          number_fg_mode: "bar"
        },
        price: { bg_gradient: 34.55, number_bg_mode: "gradient" },
        side: { color: "#3daa27", string_color_mode: "series" },
        status: { string_color_mode: "series" }
      },
      editable: false,
      scroll_lock: false
    },
    title: "Blotter",
    group_by: [],
    settings: false,
    split_by: [],
    columns: [
      "timestamp",
      "id",
      "Diff from market open",
      "price",
      "status",
      "side"
    ],
    filter: [],
    sort: [["timestamp", "desc"]],
    expressions: [
      `bucket("timestamp", 'm')`,
      'bucket("price", 1)',
      '// Diff from market open\n"price" - 20'
    ],
    aggregates: {}
  },
  {
    plugin: "Datagrid",
    plugin_config: {
      columns: {
        "if(\"side\"=='buy'){-1}else{1}": {
          fg_gradient: 20,
          number_fg_mode: "bar"
        }
      },
      editable: false,
      scroll_lock: false,
      
    },
    title: "Order Book",
    group_by: ['bucket("price", 0.5)'],
    split_by: ["side"],
    columns: [`if("side"=='buy'){-1}else{1}`],
    filter: [["status", "==", "open"]],
    sort: [['bucket("price", 0.5)', "desc"]],
    expressions: [
      `if("side"=='buy'){-1}else{1}`,
      'bucket("price", 0.5)'
    ],
    settings: false,
    aggregates: {}
  },
  {
    plugin: "X Bar",
    plugin_config: {},
    title: "Order Book (Chart)",
    group_by: ['bucket("price", 0.5)'],
    split_by: ["side"],
    settings: false,
    columns: [`if("side"=='buy'){-1}else{1}`],
    filter: [["status", "==", "open"]],
    sort: [['bucket("price", 0.5)', "desc"]],
    expressions: [
      `if("side"=='buy'){-1}else{1}`,
      'bucket("price", 0.5)'
    ],
    aggregates: {}
  },
  {
    plugin: "Heatmap",
    plugin_config: {},
    title: "Heatmap",
    group_by: [`bucket("timestamp", 'm')`],
    split_by: ['bucket("price", 0.5)'],
    columns: [`if("side"=='buy'){-1}else{1}`],
    filter: [],
    settings: false,
    sort: [],
    expressions: [
      `bucket("timestamp", 'm')`,
      'bucket("price", 0.5)',
      `if("side"=='buy'){-1}else{1}`
    ],
    aggregates: {}
  },
  {
    plugin: "Heatmap",
    plugin_config: {},
    title: "Heatmap (Closed)",
    settings: false,
    group_by: [`bucket("timestamp", 'm')`],
    split_by: ['bucket("price", 0.25)'],
    columns: [`if("side"=='buy'){-1}else{1}`],
    filter: [["status", "==", "closed"]],
    sort: [],
    expressions: [
      `bucket("timestamp", 'm')`,
      'bucket("price", 0.25)',
      `if("side"=='buy'){-1}else{1}`
    ],
    aggregates: {}
  },
  {
    plugin: "Candlestick",
    plugin_config: {},
    title: "Candlestick",
    settings: false,
    group_by: [`bucket("timestamp", 'm')`],
    split_by: [],
    columns: ["price", null, "price 2", "price 3"],
    filter: [["status", "==", "closed"]],
    sort: [],
    expressions: [
      `bucket("timestamp", 'm')`,
      '// price 2\n"price"',
      '// price 3\n"price"'
    ],
    aggregates: {
      price: "avg",
      "price 2": "high",
      "price 3": "low"
    }
  },
  {
    plugin: "Candlestick",
    plugin_config: {},
    title: "Candlestick 2",
    settings: false,
    group_by: [`bucket("timestamp", 'm')`],
    split_by: [],
    columns: ["price", null, null, null],
    filter: [["status", "==", "closed"]],
    sort: [],
    expressions: [
      `bucket("timestamp", 'm')`,
      '// price 2\n"price"',
      '// price 3\n"price"'
    ],
    aggregates: {
      price: "avg",
      "price 2": "high",
      "price 3": "low"
    }
  },
  {
    plugin: "X Bar",
    plugin_config: {},
    title: "Order Book (All Status)",
    group_by: ['bucket("price", 0.5)'],
    split_by: [],
    columns: [
      `if("status"=='open' and "side"=='buy'){1}else{null}`,
      `if("status"=='open' and "side"=='sell'){1}else{null}`,
      `if("status"=='closed'){1}else{0}`
    ],
    filter: [],
    settings: false,
    sort: [['bucket("price", 0.5)', "desc"]],
    expressions: [
      `if("status"=='open' and "side"=='buy'){1}else{null}`,
      `bucket("timestamp", 's')`,
      'bucket("price", 0.5)',
      `if("status"=='open'){"price"}else{null}`,
      `if("status"=='closed'){1}else{0}`,
      `if("status"=='open' and "side"=='sell'){1}else{null}`
    ],
    aggregates: {}
  },
  {
    plugin: "Y Scatter",
    plugin_config: {},
    title: "Order Book (Scatter All Status)",
    settings: false,
    group_by: ['bucket("price", 0.5)'],
    split_by: [],
    columns: [
      `if("status"=='open' and "side"=='buy'){1}else{null}`,
      `if("status"=='open' and "side"=='sell'){1}else{null}`,
      `if("status"=='closed'){1}else{0}`
    ],
    filter: [],
    sort: [],
    expressions: [
      `if("status"=='open' and "side"=='buy'){1}else{null}`,
      `bucket("timestamp", 's')`,
      'bucket("price", 0.5)',
      `if("status"=='open'){"price"}else{null}`,
      `if("status"=='closed'){1}else{0}`,
      `if("status"=='open' and "side"=='sell'){1}else{null}`
    ],
    aggregates: {}
  },
  {
    plugin: "X Bar",
    plugin_config: {},
    title: "Order Book (Stack All Status)",
    group_by: ['bucket("price", 0.5)'],
    settings: false,
    split_by: [`if("status"=='closed'){'closed'}else{"side"}`],
    columns: ["price"],
    filter: [["status", "!=", "expired"]],
    sort: [
      ['bucket("price", 0.5)', "desc"],
      ["status", "col asc"]
    ],
    expressions: [
      `if("status"=='open' and "side"=='buy'){1}else{null}`,
      `bucket("timestamp", 's')`,
      'bucket("price", 0.5)',
      `if("status"=='open'){"price"}else{null}`,
      `if("status"=='closed'){1}else{0}`,
      `if("status"=='open' and "side"=='sell'){1}else{null}`,
      `if("status"=='closed'){'closed'}else{"side"}`
    ],
    aggregates: {}
  }
];

// src/index.js
var MSG_BATCH_TIMEOUT = 50;
var MSG_PER_BATCH = 10;
var MSG_TIME_DELTA = 20 * (100 / MSG_PER_BATCH);
var MARKET_OPEN_PRICE = 20;
var MARKET_MAX_TRADES = 2e9;
var MARKET_MIN_TRADES = 5e3;
var MARKET_OPEN = Date.now();
var TRADE_EXPIRATION = 100;
var SCHEMA = {
  id: "integer",
  side: "string",
  security: "string",
  price: "float",
  timestamp: "datetime",
  status: "string"
};
var SECURITIES = [
  "ADANIENT",
  "ADANIPORTS",
  "APOLLOHOSP",
  "ASIANPAINT",
  "AXISBANK",
  "BAJAJ-AUTO",
  "BAJFINANCE",
  "BAJAJFINSV",
  "BPCL",
  "BHARTIARTL",
  "BRITANNIA",
  "CIPLA",
  "COALINDIA",
  "DIVISLAB",
  "DRREDDY",
  "EICHERMOT",
  "GRASIM",
  "HCLTECH",
  "HDFCBANK",
  "HDFCLIFE",
  "HEROMOTOCO",
  "HINDALCO",
  "HINDUNILVR",
  "ICICIBANK",
  "ITC",
  "INDUSINDBK",
  "INFY",
  "JSWSTEEL",
  "KOTAKBANK",
  "LTIM",
  "LT",
  "M&M",
  "MARUTI",
  "NTPC",
  "NESTLEIND",
  "ONGC",
  "POWERGRID",
  "RELIANCE",
  "SBILIFE",
  "SBIN",
  "SUNPHARMA",
  "TCS",
  "TATACONSUM",
  "TATAMOTORS",
  "TATASTEEL",
  "TECHM",
  "TITAN",
  "UPL",
  "ULTRACEMCO",
  "WIPRO",
];
const LAST_PRICE = [3226.55,1325.45,6048.80,2870.55,1111.45,8879.05,6421.05,1582.80,624.70,1199.70,4889.15,1483.15,458.60,3601.60,6324.15,3785.25,2228.10,1637.65,1446.10,621.95,4652.90,536.70,2419.55,1087.95,1563.75,1616.45,413.55,830.00,1748.05,3676.95,5122.70,1897.55,11510.05,2560.95,352.20,278.10,292.65,2957.85,1510.40,788.05,1605.70,4108.60,1261.55,1039.30,157.25,1288.15,3786.90,9673.15,482.30,515.50];

var OrderBook = class {
  constructor(table, side) {
    this._memo = void 0;
    this._side = side;
    this._table = table;
    this._price_view = table.view({
      columns: ["price"],
      group_by: ["security"],
      aggregates: { price: side === "buy" ? "max" : "min" },
      filter: [
        ["side", "==", side],
        ["status", "==", "open"]
      ]
    });
  }
  async best_open_price(sec) {
    if (this._memo === undefined) {
      const view = await this._price_view;
      const cols = await view.to_columns({ leaves_only: true });
      this._memo = cols.price.length === 0 ? LAST_PRICE[sec] : cols.price[0];
    }
    return this._memo;
  }
  async matched_orders(price) {
    const sort_dir = this._side === "buy" ? "desc" : "asc";
    const op = this._side === "buy" ? ">" : "<";
    return await this._table.query_columns({
      columns: ["id"],
      filter: [
        ["side", "==", this._side],
        ["status", "==", "open"],
        ["price", op, price]
      ],
      sort: [
        ["price", sort_dir],
        ["timestamp", "asc"]
      ]
    });
  }
  reset() {
    this._memo = void 0;
  }
};
var Market = class {
  constructor(table, model) {
    this._id = 1;
    this._table = table;
    this._model = model;
    this._buy_book = new OrderBook(table, "buy");
    this._sell_book = new OrderBook(table, "sell");
    this._sec=0;

  }
  async stop() {
    if (this._id < MARKET_MAX_TRADES) {
      this._id = MARKET_MAX_TRADES;
      await new Promise((resolve) => this._stop_callback = resolve);
      this._id = 1;
    }
  }
  async poll(progress2) {
    if (await this._generate_trades()) {
      await this._clear_trades();
      await this._expire_trades();
    }
    this._buy_book.reset();
    this._sell_book.reset();
    while (this._id < MARKET_MIN_TRADES) {
      progress2?.(this._id / MARKET_MIN_TRADES);
      if (await this._generate_trades()) {
        await this._clear_trades();
        await this._expire_trades();
      }
      this._buy_book.reset();
      this._sell_book.reset();
    }
    if (this._id < MARKET_MAX_TRADES) {
      setTimeout(this.poll.bind(this), MSG_BATCH_TIMEOUT);
    }
    this._stop_callback?.();
  }
  async _change_sec(sec){
        this._sec=sec;
    }
  async _generate_price(side,) {
    if (side === "buy") {
      return await this._sell_book.best_open_price(this._sec);
    } else {
      return await this._buy_book.best_open_price(this._sec);
    }
  }
  async _generate_trades() {
    const trades = [];
    const timestamp = new Date(MARKET_OPEN + this._id * MSG_TIME_DELTA);
    for (let i4 = 0; i4 < MSG_PER_BATCH; i4++) {
      const { side, discount } = this._model();
      const price = discount + await this._generate_price(side);
      trades.push({
        security: SECURITIES[this._sec],
        status: "open",
        id: this._id++,
        side,
        price,
        timestamp
      });
    }
    if (trades.length > 0) {
      await this._table.update(trades);
      return true;
    }
  }
  async _clear_trades() {
    const sell_price = await this._sell_book.best_open_price();
    const buy_price = await this._buy_book.best_open_price();
    const { id: buys } = await this._buy_book.matched_orders(sell_price);
    const { id: sells } = await this._sell_book.matched_orders(buy_price);
    const num_clear = Math.min(buys.length, sells.length);
    const status = Array(num_clear * 2).fill("closed");
    const id2 = buys.slice(0, num_clear).concat(sells.slice(0, num_clear));
    if (id2.length > 0) {
      await this._table.update({ status, id: id2 });
    }
  }
  async _expire_trades() {
    const expired = await this._table.query_columns({
      columns: ["id"],
      filter: [
        ["status", "==", "open"],
        ["id", "<", this._id - MSG_PER_BATCH * TRADE_EXPIRATION]
      ]
    });
    if (expired.id.length > 0) {
      expired.status = Array(expired.id.length).fill("expired");
      await this._table.update(expired);
    }
  }
};
var SKEW_MODEL_OFFSET = 2;
var SKEW_MODEL_STDDEV = 2;
var SKEW_MODEL_SKEW = 0;
function random_skew_normal(e3, a5) {
  let u3 = Math.random(), u22 = Math.random();
  const R4 = Math.sqrt(-2 * Math.log(u3));
  const O5 = 2 * Math.PI * u22;
  const u0 = R4 * Math.cos(O5);
  const v4 = R4 * Math.sin(O5);
  if (a5 === 0) {
    return e3 + SKEW_MODEL_STDDEV * u0;
  } else {
    const s3 = a5 / Math.sqrt(1 + a5 * a5);
    const u1 = s3 * u0 + Math.sqrt(1 - s3 * s3) * v4;
    const z3 = u0 >= 0 ? u1 : -u1;
    return e3 + SKEW_MODEL_STDDEV * z3;
  }
}
function skew_model() {
  const side = Math.random() > 0.5 ? "buy" : "sell";
  let discount;
  if (side == "buy") {
    discount = random_skew_normal(-SKEW_MODEL_OFFSET, SKEW_MODEL_SKEW);
  } else {
    discount = random_skew_normal(SKEW_MODEL_OFFSET, -SKEW_MODEL_SKEW);
  }
  return { side, discount };
}
function progress(x4) {
  const button = document.querySelector("button");
  const y3 = (x4 * 10).toFixed(0) * 10;
  button.textContent = `Generating trades ${y3}%`;
}
window.addEventListener("DOMContentLoaded", async function() {
  const market_worker = Ge.worker();
  const gui_worker = Ge.worker();
  const market_table = await market_worker.table(SCHEMA, { index: "id" });
  const market_view = await market_table.view();
  const gui_table = await gui_worker.table(market_view, { index: "id" });
  const select = document.querySelector("select");
  const security_select = document.getElementById("security");

  for (const layout of layouts_default) {
    const option = document.createElement("option");
    option.value = layout.title;
    option.textContent = layout.title;
    select.appendChild(option);
  }
  const button = document.querySelector("button");
  const viewer = document.querySelector("perspective-viewer");
  let market = new Market(market_table, skew_model);
  await market.poll(progress);
  viewer.load(gui_table);
  button.textContent = "Reset";
  button.addEventListener("click", async () => {
    await market.stop();
    await market_table.clear();
    await gui_table.clear();
    await viewer.load(gui_table);
    await market.poll(progress);
    button.textContent = "Reset";
  });
  const settings = !/(iPad|iPhone|iPod)/g.test(navigator.userAgent);
  await viewer.restore({ theme: "Pro Dark", settings, ...layouts_default[0] });
  let is_updating = false;
  viewer.addEventListener("perspective-config-update", () => {
    if (!is_updating) {
      select.value = null;
    }
  });
  select.addEventListener("change", async (event2) => {
    is_updating = true;
    const name = event2.target.value;
    const layout = layouts_default.find((x4) => x4.title == name);
    await viewer.restore(layout);
    is_updating = false;
  });

  for (const sec in SECURITIES) {
    const option = document.createElement("option");
    option.value = sec;
    option.textContent = SECURITIES[sec];
    security_select.appendChild(option);
}
security_select.addEventListener("change", async (event) => {
    button.click()
    await market._change_sec(event.target.value);
    button.click()
    button.click()

});
});

 